// talkWorker.js -- JavaScript Speech Recognition Engine worker script
//            		Port of PocketSphinx 0.7 light-weight speech recognition 
//					engine to JavaScript, using Emscripten.
// Author: Mihai Cirlanaru (Mozilla 2012)

// Labels for parsing the speech recognition decoding result
// TODO: find a more generic way to set them up
var recognizedLabel = "RECOGNIZED";
var nbestLabel = "BEST";

self.onmessage = function(e) {
	postMessage({debug:"talkWorker received message "+e.data.command});
	switch(e.data.command) {
		case 'decodeSpeech':
			decodeSpeech(e.data.config, onDecode);
			break;
		default:
			postMessage({error: "Unsupported command for speech recognition"});
	}
};


function decodeSpeech(config, onDecode) {
	onDecode(config.module, config.debug, postMessage);
}

var onDecode = function(Module, debug, cblk) {
	var result = {
		hypothesis: "&laquo;unknown&raquo;",
		nbest: [],
		timer: "no data" 
	};
	var console = {};
	if (debug) {
		console.log = function(text) { postMessage({debug:text}); };
	} else {
		console.log = function(text) {};
	}
  	// ----------------------- Compiled PocketSphinx 0.7 JS ---------------------
	Module["preRun"] = (function() {
	  if (typeof Module["audio_url"] === "string") {
	    FS.createPreloadedFile("/", "recording.raw", Module["audio_url"], true, false);
	  } else {
	    FS.createDataFile("/", "recording.raw", Module["raw"], true, false);
	  }
	  FS.createPreloadedFile("/", "mdef", Module["mdef"], true, false);
	  FS.createPreloadedFile("/", "tmat", Module["tmat"], true, false);
	  FS.createPreloadedFile("/", "variances", Module["variances"], true, false);
	  FS.createPreloadedFile("/", "sendump", Module["sendump"], true, false);
	  FS.createPreloadedFile("/", "feat.params", Module["fparams"], true, false);
	  FS.createPreloadedFile("/", "means", Module["mean"], true, false);
	  if (typeof Module["fsg"] != "undefined") {
	    FS.createPreloadedFile("/", "model.fsg", Module["fsg"], true, false);
	  } else {
	    FS.createPreloadedFile("/", "model.DMP", Module["DMP"], true, false);
	  }
	  FS.createPreloadedFile("/", "model.dic", Module["dic"], true, false);
	  console.log("FINISHED LOADING FILES");
	});

	var LMarg = "-lm model.DMP";

	if (typeof Module["fsg"] != "undefined") {
	  LMarg = "-fsg model.fsg";
	  console.log("USING FINITE STATE GRAMMAR (FSG)");
	}

	var args = "-infile recording.raw -mdef mdef -tmat tmat -mean means -sendump sendump -featparams feat.params -var variances -dict model.dic " + LMarg + " -samprate " + Module["samprate"] + " -nbest " + Module["nbest"];
	//args += " -nfft 2048";
	//console.log(args);
	Module["arguments"] = args.split(" ");

	var recognizedLabel = "RECOGNIZED";

	var nbestLabel = "BEST";

	Module["return"] = "";

	srecRegExp = new RegExp("\\[" + recognizedLabel + "\\]: (.*)", "g");

	srecNRegExp = new RegExp("\\[" + nbestLabel + "\\]: (.*)");

	timerRegExp = /.*\[TIMER \w\] (.*)/g;

	Module["print"] = (function(text) {
	  Module["return"] += text + "\n";
	  console.log(text);
	  if (text.match(srecRegExp)) {
	    result.hypothesis=srecRegExp.exec(text)[1];
	    result.debug=result.hypothesis;
	    cblk(result);
	  } else if (text.match(srecNRegExp)) {
	    result.nbest.push(srecNRegExp.exec(text)[1]);
	  } else if (text.match(timerRegExp)) {
	    result.timer=timerRegExp.exec(text)[1];
	    result.debug=result.timer;
	    cblk(result);
	  }
	});

	try {
	  this["Module"] = Module;
	} catch (e) {
	  this["Module"] = Module = {};
	}

	var ENVIRONMENT_IS_NODE = typeof process === "object";

	var ENVIRONMENT_IS_WEB = typeof window === "object";

	var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

	var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

	if (ENVIRONMENT_IS_NODE) {
	  Module["print"] = (function(x) {
	    process["stdout"].write(x + "\n");
	  });
	  Module["printErr"] = (function(x) {
	    process["stderr"].write(x + "\n");
	  });
	  var nodeFS = require("fs");
	  var nodePath = require("path");
	  Module["read"] = (function(filename) {
	    filename = nodePath["normalize"](filename);
	    var ret = nodeFS["readFileSync"](filename).toString();
	    if (!ret && filename != nodePath["resolve"](filename)) {
	      filename = path.join(__dirname, "..", "src", filename);
	      ret = nodeFS["readFileSync"](filename).toString();
	    }
	    return ret;
	  });
	  Module["load"] = (function(f) {
	    globalEval(read(f));
	  });
	  if (!Module["arguments"]) {
	    Module["arguments"] = process["argv"].slice(2);
	  }
	}

	if (ENVIRONMENT_IS_SHELL) {
	  Module["print"] = print;
	  if (typeof printErr != "undefined") Module["printErr"] = printErr;
	  if (typeof read != "undefined") {
	    Module["read"] = read;
	  } else {
	    Module["read"] = (function(f) {
	      snarf(f);
	    });
	  }
	  if (!Module["arguments"]) {
	    if (typeof scriptArgs != "undefined") {
	      Module["arguments"] = scriptArgs;
	    } else if (typeof arguments != "undefined") {
	      Module["arguments"] = arguments;
	    }
	  }
	}

	if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
	  if (!Module["print"]) {
	    Module["print"] = (function(x) {
	      console.log(x);
	    });
	  }
	  if (!Module["printErr"]) {
	    Module["printErr"] = (function(x) {
	      console.log(x);
	    });
	  }
	}

	if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
	  Module["read"] = (function(url) {
	    var xhr = new XMLHttpRequest;
	    xhr.open("GET", url, false);
	    xhr.send(null);
	    return xhr.responseText;
	  });
	  if (!Module["arguments"]) {
	    if (typeof arguments != "undefined") {
	      Module["arguments"] = arguments;
	    }
	  }
	}

	if (ENVIRONMENT_IS_WORKER) {
	  var TRY_USE_DUMP = false;
	  if (!Module["print"]) {
	    Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
	      dump(x);
	    }) : (function(x) {});
	  }
	  Module["load"] = importScripts;
	}

	if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
	  throw "Unknown runtime environment. Where are we?";
	}

	function globalEval(x) {
	  eval.call(null, x);
	}

	if (!Module["load"] == "undefined" && Module["read"]) {
	  Module["load"] = (function(f) {
	    globalEval(Module["read"](f));
	  });
	}

	if (!Module["print"]) {
	  Module["print"] = (function() {});
	}

	if (!Module["printErr"]) {
	  Module["printErr"] = Module["print"];
	}

	if (!Module["arguments"]) {
	  Module["arguments"] = [];
	}

	Module.print = Module["print"];

	Module.printErr = Module["printErr"];

	if (!Module["preRun"]) Module["preRun"] = [];

	if (!Module["postRun"]) Module["postRun"] = [];

	var Runtime = {
	  stackSave: (function() {
	    return STACKTOP;
	  }),
	  stackRestore: (function(stackTop) {
	    STACKTOP = stackTop;
	  }),
	  forceAlign: (function(target, quantum) {
	    quantum = quantum || 4;
	    if (quantum == 1) return target;
	    if (isNumber(target) && isNumber(quantum)) {
	      return Math.ceil(target / quantum) * quantum;
	    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
	      var logg = log2(quantum);
	      return "((((" + target + ")+" + (quantum - 1) + ")>>" + logg + ")<<" + logg + ")";
	    }
	    return "Math.ceil((" + target + ")/" + quantum + ")*" + quantum;
	  }),
	  isNumberType: (function(type) {
	    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
	  }),
	  isPointerType: function isPointerType(type) {
	    return type[type.length - 1] == "*";
	  },
	  isStructType: function isStructType(type) {
	    if (isPointerType(type)) return false;
	    if (/^\[\d+\ x\ (.*)\]/.test(type)) return true;
	    if (/<?{ ?[^}]* ?}>?/.test(type)) return true;
	    return type[0] == "%";
	  },
	  INT_TYPES: {
	    "i1": 0,
	    "i8": 0,
	    "i16": 0,
	    "i32": 0,
	    "i64": 0
	  },
	  FLOAT_TYPES: {
	    "float": 0,
	    "double": 0
	  },
	  bitshift64: (function(low, high, op, bits) {
	    var ander = Math.pow(2, bits) - 1;
	    if (bits < 32) {
	      switch (op) {
	       case "shl":
	        return [ low << bits, high << bits | (low & ander << 32 - bits) >>> 32 - bits ];
	       case "ashr":
	        return [ (low >>> bits | (high & ander) << 32 - bits) >> 0 >>> 0, high >> bits >>> 0 ];
	       case "lshr":
	        return [ (low >>> bits | (high & ander) << 32 - bits) >>> 0, high >>> bits ];
	      }
	    } else if (bits == 32) {
	      switch (op) {
	       case "shl":
	        return [ 0, low ];
	       case "ashr":
	        return [ high, (high | 0) < 0 ? ander : 0 ];
	       case "lshr":
	        return [ high, 0 ];
	      }
	    } else {
	      switch (op) {
	       case "shl":
	        return [ 0, low << bits - 32 ];
	       case "ashr":
	        return [ high >> bits - 32 >>> 0, (high | 0) < 0 ? ander : 0 ];
	       case "lshr":
	        return [ high >>> bits - 32, 0 ];
	      }
	    }
	    abort("unknown bitshift64 op: " + [ value, op, bits ]);
	  }),
	  or64: (function(x, y) {
	    var l = x | 0 | (y | 0);
	    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
	    return l + h;
	  }),
	  and64: (function(x, y) {
	    var l = (x | 0) & (y | 0);
	    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
	    return l + h;
	  }),
	  xor64: (function(x, y) {
	    var l = (x | 0) ^ (y | 0);
	    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
	    return l + h;
	  }),
	  getNativeTypeSize: (function(type, quantumSize) {
	    if (Runtime.QUANTUM_SIZE == 1) return 1;
	    var size = {
	      "%i1": 1,
	      "%i8": 1,
	      "%i16": 2,
	      "%i32": 4,
	      "%i64": 8,
	      "%float": 4,
	      "%double": 8
	    }["%" + type];
	    if (!size) {
	      if (type.charAt(type.length - 1) == "*") {
	        size = Runtime.QUANTUM_SIZE;
	      } else if (type[0] == "i") {
	        var bits = parseInt(type.substr(1));
	        assert(bits % 8 == 0);
	        size = bits / 8;
	      }
	    }
	    return size;
	  }),
	  getNativeFieldSize: (function(type) {
	    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
	  }),
	  dedup: function dedup(items, ident) {
	    var seen = {};
	    if (ident) {
	      return items.filter((function(item) {
	        if (seen[item[ident]]) return false;
	        seen[item[ident]] = true;
	        return true;
	      }));
	    } else {
	      return items.filter((function(item) {
	        if (seen[item]) return false;
	        seen[item] = true;
	        return true;
	      }));
	    }
	  },
	  set: function set() {
	    var args = typeof arguments[0] === "object" ? arguments[0] : arguments;
	    var ret = {};
	    for (var i = 0; i < args.length; i++) {
	      ret[args[i]] = 0;
	    }
	    return ret;
	  },
	  calculateStructAlignment: function calculateStructAlignment(type) {
	    type.flatSize = 0;
	    type.alignSize = 0;
	    var diffs = [];
	    var prev = -1;
	    type.flatIndexes = type.fields.map((function(field) {
	      var size, alignSize;
	      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
	        size = Runtime.getNativeTypeSize(field);
	        alignSize = size;
	      } else if (Runtime.isStructType(field)) {
	        size = Types.types[field].flatSize;
	        alignSize = Types.types[field].alignSize;
	      } else {
	        throw "Unclear type in struct: " + field + ", in " + type.name_ + " :: " + dump(Types.types[type.name_]);
	      }
	      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
	      type.alignSize = Math.max(type.alignSize, alignSize);
	      var curr = Runtime.alignMemory(type.flatSize, alignSize);
	      type.flatSize = curr + size;
	      if (prev >= 0) {
	        diffs.push(curr - prev);
	      }
	      prev = curr;
	      return curr;
	    }));
	    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
	    if (diffs.length == 0) {
	      type.flatFactor = type.flatSize;
	    } else if (Runtime.dedup(diffs).length == 1) {
	      type.flatFactor = diffs[0];
	    }
	    type.needsFlattening = type.flatFactor != 1;
	    return type.flatIndexes;
	  },
	  generateStructInfo: (function(struct, typeName, offset) {
	    var type, alignment;
	    if (typeName) {
	      offset = offset || 0;
	      type = (typeof Types === "undefined" ? Runtime.typeInfo : Types.types)[typeName];
	      if (!type) return null;
	      if (type.fields.length != struct.length) {
	        printErr("Number of named fields must match the type for " + typeName + ": possibly duplicate struct names. Cannot return structInfo");
	        return null;
	      }
	      alignment = type.flatIndexes;
	    } else {
	      var type = {
	        fields: struct.map((function(item) {
	          return item[0];
	        }))
	      };
	      alignment = Runtime.calculateStructAlignment(type);
	    }
	    var ret = {
	      __size__: type.flatSize
	    };
	    if (typeName) {
	      struct.forEach((function(item, i) {
	        if (typeof item === "string") {
	          ret[item] = alignment[i] + offset;
	        } else {
	          var key;
	          for (var k in item) key = k;
	          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
	        }
	      }));
	    } else {
	      struct.forEach((function(item, i) {
	        ret[item[1]] = alignment[i];
	      }));
	    }
	    return ret;
	  }),
	  addFunction: (function(func) {
	    var ret = FUNCTION_TABLE.length;
	    FUNCTION_TABLE.push(func);
	    FUNCTION_TABLE.push(0);
	    return ret;
	  }),
	  warnOnce: (function(text) {
	    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
	    if (!Runtime.warnOnce.shown[text]) {
	      Runtime.warnOnce.shown[text] = 1;
	      Module.printErr(text);
	    }
	  }),
	  funcWrappers: {},
	  getFuncWrapper: (function(func) {
	    if (!Runtime.funcWrappers[func]) {
	      Runtime.funcWrappers[func] = (function() {
	        FUNCTION_TABLE[func].apply(null, arguments);
	      });
	    }
	    return Runtime.funcWrappers[func];
	  }),
	  UTF8Processor: (function() {
	    var buffer = [];
	    var needed = 0;
	    this.processCChar = (function(code) {
	      code = code & 255;
	      if (needed) {
	        buffer.push(code);
	        needed--;
	      }
	      if (buffer.length == 0) {
	        if (code < 128) return String.fromCharCode(code);
	        buffer.push(code);
	        if (code > 191 && code < 224) {
	          needed = 1;
	        } else {
	          needed = 2;
	        }
	        return "";
	      }
	      if (needed > 0) return "";
	      var c1 = buffer[0];
	      var c2 = buffer[1];
	      var c3 = buffer[2];
	      var ret;
	      if (c1 > 191 && c1 < 224) {
	        ret = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
	      } else {
	        ret = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
	      }
	      buffer.length = 0;
	      return ret;
	    });
	    this.processJSString = (function(string) {
	      string = unescape(encodeURIComponent(string));
	      var ret = [];
	      for (var i = 0; i < string.length; i++) {
	        ret.push(string.charCodeAt(i));
	      }
	      return ret;
	    });
	  }),
	  stackAlloc: function stackAlloc(size) {
	    var ret = STACKTOP;
	    STACKTOP += size;
	    STACKTOP = STACKTOP + 3 >> 2 << 2;
	    return ret;
	  },
	  staticAlloc: function staticAlloc(size) {
	    var ret = STATICTOP;
	    STATICTOP += size;
	    STATICTOP = STATICTOP + 3 >> 2 << 2;
	    if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();
	    return ret;
	  },
	  alignMemory: function alignMemory(size, quantum) {
	    var ret = size = Math.ceil(size / (quantum ? quantum : 4)) * (quantum ? quantum : 4);
	    return ret;
	  },
	  makeBigInt: function makeBigInt(low, high, unsigned) {
	    var ret = unsigned ? (low >>> 0) + (high >>> 0) * 4294967296 : (low >>> 0) + (high | 0) * 4294967296;
	    return ret;
	  },
	  QUANTUM_SIZE: 4,
	  __dummy__: 0
	};

	var CorrectionsMonitor = {
	  MAX_ALLOWED: 0,
	  corrections: 0,
	  sigs: {},
	  note: (function(type, succeed, sig) {
	    if (!succeed) {
	      this.corrections++;
	      if (this.corrections >= this.MAX_ALLOWED) abort("\n\nToo many corrections!");
	    }
	  }),
	  print: (function() {})
	};

	var __THREW__ = false;

	var ABORT = false;

	var undef = 0;

	var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;

	var tempI64, tempI64b;

	function abort(text) {
	  Module.print(text + ":\n" + (new Error).stack);
	  ABORT = true;
	  throw "Assertion: " + text;
	}

	function assert(condition, text) {
	  if (!condition) {
	    abort("Assertion failed: " + text);
	  }
	}

	var globalScope = this;

	function ccall(ident, returnType, argTypes, args) {
	  var stack = 0;
	  function toC(value, type) {
	    if (type == "string") {
	      if (value === null || value === undefined || value === 0) return 0;
	      if (!stack) stack = Runtime.stackSave();
	      var ret = Runtime.stackAlloc(value.length + 1);
	      writeStringToMemory(value, ret);
	      return ret;
	    } else if (type == "array") {
	      if (!stack) stack = Runtime.stackSave();
	      var ret = Runtime.stackAlloc(value.length);
	      writeArrayToMemory(value, ret);
	      return ret;
	    }
	    return value;
	  }
	  function fromC(value, type) {
	    if (type == "string") {
	      return Pointer_stringify(value);
	    }
	    assert(type != "array");
	    return value;
	  }
	  try {
	    var func = eval("_" + ident);
	  } catch (e) {
	    try {
	      func = globalScope["Module"]["_" + ident];
	    } catch (e) {}
	  }
	  assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
	  var i = 0;
	  var cArgs = args ? args.map((function(arg) {
	    return toC(arg, argTypes[i++]);
	  })) : [];
	  var ret = fromC(func.apply(null, cArgs), returnType);
	  if (stack) Runtime.stackRestore(stack);
	  return ret;
	}

	Module["ccall"] = ccall;

	function cwrap(ident, returnType, argTypes) {
	  return (function() {
	    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
	  });
	}

	Module["cwrap"] = cwrap;

	function setValue(ptr, value, type, noSafe) {
	  type = type || "i8";
	  if (type.charAt(type.length - 1) === "*") type = "i32";
	  switch (type) {
	   case "i1":
	    HEAP8[ptr] = value;
	    break;
	   case "i8":
	    HEAP8[ptr] = value;
	    break;
	   case "i16":
	    HEAP16[ptr >> 1] = value;
	    break;
	   case "i32":
	    HEAP32[ptr >> 2] = value;
	    break;
	   case "i64":
	    HEAP32[ptr >> 2] = value;
	    break;
	   case "float":
	    HEAPF32[ptr >> 2] = value;
	    break;
	   case "double":
	    tempDoubleF64[0] = value, HEAP32[ptr >> 2] = tempDoubleI32[0], HEAP32[ptr + 4 >> 2] = tempDoubleI32[1];
	    break;
	   default:
	    abort("invalid type for setValue: " + type);
	  }
	}

	Module["setValue"] = setValue;

	function getValue(ptr, type, noSafe) {
	  type = type || "i8";
	  if (type.charAt(type.length - 1) === "*") type = "i32";
	  switch (type) {
	   case "i1":
	    return HEAP8[ptr];
	   case "i8":
	    return HEAP8[ptr];
	   case "i16":
	    return HEAP16[ptr >> 1];
	   case "i32":
	    return HEAP32[ptr >> 2];
	   case "i64":
	    return HEAP32[ptr >> 2];
	   case "float":
	    return HEAPF32[ptr >> 2];
	   case "double":
	    return tempDoubleI32[0] = HEAP32[ptr >> 2], tempDoubleI32[1] = HEAP32[ptr + 4 >> 2], tempDoubleF64[0];
	   default:
	    abort("invalid type for setValue: " + type);
	  }
	  return null;
	}

	Module["getValue"] = getValue;

	var ALLOC_NORMAL = 0;

	var ALLOC_STACK = 1;

	var ALLOC_STATIC = 2;

	Module["ALLOC_NORMAL"] = ALLOC_NORMAL;

	Module["ALLOC_STACK"] = ALLOC_STACK;

	Module["ALLOC_STATIC"] = ALLOC_STATIC;

	function allocate(slab, types, allocator) {
	  var zeroinit, size;
	  if (typeof slab === "number") {
	    zeroinit = true;
	    size = slab;
	  } else {
	    zeroinit = false;
	    size = slab.length;
	  }
	  var singleType = typeof types === "string" ? types : null;
	  var ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
	  if (zeroinit) {
	    _memset(ret, 0, size);
	    return ret;
	  }
	  var i = 0, type;
	  while (i < size) {
	    var curr = slab[i];
	    if (typeof curr === "function") {
	      curr = Runtime.getFunctionIndex(curr);
	    }
	    type = singleType || types[i];
	    if (type === 0) {
	      i++;
	      continue;
	    }
	    if (type == "i64") type = "i32";
	    setValue(ret + i, curr, type);
	    i += Runtime.getNativeTypeSize(type);
	  }
	  return ret;
	}

	Module["allocate"] = allocate;

	function Pointer_stringify(ptr, length) {
	  var utf8 = new Runtime.UTF8Processor;
	  var nullTerminated = typeof length == "undefined";
	  var ret = "";
	  var i = 0;
	  var t;
	  while (1) {
	    t = HEAPU8[ptr + i];
	    if (nullTerminated && t == 0) break;
	    ret += utf8.processCChar(t);
	    i += 1;
	    if (!nullTerminated && i == length) break;
	  }
	  return ret;
	}

	Module["Pointer_stringify"] = Pointer_stringify;

	function Array_stringify(array) {
	  var ret = "";
	  for (var i = 0; i < array.length; i++) {
	    ret += String.fromCharCode(array[i]);
	  }
	  return ret;
	}

	Module["Array_stringify"] = Array_stringify;

	var FUNCTION_TABLE;

	var PAGE_SIZE = 4096;

	function alignMemoryPage(x) {
	  return x + 4095 >> 12 << 12;
	}

	var HEAP;

	var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

	var STACK_ROOT, STACKTOP, STACK_MAX;

	var STATICTOP;

	function enlargeMemory() {
	  while (TOTAL_MEMORY <= STATICTOP) {
	    TOTAL_MEMORY = alignMemoryPage(2 * TOTAL_MEMORY);
	  }
	  var oldHEAP8 = HEAP8;
	  var buffer = new ArrayBuffer(TOTAL_MEMORY);
	  HEAP8 = new Int8Array(buffer);
	  HEAP16 = new Int16Array(buffer);
	  HEAP32 = new Int32Array(buffer);
	  HEAPU8 = new Uint8Array(buffer);
	  HEAPU16 = new Uint16Array(buffer);
	  HEAPU32 = new Uint32Array(buffer);
	  HEAPF32 = new Float32Array(buffer);
	  HEAPF64 = new Float64Array(buffer);
	  HEAP8.set(oldHEAP8);
	}

	var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;

	var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 10485760;

	var FAST_MEMORY = Module["FAST_MEMORY"] || 2097152;

	assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "Cannot fallback to non-typed array case: Code is too specialized");

	var buffer = new ArrayBuffer(TOTAL_MEMORY);

	HEAP8 = new Int8Array(buffer);

	HEAP16 = new Int16Array(buffer);

	HEAP32 = new Int32Array(buffer);

	HEAPU8 = new Uint8Array(buffer);

	HEAPU16 = new Uint16Array(buffer);

	HEAPU32 = new Uint32Array(buffer);

	HEAPF32 = new Float32Array(buffer);

	HEAPF64 = new Float64Array(buffer);

	HEAP32[0] = 255;

	assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");

	Module["HEAP"] = HEAP;

	Module["HEAP8"] = HEAP8;

	Module["HEAP16"] = HEAP16;

	Module["HEAP32"] = HEAP32;

	Module["HEAPU8"] = HEAPU8;

	Module["HEAPU16"] = HEAPU16;

	Module["HEAPU32"] = HEAPU32;

	Module["HEAPF32"] = HEAPF32;

	Module["HEAPF64"] = HEAPF64;

	STACK_ROOT = STACKTOP = Runtime.alignMemory(1);

	STACK_MAX = STACK_ROOT + TOTAL_STACK;

	var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);

	var tempDoubleI8 = HEAP8.subarray(tempDoublePtr);

	var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);

	var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);

	var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);

	function copyTempFloat(ptr) {
	  tempDoubleI8[0] = HEAP8[ptr];
	  tempDoubleI8[1] = HEAP8[ptr + 1];
	  tempDoubleI8[2] = HEAP8[ptr + 2];
	  tempDoubleI8[3] = HEAP8[ptr + 3];
	}

	function copyTempDouble(ptr) {
	  tempDoubleI8[0] = HEAP8[ptr];
	  tempDoubleI8[1] = HEAP8[ptr + 1];
	  tempDoubleI8[2] = HEAP8[ptr + 2];
	  tempDoubleI8[3] = HEAP8[ptr + 3];
	  tempDoubleI8[4] = HEAP8[ptr + 4];
	  tempDoubleI8[5] = HEAP8[ptr + 5];
	  tempDoubleI8[6] = HEAP8[ptr + 6];
	  tempDoubleI8[7] = HEAP8[ptr + 7];
	}

	STACK_MAX = tempDoublePtr + 8;

	STATICTOP = alignMemoryPage(STACK_MAX);

	assert(STATICTOP < TOTAL_MEMORY);

	var nullString = allocate(intArrayFromString("(null)"), "i8", ALLOC_STATIC);

	function callRuntimeCallbacks(callbacks) {
	  while (callbacks.length > 0) {
	    var callback = callbacks.shift();
	    var func = callback.func;
	    if (typeof func === "number") {
	      func = FUNCTION_TABLE[func];
	    }
	    func(callback.arg === undefined ? null : callback.arg);
	  }
	}

	var __ATINIT__ = [];

	var __ATMAIN__ = [];

	var __ATEXIT__ = [];

	function initRuntime() {
	  callRuntimeCallbacks(__ATINIT__);
	}

	function preMain() {
	  callRuntimeCallbacks(__ATMAIN__);
	}

	function exitRuntime() {
	  callRuntimeCallbacks(__ATEXIT__);
	  CorrectionsMonitor.print();
	}

	function String_len(ptr) {
	  var i = ptr;
	  while (HEAP8[i++]) {}
	  return i - ptr - 1;
	}

	Module["String_len"] = String_len;

	function intArrayFromString(stringy, dontAddNull, length) {
	  var ret = (new Runtime.UTF8Processor).processJSString(stringy);
	  if (length) {
	    ret.length = length;
	  }
	  if (!dontAddNull) {
	    ret.push(0);
	  }
	  return ret;
	}

	Module["intArrayFromString"] = intArrayFromString;

	function intArrayToString(array) {
	  var ret = [];
	  for (var i = 0; i < array.length; i++) {
	    var chr = array[i];
	    if (chr > 255) {
	      chr &= 255;
	    }
	    ret.push(String.fromCharCode(chr));
	  }
	  return ret.join("");
	}

	Module["intArrayToString"] = intArrayToString;

	function writeStringToMemory(string, buffer, dontAddNull) {
	  var array = intArrayFromString(string, dontAddNull);
	  var i = 0;
	  while (i < array.length) {
	    var chr = array[i];
	    HEAP8[buffer + i] = chr;
	    i = i + 1;
	  }
	}

	Module["writeStringToMemory"] = writeStringToMemory;

	function writeArrayToMemory(array, buffer) {
	  for (var i = 0; i < array.length; i++) {
	    HEAP8[buffer + i] = array[i];
	  }
	}

	Module["writeArrayToMemory"] = writeArrayToMemory;

	var STRING_TABLE = [];

	function unSign(value, bits, ignore, sig) {
	  if (value >= 0) {
	    return value;
	  }
	  return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
	}

	function reSign(value, bits, ignore, sig) {
	  if (value <= 0) {
	    return value;
	  }
	  var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
	  if (value >= half && (bits <= 32 || value > half)) {
	    value = -2 * half + value;
	  }
	  return value;
	}

	var runDependencies = 0;

	var runDependencyTracking = {};

	var calledRun = false;

	var runDependencyWatcher = null;

	function addRunDependency(id) {
	  runDependencies++;
	  if (Module["monitorRunDependencies"]) {
	    Module["monitorRunDependencies"](runDependencies);
	  }
	  if (id) {
	    assert(!runDependencyTracking[id]);
	    runDependencyTracking[id] = 1;
	    if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
	      runDependencyWatcher = setInterval((function() {
	        var shown = false;
	        for (var dep in runDependencyTracking) {
	          if (!shown) {
	            shown = true;
	            Module.printErr("still waiting on run dependencies:");
	          }
	          Module.printErr("dependency: " + dep);
	        }
	        if (shown) {
	          Module.printErr("(end of list)");
	        }
	      }), 6e3);
	    }
	  } else {
	    Module.printErr("warning: run dependency added without ID");
	  }
	}

	Module["addRunDependency"] = addRunDependency;

	function removeRunDependency(id) {
	  runDependencies--;
	  if (Module["monitorRunDependencies"]) {
	    Module["monitorRunDependencies"](runDependencies);
	  }
	  if (id) {
	    assert(runDependencyTracking[id]);
	    delete runDependencyTracking[id];
	  } else {
	    Module.printErr("warning: run dependency removed without ID");
	  }
	  if (runDependencies == 0) {
	    if (runDependencyWatcher !== null) {
	      clearInterval(runDependencyWatcher);
	      runDependencyWatcher = null;
	    }
	    if (!calledRun) run();
	  }
	}

	Module["removeRunDependency"] = removeRunDependency;

	Module["preloadedImages"] = {};

	Module["preloadedAudios"] = {};

	function _acmod_fe_mismatch($acmod, $fe) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $acmod | 0;
	  var $_idx1_val = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
	  var $3 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str842653 | 0);
	  var $fe_idx2 = $fe + 25 | 0;
	  var $fe_idx2_val = HEAP8[$fe_idx2];
	  var $4 = _fe_get_output_size($fe_idx2_val);
	  if (($3 | 0) == ($4 | 0)) {
	    var $_0 = 0;
	  } else {
	    __E__pr_header(STRING_TABLE.__str1 | 0, 205, STRING_TABLE.__str102579 | 0);
	    var $_idx_val = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
	    var $8 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str842653 | 0);
	    var $fe_idx_val = HEAP8[$fe_idx2];
	    var $9 = _fe_get_output_size($fe_idx_val);
	    __E__pr_warn(STRING_TABLE.__str3 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $9, tempInt));
	    var $_0 = 1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _acmod_init($config, $lmath) {
	  var $65$s2;
	  var $config_idx2$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 108, STRING_TABLE.__str1 | 0, 234), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $3 = $1;
	  HEAP32[$3 >> 2] = $config;
	  var $5 = $1 + 4 | 0;
	  HEAP32[$5 >> 2] = $lmath;
	  HEAP8[$1 + 88 | 0] = 0;
	  var $config_idx2$s2 = ($config + 4 | 0) >> 2;
	  var $config_idx2_val = HEAP32[$config_idx2$s2];
	  var $7 = _cmd_ln_str_r($config_idx2_val, STRING_TABLE.__str1082677 | 0);
	  var $8 = ($7 | 0) == 0;
	  do {
	    if (!$8) {
	      var $10 = HEAP32[$3 >> 2];
	      var $11 = _cmd_ln_parse_file_r($10, _feat_defn | 0, $7, 0);
	      if (($11 | 0) == 0) {
	        break;
	      }
	      __E__pr_info_header(STRING_TABLE.__str1 | 0, 242);
	      __E__pr_info(STRING_TABLE.__str7 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $7, tempInt));
	    }
	  } while (0);
	  _cmd_ln_retain($config);
	  var $15 = _fe_init_auto_r($config);
	  HEAP32[$1$s2 + 3] = $15;
	  var $18 = ($15 | 0) == 0;
	  do {
	    if (!$18) {
	      var $20 = _acmod_fe_mismatch($2, $15);
	      if (($20 | 0) != 0) {
	        __label__ = 10;
	        break;
	      }
	      var $23 = _acmod_init_feat($2);
	      if (($23 | 0) < 0) {
	        __label__ = 10;
	        break;
	      }
	      var $26 = _acmod_init_am($2);
	      if (($26 | 0) < 0) {
	        __label__ = 10;
	        break;
	      }
	      var $30 = $1 + 16 | 0;
	      var $31 = HEAP32[$30 >> 2];
	      var $36 = (HEAP32[$31 + 20 >> 2] << 1 | 1) & 65535;
	      var $38 = $1 + 94 | 0;
	      HEAP16[$38 >> 1] = $36;
	      var $39 = $36 << 16 >> 16;
	      var $41 = HEAP32[$31 + 8 >> 2];
	      var $42 = ___ckd_calloc_2d__($39, $41, 4, STRING_TABLE.__str1 | 0, 284);
	      var $43 = $42;
	      HEAP32[$1$s2 + 15] = $43;
	      var $47 = HEAPU16[$38 >> 1] & 65535;
	      var $config_idx1_val = HEAP32[$config_idx2$s2];
	      var $48 = _cmd_ln_int_r($config_idx1_val, STRING_TABLE.__str1732742 | 0);
	      var $50 = $47 + $48 & 65535;
	      var $52 = $1 + 100 | 0;
	      HEAP16[$52 >> 1] = $50;
	      var $53 = HEAP32[$30 >> 2];
	      var $54 = $50 << 16 >> 16;
	      var $55 = _feat_array_alloc($53, $54);
	      HEAP32[$1$s2 + 16] = $55;
	      var $59 = HEAP16[$52 >> 1] << 16 >> 16;
	      var $60 = ___ckd_calloc__($59, 4, STRING_TABLE.__str1 | 0, 289);
	      HEAP32[$1$s2 + 21] = $60;
	      var $65$s2 = ($1 + 20 | 0) >> 2;
	      var $68 = HEAP32[HEAP32[$65$s2] + 20 >> 2];
	      var $69 = ___ckd_calloc__($68, 2, STRING_TABLE.__str1 | 0, 293);
	      var $70 = $69;
	      HEAP32[$1$s2 + 9] = $70;
	      var $77 = (HEAP32[HEAP32[$65$s2] + 20 >> 2] + 31 | 0) / 32 & -1;
	      var $78 = ___ckd_calloc__($77, 4, STRING_TABLE.__str1 | 0, 294);
	      var $79 = $78;
	      HEAP32[$1$s2 + 10] = $79;
	      var $84 = HEAP32[HEAP32[$65$s2] + 20 >> 2];
	      var $85 = ___ckd_calloc__($84, 1, STRING_TABLE.__str1 | 0, 296);
	      HEAP32[$1$s2 + 11] = $85;
	      var $_idx_val = HEAP32[HEAP32[$5 >> 2] + 60 >> 2];
	      var $89 = _logmath_get_zero($_idx_val);
	      HEAP32[$1$s2 + 14] = $89;
	      var $config_idx_val = HEAP32[$config_idx2$s2];
	      var $92 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1812750 | 0);
	      HEAP8[$1 + 89 | 0] = ($92 | 0) != 0 & 1;
	      var $_0 = $2;
	      __label__ = 11;
	      break;
	    }
	    __label__ = 10;
	  } while (0);
	  if (__label__ == 10) {
	    _acmod_free($2);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_init["X"] = 1;

	function _acmod_init_feat($acmod) {
	  var $17$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($acmod | 0) >> 2;
	  var $_idx14_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $3 = _cmd_ln_str_r($_idx14_val, STRING_TABLE.__str812650 | 0);
	  var $_idx13_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $5 = _cmd_ln_str_r($_idx13_val, STRING_TABLE.__str862655 | 0);
	  var $6 = _cmn_type_from_str($5);
	  var $_idx2_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $8 = _cmd_ln_int_r($_idx2_val, STRING_TABLE.__str922661 | 0);
	  var $10 = ($8 | 0) != 0 & 1;
	  var $_idx12_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $12 = _cmd_ln_str_r($_idx12_val, STRING_TABLE.__str942663 | 0);
	  var $13 = _agc_type_from_str($12);
	  var $_idx1_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $15 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str842653 | 0);
	  var $16 = _feat_init($3, $6, $10, $13, $15);
	  var $17$s2 = ($acmod + 16 | 0) >> 2;
	  HEAP32[$17$s2] = $16;
	  var $18 = ($16 | 0) == 0;
	  do {
	    if ($18) {
	      var $_0 = -1;
	    } else {
	      var $_idx11_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $21 = _cmd_ln_str_r($_idx11_val, STRING_TABLE.__str1002669 | 0);
	      if (($21 | 0) != 0) {
	        __E__pr_info_header(STRING_TABLE.__str1 | 0, 153);
	        var $_idx10_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $25 = _cmd_ln_str_r($_idx10_val, STRING_TABLE.__str1002669 | 0);
	        __E__pr_info(STRING_TABLE.__str46 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $25, tempInt));
	        var $26 = HEAP32[$17$s2];
	        var $_idx9_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $28 = _cmd_ln_str_r($_idx9_val, STRING_TABLE.__str1002669 | 0);
	        var $_idx_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $30 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1022671 | 0);
	        var $31 = _feat_read_lda($26, $28, $30);
	        if (($31 | 0) < 0) {
	          var $_0 = -1;
	          break;
	        }
	      }
	      var $_idx8_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $35 = _cmd_ln_str_r($_idx8_val, STRING_TABLE.__str1042673 | 0);
	      if (($35 | 0) != 0) {
	        __E__pr_info_header(STRING_TABLE.__str1 | 0, 163);
	        var $_idx7_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $39 = _cmd_ln_str_r($_idx7_val, STRING_TABLE.__str1042673 | 0);
	        __E__pr_info(STRING_TABLE.__str49 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $39, tempInt));
	        var $_idx6_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $41 = _cmd_ln_str_r($_idx6_val, STRING_TABLE.__str1042673 | 0);
	        var $42 = _parse_subvecs($41);
	        if (($42 | 0) == 0) {
	          var $_0 = -1;
	          break;
	        }
	        var $45 = HEAP32[$17$s2];
	        var $46 = _feat_set_subvecs($45, $42);
	        if (($46 | 0) < 0) {
	          var $_0 = -1;
	          break;
	        }
	      }
	      var $49 = HEAP32[$1$s2];
	      var $50 = _cmd_ln_exists_r($49, STRING_TABLE.__str972666 | 0);
	      var $51 = ($50 | 0) == 0;
	      do {
	        if (!$51) {
	          var $_idx5_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	          var $54 = _cmd_ln_str_r($_idx5_val, STRING_TABLE.__str942663 | 0);
	          var $55 = _strcmp($54, STRING_TABLE.__str952664 | 0);
	          if (($55 | 0) == 0) {
	            break;
	          }
	          var $60 = HEAP32[HEAP32[$17$s2] + 64 >> 2];
	          var $_idx3_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	          var $62 = _cmd_ln_float_r($_idx3_val, STRING_TABLE.__str972666 | 0);
	          var $63 = $62;
	          _agc_set_threshold($60, $63);
	        }
	      } while (0);
	      if ((HEAP32[HEAP32[$17$s2] + 60 >> 2] | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $70 = HEAP32[$1$s2];
	      var $71 = _cmd_ln_exists_r($70, STRING_TABLE.__str892658 | 0);
	      if (($71 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_idx4_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $75 = _cmd_ln_str_r($_idx4_val, STRING_TABLE.__str892658 | 0);
	      var $76 = ___ckd_salloc__($75, STRING_TABLE.__str1 | 0, 182);
	      var $nvals_0 = 0;
	      var $c_0 = $76;
	      while (1) {
	        var $c_0;
	        var $nvals_0;
	        var $80 = HEAP32[HEAP32[$17$s2] + 60 >> 2];
	        if (($nvals_0 | 0) >= (HEAP32[$80 + 16 >> 2] | 0)) {
	          break;
	        }
	        var $85 = _strchr($c_0, 44);
	        if (($85 | 0) == 0) {
	          if (HEAP8[$c_0] << 24 >> 24 == 0) {
	            break;
	          }
	          var $102 = _atof($c_0);
	          HEAPF32[HEAP32[$80 >> 2] + ($nvals_0 << 2) >> 2] = $102;
	          break;
	        }
	        HEAP8[$85] = 0;
	        var $88 = _atof($c_0);
	        HEAPF32[HEAP32[HEAP32[HEAP32[$17$s2] + 60 >> 2] >> 2] + ($nvals_0 << 2) >> 2] = $88;
	        var $nvals_0 = $nvals_0 + 1 | 0;
	        var $c_0 = $85 + 1 | 0;
	      }
	      _ckd_free($76);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_init_feat["X"] = 1;

	function _acmod_init_am($acmod) {
	  var $53$s2;
	  var $18$s2;
	  var $9$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($acmod | 0) >> 2;
	  var $_idx7_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $3 = _cmd_ln_str_r($_idx7_val, STRING_TABLE.__str1102679 | 0);
	  var $4 = ($3 | 0) == 0;
	  $_$44 : do {
	    if ($4) {
	      __E__pr_header(STRING_TABLE.__str1 | 0, 84, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str28 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	    } else {
	      var $7 = HEAP32[$1$s2];
	      var $8 = _bin_mdef_read($7, $3);
	      var $9$s2 = ($acmod + 20 | 0) >> 2;
	      HEAP32[$9$s2] = $8;
	      if (($8 | 0) == 0) {
	        __E__pr_header(STRING_TABLE.__str1 | 0, 89, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str29 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
	        var $_0 = -1;
	      } else {
	        var $_idx6_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        var $14 = _cmd_ln_str_r($_idx6_val, STRING_TABLE.__str1142683 | 0);
	        if (($14 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str1 | 0, 95, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str31 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	        } else {
	          var $18$s2 = ($acmod + 4 | 0) >> 2;
	          var $19 = HEAP32[$18$s2];
	          var $_idx_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	          var $21 = _cmd_ln_float_r($_idx_val, STRING_TABLE.__str1162685 | 0);
	          var $23 = $21;
	          var $24 = _tmat_init($14, $19, $23);
	          HEAP32[$acmod + 24 >> 2] = $24;
	          var $_idx5_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	          var $27 = _cmd_ln_str_r($_idx5_val, STRING_TABLE.__str1192688 | 0);
	          var $28 = ($27 | 0) == 0;
	          do {
	            if (!$28) {
	              var $_idx4_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	              var $31 = _cmd_ln_str_r($_idx4_val, STRING_TABLE.__str1212690 | 0);
	              if (($31 | 0) == 0) {
	                break;
	              }
	              var $_idx3_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	              var $35 = _cmd_ln_str_r($_idx3_val, STRING_TABLE.__str1142683 | 0);
	              if (($35 | 0) == 0) {
	                break;
	              }
	              var $_idx2_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	              var $40 = _cmd_ln_str_r($_idx2_val, STRING_TABLE.__str1122681 | 0);
	              var $41 = ($40 | 0) == 0;
	              do {
	                if ($41) {
	                  __E__pr_info_header(STRING_TABLE.__str1 | 0, 117);
	                  __E__pr_info(STRING_TABLE.__str38 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $50 = $acmod;
	                  var $51 = _s2_semi_mgau_init($50);
	                  var $53$s2 = ($acmod + 28 | 0) >> 2;
	                  HEAP32[$53$s2] = $51;
	                  if (($51 | 0) != 0) {
	                    break;
	                  }
	                  __E__pr_info_header(STRING_TABLE.__str1 | 0, 119);
	                  __E__pr_info(STRING_TABLE.__str39 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $56 = HEAP32[$9$s2];
	                  var $57 = $acmod;
	                  var $58 = _ptm_mgau_init($57, $56);
	                  var $59 = $58;
	                  HEAP32[$53$s2] = $59;
	                  if (($58 | 0) != 0) {
	                    break;
	                  }
	                  __E__pr_info_header(STRING_TABLE.__str1 | 0, 121);
	                  __E__pr_info(STRING_TABLE.__str40 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $62 = HEAP32[$1$s2];
	                  var $63 = HEAP32[$18$s2];
	                  var $64 = HEAP32[$9$s2];
	                  var $65 = _ms_mgau_init($62, $63, $64);
	                  HEAP32[$53$s2] = $65;
	                  if (($65 | 0) == 0) {
	                    var $_0 = -1;
	                    break $_$44;
	                  }
	                } else {
	                  __E__pr_info_header(STRING_TABLE.__str1 | 0, 111);
	                  __E__pr_info(STRING_TABLE.__str37 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $43 = HEAP32[$1$s2];
	                  var $44 = HEAP32[$18$s2];
	                  var $45 = HEAP32[$9$s2];
	                  var $46 = _ms_mgau_init($43, $44, $45);
	                  HEAP32[$acmod + 28 >> 2] = $46;
	                  if (($46 | 0) == 0) {
	                    var $_0 = -1;
	                    break $_$44;
	                  }
	                }
	              } while (0);
	              var $_idx1_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	              var $69 = _cmd_ln_str_r($_idx1_val, STRING_TABLE.__str1352704 | 0);
	              if (($69 | 0) == 0) {
	                var $_0 = 0;
	                break $_$44;
	              }
	              var $72 = _ps_mllr_read($69);
	              if (($72 | 0) == 0) {
	                var $_0 = -1;
	                break $_$44;
	              }
	              _acmod_update_mllr($acmod, $72);
	              var $_0 = 0;
	              break $_$44;
	            }
	          } while (0);
	          __E__pr_header(STRING_TABLE.__str1 | 0, 106, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str35 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_init_am["X"] = 1;

	function _acmod_free($acmod) {
	  var $acmod$s2 = $acmod >> 2;
	  if (($acmod | 0) != 0) {
	    var $4 = HEAP32[$acmod$s2 + 4];
	    _feat_free($4);
	    var $6 = HEAP32[$acmod$s2 + 3];
	    _fe_free($6);
	    var $8 = HEAP32[$acmod$s2 + 15];
	    if (($8 | 0) != 0) {
	      var $11 = $8;
	      _ckd_free_2d($11);
	    }
	    var $14 = HEAP32[$acmod$s2 + 16];
	    if (($14 | 0) != 0) {
	      _feat_array_free($14);
	    }
	    var $19 = HEAP32[$acmod$s2 + 18];
	    if (($19 | 0) != 0) {
	      var $22 = _fclose($19);
	    }
	    var $25 = HEAP32[$acmod$s2 + 17];
	    if (($25 | 0) != 0) {
	      var $28 = _fclose($25);
	    }
	    var $31 = HEAP32[$acmod$s2 + 19];
	    if (($31 | 0) != 0) {
	      var $34 = _fclose($31);
	    }
	    var $38 = HEAP32[$acmod$s2 + 21];
	    _ckd_free($38);
	    var $41 = HEAP32[$acmod$s2 + 9];
	    _ckd_free($41);
	    var $44 = HEAP32[$acmod$s2 + 10];
	    _ckd_free($44);
	    var $46 = HEAP32[$acmod$s2 + 11];
	    _ckd_free($46);
	    var $48 = HEAP32[$acmod$s2 + 5];
	    if (($48 | 0) != 0) {
	      _bin_mdef_free($48);
	    }
	    var $53 = HEAP32[$acmod$s2 + 6];
	    if (($53 | 0) != 0) {
	      _tmat_free($53);
	    }
	    var $58 = HEAP32[$acmod$s2 + 7];
	    if (($58 | 0) != 0) {
	      var $64 = HEAP32[HEAP32[$58 >> 2] + 12 >> 2];
	      FUNCTION_TABLE[$64]($58);
	    }
	    var $67 = HEAP32[$acmod$s2 + 8];
	    if (($67 | 0) != 0) {
	      _ps_mllr_free($67);
	    }
	    var $71 = $acmod;
	    _ckd_free($71);
	  }
	  return;
	  return;
	}

	_acmod_free["X"] = 1;

	function _acmod_update_mllr($acmod, $mllr) {
	  var $1 = $acmod + 32 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) != 0) {
	    _ps_mllr_free($2);
	  }
	  HEAP32[$1 >> 2] = $mllr;
	  var $7 = HEAP32[$acmod + 28 >> 2];
	  var $11 = HEAP32[HEAP32[$7 >> 2] + 8 >> 2];
	  var $12 = FUNCTION_TABLE[$11]($7, $mllr);
	  return;
	  return;
	}

	function _acmod_write_senfh_header($acmod, $logfh) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 128;
	  var $logbasestr = __stackBase__ + 64;
	  var $1 = __stackBase__ | 0;
	  var $5 = HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2];
	  var $6 = _sprintf($1, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $5, tempInt));
	  var $7 = $logbasestr | 0;
	  var $_idx1 = HEAP32[$acmod + 4 >> 2] + 20 | 0;
	  var $_idx1_val = (tempDoubleI32[0] = HEAP32[$_idx1 >> 2], tempDoubleI32[1] = HEAP32[$_idx1 + 4 >> 2], tempDoubleF64[0]);
	  var $10 = _logmath_get_base($_idx1_val);
	  var $11 = _sprintf($7, STRING_TABLE.__str37593 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $10, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  var $_idx_val = HEAP32[HEAP32[$acmod >> 2] + 4 >> 2];
	  var $14 = _cmd_ln_str_r($_idx_val, STRING_TABLE.__str1102679 | 0);
	  var $15 = _bio_writehdr($logfh, (tempInt = STACKTOP, STACKTOP += 36, HEAP32[tempInt >> 2] = STRING_TABLE.__str82348 | 0, HEAP32[tempInt + 4 >> 2] = STRING_TABLE.__str91629 | 0, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str14 | 0, HEAP32[tempInt + 12 >> 2] = $14, HEAP32[tempInt + 16 >> 2] = STRING_TABLE.__str16 | 0, HEAP32[tempInt + 20 >> 2] = $1, HEAP32[tempInt + 24 >> 2] = STRING_TABLE.__str132353 | 0, HEAP32[tempInt + 28 >> 2] = $7, HEAP32[tempInt + 32 >> 2] = 0, tempInt));
	  STACKTOP = __stackBase__;
	  return $15;
	  return null;
	}

	function _acmod_set_senfh($acmod, $logfh) {
	  var $1 = $acmod + 76 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) != 0) {
	    var $5 = _fclose($2);
	  }
	  HEAP32[$1 >> 2] = $logfh;
	  if (($logfh | 0) != 0) {
	    var $9 = _acmod_write_senfh_header($acmod, $logfh);
	  }
	  return;
	  return;
	}

	function _acmod_set_mfcfh($acmod, $logfh) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $rv = __stackBase__;
	  HEAP32[$rv >> 2] = 0;
	  var $1 = $acmod + 72 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) != 0) {
	    var $5 = _fclose($2);
	  }
	  HEAP32[$1 >> 2] = $logfh;
	  var $7 = $rv;
	  var $8 = _fwrite($7, 4, 1, $logfh);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _acmod_set_rawfh($acmod, $logfh) {
	  var $1 = $acmod + 68 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) != 0) {
	    var $5 = _fclose($2);
	  }
	  HEAP32[$1 >> 2] = $logfh;
	  return;
	  return;
	}

	function _acmod_grow_feat_buf($acmod, $nfr) {
	  var __label__;
	  var $1 = $acmod + 16 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = _feat_array_alloc($2, $nfr);
	  var $6 = HEAP16[$acmod + 102 >> 1] << 16 >> 16 == 0;
	  do {
	    if ($6) {
	      if (HEAP8[$acmod + 90 | 0] << 24 >> 24 != 0) {
	        __label__ = 5;
	        break;
	      }
	      var $_pre_phi = $acmod + 64 | 0;
	      var $_pre_phi2 = $acmod + 100 | 0;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  if (__label__ == 5) {
	    var $14 = HEAP32[HEAP32[$3 >> 2] >> 2];
	    var $15 = $acmod + 64 | 0;
	    var $19 = HEAP32[HEAP32[HEAP32[$15 >> 2] >> 2] >> 2];
	    var $20 = $acmod + 100 | 0;
	    var $27 = (HEAP16[$20 >> 1] << 16 >> 16 << 2) * HEAP32[HEAP32[$1 >> 2] + 92 >> 2] | 0;
	    _memcpy($14, $19, $27, 4);
	    var $_pre_phi = $15;
	    var $_pre_phi2 = $20;
	  }
	  var $_pre_phi2;
	  var $_pre_phi;
	  var $29 = HEAP32[$_pre_phi >> 2];
	  _feat_array_free($29);
	  var $30 = $acmod + 84 | 0;
	  var $32 = HEAP32[$30 >> 2];
	  var $33 = $nfr << 2;
	  var $34 = ___ckd_realloc__($32, $33, STRING_TABLE.__str1 | 0, 415);
	  var $35 = $34;
	  HEAP32[$30 >> 2] = $35;
	  HEAP32[$_pre_phi >> 2] = $3;
	  HEAP16[$_pre_phi2 >> 1] = $nfr & 65535;
	  return;
	  return;
	}

	function _acmod_set_grow($acmod) {
	  HEAP8[$acmod + 90 | 0] = 1;
	  if (HEAP16[$acmod + 100 >> 1] << 16 >> 16 < 128) {
	    _acmod_grow_feat_buf($acmod, 128);
	  }
	  return;
	  return;
	}

	function _acmod_start_utt($acmod) {
	  var $2 = HEAP32[$acmod + 12 >> 2];
	  _fe_start_utt($2);
	  HEAP8[$acmod + 88 | 0] = 1;
	  HEAP16[$acmod + 96 >> 1] = 0;
	  HEAP16[$acmod + 102 >> 1] = 0;
	  HEAP16[$acmod + 98 >> 1] = 0;
	  HEAP16[$acmod + 104 >> 1] = 0;
	  HEAP16[$acmod + 92 >> 1] = 0;
	  HEAP32[$acmod + 48 >> 2] = -1;
	  HEAP32[$acmod + 52 >> 2] = 0;
	  var $13 = HEAP32[$acmod + 28 >> 2] + 4 | 0;
	  HEAP32[$13 >> 2] = 0;
	  return;
	  return;
	}

	function _acmod_end_utt($acmod) {
	  var $30$s2;
	  var $2$s1;
	  var $nfr$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $nfr = __stackBase__, $nfr$s2 = $nfr >> 2;
	  var $outlen = __stackBase__ + 4;
	  HEAP32[$nfr$s2] = 0;
	  HEAP8[$acmod + 88 | 0] = 3;
	  var $2$s1 = ($acmod + 96 | 0) >> 1;
	  var $3 = HEAP16[$2$s1];
	  var $5 = HEAP16[$acmod + 94 >> 1];
	  var $6 = $3 << 16 >> 16 < $5 << 16 >> 16;
	  do {
	    if ($6) {
	      var $16 = HEAP32[$acmod + 12 >> 2];
	      var $20 = HEAP32[HEAP32[$acmod + 60 >> 2] + (((HEAP16[$acmod + 98 >> 1] << 16 >> 16) + ($3 << 16 >> 16)) % ($5 << 16 >> 16) << 2) >> 2];
	      _fe_end_utt($16, $20, $nfr);
	      var $21 = HEAP32[$nfr$s2];
	      HEAP16[$2$s1] = (HEAPU16[$2$s1] & 65535) + $21 & 65535;
	      if (($21 | 0) == 0) {
	        break;
	      }
	      var $28 = _acmod_process_mfcbuf($acmod);
	      HEAP32[$nfr$s2] = $28;
	    }
	  } while (0);
	  var $30$s2 = ($acmod + 72 | 0) >> 2;
	  var $31 = HEAP32[$30$s2];
	  if (($31 | 0) != 0) {
	    var $34 = _ftell($31);
	    var $36 = ($34 - 4 | 0) / 4 & -1;
	    HEAP32[$outlen >> 2] = $36;
	    var $37 = HEAP32[$30$s2];
	    var $38 = _fseek($37, 0, 0);
	    if (($38 | 0) == 0) {
	      var $41 = $outlen;
	      var $42 = HEAP32[$30$s2];
	      var $43 = _fwrite($41, 4, 1, $42);
	    }
	    var $45 = HEAP32[$30$s2];
	    var $46 = _fclose($45);
	    HEAP32[$30$s2] = 0;
	  }
	  var $48 = $acmod + 68 | 0;
	  var $49 = HEAP32[$48 >> 2];
	  if (($49 | 0) != 0) {
	    var $52 = _fclose($49);
	    HEAP32[$48 >> 2] = 0;
	  }
	  var $54 = $acmod + 76 | 0;
	  var $55 = HEAP32[$54 >> 2];
	  if (($55 | 0) != 0) {
	    var $58 = _fclose($55);
	    HEAP32[$54 >> 2] = 0;
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_acmod_end_utt["X"] = 1;

	function _acmod_process_mfcbuf($acmod) {
	  var $8$s1;
	  var $4$s1;
	  var $1$s1;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var $mfcptr = __stackBase__;
	  var $ncep = __stackBase__ + 4;
	  var $ncep1 = __stackBase__ + 8;
	  var $1$s1 = ($acmod + 96 | 0) >> 1;
	  var $3 = HEAP16[$1$s1] << 16 >> 16;
	  HEAP32[$ncep >> 2] = $3;
	  var $4$s1 = ($acmod + 98 | 0) >> 1;
	  var $5 = HEAPU16[$4$s1];
	  var $6 = $5 << 16 >> 16;
	  var $8$s1 = ($acmod + 94 | 0) >> 1;
	  var $10 = HEAP16[$8$s1] << 16 >> 16;
	  if (($6 + $3 | 0) > ($10 | 0)) {
	    HEAP32[$ncep1 >> 2] = $10 - $6 | 0;
	    var $14 = $acmod + 88 | 0;
	    var $15 = HEAPU8[$14];
	    if ($15 << 24 >> 24 == 3) {
	      HEAP8[$14] = 2;
	    }
	    var $19 = $acmod + 60 | 0;
	    var $21 = ($6 << 2) + HEAP32[$19 >> 2] | 0;
	    HEAP32[$mfcptr >> 2] = $21;
	    var $22 = _acmod_process_cep($acmod, $mfcptr, $ncep1);
	    HEAP32[$ncep1 >> 2] = $22;
	    HEAP32[$ncep >> 2] = $3 - $22 | 0;
	    HEAP16[$1$s1] = (HEAPU16[$1$s1] & 65535) - $22 & 65535;
	    var $35 = ((HEAPU16[$4$s1] & 65535) + $22 << 16 >> 16) % (HEAP16[$8$s1] << 16 >> 16) & 65535;
	    HEAP16[$4$s1] = $35;
	    HEAP8[$14] = $15;
	    var $37 = $35;
	    var $_pre_phi = $19;
	  } else {
	    var $37 = $5;
	    var $_pre_phi = $acmod + 60 | 0;
	  }
	  var $_pre_phi;
	  var $37;
	  var $40 = ($37 << 16 >> 16 << 2) + HEAP32[$_pre_phi >> 2] | 0;
	  HEAP32[$mfcptr >> 2] = $40;
	  var $41 = _acmod_process_cep($acmod, $mfcptr, $ncep);
	  HEAP16[$1$s1] = (HEAPU16[$1$s1] & 65535) - $41 & 65535;
	  var $53 = ((HEAPU16[$4$s1] & 65535) + $41 << 16 >> 16) % (HEAP16[$8$s1] << 16 >> 16) & 65535;
	  HEAP16[$4$s1] = $53;
	  STACKTOP = __stackBase__;
	  return $41;
	  return null;
	}

	_acmod_process_mfcbuf["X"] = 1;

	function _acmod_process_raw($acmod, $inout_raw, $inout_n_samps, $full_utt) {
	  var $14$s1;
	  var $ncep$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $ncep = __stackBase__, $ncep$s2 = $ncep >> 2;
	  var $ncep1 = __stackBase__ + 4;
	  var $1 = ($full_utt | 0) == 0;
	  $_$27 : do {
	    if ($1) {
	      var $5 = ($inout_n_samps | 0) == 0;
	      $_$30 : do {
	        if (!$5) {
	          if ((HEAP32[$inout_n_samps >> 2] | 0) == 0) {
	            break;
	          }
	          var $10 = HEAP32[$inout_raw >> 2];
	          var $11 = $acmod + 94 | 0;
	          var $12 = HEAP16[$11 >> 1];
	          var $13 = $12 << 16 >> 16;
	          var $14$s1 = ($acmod + 96 | 0) >> 1;
	          var $16 = HEAP16[$14$s1] << 16 >> 16;
	          var $17 = $13 - $16 | 0;
	          HEAP32[$ncep$s2] = $17;
	          var $23 = $acmod + 12 | 0;
	          var $24 = $acmod + 60 | 0;
	          var $25 = $acmod + 68 | 0;
	          var $inptr_0 = ((HEAP16[$acmod + 98 >> 1] << 16 >> 16) + $16 | 0) % ($13 | 0);
	          var $prev_audio_inptr_0 = $10;
	          var $28 = $17;
	          var $27 = $12;
	          while (1) {
	            var $27;
	            var $28;
	            var $prev_audio_inptr_0;
	            var $inptr_0;
	            var $30 = $27 << 16 >> 16;
	            if (($28 + $inptr_0 | 0) <= ($30 | 0)) {
	              break;
	            }
	            HEAP32[$ncep1 >> 2] = $30 - $inptr_0 | 0;
	            var $34 = HEAP32[$23 >> 2];
	            var $36 = ($inptr_0 << 2) + HEAP32[$24 >> 2] | 0;
	            var $37 = _fe_process_frames($34, $inout_raw, $inout_n_samps, $36, $ncep1);
	            if (($37 | 0) < 0) {
	              var $_0 = -1;
	              break $_$27;
	            }
	            var $40 = HEAP32[$25 >> 2];
	            if (($40 | 0) == 0) {
	              var $prev_audio_inptr_1 = $prev_audio_inptr_0;
	              var $52 = $28;
	            } else {
	              var $48 = HEAP32[$inout_raw >> 2] - $prev_audio_inptr_0 >> 1;
	              var $49 = _fwrite($prev_audio_inptr_0, 2, $48, $40);
	              var $prev_audio_inptr_1 = HEAP32[$inout_raw >> 2];
	              var $52 = HEAP32[$ncep$s2];
	            }
	            var $52;
	            var $prev_audio_inptr_1;
	            var $53 = HEAP32[$ncep1 >> 2];
	            HEAP16[$14$s1] = (HEAPU16[$14$s1] & 65535) + $53 & 65535;
	            var $58 = $52 - $53 | 0;
	            HEAP32[$ncep$s2] = $58;
	            var $60 = HEAPU16[$11 >> 1];
	            if (($53 | 0) == 0) {
	              break $_$30;
	            }
	            var $inptr_0 = ($53 + $inptr_0 | 0) % ($60 << 16 >> 16 | 0);
	            var $prev_audio_inptr_0 = $prev_audio_inptr_1;
	            var $28 = $58;
	            var $27 = $60;
	          }
	          var $65 = HEAP32[$23 >> 2];
	          var $67 = ($inptr_0 << 2) + HEAP32[$24 >> 2] | 0;
	          var $68 = _fe_process_frames($65, $inout_raw, $inout_n_samps, $67, $ncep);
	          if (($68 | 0) < 0) {
	            var $_0 = -1;
	            break $_$27;
	          }
	          var $71 = HEAP32[$25 >> 2];
	          if (($71 | 0) != 0) {
	            var $79 = HEAP32[$inout_raw >> 2] - $prev_audio_inptr_0 >> 1;
	            var $80 = _fwrite($prev_audio_inptr_0, 2, $79, $71);
	          }
	          HEAP16[$14$s1] = (HEAPU16[$14$s1] & 65535) + HEAP32[$ncep$s2] & 65535;
	        }
	      } while (0);
	      var $87 = _acmod_process_mfcbuf($acmod);
	      var $_0 = $87;
	    } else {
	      var $3 = _acmod_process_full_raw($acmod, $inout_raw, $inout_n_samps);
	      var $_0 = $3;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_process_raw["X"] = 1;

	function _acmod_process_full_raw($acmod, $inout_raw, $inout_n_samps) {
	  var $21$s2;
	  var $10$s2;
	  var $nfr$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var $nfr = __stackBase__, $nfr$s2 = $nfr >> 2;
	  var $ntail = __stackBase__ + 4;
	  var $cepptr = __stackBase__ + 8;
	  var $2 = HEAP32[$acmod + 68 >> 2];
	  if (($2 | 0) != 0) {
	    var $6 = HEAP32[$inout_raw >> 2];
	    var $7 = HEAP32[$inout_n_samps >> 2];
	    var $8 = _fwrite($6, 2, $7, $2);
	  }
	  var $10$s2 = ($acmod + 12 | 0) >> 2;
	  var $11 = HEAP32[$10$s2];
	  var $12 = _fe_process_frames($11, 0, $inout_n_samps, 0, $nfr);
	  var $13 = ($12 | 0) < 0;
	  do {
	    if ($13) {
	      var $_0 = -1;
	    } else {
	      var $15 = $acmod + 94 | 0;
	      var $21$s2 = ($acmod + 60 | 0) >> 2;
	      if ((HEAP16[$15 >> 1] << 16 >> 16 | 0) < (HEAP32[$nfr$s2] + 1 | 0)) {
	        var $24 = HEAP32[$21$s2];
	        _ckd_free_2d($24);
	        var $26 = HEAP32[$nfr$s2] + 1 | 0;
	        var $_idx_val = HEAP8[HEAP32[$10$s2] + 25 | 0];
	        var $28 = _fe_get_output_size($_idx_val);
	        var $29 = ___ckd_calloc_2d__($26, $28, 4, STRING_TABLE.__str1 | 0, 565);
	        var $30 = $29;
	        HEAP32[$21$s2] = $30;
	        HEAP16[$15 >> 1] = HEAP32[$nfr$s2] + 1 & 65535;
	      }
	      var $34 = $acmod + 96 | 0;
	      HEAP16[$34 >> 1] = 0;
	      HEAP16[$acmod + 98 >> 1] = 0;
	      var $36 = HEAP32[$10$s2];
	      _fe_start_utt($36);
	      var $37 = HEAP32[$10$s2];
	      var $38 = HEAP32[$21$s2];
	      var $39 = _fe_process_frames($37, $inout_raw, $inout_n_samps, $38, $nfr);
	      if (($39 | 0) < 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $42 = HEAP32[$10$s2];
	      var $46 = HEAP32[HEAP32[$21$s2] + (HEAP32[$nfr$s2] << 2) >> 2];
	      _fe_end_utt($42, $46, $ntail);
	      var $49 = HEAP32[$nfr$s2] + HEAP32[$ntail >> 2] | 0;
	      HEAP32[$nfr$s2] = $49;
	      var $50 = HEAP32[$21$s2];
	      HEAP32[$cepptr >> 2] = $50;
	      var $51 = _acmod_process_full_cep($acmod, $cepptr, $nfr);
	      HEAP32[$nfr$s2] = $51;
	      HEAP16[$34 >> 1] = 0;
	      var $_0 = $51;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_process_full_raw["X"] = 1;

	function _acmod_process_cep($acmod, $inout_cep, $inout_n_frames) {
	  var $27$s1;
	  var $24$s1;
	  var $ncep$s2;
	  var $inout_n_frames$s2 = $inout_n_frames >> 2;
	  var $inout_cep$s2 = $inout_cep >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $ncep = __stackBase__, $ncep$s2 = $ncep >> 2;
	  var $ncep1 = __stackBase__ + 4;
	  var $2 = HEAP32[$acmod + 72 >> 2];
	  if (($2 | 0) != 0) {
	    var $6 = HEAP32[$inout_n_frames$s2];
	    var $_val = HEAP32[HEAP32[$inout_cep$s2] >> 2];
	    var $acmod_idx_val_idx_val = HEAP32[HEAP32[$acmod + 16 >> 2] + 8 >> 2];
	    _acmod_log_mfc($acmod_idx_val_idx_val, $2, $_val, $6);
	  }
	  var $8 = HEAPU32[$inout_n_frames$s2];
	  HEAP32[$ncep$s2] = $8;
	  var $9 = $acmod + 88 | 0;
	  var $10 = HEAP8[$9];
	  if ($10 << 24 >> 24 == 3) {
	    var $nfeat_0 = HEAP32[HEAP32[$acmod + 16 >> 2] + 20 >> 2] + $8 | 0;
	  } else if ($10 << 24 >> 24 == 1) {
	    var $nfeat_0 = $8 - HEAP32[HEAP32[$acmod + 16 >> 2] + 20 >> 2] | 0;
	  } else {
	    var $nfeat_0 = $8;
	  }
	  var $nfeat_0;
	  var $24$s1 = ($acmod + 100 | 0) >> 1;
	  var $26 = HEAP16[$24$s1] << 16 >> 16;
	  var $27$s1 = ($acmod + 102 | 0) >> 1;
	  var $28 = HEAP16[$27$s1];
	  var $30 = $26 - ($28 << 16 >> 16) | 0;
	  var $32 = $acmod + 90 | 0;
	  if (($nfeat_0 | 0) > ($30 | 0)) {
	    if (HEAP8[$32] << 24 >> 24 != 0 | $10 << 24 >> 24 == 3) {
	      var $38 = $26 + $nfeat_0 | 0;
	      _acmod_grow_feat_buf($acmod, $38);
	      var $42 = HEAP16[$27$s1];
	    } else {
	      HEAP32[$ncep$s2] = $30 - $nfeat_0 + $8 | 0;
	      var $42 = $28;
	    }
	  } else {
	    var $42 = $28;
	  }
	  var $42;
	  var $44 = HEAP8[$32] << 24 >> 24 == 0;
	  var $49 = ($42 << 16 >> 16) + (HEAP16[$acmod + 104 >> 1] << 16 >> 16) | 0;
	  $_$72 : do {
	    if ($44) {
	      var $60 = HEAP16[$24$s1];
	      var $inptr_0 = ($49 | 0) % ($60 << 16 >> 16 | 0);
	      var $63 = $60;
	    } else {
	      var $50 = $49 + $nfeat_0 | 0;
	      var $51 = HEAP16[$24$s1];
	      var $52 = $51 << 16 >> 16;
	      if (($50 | 0) < ($52 | 0)) {
	        var $inptr_0 = $49;
	        var $63 = $51;
	        break;
	      }
	      var $54 = $52;
	      while (1) {
	        var $54;
	        _acmod_grow_feat_buf($acmod, $54 << 1);
	        var $56 = HEAP16[$24$s1];
	        var $57 = $56 << 16 >> 16;
	        if (($50 | 0) < ($57 | 0)) {
	          var $inptr_0 = $49;
	          var $63 = $56;
	          break $_$72;
	        }
	        var $54 = $57;
	      }
	    }
	  } while (0);
	  var $63;
	  var $inptr_0;
	  var $65 = $63 << 16 >> 16;
	  var $66 = ($inptr_0 + $nfeat_0 | 0) > ($65 | 0);
	  do {
	    if ($66) {
	      HEAP32[$ncep1 >> 2] = $65 - $inptr_0 | 0;
	      var $69 = HEAPU8[$9];
	      if ($69 << 24 >> 24 == 3) {
	        HEAP8[$9] = 2;
	        var $72 = 2;
	      } else {
	        var $72 = $69;
	      }
	      var $72;
	      var $73 = $acmod + 16 | 0;
	      var $74 = HEAP32[$73 >> 2];
	      var $75 = HEAP32[$inout_cep$s2];
	      var $80 = $acmod + 64 | 0;
	      var $82 = ($inptr_0 << 2) + HEAP32[$80 >> 2] | 0;
	      var $83 = _feat_s2mfc2feat_live($74, $75, $ncep1, $72 << 24 >> 24 == 1 & 1, $72 << 24 >> 24 == 3 & 1, $82);
	      if (($83 | 0) < 0) {
	        var $_0 = -1;
	        __label__ = 29;
	        break;
	      }
	      var $89 = (HEAPU16[$27$s1] & 65535) + $83 & 65535;
	      HEAP16[$27$s1] = $89;
	      var $90 = HEAPU16[$24$s1];
	      if ($89 << 16 >> 16 > $90 << 16 >> 16) {
	        ___assert_func(STRING_TABLE.__str1 | 0, 752, STRING_TABLE.___func___acmod_process_cep | 0, STRING_TABLE.__str19 | 0);
	        var $94 = HEAP16[$24$s1];
	      } else {
	        var $94 = $90;
	      }
	      var $94;
	      var $97 = ($83 + $inptr_0 | 0) % ($94 << 16 >> 16 | 0);
	      var $98 = HEAP32[$ncep1 >> 2];
	      var $100 = HEAP32[$inout_n_frames$s2] - $98 | 0;
	      HEAP32[$inout_n_frames$s2] = $100;
	      var $102 = ($98 << 2) + HEAP32[$inout_cep$s2] | 0;
	      HEAP32[$inout_cep$s2] = $102;
	      var $104 = HEAP32[$ncep$s2] - $98 | 0;
	      HEAP32[$ncep$s2] = $104;
	      HEAP8[$9] = $69;
	      var $inptr_1 = $97;
	      var $106 = $69;
	      var $_pre_phi8 = $73;
	      var $_pre_phi10 = $80;
	      __label__ = 23;
	      break;
	    }
	    var $inptr_1 = $inptr_0;
	    var $106 = HEAP8[$9];
	    var $_pre_phi8 = $acmod + 16 | 0;
	    var $_pre_phi10 = $acmod + 64 | 0;
	    __label__ = 23;
	    break;
	  } while (0);
	  do {
	    if (__label__ == 23) {
	      var $_pre_phi10;
	      var $_pre_phi8;
	      var $106;
	      var $inptr_1;
	      var $107 = HEAP32[$_pre_phi8 >> 2];
	      var $108 = HEAP32[$inout_cep$s2];
	      var $114 = ($inptr_1 << 2) + HEAP32[$_pre_phi10 >> 2] | 0;
	      var $115 = _feat_s2mfc2feat_live($107, $108, $ncep, $106 << 24 >> 24 == 1 & 1, $106 << 24 >> 24 == 3 & 1, $114);
	      if (($115 | 0) < 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $121 = (HEAPU16[$27$s1] & 65535) + $115 & 65535;
	      HEAP16[$27$s1] = $121;
	      if ($121 << 16 >> 16 > HEAP16[$24$s1] << 16 >> 16) {
	        ___assert_func(STRING_TABLE.__str1 | 0, 771, STRING_TABLE.___func___acmod_process_cep | 0, STRING_TABLE.__str19 | 0);
	      }
	      var $126 = HEAP32[$ncep$s2];
	      var $128 = HEAP32[$inout_n_frames$s2] - $126 | 0;
	      HEAP32[$inout_n_frames$s2] = $128;
	      var $130 = ($126 << 2) + HEAP32[$inout_cep$s2] | 0;
	      HEAP32[$inout_cep$s2] = $130;
	      if (HEAP8[$9] << 24 >> 24 == 1) {
	        HEAP8[$9] = 2;
	      }
	      var $_0 = $8 - HEAP32[$inout_n_frames$s2] | 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_process_cep["X"] = 1;

	function _acmod_advance($acmod) {
	  var $1$s1;
	  var $1$s1 = ($acmod + 104 | 0) >> 1;
	  var $3 = HEAP16[$1$s1] + 1 & 65535;
	  HEAP16[$1$s1] = $3;
	  if ($3 << 16 >> 16 == HEAP16[$acmod + 100 >> 1] << 16 >> 16) {
	    HEAP16[$1$s1] = 0;
	  }
	  var $9 = $acmod + 102 | 0;
	  var $11 = HEAP16[$9 >> 1] - 1 & 65535;
	  HEAP16[$9 >> 1] = $11;
	  var $14 = HEAP32[$acmod + 28 >> 2] + 4 | 0;
	  var $16 = HEAP32[$14 >> 2] + 1 | 0;
	  HEAP32[$14 >> 2] = $16;
	  var $17 = $acmod + 92 | 0;
	  var $19 = HEAP16[$17 >> 1] + 1 & 65535;
	  HEAP16[$17 >> 1] = $19;
	  return;
	  return;
	}

	function _calc_frame_idx($acmod, $inout_frame_idx) {
	  var $1 = ($inout_frame_idx | 0) == 0;
	  do {
	    if ($1) {
	      var $frame_idx_0 = HEAP16[$acmod + 92 >> 1] << 16 >> 16;
	    } else {
	      var $7 = HEAP32[$inout_frame_idx >> 2];
	      if (($7 | 0) >= 0) {
	        var $frame_idx_0 = $7;
	        break;
	      }
	      var $frame_idx_0 = (HEAP16[$acmod + 92 >> 1] << 16 >> 16) + $7 + 1 | 0;
	    }
	  } while (0);
	  var $frame_idx_0;
	  return $frame_idx_0;
	  return null;
	}

	function _acmod_flags2list($acmod) {
	  var $4 = HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2];
	  if (HEAP8[$acmod + 89 | 0] << 24 >> 24 == 0) {
	    var $11 = ($4 | 0) / 32 & -1;
	    var $12 = ($4 | 0) % 32;
	    var $14 = HEAP32[$acmod + 40 >> 2];
	    if (($4 | 0) > 31) {
	      var $16 = $acmod + 44 | 0;
	      var $smax = ($11 | 0) > 1 ? $11 : 1;
	      var $flagptr_021 = $14;
	      var $n_023 = 0;
	      var $l_024 = 0;
	      var $w_025 = 0;
	      var $indvars_iv36 = -255;
	      var $indvars_iv40 = -256;
	      var $indvars_iv44 = -224;
	      while (1) {
	        var $indvars_iv44;
	        var $indvars_iv40;
	        var $indvars_iv36;
	        var $w_025;
	        var $l_024;
	        var $n_023;
	        var $flagptr_021;
	        var $25 = HEAP32[$flagptr_021 >> 2];
	        var $26 = ($25 | 0) == 0;
	        $_$113 : do {
	          if ($26) {
	            var $l_3 = $l_024;
	            var $n_4 = $n_023;
	          } else {
	            var $27 = $w_025 << 5;
	            var $b_018 = 0;
	            var $n_119 = $n_023;
	            var $l_120 = $l_024;
	            var $indvars_iv38 = $indvars_iv36;
	            var $indvars_iv42 = $indvars_iv40;
	            var $29 = $25;
	            while (1) {
	              var $29;
	              var $indvars_iv42;
	              var $indvars_iv38;
	              var $l_120;
	              var $n_119;
	              var $b_018;
	              if (($29 & 1 << $b_018 | 0) == 0) {
	                var $l_2 = $l_120;
	                var $n_3 = $n_119;
	              } else {
	                var $34 = $b_018 + $27 | 0;
	                var $35 = $34 - $l_120 | 0;
	                if (($35 | 0) > 255) {
	                  var $38 = Math.floor((($indvars_iv42 - $l_120 | 0) >>> 0) / 255);
	                  var $39 = $n_119 + 1 | 0;
	                  var $delta_010 = $35;
	                  var $n_211 = $n_119;
	                  while (1) {
	                    var $n_211;
	                    var $delta_010;
	                    HEAP8[HEAP32[$16 >> 2] + $n_211 | 0] = -1;
	                    var $44 = $delta_010 - 255 | 0;
	                    if (($44 | 0) <= 255) {
	                      break;
	                    }
	                    var $delta_010 = $44;
	                    var $n_211 = $n_211 + 1 | 0;
	                  }
	                  var $delta_0_lcssa = $indvars_iv38 - $l_120 + $38 * -255 | 0;
	                  var $n_2_lcssa = $39 + $38 | 0;
	                } else {
	                  var $delta_0_lcssa = $35;
	                  var $n_2_lcssa = $n_119;
	                }
	                var $n_2_lcssa;
	                var $delta_0_lcssa;
	                HEAP8[HEAP32[$16 >> 2] + $n_2_lcssa | 0] = $delta_0_lcssa & 255;
	                var $l_2 = $34;
	                var $n_3 = $n_2_lcssa + 1 | 0;
	              }
	              var $n_3;
	              var $l_2;
	              var $indvars_iv_next43 = $indvars_iv42 + 1 | 0;
	              if (($indvars_iv_next43 | 0) == ($indvars_iv44 | 0)) {
	                var $l_3 = $l_2;
	                var $n_4 = $n_3;
	                break $_$113;
	              }
	              var $b_018 = $b_018 + 1 | 0;
	              var $n_119 = $n_3;
	              var $l_120 = $l_2;
	              var $indvars_iv38 = $indvars_iv38 + 1 | 0;
	              var $indvars_iv42 = $indvars_iv_next43;
	              var $29 = HEAP32[$flagptr_021 >> 2];
	            }
	          }
	        } while (0);
	        var $n_4;
	        var $l_3;
	        var $57 = $w_025 + 1 | 0;
	        if (($57 | 0) >= ($11 | 0)) {
	          break;
	        }
	        var $flagptr_021 = $flagptr_021 + 4 | 0;
	        var $n_023 = $n_4;
	        var $l_024 = $l_3;
	        var $w_025 = $57;
	        var $indvars_iv36 = $indvars_iv36 + 32 | 0;
	        var $indvars_iv40 = $indvars_iv40 + 32 | 0;
	        var $indvars_iv44 = $indvars_iv44 + 32 | 0;
	      }
	      var $flagptr_0_lcssa = ($smax << 2) + $14 | 0;
	      var $n_0_lcssa = $n_4;
	      var $l_0_lcssa = $l_3;
	      var $w_0_lcssa = $smax << 5;
	    } else {
	      var $flagptr_0_lcssa = $14;
	      var $n_0_lcssa = 0;
	      var $l_0_lcssa = 0;
	      var $w_0_lcssa = 0;
	    }
	    var $w_0_lcssa;
	    var $l_0_lcssa;
	    var $n_0_lcssa;
	    var $flagptr_0_lcssa;
	    var $18 = ($12 | 0) > 0;
	    $_$130 : do {
	      if ($18) {
	        var $19 = $acmod + 44 | 0;
	        var $23 = $w_0_lcssa + $12 - 256 | 0;
	        var $b_14 = 0;
	        var $n_55 = $n_0_lcssa;
	        var $l_46 = $l_0_lcssa;
	        var $indvars_iv = $w_0_lcssa - 255 | 0;
	        var $indvars_iv33 = $w_0_lcssa - 256 | 0;
	        while (1) {
	          var $indvars_iv33;
	          var $indvars_iv;
	          var $l_46;
	          var $n_55;
	          var $b_14;
	          if ((HEAP32[$flagptr_0_lcssa >> 2] & 1 << $b_14 | 0) == 0) {
	            var $l_5 = $l_46;
	            var $n_7 = $n_55;
	          } else {
	            var $66 = $b_14 + $w_0_lcssa | 0;
	            var $67 = $66 - $l_46 | 0;
	            if (($67 | 0) > 255) {
	              var $70 = Math.floor((($indvars_iv33 - $l_46 | 0) >>> 0) / 255);
	              var $71 = $n_55 + 1 | 0;
	              var $n_61 = $n_55;
	              var $delta2_02 = $67;
	              while (1) {
	                var $delta2_02;
	                var $n_61;
	                HEAP8[HEAP32[$19 >> 2] + $n_61 | 0] = -1;
	                var $76 = $delta2_02 - 255 | 0;
	                if (($76 | 0) <= 255) {
	                  break;
	                }
	                var $n_61 = $n_61 + 1 | 0;
	                var $delta2_02 = $76;
	              }
	              var $n_6_lcssa = $71 + $70 | 0;
	              var $delta2_0_lcssa = $indvars_iv - $l_46 + $70 * -255 | 0;
	            } else {
	              var $n_6_lcssa = $n_55;
	              var $delta2_0_lcssa = $67;
	            }
	            var $delta2_0_lcssa;
	            var $n_6_lcssa;
	            HEAP8[HEAP32[$19 >> 2] + $n_6_lcssa | 0] = $delta2_0_lcssa & 255;
	            var $l_5 = $66;
	            var $n_7 = $n_6_lcssa + 1 | 0;
	          }
	          var $n_7;
	          var $l_5;
	          var $indvars_iv_next34 = $indvars_iv33 + 1 | 0;
	          if (($indvars_iv_next34 | 0) == ($23 | 0)) {
	            var $n_5_lcssa = $n_7;
	            break $_$130;
	          }
	          var $b_14 = $b_14 + 1 | 0;
	          var $n_55 = $n_7;
	          var $l_46 = $l_5;
	          var $indvars_iv = $indvars_iv + 1 | 0;
	          var $indvars_iv33 = $indvars_iv_next34;
	        }
	      } else {
	        var $n_5_lcssa = $n_0_lcssa;
	      }
	    } while (0);
	    var $n_5_lcssa;
	    HEAP32[$acmod + 52 >> 2] = $n_5_lcssa;
	  } else {
	    HEAP32[$acmod + 52 >> 2] = $4;
	  }
	  return;
	  return;
	}

	_acmod_flags2list["X"] = 1;

	function _acmod_process_full_cep($acmod, $inout_cep, $inout_n_frames) {
	  var $8$s1;
	  var $inout_n_frames$s2 = $inout_n_frames >> 2;
	  var $2 = HEAP32[$acmod + 72 >> 2];
	  if (($2 | 0) != 0) {
	    var $6 = HEAP32[$inout_n_frames$s2];
	    var $_val = HEAP32[HEAP32[$inout_cep >> 2] >> 2];
	    var $acmod_idx_val_idx_val = HEAP32[HEAP32[$acmod + 16 >> 2] + 8 >> 2];
	    _acmod_log_mfc($acmod_idx_val_idx_val, $2, $_val, $6);
	  }
	  var $8$s1 = ($acmod + 100 | 0) >> 1;
	  var $13 = $acmod + 64 | 0;
	  var $14 = HEAP32[$13 >> 2];
	  if ((HEAP16[$8$s1] << 16 >> 16 | 0) < (HEAP32[$inout_n_frames$s2] | 0)) {
	    _feat_array_free($14);
	    var $16 = $acmod + 16 | 0;
	    var $17 = HEAP32[$16 >> 2];
	    var $18 = HEAP32[$inout_n_frames$s2];
	    var $19 = _feat_array_alloc($17, $18);
	    HEAP32[$13 >> 2] = $19;
	    HEAP16[$8$s1] = HEAP32[$inout_n_frames$s2] & 65535;
	    var $22 = $acmod + 102 | 0;
	    HEAP16[$22 >> 1] = 0;
	    HEAP16[$acmod + 104 >> 1] = 0;
	    var $25 = $19;
	    var $_pre_phi = $16;
	    var $_pre_phi4 = $22;
	  } else {
	    var $25 = $14;
	    var $_pre_phi = $acmod + 16 | 0;
	    var $_pre_phi4 = $acmod + 102 | 0;
	  }
	  var $_pre_phi4;
	  var $_pre_phi;
	  var $25;
	  var $26 = HEAP32[$_pre_phi >> 2];
	  var $27 = HEAP32[$inout_cep >> 2];
	  var $28 = _feat_s2mfc2feat_live($26, $27, $inout_n_frames, 1, 1, $25);
	  var $29 = $28 & 65535;
	  HEAP16[$_pre_phi4 >> 1] = $29;
	  if ($29 << 16 >> 16 > HEAP16[$8$s1] << 16 >> 16) {
	    ___assert_func(STRING_TABLE.__str1 | 0, 542, STRING_TABLE.___func___acmod_process_full_cep | 0, STRING_TABLE.__str19 | 0);
	  }
	  var $36 = (HEAP32[$inout_n_frames$s2] << 2) + HEAP32[$inout_cep >> 2] | 0;
	  HEAP32[$inout_cep >> 2] = $36;
	  HEAP32[$inout_n_frames$s2] = 0;
	  return $28;
	  return null;
	}

	_acmod_process_full_cep["X"] = 1;

	function _acmod_log_mfc($acmod_0_4_val_0_2_val, $acmod_0_18_val, $cep_val, $n_frames) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $n_frames * $acmod_0_4_val_0_2_val | 0;
	  var $2 = $cep_val;
	  var $3 = _fwrite($2, 4, $1, $acmod_0_18_val);
	  if (($3 | 0) != ($1 | 0)) {
	    __E__pr_header(STRING_TABLE.__str1 | 0, 507, STRING_TABLE.__str232533 | 0);
	    __E__sys_error(STRING_TABLE.__str27 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $1, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _acmod_rewind($acmod) {
	  var $1$s1;
	  var __stackBase__ = STACKTOP;
	  var $1$s1 = ($acmod + 92 | 0) >> 1;
	  var $2 = HEAP16[$1$s1];
	  var $3 = $acmod + 100 | 0;
	  if ($2 << 16 >> 16 > HEAP16[$3 >> 1] << 16 >> 16) {
	    __E__pr_header(STRING_TABLE.__str1 | 0, 862, STRING_TABLE.__str102579 | 0);
	    var $8 = HEAP16[$1$s1] << 16 >> 16;
	    var $10 = HEAP16[$3 >> 1] << 16 >> 16;
	    __E__pr_warn(STRING_TABLE.__str20 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $10, tempInt));
	    var $_0 = -1;
	  } else {
	    var $12 = $acmod + 102 | 0;
	    var $14 = HEAP16[$12 >> 1] + $2 & 65535;
	    HEAP16[$12 >> 1] = $14;
	    HEAP16[$acmod + 104 >> 1] = 0;
	    HEAP16[$1$s1] = 0;
	    HEAP32[$acmod + 48 >> 2] = -1;
	    var $19 = HEAP32[$acmod + 28 >> 2] + 4 | 0;
	    HEAP32[$19 >> 2] = 0;
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _acmod_write_scores($acmod, $n_active, $active, $senscr, $senfh) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_active2 = __stackBase__;
	  HEAP16[$n_active2 >> 1] = $n_active & 65535;
	  var $2 = $n_active2;
	  var $3 = _fwrite($2, 2, 1, $senfh);
	  var $4 = ($3 | 0) == 1;
	  $_$26 : do {
	    if ($4) {
	      if ((HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2] | 0) == ($n_active | 0)) {
	        var $12 = $senscr;
	        var $13 = _fwrite($12, 2, $n_active, $senfh);
	        if (($13 | 0) == ($n_active | 0)) {
	          var $_0 = 0;
	          __label__ = 9;
	          break;
	        }
	        __label__ = 8;
	        break;
	      } else {
	        var $16 = _fwrite($active, 1, $n_active, $senfh);
	        if (($16 | 0) != ($n_active | 0)) {
	          __label__ = 8;
	          break;
	        }
	        var $n_0 = 0;
	        var $i_0 = 0;
	        while (1) {
	          var $i_0;
	          var $n_0;
	          if (($i_0 | 0) >= ($n_active | 0)) {
	            var $_0 = 0;
	            __label__ = 9;
	            break $_$26;
	          }
	          var $23 = (HEAPU8[$active + $i_0 | 0] & 255) + $n_0 | 0;
	          var $25 = ($23 << 1) + $senscr | 0;
	          var $26 = _fwrite($25, 2, 1, $senfh);
	          if (($26 | 0) != 1) {
	            __label__ = 8;
	            break $_$26;
	          }
	          var $n_0 = $23;
	          var $i_0 = $i_0 + 1 | 0;
	        }
	      }
	    } else {
	      __label__ = 8;
	    }
	  } while (0);
	  if (__label__ == 8) {
	    __E__pr_header(STRING_TABLE.__str1 | 0, 927, STRING_TABLE.__str232533 | 0);
	    __E__sys_error(STRING_TABLE.__str22 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _acmod_read_scores_internal($acmod) {
	  var $49$s2;
	  var $27$s2;
	  var $26$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_active = __stackBase__;
	  var $2 = HEAPU32[$acmod + 80 >> 2];
	  var $6 = HEAP16[$acmod + 100 >> 1];
	  var $7 = $6 << 16 >> 16;
	  var $8 = HEAP16[$acmod + 102 >> 1] << 16 >> 16 == $6 << 16 >> 16;
	  do {
	    if ($8) {
	      if (HEAP8[$acmod + 90 | 0] << 24 >> 24 == 0) {
	        var $_0 = 0;
	        __label__ = 24;
	        break;
	      }
	      var $14 = $7 << 1;
	      _acmod_grow_feat_buf($acmod, $14);
	      __label__ = 5;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  $_$41 : do {
	    if (__label__ == 5) {
	      if (($2 | 0) == 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $18 = $n_active;
	      var $19 = _fread($18, 2, 1, $2);
	      var $20 = ($19 | 0) < 0;
	      $_$44 : do {
	        if (!$20) {
	          if (($19 | 0) == 0) {
	            var $_0 = 0;
	            break $_$41;
	          }
	          var $25 = HEAP16[$n_active >> 1] << 16 >> 16;
	          var $26$s2 = ($acmod + 52 | 0) >> 2;
	          HEAP32[$26$s2] = $25;
	          var $27$s2 = ($acmod + 20 | 0) >> 2;
	          var $31 = ($25 | 0) == (HEAP32[HEAP32[$27$s2] + 20 >> 2] | 0);
	          $_$47 : do {
	            if ($31) {
	              var $35 = HEAP32[$acmod + 36 >> 2];
	              var $36 = _fread($35, 2, $25, $2);
	              if (($36 | 0) < 0) {
	                break $_$44;
	              }
	              if (($36 | 0) != (HEAP32[$26$s2] | 0)) {
	                var $_0 = 0;
	                break $_$41;
	              }
	            } else {
	              var $42 = $acmod + 44 | 0;
	              var $43 = HEAP32[$42 >> 2];
	              var $44 = _fread($43, 1, $25, $2);
	              if (($44 | 0) < 0) {
	                break $_$44;
	              }
	              if (($44 | 0) != (HEAP32[$26$s2] | 0)) {
	                var $_0 = 0;
	                break $_$41;
	              }
	              var $49$s2 = ($acmod + 36 | 0) >> 2;
	              var $n_0 = 0;
	              var $i_0 = 0;
	              var $51 = $44;
	              while (1) {
	                var $51;
	                var $i_0;
	                var $n_0;
	                if (($i_0 | 0) >= ($51 | 0)) {
	                  break;
	                }
	                var $62 = (HEAPU8[HEAP32[$42 >> 2] + $i_0 | 0] & 255) + $n_0 | 0;
	                var $j_03 = $n_0 + 1 | 0;
	                var $63 = ($j_03 | 0) < ($62 | 0);
	                var $64 = HEAPU32[$49$s2];
	                $_$56 : do {
	                  if ($63) {
	                    var $j_04 = $j_03;
	                    var $65 = $64;
	                    while (1) {
	                      var $65;
	                      var $j_04;
	                      HEAP16[$65 + ($j_04 << 1) >> 1] = 32767;
	                      var $j_0 = $j_04 + 1 | 0;
	                      var $67 = HEAP32[$49$s2];
	                      if (($j_0 | 0) == ($62 | 0)) {
	                        var $_lcssa = $67;
	                        break $_$56;
	                      }
	                      var $j_04 = $j_0;
	                      var $65 = $67;
	                    }
	                  } else {
	                    var $_lcssa = $64;
	                  }
	                } while (0);
	                var $_lcssa;
	                var $69 = ($62 << 1) + $_lcssa | 0;
	                var $70 = _fread($69, 2, 1, $2);
	                if (($70 | 0) < 0) {
	                  break $_$44;
	                }
	                if (($70 | 0) == 0) {
	                  var $_0 = 0;
	                  break $_$41;
	                }
	                var $n_0 = $62;
	                var $i_0 = $i_0 + 1 | 0;
	                var $51 = HEAP32[$26$s2];
	              }
	              var $n_11 = $n_0 + 1 | 0;
	              if (($n_11 | 0) >= (HEAP32[HEAP32[$27$s2] + 20 >> 2] | 0)) {
	                break;
	              }
	              var $n_12 = $n_11;
	              while (1) {
	                var $n_12;
	                HEAP16[HEAP32[$49$s2] + ($n_12 << 1) >> 1] = 32767;
	                var $n_1 = $n_12 + 1 | 0;
	                if (($n_1 | 0) >= (HEAP32[HEAP32[$27$s2] + 20 >> 2] | 0)) {
	                  break $_$47;
	                }
	                var $n_12 = $n_1;
	              }
	            }
	          } while (0);
	          var $_0 = 1;
	          break $_$41;
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str1 | 0, 986, STRING_TABLE.__str232533 | 0);
	      __E__sys_error(STRING_TABLE.__str24 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_acmod_read_scores_internal["X"] = 1;

	function _calc_feat_idx($acmod, $frame_idx) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $acmod + 100 | 0;
	  var $3 = HEAP16[$1 >> 1] << 16 >> 16;
	  var $4 = $acmod + 102 | 0;
	  var $7 = $3 - (HEAP16[$4 >> 1] << 16 >> 16) | 0;
	  var $8 = ($frame_idx | 0) < 0;
	  var $_pre = $acmod + 92 | 0;
	  do {
	    if (!$8) {
	      var $11 = HEAP16[$_pre >> 1] << 16 >> 16;
	      if (($11 - $frame_idx | 0) > ($7 | 0)) {
	        __label__ = 4;
	        break;
	      }
	      var $27 = ((HEAP16[$acmod + 104 >> 1] << 16 >> 16) + ($frame_idx - $11) | 0) % ($3 | 0);
	      var $29 = ($27 | 0) < 0 ? $3 : 0;
	      var $_0 = $29 + $27 | 0;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 4;
	  } while (0);
	  if (__label__ == 4) {
	    __E__pr_header(STRING_TABLE.__str1 | 0, 1049, STRING_TABLE.__str102579 | 0);
	    var $15 = HEAP16[$4 >> 1] << 16 >> 16;
	    var $17 = HEAP16[$1 >> 1] << 16 >> 16;
	    var $20 = (HEAP16[$_pre >> 1] << 16 >> 16) - $frame_idx | 0;
	    __E__pr_warn(STRING_TABLE.__str23 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $frame_idx, HEAP32[tempInt + 4 >> 2] = $15, HEAP32[tempInt + 8 >> 2] = $17, HEAP32[tempInt + 12 >> 2] = $20, HEAP32[tempInt + 16 >> 2] = $7, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _acmod_score($acmod, $inout_frame_idx) {
	  var $acmod$s2 = $acmod >> 2;
	  var __label__;
	  var $1 = _calc_frame_idx($acmod, $inout_frame_idx);
	  var $2 = $acmod + 89 | 0;
	  var $4 = HEAP8[$2] << 24 >> 24 == 0;
	  do {
	    if ($4) {
	      if ((HEAP32[$acmod$s2 + 20] | 0) == 0) {
	        __label__ = 8;
	        break;
	      }
	      __label__ = 4;
	      break;
	    } else {
	      __label__ = 4;
	    }
	  } while (0);
	  do {
	    if (__label__ == 4) {
	      if (($1 | 0) != (HEAP32[$acmod$s2 + 12] | 0)) {
	        __label__ = 8;
	        break;
	      }
	      if (($inout_frame_idx | 0) != 0) {
	        HEAP32[$inout_frame_idx >> 2] = $1;
	      }
	      var $_0 = HEAP32[$acmod$s2 + 9];
	      __label__ = 18;
	      break;
	    }
	  } while (0);
	  do {
	    if (__label__ == 8) {
	      var $20 = _calc_feat_idx($acmod, $1);
	      if (($20 | 0) < 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $24 = HEAP32[$acmod$s2 + 20];
	      if (($24 | 0) == 0) {
	        _acmod_flags2list($acmod);
	        var $36 = HEAPU32[$acmod$s2 + 7];
	        var $40 = HEAP32[HEAP32[$36 >> 2] + 4 >> 2];
	        var $42 = HEAP32[$acmod$s2 + 9];
	        var $44 = HEAP32[$acmod$s2 + 11];
	        var $46 = HEAP32[$acmod$s2 + 13];
	        var $50 = HEAP32[HEAP32[$acmod$s2 + 16] + ($20 << 2) >> 2];
	        var $52 = HEAPU8[$2] & 255;
	        var $53 = FUNCTION_TABLE[$40]($36, $42, $44, $46, $50, $1, $52);
	      } else {
	        var $30 = HEAP32[HEAP32[$acmod$s2 + 21] + ($20 << 2) >> 2];
	        var $31 = _fseek($24, $30, 0);
	        var $32 = _acmod_read_scores_internal($acmod);
	        if (($32 | 0) < 0) {
	          var $_0 = 0;
	          break;
	        }
	      }
	      if (($inout_frame_idx | 0) != 0) {
	        HEAP32[$inout_frame_idx >> 2] = $1;
	      }
	      HEAP32[$acmod$s2 + 12] = $1;
	      var $60 = HEAPU32[$acmod$s2 + 19];
	      if (($60 | 0) == 0) {
	        var $_pre_phi = $acmod + 36 | 0;
	      } else {
	        var $64 = HEAP32[$acmod$s2 + 13];
	        var $66 = HEAP32[$acmod$s2 + 11];
	        var $67 = $acmod + 36 | 0;
	        var $68 = HEAP32[$67 >> 2];
	        var $69 = _acmod_write_scores($acmod, $64, $66, $68, $60);
	        if (($69 | 0) < 0) {
	          var $_0 = 0;
	          break;
	        }
	        var $_pre_phi = $67;
	      }
	      var $_pre_phi;
	      var $_0 = HEAP32[$_pre_phi >> 2];
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_acmod_score["X"] = 1;

	function _acmod_clear_active($acmod) {
	  if (HEAP8[$acmod + 89 | 0] << 24 >> 24 == 0) {
	    var $7 = HEAP32[$acmod + 40 >> 2];
	    var $14 = ((HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2] + 31 | 0) / 32 & -1) << 2;
	    _memset($7, 0, $14, 4);
	    HEAP32[$acmod + 52 >> 2] = 0;
	  }
	  return;
	  return;
	}

	function _acmod_activate_hmm($acmod, $hmm) {
	  var $_pre_phi$s2;
	  var $acmod$s2 = $acmod >> 2;
	  var $3 = HEAP8[$acmod + 89 | 0] << 24 >> 24 == 0;
	  $_$2 : do {
	    if ($3) {
	      var $8 = $hmm + 73 | 0;
	      var $9 = HEAPU8[$8];
	      var $10 = $9 & 255;
	      if (HEAP8[$hmm + 72 | 0] << 24 >> 24 == 0) {
	        if (($10 | 0) == 5) {
	          var $150 = HEAPU16[$hmm + 62 >> 1] & 65535;
	          var $154 = $acmod + 40 | 0;
	          var $156 = ($150 >>> 5 << 2) + HEAP32[$154 >> 2] | 0;
	          var $158 = 1 << ($150 & 31) | HEAP32[$156 >> 2];
	          HEAP32[$156 >> 2] = $158;
	          var $161 = HEAPU16[$hmm + 60 >> 1] & 65535;
	          var $166 = ($161 >>> 5 << 2) + HEAP32[$154 >> 2] | 0;
	          var $168 = 1 << ($161 & 31) | HEAP32[$166 >> 2];
	          HEAP32[$166 >> 2] = $168;
	          var $_pre_phi = $154, $_pre_phi$s2 = $_pre_phi >> 2;
	        } else if (($10 | 0) == 3) {
	          var $_pre_phi = $acmod + 40 | 0, $_pre_phi$s2 = $_pre_phi >> 2;
	        } else {
	          if ($9 << 24 >> 24 == 0) {
	            break;
	          }
	          var $146 = $acmod + 40 | 0;
	          var $i_115 = 0;
	          while (1) {
	            var $i_115;
	            var $203 = HEAPU16[$hmm + ($i_115 << 1) + 54 >> 1] & 65535;
	            var $208 = ($203 >>> 5 << 2) + HEAP32[$146 >> 2] | 0;
	            var $210 = 1 << ($203 & 31) | HEAP32[$208 >> 2];
	            HEAP32[$208 >> 2] = $210;
	            var $211 = $i_115 + 1 | 0;
	            if (($211 | 0) >= (HEAPU8[$8] & 255 | 0)) {
	              break $_$2;
	            }
	            var $i_115 = $211;
	          }
	        }
	        var $_pre_phi;
	        var $172 = HEAPU16[$hmm + 58 >> 1] & 65535;
	        var $177 = ($172 >>> 5 << 2) + HEAP32[$_pre_phi$s2] | 0;
	        var $179 = 1 << ($172 & 31) | HEAP32[$177 >> 2];
	        HEAP32[$177 >> 2] = $179;
	        var $182 = HEAPU16[$hmm + 56 >> 1] & 65535;
	        var $187 = ($182 >>> 5 << 2) + HEAP32[$_pre_phi$s2] | 0;
	        var $189 = 1 << ($182 & 31) | HEAP32[$187 >> 2];
	        HEAP32[$187 >> 2] = $189;
	        var $192 = HEAPU16[$hmm + 54 >> 1] & 65535;
	        var $197 = ($192 >>> 5 << 2) + HEAP32[$_pre_phi$s2] | 0;
	        var $199 = 1 << ($192 & 31) | HEAP32[$197 >> 2];
	        HEAP32[$197 >> 2] = $199;
	      } else {
	        do {
	          if (($10 | 0) == 5) {
	            var $17 = HEAPU16[$hmm + 62 >> 1];
	            if ($17 << 16 >> 16 != -1) {
	              var $29 = HEAPU16[HEAP32[HEAP32[HEAP32[$hmm >> 2] + 12 >> 2] + (($17 & 65535) << 2) >> 2] + 8 >> 1] & 65535;
	              var $33 = ($29 >>> 5 << 2) + HEAP32[$acmod$s2 + 10] | 0;
	              var $35 = 1 << ($29 & 31) | HEAP32[$33 >> 2];
	              HEAP32[$33 >> 2] = $35;
	            }
	            var $38 = HEAPU16[$hmm + 60 >> 1];
	            if ($38 << 16 >> 16 == -1) {
	              break;
	            }
	            var $50 = HEAPU16[HEAP32[HEAP32[HEAP32[$hmm >> 2] + 12 >> 2] + (($38 & 65535) << 2) >> 2] + 6 >> 1] & 65535;
	            var $54 = ($50 >>> 5 << 2) + HEAP32[$acmod$s2 + 10] | 0;
	            var $56 = 1 << ($50 & 31) | HEAP32[$54 >> 2];
	            HEAP32[$54 >> 2] = $56;
	          } else if (($10 | 0) != 3) {
	            if ($9 << 24 >> 24 == 0) {
	              break $_$2;
	            }
	            var $13 = $hmm | 0;
	            var $14 = $acmod + 40 | 0;
	            var $i_012 = 0;
	            var $120 = $9;
	            while (1) {
	              var $120;
	              var $i_012;
	              var $122 = HEAPU16[$hmm + ($i_012 << 1) + 54 >> 1];
	              if ($122 << 16 >> 16 == -1) {
	                var $140 = $120;
	              } else {
	                var $133 = HEAPU16[HEAP32[HEAP32[HEAP32[$13 >> 2] + 12 >> 2] + (($122 & 65535) << 2) >> 2] + ($i_012 << 1) >> 1] & 65535;
	                var $136 = ($133 >>> 5 << 2) + HEAP32[$14 >> 2] | 0;
	                var $138 = 1 << ($133 & 31) | HEAP32[$136 >> 2];
	                HEAP32[$136 >> 2] = $138;
	                var $140 = HEAP8[$8];
	              }
	              var $140;
	              var $141 = $i_012 + 1 | 0;
	              if (($141 | 0) >= ($140 & 255 | 0)) {
	                break $_$2;
	              }
	              var $i_012 = $141;
	              var $120 = $140;
	            }
	          }
	        } while (0);
	        var $59 = HEAPU16[$hmm + 58 >> 1];
	        if ($59 << 16 >> 16 != -1) {
	          var $71 = HEAPU16[HEAP32[HEAP32[HEAP32[$hmm >> 2] + 12 >> 2] + (($59 & 65535) << 2) >> 2] + 4 >> 1] & 65535;
	          var $75 = ($71 >>> 5 << 2) + HEAP32[$acmod$s2 + 10] | 0;
	          var $77 = 1 << ($71 & 31) | HEAP32[$75 >> 2];
	          HEAP32[$75 >> 2] = $77;
	        }
	        var $80 = HEAPU16[$hmm + 56 >> 1];
	        if ($80 << 16 >> 16 != -1) {
	          var $92 = HEAPU16[HEAP32[HEAP32[HEAP32[$hmm >> 2] + 12 >> 2] + (($80 & 65535) << 2) >> 2] + 2 >> 1] & 65535;
	          var $96 = ($92 >>> 5 << 2) + HEAP32[$acmod$s2 + 10] | 0;
	          var $98 = 1 << ($92 & 31) | HEAP32[$96 >> 2];
	          HEAP32[$96 >> 2] = $98;
	        }
	        var $101 = HEAPU16[$hmm + 54 >> 1];
	        if ($101 << 16 >> 16 == -1) {
	          break;
	        }
	        var $112 = HEAPU16[HEAP32[HEAP32[HEAP32[$hmm >> 2] + 12 >> 2] + (($101 & 65535) << 2) >> 2] >> 1] & 65535;
	        var $116 = ($112 >>> 5 << 2) + HEAP32[$acmod$s2 + 10] | 0;
	        var $118 = 1 << ($112 & 31) | HEAP32[$116 >> 2];
	        HEAP32[$116 >> 2] = $118;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_acmod_activate_hmm["X"] = 1;

	function _bin_mdef_read_text($filename) {
	  var $205$s2;
	  var $146$s2;
	  var $126$s2;
	  var $123$s2;
	  var $70$s2;
	  var $67$s2;
	  var $23$s2;
	  var $22$s2;
	  var $19$s2;
	  var $10$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = _mdef_init($filename);
	  var $2 = ($1 | 0) == 0;
	  $_$38 : do {
	    if ($2) {
	      var $_0 = 0;
	    } else {
	      var $4$s2 = ($1 + 16 | 0) >> 2;
	      if ((HEAP32[$4$s2] | 0) > 65535) {
	        __E__pr_header(STRING_TABLE.__str129 | 0, 78, STRING_TABLE.__str102579 | 0);
	        var $8 = HEAP32[$4$s2];
	        __E__pr_warn(STRING_TABLE.__str2131 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = 65535, tempInt));
	        _mdef_free($1);
	        var $_0 = 0;
	      } else {
	        var $10$s2 = ($1 + 40 | 0) >> 2;
	        if ((HEAP32[$10$s2] | 0) > 65535) {
	          __E__pr_header(STRING_TABLE.__str129 | 0, 84, STRING_TABLE.__str102579 | 0);
	          var $14 = HEAP32[$10$s2];
	          __E__pr_warn(STRING_TABLE.__str3132 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = 65535, tempInt));
	          _mdef_free($1);
	          var $_0 = 0;
	        } else {
	          var $16 = ___ckd_calloc__(1, 80, STRING_TABLE.__str129 | 0, 91);
	          var $17 = $16;
	          HEAP32[$16 >> 2] = 1;
	          var $19$s2 = ($1 | 0) >> 2;
	          var $20 = HEAP32[$19$s2];
	          var $22$s2 = ($16 + 4 | 0) >> 2;
	          HEAP32[$22$s2] = $20;
	          var $23$s2 = ($1 + 4 | 0) >> 2;
	          var $24 = HEAP32[$23$s2];
	          var $26 = $16 + 8 | 0;
	          HEAP32[$26 >> 2] = $24;
	          var $28 = HEAP32[$1 + 8 >> 2];
	          HEAP32[$16 + 12 >> 2] = $28;
	          var $32 = HEAP32[$1 + 12 >> 2];
	          HEAP32[$16 + 16 >> 2] = $32;
	          var $35 = HEAP32[$4$s2];
	          HEAP32[$16 + 20 >> 2] = $35;
	          var $39 = HEAP32[$1 + 20 >> 2];
	          HEAP32[$16 + 24 >> 2] = $39;
	          var $42 = HEAP32[$10$s2];
	          HEAP32[$16 + 28 >> 2] = $42;
	          var $45 = $1 + 36 | 0;
	          var $46 = HEAP32[$45 >> 2];
	          HEAP32[$16 + 60 >> 2] = $46;
	          var $49 = $1 + 44 | 0;
	          var $50 = HEAP32[$49 >> 2];
	          HEAP32[$16 + 68 >> 2] = $50;
	          var $53 = $1 + 48 | 0;
	          var $54 = HEAP32[$53 >> 2];
	          HEAP32[$16 + 72 >> 2] = $54;
	          HEAP32[$16 + 32 >> 2] = 3;
	          var $60 = HEAP16[$1 + 52 >> 1];
	          HEAP16[$16 + 40 >> 1] = $60;
	          HEAP32[$45 >> 2] = 0;
	          HEAP32[$49 >> 2] = 0;
	          HEAP32[$53 >> 2] = 0;
	          var $63 = HEAP32[$22$s2];
	          var $64 = ___ckd_calloc__($63, 4, STRING_TABLE.__str129 | 0, 114);
	          var $65 = $64;
	          var $67$s2 = ($16 + 48 | 0) >> 2;
	          HEAP32[$67$s2] = $65;
	          var $68 = HEAP32[$22$s2];
	          var $69 = ($68 | 0) > 0;
	          var $70$s2 = ($1 + 28 | 0) >> 2;
	          $_$46 : do {
	            if ($69) {
	              var $71 = HEAP32[$70$s2];
	              var $nchars_054 = 0;
	              var $i_055 = 0;
	              while (1) {
	                var $i_055;
	                var $nchars_054;
	                var $74 = HEAP32[$71 + ($i_055 << 3) >> 2];
	                var $75 = _strlen($74);
	                var $77 = $75 + ($nchars_054 + 1) | 0;
	                var $78 = $i_055 + 1 | 0;
	                if (($78 | 0) >= ($68 | 0)) {
	                  var $nchars_0_lcssa = $77;
	                  break $_$46;
	                }
	                var $nchars_054 = $77;
	                var $i_055 = $78;
	              }
	            } else {
	              var $nchars_0_lcssa = 0;
	            }
	          } while (0);
	          var $nchars_0_lcssa;
	          var $80 = ___ckd_calloc__($nchars_0_lcssa, 1, STRING_TABLE.__str129 | 0, 118);
	          var $81 = HEAP32[$67$s2];
	          HEAP32[$81 >> 2] = $80;
	          var $83 = HEAP32[HEAP32[$67$s2] >> 2];
	          var $86 = HEAP32[HEAP32[$70$s2] >> 2];
	          var $87 = _strcpy($83, $86);
	          var $i_1 = 1;
	          while (1) {
	            var $i_1;
	            if (($i_1 | 0) >= (HEAP32[$22$s2] | 0)) {
	              break;
	            }
	            var $92 = $i_1 - 1 | 0;
	            var $93 = HEAP32[$67$s2];
	            var $95 = HEAP32[$93 + ($92 << 2) >> 2];
	            var $96 = _strlen($95);
	            var $97 = $96 + ($95 + 1) | 0;
	            var $98 = ($i_1 << 2) + $93 | 0;
	            HEAP32[$98 >> 2] = $97;
	            var $101 = HEAP32[HEAP32[$67$s2] + ($i_1 << 2) >> 2];
	            var $104 = HEAP32[HEAP32[$70$s2] + ($i_1 << 3) >> 2];
	            var $105 = _strcpy($101, $104);
	            var $106 = ($i_1 | 0) > 0;
	            do {
	              if ($106) {
	                var $108 = HEAP32[$67$s2];
	                var $110 = HEAP32[$108 + ($92 << 2) >> 2];
	                var $112 = HEAP32[$108 + ($i_1 << 2) >> 2];
	                var $113 = _strcmp($110, $112);
	                if (($113 | 0) <= 0) {
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str129 | 0, 126, STRING_TABLE.__str102579 | 0);
	                __E__pr_warn(STRING_TABLE.__str4133 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                _bin_mdef_free($17);
	                var $_0 = 0;
	                break $_$38;
	              }
	            } while (0);
	            var $i_1 = $i_1 + 1 | 0;
	          }
	          var $119 = HEAP32[$26 >> 2];
	          var $120 = ___ckd_calloc__($119, 12, STRING_TABLE.__str129 | 0, 133);
	          var $121 = $120;
	          var $123$s2 = ($16 + 56 | 0) >> 2;
	          HEAP32[$123$s2] = $121;
	          var $125 = (HEAP32[$23$s2] | 0) > 0;
	          $_$59 : do {
	            if ($125) {
	              var $126$s2 = ($1 + 32 | 0) >> 2;
	              var $i_251 = 0;
	              var $150 = $121;
	              while (1) {
	                var $150;
	                var $i_251;
	                var $154 = $150 + $i_251 * 12 | 0;
	                tempBigInt = HEAP32[(HEAP32[$126$s2] >> 2) + ($i_251 * 6 | 0)];
	                HEAP8[$154] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$154 + 1] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$154 + 2] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$154 + 3] = tempBigInt & 255;
	                var $159 = HEAP32[$123$s2] + $i_251 * 12 + 4 | 0;
	                tempBigInt = HEAP32[(HEAP32[$126$s2] + 4 >> 2) + ($i_251 * 6 | 0)];
	                HEAP8[$159] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$159 + 1] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$159 + 2] = tempBigInt & 255;
	                tempBigInt >>= 8;
	                HEAP8[$159 + 3] = tempBigInt & 255;
	                if (($i_251 | 0) < (HEAP32[$22$s2] | 0)) {
	                  HEAP8[HEAP32[$123$s2] + $i_251 * 12 + 8 | 0] = HEAP32[HEAP32[$70$s2] + ($i_251 << 3) + 4 >> 2] & 255;
	                } else {
	                  HEAP8[HEAP32[$123$s2] + $i_251 * 12 + 8 | 0] = HEAP32[(HEAP32[$126$s2] + 16 >> 2) + ($i_251 * 6 | 0)] & 255;
	                  HEAP8[HEAP32[$123$s2] + $i_251 * 12 + 9 | 0] = HEAP16[(HEAP32[$126$s2] + 8 >> 1) + ($i_251 * 12 | 0)] & 255;
	                  HEAP8[HEAP32[$123$s2] + $i_251 * 12 + 10 | 0] = HEAP16[(HEAP32[$126$s2] + 10 >> 1) + ($i_251 * 12 | 0)] & 255;
	                  HEAP8[HEAP32[$123$s2] + $i_251 * 12 + 11 | 0] = HEAP16[(HEAP32[$126$s2] + 12 >> 1) + ($i_251 * 12 | 0)] & 255;
	                }
	                var $195 = $i_251 + 1 | 0;
	                if (($195 | 0) >= (HEAP32[$23$s2] | 0)) {
	                  break $_$59;
	                }
	                var $i_251 = $195;
	                var $150 = HEAP32[$123$s2];
	              }
	            }
	          } while (0);
	          var $127 = HEAPU32[$19$s2];
	          var $129 = $1 + 56 | 0;
	          if (($127 | 0) > 0) {
	            var $146$s2 = HEAPU32[$129 >> 2] >> 2;
	            var $147 = HEAP32[$146$s2];
	            var $148 = ($127 | 0) > 1;
	            var $j_036_us = 0;
	            var $rc_idx_137_us = 0;
	            var $nodes_139_us = 0;
	            while (1) {
	              var $nodes_139_us;
	              var $rc_idx_137_us;
	              var $j_036_us;
	              var $lc_027_us = HEAP32[$147 + ($j_036_us << 2) >> 2];
	              var $136 = ($lc_027_us | 0) == 0;
	              $_$73 : do {
	                if ($136) {
	                  var $rc_idx_2_lcssa_us = $rc_idx_137_us;
	                  var $nodes_2_lcssa_us = $nodes_139_us;
	                } else {
	                  var $rc_idx_228_us = $rc_idx_137_us;
	                  var $nodes_229_us = $nodes_139_us;
	                  var $lc_030_us = $lc_027_us;
	                  while (1) {
	                    var $lc_030_us;
	                    var $nodes_229_us;
	                    var $rc_idx_228_us;
	                    var $rc_0_in_us = $lc_030_us + 4 | 0;
	                    var $nodes_3_us = $nodes_229_us;
	                    while (1) {
	                      var $nodes_3_us;
	                      var $rc_0_in_us;
	                      var $rc_0_us = HEAP32[$rc_0_in_us >> 2];
	                      var $143 = $nodes_3_us + 1 | 0;
	                      if (($rc_0_us | 0) == 0) {
	                        break;
	                      }
	                      var $rc_0_in_us = $rc_0_us + 8 | 0;
	                      var $nodes_3_us = $143;
	                    }
	                    var $138 = $rc_idx_228_us + 1 | 0;
	                    var $lc_0_us = HEAP32[$lc_030_us + 8 >> 2];
	                    if (($lc_0_us | 0) == 0) {
	                      var $rc_idx_2_lcssa_us = $138;
	                      var $nodes_2_lcssa_us = $143;
	                      break $_$73;
	                    }
	                    var $rc_idx_228_us = $138;
	                    var $nodes_229_us = $143;
	                    var $lc_030_us = $lc_0_us;
	                  }
	                }
	              } while (0);
	              var $nodes_2_lcssa_us;
	              var $rc_idx_2_lcssa_us;
	              var $132 = $j_036_us + 1 | 0;
	              if (($132 | 0) >= ($127 | 0)) {
	                break;
	              }
	              var $j_036_us = $132;
	              var $rc_idx_137_us = $rc_idx_2_lcssa_us + 1 | 0;
	              var $nodes_139_us = $nodes_2_lcssa_us + 1 | 0;
	            }
	            var $phitmp84 = $148 ? $127 + 1 | 0 : 2;
	            var $284 = HEAP32[$146$s2 + 1];
	            var $smax_1 = $148 ? $127 : 1;
	            var $j_036_us_1 = 0;
	            var $rc_idx_137_us_1 = $rc_idx_2_lcssa_us + 2 | 0;
	            var $nodes_139_us_1 = $nodes_2_lcssa_us + 2 | 0;
	            while (1) {
	              var $nodes_139_us_1;
	              var $rc_idx_137_us_1;
	              var $j_036_us_1;
	              var $lc_027_us_1 = HEAP32[$284 + ($j_036_us_1 << 2) >> 2];
	              var $287 = ($lc_027_us_1 | 0) == 0;
	              $_$83 : do {
	                if ($287) {
	                  var $rc_idx_2_lcssa_us_1 = $rc_idx_137_us_1;
	                  var $nodes_2_lcssa_us_1 = $nodes_139_us_1;
	                } else {
	                  var $rc_idx_228_us_1 = $rc_idx_137_us_1;
	                  var $nodes_229_us_1 = $nodes_139_us_1;
	                  var $lc_030_us_1 = $lc_027_us_1;
	                  while (1) {
	                    var $lc_030_us_1;
	                    var $nodes_229_us_1;
	                    var $rc_idx_228_us_1;
	                    var $rc_0_in_us_1 = $lc_030_us_1 + 4 | 0;
	                    var $nodes_3_us_1 = $nodes_229_us_1;
	                    while (1) {
	                      var $nodes_3_us_1;
	                      var $rc_0_in_us_1;
	                      var $rc_0_us_1 = HEAP32[$rc_0_in_us_1 >> 2];
	                      var $291 = $nodes_3_us_1 + 1 | 0;
	                      if (($rc_0_us_1 | 0) == 0) {
	                        break;
	                      }
	                      var $rc_0_in_us_1 = $rc_0_us_1 + 8 | 0;
	                      var $nodes_3_us_1 = $291;
	                    }
	                    var $294 = $rc_idx_228_us_1 + 1 | 0;
	                    var $lc_0_us_1 = HEAP32[$lc_030_us_1 + 8 >> 2];
	                    if (($lc_0_us_1 | 0) == 0) {
	                      var $rc_idx_2_lcssa_us_1 = $294;
	                      var $nodes_2_lcssa_us_1 = $291;
	                      break $_$83;
	                    }
	                    var $rc_idx_228_us_1 = $294;
	                    var $nodes_229_us_1 = $291;
	                    var $lc_030_us_1 = $lc_0_us_1;
	                  }
	                }
	              } while (0);
	              var $nodes_2_lcssa_us_1;
	              var $rc_idx_2_lcssa_us_1;
	              var $299 = $j_036_us_1 + 1 | 0;
	              if (($299 | 0) >= ($127 | 0)) {
	                break;
	              }
	              var $j_036_us_1 = $299;
	              var $rc_idx_137_us_1 = $rc_idx_2_lcssa_us_1 + 1 | 0;
	              var $nodes_139_us_1 = $nodes_2_lcssa_us_1 + 1 | 0;
	            }
	            var $303 = $smax_1 + ($phitmp84 + 1) | 0;
	            var $306 = HEAP32[$146$s2 + 2];
	            var $j_036_us_2 = 0;
	            var $rc_idx_137_us_2 = $rc_idx_2_lcssa_us_1 + 2 | 0;
	            var $nodes_139_us_2 = $nodes_2_lcssa_us_1 + 2 | 0;
	            while (1) {
	              var $nodes_139_us_2;
	              var $rc_idx_137_us_2;
	              var $j_036_us_2;
	              var $lc_027_us_2 = HEAP32[$306 + ($j_036_us_2 << 2) >> 2];
	              var $309 = ($lc_027_us_2 | 0) == 0;
	              $_$93 : do {
	                if ($309) {
	                  var $rc_idx_2_lcssa_us_2 = $rc_idx_137_us_2;
	                  var $nodes_2_lcssa_us_2 = $nodes_139_us_2;
	                } else {
	                  var $rc_idx_228_us_2 = $rc_idx_137_us_2;
	                  var $nodes_229_us_2 = $nodes_139_us_2;
	                  var $lc_030_us_2 = $lc_027_us_2;
	                  while (1) {
	                    var $lc_030_us_2;
	                    var $nodes_229_us_2;
	                    var $rc_idx_228_us_2;
	                    var $rc_0_in_us_2 = $lc_030_us_2 + 4 | 0;
	                    var $nodes_3_us_2 = $nodes_229_us_2;
	                    while (1) {
	                      var $nodes_3_us_2;
	                      var $rc_0_in_us_2;
	                      var $rc_0_us_2 = HEAP32[$rc_0_in_us_2 >> 2];
	                      var $313 = $nodes_3_us_2 + 1 | 0;
	                      if (($rc_0_us_2 | 0) == 0) {
	                        break;
	                      }
	                      var $rc_0_in_us_2 = $rc_0_us_2 + 8 | 0;
	                      var $nodes_3_us_2 = $313;
	                    }
	                    var $316 = $rc_idx_228_us_2 + 1 | 0;
	                    var $lc_0_us_2 = HEAP32[$lc_030_us_2 + 8 >> 2];
	                    if (($lc_0_us_2 | 0) == 0) {
	                      var $rc_idx_2_lcssa_us_2 = $316;
	                      var $nodes_2_lcssa_us_2 = $313;
	                      break $_$93;
	                    }
	                    var $rc_idx_228_us_2 = $316;
	                    var $nodes_229_us_2 = $313;
	                    var $lc_030_us_2 = $lc_0_us_2;
	                  }
	                }
	              } while (0);
	              var $nodes_2_lcssa_us_2;
	              var $rc_idx_2_lcssa_us_2;
	              var $321 = $j_036_us_2 + 1 | 0;
	              if (($321 | 0) >= ($127 | 0)) {
	                break;
	              }
	              var $j_036_us_2 = $321;
	              var $rc_idx_137_us_2 = $rc_idx_2_lcssa_us_2 + 1 | 0;
	              var $nodes_139_us_2 = $nodes_2_lcssa_us_2 + 1 | 0;
	            }
	            var $325 = $smax_1 + ($303 + 1) | 0;
	            var $328 = HEAP32[$146$s2 + 3];
	            var $j_036_us_3 = 0;
	            var $rc_idx_137_us_3 = $rc_idx_2_lcssa_us_2 + 2 | 0;
	            var $nodes_139_us_3 = $nodes_2_lcssa_us_2 + 2 | 0;
	            while (1) {
	              var $nodes_139_us_3;
	              var $rc_idx_137_us_3;
	              var $j_036_us_3;
	              var $lc_027_us_3 = HEAP32[$328 + ($j_036_us_3 << 2) >> 2];
	              var $331 = ($lc_027_us_3 | 0) == 0;
	              $_$103 : do {
	                if ($331) {
	                  var $rc_idx_2_lcssa_us_3 = $rc_idx_137_us_3;
	                  var $nodes_2_lcssa_us_3 = $nodes_139_us_3;
	                } else {
	                  var $rc_idx_228_us_3 = $rc_idx_137_us_3;
	                  var $nodes_229_us_3 = $nodes_139_us_3;
	                  var $lc_030_us_3 = $lc_027_us_3;
	                  while (1) {
	                    var $lc_030_us_3;
	                    var $nodes_229_us_3;
	                    var $rc_idx_228_us_3;
	                    var $rc_0_in_us_3 = $lc_030_us_3 + 4 | 0;
	                    var $nodes_3_us_3 = $nodes_229_us_3;
	                    while (1) {
	                      var $nodes_3_us_3;
	                      var $rc_0_in_us_3;
	                      var $rc_0_us_3 = HEAP32[$rc_0_in_us_3 >> 2];
	                      var $335 = $nodes_3_us_3 + 1 | 0;
	                      if (($rc_0_us_3 | 0) == 0) {
	                        break;
	                      }
	                      var $rc_0_in_us_3 = $rc_0_us_3 + 8 | 0;
	                      var $nodes_3_us_3 = $335;
	                    }
	                    var $338 = $rc_idx_228_us_3 + 1 | 0;
	                    var $lc_0_us_3 = HEAP32[$lc_030_us_3 + 8 >> 2];
	                    if (($lc_0_us_3 | 0) == 0) {
	                      var $rc_idx_2_lcssa_us_3 = $338;
	                      var $nodes_2_lcssa_us_3 = $335;
	                      break $_$103;
	                    }
	                    var $rc_idx_228_us_3 = $338;
	                    var $nodes_229_us_3 = $335;
	                    var $lc_030_us_3 = $lc_0_us_3;
	                  }
	                }
	              } while (0);
	              var $nodes_2_lcssa_us_3;
	              var $rc_idx_2_lcssa_us_3;
	              var $343 = $j_036_us_3 + 1 | 0;
	              if (($343 | 0) >= ($127 | 0)) {
	                break;
	              }
	              var $j_036_us_3 = $343;
	              var $rc_idx_137_us_3 = $rc_idx_2_lcssa_us_3 + 1 | 0;
	              var $nodes_139_us_3 = $nodes_2_lcssa_us_3 + 1 | 0;
	            }
	            var $rc_idx_0_lcssa = $rc_idx_2_lcssa_us_3 + 2 | 0;
	            var $lc_idx_0_lcssa = $smax_1 + ($325 + 1) | 0;
	            var $nodes_0_lcssa = $nodes_2_lcssa_us_3 + 2 | 0;
	          } else {
	            var $rc_idx_0_lcssa = 4;
	            var $lc_idx_0_lcssa = 4;
	            var $nodes_0_lcssa = 4;
	          }
	          var $nodes_0_lcssa;
	          var $lc_idx_0_lcssa;
	          var $rc_idx_0_lcssa;
	          __E__pr_info_header(STRING_TABLE.__str129 | 0, 173);
	          __E__pr_info(STRING_TABLE.__str6135 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $nodes_0_lcssa, HEAP32[tempInt + 4 >> 2] = 8, HEAP32[tempInt + 8 >> 2] = $nodes_0_lcssa >>> 7 & 4194303, tempInt));
	          HEAP32[$16 + 36 >> 2] = $nodes_0_lcssa;
	          var $202 = ___ckd_calloc__($nodes_0_lcssa, 8, STRING_TABLE.__str129 | 0, 177);
	          var $203 = $202;
	          var $205$s2 = ($16 + 52 | 0) >> 2;
	          HEAP32[$205$s2] = $203;
	          var $rc_idx_323 = $rc_idx_0_lcssa;
	          var $lc_idx_224 = $lc_idx_0_lcssa;
	          var $ci_idx_125 = 4;
	          var $i_426 = 0;
	          var $207 = $203;
	          while (1) {
	            var $207;
	            var $i_426;
	            var $ci_idx_125;
	            var $lc_idx_224;
	            var $rc_idx_323;
	            HEAP16[$207 + ($i_426 << 3) >> 1] = $i_426 & 65535;
	            HEAP16[HEAP32[$205$s2] + ($i_426 << 3) + 2 >> 1] = HEAP32[$19$s2] & 65535;
	            var $215 = ($i_426 << 3) + HEAP32[$205$s2] + 4 | 0;
	            HEAP32[$215 >> 2] = $ci_idx_125;
	            var $217 = (HEAP32[$19$s2] | 0) > 0;
	            $_$114 : do {
	              if ($217) {
	                var $rc_idx_413 = $rc_idx_323;
	                var $lc_idx_314 = $lc_idx_224;
	                var $ci_idx_215 = $ci_idx_125;
	                var $j1_016 = 0;
	                while (1) {
	                  var $j1_016;
	                  var $ci_idx_215;
	                  var $lc_idx_314;
	                  var $rc_idx_413;
	                  HEAP16[HEAP32[$205$s2] + ($ci_idx_215 << 3) >> 1] = $j1_016 & 65535;
	                  var $222 = ($ci_idx_215 << 3) + HEAP32[$205$s2] + 4 | 0;
	                  HEAP32[$222 >> 2] = $lc_idx_314;
	                  var $lc2_04 = HEAP32[HEAP32[HEAP32[$129 >> 2] + ($i_426 << 2) >> 2] + ($j1_016 << 2) >> 2];
	                  var $227 = ($lc2_04 | 0) == 0;
	                  $_$117 : do {
	                    if ($227) {
	                      var $rc_idx_5_lcssa = $rc_idx_413;
	                      var $lc_idx_4_lcssa = $lc_idx_314;
	                    } else {
	                      var $rc_idx_55 = $rc_idx_413;
	                      var $lc_idx_46 = $lc_idx_314;
	                      var $lc2_07 = $lc2_04;
	                      while (1) {
	                        var $lc2_07;
	                        var $lc_idx_46;
	                        var $rc_idx_55;
	                        var $229 = HEAP16[$lc2_07 >> 1];
	                        HEAP16[HEAP32[$205$s2] + ($lc_idx_46 << 3) >> 1] = $229;
	                        var $233 = ($lc_idx_46 << 3) + HEAP32[$205$s2] + 4 | 0;
	                        HEAP32[$233 >> 2] = $rc_idx_55;
	                        var $rc3_01 = HEAP32[$lc2_07 + 4 >> 2];
	                        var $235 = ($rc3_01 | 0) == 0;
	                        $_$120 : do {
	                          if ($235) {
	                            var $rc_idx_6_lcssa = $rc_idx_55;
	                          } else {
	                            var $rc_idx_62 = $rc_idx_55;
	                            var $rc3_03 = $rc3_01;
	                            while (1) {
	                              var $rc3_03;
	                              var $rc_idx_62;
	                              var $237 = HEAP16[$rc3_03 >> 1];
	                              HEAP16[HEAP32[$205$s2] + ($rc_idx_62 << 3) >> 1] = $237;
	                              HEAP16[HEAP32[$205$s2] + ($rc_idx_62 << 3) + 2 >> 1] = 0;
	                              var $243 = HEAP32[$rc3_03 + 4 >> 2];
	                              var $245 = ($rc_idx_62 << 3) + HEAP32[$205$s2] + 4 | 0;
	                              HEAP32[$245 >> 2] = $243;
	                              var $247 = ($lc_idx_46 << 3) + HEAP32[$205$s2] + 2 | 0;
	                              var $249 = HEAP16[$247 >> 1] + 1 & 65535;
	                              HEAP16[$247 >> 1] = $249;
	                              var $250 = $rc_idx_62 + 1 | 0;
	                              var $rc3_0 = HEAP32[$rc3_03 + 8 >> 2];
	                              if (($rc3_0 | 0) == 0) {
	                                var $rc_idx_6_lcssa = $250;
	                                break $_$120;
	                              }
	                              var $rc_idx_62 = $250;
	                              var $rc3_03 = $rc3_0;
	                            }
	                          }
	                        } while (0);
	                        var $rc_idx_6_lcssa;
	                        var $253 = HEAP32[$205$s2];
	                        if (HEAP16[$253 + ($lc_idx_46 << 3) + 2 >> 1] << 16 >> 16 == 0) {
	                          var $258 = ($lc_idx_46 << 3) + $253 + 4 | 0;
	                          HEAP32[$258 >> 2] = -1;
	                          var $260 = HEAP32[$205$s2];
	                        } else {
	                          var $260 = $253;
	                        }
	                        var $260;
	                        var $261 = ($ci_idx_215 << 3) + $260 + 2 | 0;
	                        var $263 = HEAP16[$261 >> 1] + 1 & 65535;
	                        HEAP16[$261 >> 1] = $263;
	                        var $264 = $lc_idx_46 + 1 | 0;
	                        var $lc2_0 = HEAP32[$lc2_07 + 8 >> 2];
	                        if (($lc2_0 | 0) == 0) {
	                          var $rc_idx_5_lcssa = $rc_idx_6_lcssa;
	                          var $lc_idx_4_lcssa = $264;
	                          break $_$117;
	                        }
	                        var $rc_idx_55 = $rc_idx_6_lcssa;
	                        var $lc_idx_46 = $264;
	                        var $lc2_07 = $lc2_0;
	                      }
	                    }
	                  } while (0);
	                  var $lc_idx_4_lcssa;
	                  var $rc_idx_5_lcssa;
	                  var $267 = HEAP32[$205$s2];
	                  if (HEAP16[$267 + ($ci_idx_215 << 3) + 2 >> 1] << 16 >> 16 == 0) {
	                    var $272 = ($ci_idx_215 << 3) + $267 + 4 | 0;
	                    HEAP32[$272 >> 2] = -1;
	                  }
	                  var $274 = $ci_idx_215 + 1 | 0;
	                  var $275 = $j1_016 + 1 | 0;
	                  if (($275 | 0) >= (HEAP32[$19$s2] | 0)) {
	                    var $rc_idx_4_lcssa = $rc_idx_5_lcssa;
	                    var $lc_idx_3_lcssa = $lc_idx_4_lcssa;
	                    var $ci_idx_2_lcssa = $274;
	                    break $_$114;
	                  }
	                  var $rc_idx_413 = $rc_idx_5_lcssa;
	                  var $lc_idx_314 = $lc_idx_4_lcssa;
	                  var $ci_idx_215 = $274;
	                  var $j1_016 = $275;
	                }
	              } else {
	                var $rc_idx_4_lcssa = $rc_idx_323;
	                var $lc_idx_3_lcssa = $lc_idx_224;
	                var $ci_idx_2_lcssa = $ci_idx_125;
	              }
	            } while (0);
	            var $ci_idx_2_lcssa;
	            var $lc_idx_3_lcssa;
	            var $rc_idx_4_lcssa;
	            var $278 = $i_426 + 1 | 0;
	            if (($278 | 0) == 4) {
	              break;
	            }
	            var $rc_idx_323 = $rc_idx_4_lcssa;
	            var $lc_idx_224 = $lc_idx_3_lcssa;
	            var $ci_idx_125 = $ci_idx_2_lcssa;
	            var $i_426 = $278;
	            var $207 = HEAP32[$205$s2];
	          }
	          _mdef_free($1);
	          HEAP32[$16 + 76 >> 2] = 0;
	          var $_0 = $17;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_bin_mdef_read_text["X"] = 1;

	function _bin_mdef_retain($m) {
	  var $1 = $m | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return $m;
	  return null;
	}

	function _bin_mdef_free($m) {
	  var $m$s2 = $m >> 2;
	  var $1 = ($m | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $m | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$m$s2 + 19];
	      if (($9 | 0) == 0) {
	        var $13 = HEAP32[HEAP32[$m$s2 + 12] >> 2];
	        _ckd_free($13);
	        var $17 = HEAP32[HEAP32[$m$s2 + 15] >> 2];
	        _ckd_free($17);
	        var $20 = HEAP32[$m$s2 + 14];
	        _ckd_free($20);
	        var $23 = HEAP32[$m$s2 + 13];
	        _ckd_free($23);
	      } else if (($9 | 0) == 1) {
	        var $27 = HEAP32[HEAP32[$m$s2 + 12] >> 2];
	        _ckd_free($27);
	      }
	      var $30 = HEAP32[$m$s2 + 11];
	      if (($30 | 0) != 0) {
	        _mmio_file_unmap($30);
	      }
	      var $36 = HEAP32[$m$s2 + 17];
	      _ckd_free($36);
	      var $39 = HEAP32[$m$s2 + 18];
	      _ckd_free($39);
	      var $42 = HEAP32[$m$s2 + 12];
	      _ckd_free($42);
	      var $45 = HEAP32[$m$s2 + 15];
	      _ckd_free($45);
	      var $46 = $m;
	      _ckd_free($46);
	    }
	  } while (0);
	  return;
	  return;
	}

	_bin_mdef_free["X"] = 1;

	function _bin_mdef_ciphone_id($m, $ciphone) {
	  var $3 = $m + 48 | 0;
	  var $high_0 = HEAP32[$m + 4 >> 2];
	  var $low_0 = 0;
	  while (1) {
	    var $low_0;
	    var $high_0;
	    if (($low_0 | 0) >= ($high_0 | 0)) {
	      var $_0 = -1;
	      break;
	    }
	    var $8 = ($high_0 + $low_0 | 0) / 2 & -1;
	    var $11 = HEAP32[HEAP32[$3 >> 2] + ($8 << 2) >> 2];
	    var $12 = _strcmp($ciphone, $11);
	    if (($12 | 0) == 0) {
	      var $_0 = $8;
	      break;
	    }
	    var $15 = ($12 | 0) > 0;
	    var $_low_0 = $15 ? $8 + 1 | 0 : $low_0;
	    var $high_0_ = $15 ? $high_0 : $8;
	    var $high_0 = $high_0_;
	    var $low_0 = $_low_0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _bin_mdef_read($config, $filename) {
	  var $351$s2;
	  var $345$s2;
	  var $291$s2;
	  var $285$s2;
	  var $286$s2;
	  var $259$s2;
	  var $226$s2;
	  var $160$s2;
	  var $144$s1;
	  var $133$s2;
	  var $111$s2;
	  var $89$s2;
	  var $78$s2;
	  var $67$s2;
	  var $56$s2;
	  var $45$s2;
	  var $41$s2;
	  var $val$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $val = __stackBase__, $val$s2 = $val >> 2;
	  var $1 = _bin_mdef_read_text($filename);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if ($2) {
	      __E__pr_info_header(STRING_TABLE.__str129 | 0, 330);
	      __E__pr_info(STRING_TABLE.__str7136 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	      var $4 = _fopen($filename, STRING_TABLE.__str92578 | 0);
	      if (($4 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $7 = $val;
	      var $8 = _fread($7, 4, 1, $4);
	      if (($8 | 0) == 1) {
	        if ((HEAP32[$val$s2] | 0) == 1112360006) {
	          __E__pr_info_header(STRING_TABLE.__str129 | 0, 343);
	          __E__pr_info(STRING_TABLE.__str11140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	          var $swap_0 = 1;
	        } else {
	          var $swap_0 = 0;
	        }
	        var $swap_0;
	        var $17 = _fread($7, 4, 1, $4);
	        if (($17 | 0) == 1) {
	          var $22 = ($swap_0 | 0) != 0;
	          var $23 = HEAP32[$val$s2];
	          if ($22) {
	            var $25 = _llvm_bswap_i32($23);
	            HEAP32[$val$s2] = $25;
	            var $26 = $25;
	          } else {
	            var $26 = $23;
	          }
	          var $26;
	          if (($26 | 0) > 1) {
	            __E__pr_header(STRING_TABLE.__str129 | 0, 353, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str13142 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $26, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	            var $29 = _fclose($4);
	            var $_0 = 0;
	          } else {
	            var $31 = _fread($7, 4, 1, $4);
	            if (($31 | 0) == 1) {
	              var $36 = HEAP32[$val$s2];
	              if ($22) {
	                var $38 = _llvm_bswap_i32($36);
	                HEAP32[$val$s2] = $38;
	                var $39 = $38;
	              } else {
	                var $39 = $36;
	              }
	              var $39;
	              var $40 = _fseek($4, $39, 1);
	              var $41 = ___ckd_calloc__(1, 80, STRING_TABLE.__str129 | 0, 369), $41$s2 = $41 >> 2;
	              var $42 = $41;
	              HEAP32[$41$s2] = 1;
	              var $44 = $41 + 4 | 0;
	              var $45$s2 = $44 >> 2;
	              var $46 = _fread($44, 4, 1, $4);
	              if (($46 | 0) == 1) {
	                if ($22) {
	                  var $52 = HEAP32[$45$s2];
	                  var $53 = _llvm_bswap_i32($52);
	                  HEAP32[$45$s2] = $53;
	                }
	                var $55 = $41 + 8 | 0;
	                var $56$s2 = $55 >> 2;
	                var $57 = _fread($55, 4, 1, $4);
	                if (($57 | 0) == 1) {
	                  if ($22) {
	                    var $63 = HEAP32[$56$s2];
	                    var $64 = _llvm_bswap_i32($63);
	                    HEAP32[$56$s2] = $64;
	                  }
	                  var $66 = $41 + 12 | 0;
	                  var $67$s2 = $66 >> 2;
	                  var $68 = _fread($66, 4, 1, $4);
	                  if (($68 | 0) == 1) {
	                    if ($22) {
	                      var $74 = HEAP32[$67$s2];
	                      var $75 = _llvm_bswap_i32($74);
	                      HEAP32[$67$s2] = $75;
	                    }
	                    var $77 = $41 + 16 | 0;
	                    var $78$s2 = $77 >> 2;
	                    var $79 = _fread($77, 4, 1, $4);
	                    if (($79 | 0) == 1) {
	                      if ($22) {
	                        var $85 = HEAP32[$78$s2];
	                        var $86 = _llvm_bswap_i32($85);
	                        HEAP32[$78$s2] = $86;
	                      }
	                      var $88 = $41 + 20 | 0;
	                      var $89$s2 = $88 >> 2;
	                      var $90 = _fread($88, 4, 1, $4);
	                      if (($90 | 0) == 1) {
	                        if ($22) {
	                          var $96 = HEAP32[$89$s2];
	                          var $97 = _llvm_bswap_i32($96);
	                          HEAP32[$89$s2] = $97;
	                        }
	                        var $99 = $41 + 24 | 0;
	                        var $100 = $99;
	                        var $101 = _fread($99, 4, 1, $4);
	                        if (($101 | 0) == 1) {
	                          if ($22) {
	                            var $107 = HEAP32[$100 >> 2];
	                            var $108 = _llvm_bswap_i32($107);
	                            HEAP32[$100 >> 2] = $108;
	                          }
	                          var $110 = $41 + 28 | 0;
	                          var $111$s2 = $110 >> 2;
	                          var $112 = _fread($110, 4, 1, $4);
	                          if (($112 | 0) == 1) {
	                            if ($22) {
	                              var $118 = HEAP32[$111$s2];
	                              var $119 = _llvm_bswap_i32($118);
	                              HEAP32[$111$s2] = $119;
	                            }
	                            var $121 = $41 + 32 | 0;
	                            var $122 = $121;
	                            var $123 = _fread($121, 4, 1, $4);
	                            if (($123 | 0) == 1) {
	                              if ($22) {
	                                var $129 = HEAP32[$122 >> 2];
	                                var $130 = _llvm_bswap_i32($129);
	                                HEAP32[$122 >> 2] = $130;
	                              }
	                              var $132 = $41 + 36 | 0;
	                              var $133$s2 = $132 >> 2;
	                              var $134 = _fread($132, 4, 1, $4);
	                              if (($134 | 0) == 1) {
	                                if ($22) {
	                                  var $140 = HEAP32[$133$s2];
	                                  var $141 = _llvm_bswap_i32($140);
	                                  HEAP32[$133$s2] = $141;
	                                }
	                                var $143 = $41 + 40 | 0;
	                                var $144$s1 = $143 >> 1;
	                                var $145 = _fread($143, 4, 1, $4);
	                                if (($145 | 0) == 1) {
	                                  if ($22) {
	                                    var $152 = HEAP16[$144$s1] << 16 >> 16;
	                                    var $153 = _llvm_bswap_i32($152);
	                                    var $154 = $153 & 65535;
	                                    HEAP16[$144$s1] = $154;
	                                  }
	                                  var $156 = HEAP32[$45$s2];
	                                  var $157 = ___ckd_calloc__($156, 4, STRING_TABLE.__str129 | 0, 394);
	                                  var $158 = $157;
	                                  var $160$s2 = ($41 + 48 | 0) >> 2;
	                                  HEAP32[$160$s2] = $158;
	                                  if (($config | 0) == 0) {
	                                    var $167 = 1;
	                                  } else {
	                                    var $config_idx_val = HEAP32[$config + 4 >> 2];
	                                    var $163 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1372706 | 0);
	                                    var $167 = ($163 | 0) != 0 & 1;
	                                  }
	                                  var $167;
	                                  do {
	                                    if ($22) {
	                                      __E__pr_header(STRING_TABLE.__str129 | 0, 399, STRING_TABLE.__str212436 | 0);
	                                      __E__pr_warn(STRING_TABLE.__str28157 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                                      __label__ = 63;
	                                      break;
	                                    }
	                                    if (($167 | 0) == 0) {
	                                      __label__ = 63;
	                                      break;
	                                    }
	                                    var $172 = _mmio_file_read($filename);
	                                    var $174 = $41 + 44 | 0;
	                                    HEAP32[$174 >> 2] = $172;
	                                    var $175 = ($172 | 0) == 0;
	                                    var $176 = _ftell($4);
	                                    if ($175) {
	                                      var $191 = $176;
	                                      __label__ = 67;
	                                      break;
	                                    }
	                                    var $_idx_val = HEAP32[HEAP32[$174 >> 2] >> 2];
	                                    var $179 = _mmio_file_ptr($_idx_val);
	                                    var $180 = $179 + $176 | 0;
	                                    var $181 = HEAP32[$160$s2];
	                                    HEAP32[$181 >> 2] = $180;
	                                    HEAP32[$41$s2 + 19] = 2;
	                                    __label__ = 66;
	                                    break;
	                                  } while (0);
	                                  do {
	                                    if (__label__ == 63) {
	                                      var $170 = _ftell($4);
	                                      var $191 = $170;
	                                      __label__ = 67;
	                                      break;
	                                    }
	                                  } while (0);
	                                  do {
	                                    if (__label__ == 67) {
	                                      var $191;
	                                      HEAP32[$41$s2 + 19] = 1;
	                                      var $194 = _fseek($4, 0, 2);
	                                      var $195 = _ftell($4);
	                                      var $196 = _fseek($4, $191, 0);
	                                      var $197 = $195 - $191 | 0;
	                                      var $198 = ___ckd_malloc__($197, STRING_TABLE.__str129 | 0, 421);
	                                      var $199 = HEAP32[$160$s2];
	                                      HEAP32[$199 >> 2] = $198;
	                                      var $201 = HEAP32[HEAP32[$160$s2] >> 2];
	                                      var $202 = _fread($201, 1, $197, $4);
	                                      if (($202 | 0) == ($197 | 0)) {
	                                        break;
	                                      }
	                                      __E__pr_header(STRING_TABLE.__str129 | 0, 423, STRING_TABLE.__str72422 | 0);
	                                      __E__die_error(STRING_TABLE.__str30159 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $197, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                                    }
	                                  } while (0);
	                                  var $185 = (HEAP32[$45$s2] | 0) > 1;
	                                  var $186 = HEAP32[$160$s2];
	                                  var $187 = HEAPU32[$186 >> 2];
	                                  var $188 = _strlen($187);
	                                  var $189 = $188 + ($187 + 1) | 0;
	                                  if ($185) {
	                                    var $i_041 = 1;
	                                    var $206 = $186;
	                                    var $205 = $189;
	                                    while (1) {
	                                      var $205;
	                                      var $206;
	                                      var $i_041;
	                                      HEAP32[$206 + ($i_041 << 2) >> 2] = $205;
	                                      var $208 = $i_041 + 1 | 0;
	                                      var $210 = ($208 | 0) < (HEAP32[$45$s2] | 0);
	                                      var $211 = HEAP32[$160$s2];
	                                      var $213 = HEAP32[$211 + ($i_041 << 2) >> 2];
	                                      var $214 = _strlen($213);
	                                      var $215 = $214 + ($213 + 1) | 0;
	                                      if (!$210) {
	                                        break;
	                                      }
	                                      var $i_041 = $208;
	                                      var $206 = $211;
	                                      var $205 = $215;
	                                    }
	                                    var $_lcssa39 = $215;
	                                    var $217 = HEAP32[$211 >> 2];
	                                  } else {
	                                    var $_lcssa39 = $189;
	                                    var $217 = $187;
	                                  }
	                                  var $217;
	                                  var $_lcssa39;
	                                  var $224 = $217 + ($_lcssa39 + 3 - $217 & -4) | 0;
	                                  var $226$s2 = ($41 + 52 | 0) >> 2;
	                                  HEAP32[$226$s2] = $224;
	                                  var $227 = HEAPU32[$133$s2];
	                                  if ($22) {
	                                    var $228 = ($227 | 0) > 0;
	                                    $_$120 : do {
	                                      if ($228) {
	                                        var $i_133 = 0;
	                                        var $229 = $224;
	                                        while (1) {
	                                          var $229;
	                                          var $i_133;
	                                          var $230 = ($i_133 << 3) + $229 | 0;
	                                          var $232 = HEAP16[$230 >> 1] << 16 >> 16;
	                                          var $237 = ($232 >>> 8 & 255 | $232 << 8) & 65535;
	                                          HEAP16[$230 >> 1] = $237;
	                                          var $239 = ($i_133 << 3) + HEAP32[$226$s2] + 2 | 0;
	                                          var $241 = HEAP16[$239 >> 1] << 16 >> 16;
	                                          var $246 = ($241 >>> 8 & 255 | $241 << 8) & 65535;
	                                          HEAP16[$239 >> 1] = $246;
	                                          var $248 = ($i_133 << 3) + HEAP32[$226$s2] + 4 | 0;
	                                          var $249 = HEAP32[$248 >> 2];
	                                          var $250 = _llvm_bswap_i32($249);
	                                          HEAP32[$248 >> 2] = $250;
	                                          var $251 = $i_133 + 1 | 0;
	                                          var $252 = HEAP32[$133$s2];
	                                          var $254 = HEAPU32[$226$s2];
	                                          if (($251 | 0) >= ($252 | 0)) {
	                                            var $_lcssa32 = $254;
	                                            var $255 = $252;
	                                            break $_$120;
	                                          }
	                                          var $i_133 = $251;
	                                          var $229 = $254;
	                                        }
	                                      } else {
	                                        var $_lcssa32 = $224;
	                                        var $255 = $227;
	                                      }
	                                    } while (0);
	                                    var $255;
	                                    var $_lcssa32;
	                                    var $257 = ($255 << 3) + $_lcssa32 | 0;
	                                    var $259 = $41 + 56 | 0, $259$s2 = $259 >> 2;
	                                    HEAP32[$259$s2] = $257;
	                                    var $260 = HEAPU32[$56$s2];
	                                    var $261 = ($260 | 0) > 0;
	                                    $_$124 : do {
	                                      if ($261) {
	                                        var $i_227 = 0;
	                                        var $262 = $257;
	                                        while (1) {
	                                          var $262;
	                                          var $i_227;
	                                          var $263 = $262 + $i_227 * 12 | 0;
	                                          var $264 = HEAP32[$263 >> 2];
	                                          var $265 = _llvm_bswap_i32($264);
	                                          HEAP32[$263 >> 2] = $265;
	                                          var $267 = HEAP32[$259$s2] + $i_227 * 12 + 4 | 0;
	                                          var $268 = HEAP32[$267 >> 2];
	                                          var $269 = _llvm_bswap_i32($268);
	                                          HEAP32[$267 >> 2] = $269;
	                                          var $270 = $i_227 + 1 | 0;
	                                          var $271 = HEAP32[$56$s2];
	                                          var $273 = HEAP32[$259$s2];
	                                          if (($270 | 0) >= ($271 | 0)) {
	                                            var $_lcssa = $273;
	                                            var $280 = $271;
	                                            break $_$124;
	                                          }
	                                          var $i_227 = $270;
	                                          var $262 = $273;
	                                        }
	                                      } else {
	                                        var $_lcssa = $257;
	                                        var $280 = $260;
	                                      }
	                                    } while (0);
	                                    var $280;
	                                    var $_lcssa;
	                                    var $281 = $_lcssa + $280 * 12 | 0;
	                                    var $282 = HEAP32[$281 >> 2];
	                                    var $283 = _llvm_bswap_i32($282);
	                                    HEAP32[$281 >> 2] = $283;
	                                    var $286 = $259, $286$s2 = $286 >> 2;
	                                    var $285 = $281, $285$s2 = $285 >> 2;
	                                  } else {
	                                    var $275 = ($227 << 3) + $224 | 0;
	                                    var $277 = $41 + 56 | 0;
	                                    HEAP32[$277 >> 2] = $275;
	                                    var $286 = $277, $286$s2 = $286 >> 2;
	                                    var $285 = $275 + HEAP32[$56$s2] * 12 | 0, $285$s2 = $285 >> 2;
	                                  }
	                                  var $285;
	                                  var $286;
	                                  var $287 = HEAP32[$111$s2];
	                                  var $288 = ___ckd_calloc__($287, 4, STRING_TABLE.__str129 | 0, 451);
	                                  var $289 = $288;
	                                  var $291$s2 = ($41 + 60 | 0) >> 2;
	                                  HEAP32[$291$s2] = $289;
	                                  HEAP32[$289 >> 2] = $285 + 4 | 0;
	                                  $_$130 : do {
	                                    if ($22) {
	                                      if ((HEAP32[$285$s2] | 0) <= 0) {
	                                        break;
	                                      }
	                                      var $i_324 = 0;
	                                      while (1) {
	                                        var $i_324;
	                                        var $298 = ($i_324 << 1) + HEAP32[HEAP32[$291$s2] >> 2] | 0;
	                                        var $299 = HEAP16[$298 >> 1];
	                                        var $300 = _llvm_bswap_i16($299);
	                                        HEAP16[$298 >> 1] = $300;
	                                        var $301 = $i_324 + 1 | 0;
	                                        if (($301 | 0) >= (HEAP32[$285$s2] | 0)) {
	                                          break $_$130;
	                                        }
	                                        var $i_324 = $301;
	                                      }
	                                    }
	                                  } while (0);
	                                  var $304 = HEAP32[$67$s2];
	                                  var $305 = ($304 | 0) == 0;
	                                  $_$135 : do {
	                                    if ($305) {
	                                      var $318 = HEAP32[$291$s2];
	                                      var $322 = (HEAP32[$285$s2] << 1) + HEAP32[$318 >> 2] | 0;
	                                      var $324 = $41 + 64 | 0;
	                                      HEAP32[$324 >> 2] = $322;
	                                      if ((HEAP32[$111$s2] | 0) <= 1) {
	                                        break;
	                                      }
	                                      var $i_519 = 1;
	                                      var $328 = $318;
	                                      var $327 = $322;
	                                      while (1) {
	                                        var $327;
	                                        var $328;
	                                        var $i_519;
	                                        var $329 = $i_519 - 1 | 0;
	                                        var $335 = ((HEAPU8[$327 + $329 | 0] & 255) << 1) + HEAP32[$328 + ($329 << 2) >> 2] | 0;
	                                        HEAP32[$328 + ($i_519 << 2) >> 2] = $335;
	                                        var $337 = $i_519 + 1 | 0;
	                                        if (($337 | 0) >= (HEAP32[$111$s2] | 0)) {
	                                          break $_$135;
	                                        }
	                                        var $i_519 = $337;
	                                        var $328 = HEAP32[$291$s2];
	                                        var $327 = HEAP32[$324 >> 2];
	                                      }
	                                    } else {
	                                      if ((HEAP32[$111$s2] | 0) <= 1) {
	                                        break;
	                                      }
	                                      var $i_45 = 1;
	                                      var $308 = $304;
	                                      while (1) {
	                                        var $308;
	                                        var $i_45;
	                                        var $309 = HEAP32[$291$s2];
	                                        var $312 = ($308 * $i_45 << 1) + HEAP32[$309 >> 2] | 0;
	                                        var $313 = ($i_45 << 2) + $309 | 0;
	                                        HEAP32[$313 >> 2] = $312;
	                                        var $314 = $i_45 + 1 | 0;
	                                        if (($314 | 0) >= (HEAP32[$111$s2] | 0)) {
	                                          break $_$135;
	                                        }
	                                        var $i_45 = $314;
	                                        var $308 = HEAP32[$67$s2];
	                                      }
	                                    }
	                                  } while (0);
	                                  var $341 = HEAP32[$89$s2] << 1;
	                                  var $342 = ___ckd_malloc__($341, STRING_TABLE.__str129 | 0, 471);
	                                  var $343 = $342;
	                                  var $345$s2 = ($41 + 68 | 0) >> 2;
	                                  HEAP32[$345$s2] = $343;
	                                  var $347 = HEAP32[$89$s2] << 1;
	                                  var $348 = ___ckd_malloc__($347, STRING_TABLE.__str129 | 0, 472);
	                                  var $349 = $348;
	                                  var $351$s2 = ($41 + 72 | 0) >> 2;
	                                  HEAP32[$351$s2] = $349;
	                                  var $353 = (HEAP32[$78$s2] | 0) > 0;
	                                  $_$145 : do {
	                                    if ($353) {
	                                      var $i_615 = 0;
	                                      while (1) {
	                                        var $i_615;
	                                        HEAP16[HEAP32[$345$s2] + ($i_615 << 1) >> 1] = $i_615 & 65535;
	                                        var $359 = $i_615 + 1 | 0;
	                                        if (($359 | 0) >= (HEAP32[$78$s2] | 0)) {
	                                          var $i_6_lcssa = $359;
	                                          break $_$145;
	                                        }
	                                        var $i_615 = $359;
	                                      }
	                                    } else {
	                                      var $i_6_lcssa = 0;
	                                    }
	                                  } while (0);
	                                  var $i_6_lcssa;
	                                  var $354 = HEAP32[$89$s2];
	                                  var $355 = ($i_6_lcssa | 0) < ($354 | 0);
	                                  $_$149 : do {
	                                    if ($355) {
	                                      var $i_713 = $i_6_lcssa;
	                                      while (1) {
	                                        var $i_713;
	                                        HEAP16[HEAP32[$345$s2] + ($i_713 << 1) >> 1] = -1;
	                                        var $366 = $i_713 + 1 | 0;
	                                        var $367 = HEAP32[$89$s2];
	                                        if (($366 | 0) >= ($367 | 0)) {
	                                          var $362 = $367;
	                                          break $_$149;
	                                        }
	                                        var $i_713 = $366;
	                                      }
	                                    } else {
	                                      var $362 = $354;
	                                    }
	                                  } while (0);
	                                  var $362;
	                                  var $363 = ($362 | 0) > 0;
	                                  $_$153 : do {
	                                    if ($363) {
	                                      var $i_810 = 0;
	                                      while (1) {
	                                        var $i_810;
	                                        HEAP16[HEAP32[$351$s2] + ($i_810 << 1) >> 1] = -1;
	                                        var $375 = $i_810 + 1 | 0;
	                                        if (($375 | 0) >= (HEAP32[$89$s2] | 0)) {
	                                          break $_$153;
	                                        }
	                                        var $i_810 = $375;
	                                      }
	                                    }
	                                  } while (0);
	                                  var $370 = (HEAP32[$56$s2] | 0) > 0;
	                                  $_$157 : do {
	                                    if ($370) {
	                                      var $372 = $41 + 64 | 0;
	                                      var $i_97 = 0;
	                                      while (1) {
	                                        var $i_97;
	                                        var $379 = HEAP32[$286$s2] + $i_97 * 12 | 0;
	                                        var $380 = HEAPU8[$379] | HEAPU8[$379 + 1] << 8 | HEAPU8[$379 + 2] << 16 | HEAPU8[$379 + 3] << 24 | 0;
	                                        var $j_0 = 0;
	                                        while (1) {
	                                          var $j_0;
	                                          var $382 = HEAPU32[$67$s2];
	                                          if (($382 | 0) == 0) {
	                                            var $386 = HEAP32[$286$s2] + $i_97 * 12 | 0;
	                                            var $393 = HEAPU8[HEAP32[$372 >> 2] + (HEAPU8[$386] | HEAPU8[$386 + 1] << 8 | HEAPU8[$386 + 2] << 16 | HEAPU8[$386 + 3] << 24) | 0] & 255;
	                                          } else {
	                                            var $393 = $382;
	                                          }
	                                          var $393;
	                                          if (($j_0 | 0) >= ($393 | 0)) {
	                                            break;
	                                          }
	                                          var $401 = HEAPU16[HEAP32[HEAP32[$291$s2] + ($380 << 2) >> 2] + ($j_0 << 1) >> 1] & 65535;
	                                          if (($i_97 | 0) < (HEAP32[$45$s2] | 0)) {
	                                            var $409 = $i_97;
	                                          } else {
	                                            var $409 = HEAP8[HEAP32[$286$s2] + $i_97 * 12 + 9 | 0] << 24 >> 24;
	                                          }
	                                          var $409;
	                                          var $411 = ($401 << 1) + HEAP32[$351$s2] | 0;
	                                          var $412 = HEAP16[$411 >> 1];
	                                          if ($412 << 16 >> 16 == -1) {
	                                            HEAP16[$411 >> 1] = $409 & 65535;
	                                            var $417 = HEAP16[HEAP32[$351$s2] + ($401 << 1) >> 1];
	                                          } else {
	                                            var $417 = $412;
	                                          }
	                                          var $417;
	                                          if (($417 << 16 >> 16 | 0) != ($409 | 0)) {
	                                            __E__pr_header(STRING_TABLE.__str129 | 0, 491, STRING_TABLE.__str212436 | 0);
	                                            __E__pr_warn(STRING_TABLE.__str31160 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $401, tempInt));
	                                          }
	                                          var $421 = HEAPU32[$67$s2];
	                                          if (($421 | 0) == 0) {
	                                            var $425 = HEAP32[$286$s2] + $409 * 12 | 0;
	                                            var $432 = HEAPU8[HEAP32[$372 >> 2] + (HEAPU8[$425] | HEAPU8[$425 + 1] << 8 | HEAPU8[$425 + 2] << 16 | HEAPU8[$425 + 3] << 24) | 0] & 255;
	                                          } else {
	                                            var $432 = $421;
	                                          }
	                                          var $432;
	                                          if (($j_0 | 0) > ($432 | 0)) {
	                                            __E__pr_header(STRING_TABLE.__str129 | 0, 496, STRING_TABLE.__str212436 | 0);
	                                            __E__pr_warn(STRING_TABLE.__str32161 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $i_97, HEAP32[tempInt + 4 >> 2] = $409, tempInt));
	                                          } else {
	                                            var $437 = HEAP32[$286$s2] + $409 * 12 | 0;
	                                            var $443 = HEAP16[HEAP32[HEAP32[$291$s2] + ((HEAPU8[$437] | HEAPU8[$437 + 1] << 8 | HEAPU8[$437 + 2] << 16 | HEAPU8[$437 + 3] << 24) << 2) >> 2] + ($j_0 << 1) >> 1];
	                                            HEAP16[HEAP32[$345$s2] + ($401 << 1) >> 1] = $443;
	                                          }
	                                          var $j_0 = $j_0 + 1 | 0;
	                                        }
	                                        var $449 = $i_97 + 1 | 0;
	                                        if (($449 | 0) >= (HEAP32[$56$s2] | 0)) {
	                                          break $_$157;
	                                        }
	                                        var $i_97 = $449;
	                                      }
	                                    }
	                                  } while (0);
	                                  var $452 = _bin_mdef_ciphone_id($42, STRING_TABLE.__str43450 | 0);
	                                  HEAP16[$144$s1] = $452 & 65535;
	                                  __E__pr_info_header(STRING_TABLE.__str129 | 0, 507);
	                                  var $454 = HEAP32[$45$s2];
	                                  var $456 = HEAP32[$56$s2] - $454 | 0;
	                                  var $457 = HEAP32[$67$s2];
	                                  var $458 = HEAP32[$78$s2];
	                                  var $459 = HEAP32[$89$s2];
	                                  var $460 = HEAP32[$111$s2];
	                                  __E__pr_info(STRING_TABLE.__str49456 | 0, (tempInt = STACKTOP, STACKTOP += 24, HEAP32[tempInt >> 2] = $454, HEAP32[tempInt + 4 >> 2] = $456, HEAP32[tempInt + 8 >> 2] = $457, HEAP32[tempInt + 12 >> 2] = $458, HEAP32[tempInt + 16 >> 2] = $459, HEAP32[tempInt + 20 >> 2] = $460, tempInt));
	                                  var $461 = _fclose($4);
	                                  var $_0 = $42;
	                                } else {
	                                  var $148 = _fclose($4);
	                                  _ckd_free($41);
	                                  __E__pr_header(STRING_TABLE.__str129 | 0, 391, STRING_TABLE.__str232533 | 0);
	                                  __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str25154 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                                  var $_0 = 0;
	                                }
	                              } else {
	                                var $137 = _fclose($4);
	                                _ckd_free($41);
	                                __E__pr_header(STRING_TABLE.__str129 | 0, 390, STRING_TABLE.__str232533 | 0);
	                                __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str24153 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                                var $_0 = 0;
	                              }
	                            } else {
	                              var $126 = _fclose($4);
	                              _ckd_free($41);
	                              __E__pr_header(STRING_TABLE.__str129 | 0, 389, STRING_TABLE.__str232533 | 0);
	                              __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str23152 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                              var $_0 = 0;
	                            }
	                          } else {
	                            var $115 = _fclose($4);
	                            _ckd_free($41);
	                            __E__pr_header(STRING_TABLE.__str129 | 0, 388, STRING_TABLE.__str232533 | 0);
	                            __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str22151 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                            var $_0 = 0;
	                          }
	                        } else {
	                          var $104 = _fclose($4);
	                          _ckd_free($41);
	                          __E__pr_header(STRING_TABLE.__str129 | 0, 387, STRING_TABLE.__str232533 | 0);
	                          __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str21150 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                          var $_0 = 0;
	                        }
	                      } else {
	                        var $93 = _fclose($4);
	                        _ckd_free($41);
	                        __E__pr_header(STRING_TABLE.__str129 | 0, 386, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str20149 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                        var $_0 = 0;
	                      }
	                    } else {
	                      var $82 = _fclose($4);
	                      _ckd_free($41);
	                      __E__pr_header(STRING_TABLE.__str129 | 0, 385, STRING_TABLE.__str232533 | 0);
	                      __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str19148 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                      var $_0 = 0;
	                    }
	                  } else {
	                    var $71 = _fclose($4);
	                    _ckd_free($41);
	                    __E__pr_header(STRING_TABLE.__str129 | 0, 384, STRING_TABLE.__str232533 | 0);
	                    __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str18147 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                    var $_0 = 0;
	                  }
	                } else {
	                  var $60 = _fclose($4);
	                  _ckd_free($41);
	                  __E__pr_header(STRING_TABLE.__str129 | 0, 383, STRING_TABLE.__str232533 | 0);
	                  __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str17146 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                  var $_0 = 0;
	                }
	              } else {
	                var $49 = _fclose($4);
	                _ckd_free($41);
	                __E__pr_header(STRING_TABLE.__str129 | 0, 382, STRING_TABLE.__str232533 | 0);
	                __E__sys_error(STRING_TABLE.__str15144 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str16145 | 0, HEAP32[tempInt + 4 >> 2] = $filename, tempInt));
	                var $_0 = 0;
	              }
	            } else {
	              var $34 = _fclose($4);
	              __E__pr_header(STRING_TABLE.__str129 | 0, 360, STRING_TABLE.__str232533 | 0);
	              __E__sys_error(STRING_TABLE.__str14143 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	              var $_0 = 0;
	            }
	          }
	        } else {
	          var $20 = _fclose($4);
	          __E__pr_header(STRING_TABLE.__str129 | 0, 347, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str12141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	          var $_0 = 0;
	        }
	      } else {
	        var $11 = _fclose($4);
	        __E__pr_header(STRING_TABLE.__str129 | 0, 336, STRING_TABLE.__str232533 | 0);
	        __E__sys_error(STRING_TABLE.__str10139 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	        var $_0 = 0;
	      }
	    } else {
	      var $_0 = $1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_bin_mdef_read["X"] = 1;

	function _bin_mdef_ciphone_id_nocase($m, $ciphone) {
	  var $3 = $m + 48 | 0;
	  var $high_0 = HEAP32[$m + 4 >> 2];
	  var $low_0 = 0;
	  while (1) {
	    var $low_0;
	    var $high_0;
	    if (($low_0 | 0) >= ($high_0 | 0)) {
	      var $_0 = -1;
	      break;
	    }
	    var $8 = ($high_0 + $low_0 | 0) / 2 & -1;
	    var $11 = HEAP32[HEAP32[$3 >> 2] + ($8 << 2) >> 2];
	    var $12 = _strcmp_nocase($ciphone, $11);
	    if (($12 | 0) == 0) {
	      var $_0 = $8;
	      break;
	    }
	    var $15 = ($12 | 0) > 0;
	    var $_low_0 = $15 ? $8 + 1 | 0 : $low_0;
	    var $high_0_ = $15 ? $high_0 : $8;
	    var $high_0 = $high_0_;
	    var $low_0 = $_low_0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _bin_mdef_phone_id($m, $ci, $lc, $rc, $wpos) {
	  var $ctx$s1;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $ctx = __stackBase__, $ctx$s1 = $ctx >> 1;
	  if (($m | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str129 | 0, 745, STRING_TABLE.___func___bin_mdef_phone_id | 0, STRING_TABLE.__str1408 | 0);
	  }
	  var $5 = ($rc | $lc | 0) < 0;
	  $_$11 : do {
	    if ($5) {
	      var $_0 = $ci;
	    } else {
	      var $7 = ($ci | 0) > -1;
	      do {
	        if ($7) {
	          if ((HEAP32[$m + 4 >> 2] | 0) > ($ci | 0)) {
	            __label__ = 8;
	            break;
	          }
	          __label__ = 7;
	          break;
	        } else {
	          __label__ = 7;
	        }
	      } while (0);
	      if (__label__ == 7) {
	        ___assert_func(STRING_TABLE.__str129 | 0, 752, STRING_TABLE.___func___bin_mdef_phone_id | 0, STRING_TABLE.__str7414 | 0);
	      }
	      var $14 = ($lc | 0) > -1;
	      do {
	        if ($14) {
	          if ((HEAP32[$m + 4 >> 2] | 0) > ($lc | 0)) {
	            __label__ = 11;
	            break;
	          }
	          __label__ = 10;
	          break;
	        } else {
	          __label__ = 10;
	        }
	      } while (0);
	      if (__label__ == 10) {
	        ___assert_func(STRING_TABLE.__str129 | 0, 753, STRING_TABLE.___func___bin_mdef_phone_id | 0, STRING_TABLE.__str8415 | 0);
	      }
	      var $21 = ($rc | 0) > -1;
	      do {
	        if ($21) {
	          if ((HEAP32[$m + 4 >> 2] | 0) > ($rc | 0)) {
	            __label__ = 14;
	            break;
	          }
	          __label__ = 13;
	          break;
	        } else {
	          __label__ = 13;
	        }
	      } while (0);
	      if (__label__ == 13) {
	        ___assert_func(STRING_TABLE.__str129 | 0, 754, STRING_TABLE.___func___bin_mdef_phone_id | 0, STRING_TABLE.__str9416 | 0);
	      }
	      if ($wpos >>> 0 >= 4) {
	        ___assert_func(STRING_TABLE.__str129 | 0, 755, STRING_TABLE.___func___bin_mdef_phone_id | 0, STRING_TABLE.__str10417 | 0);
	      }
	      HEAP16[$ctx$s1] = $wpos & 65535;
	      HEAP16[$ctx$s1 + 1] = $ci & 65535;
	      var $36 = HEAPU16[$m + 40 >> 1];
	      var $37 = $36 << 16 >> 16 > -1;
	      do {
	        if (!$37) {
	          HEAP16[$ctx$s1 + 2] = $lc & 65535;
	          __label__ = 22;
	          break;
	        }
	        var $40 = HEAPU32[$m + 56 >> 2];
	        if (HEAP8[$40 + $lc * 12 + 8 | 0] << 24 >> 24 == 0) {
	          HEAP16[$ctx$s1 + 2] = $lc & 65535;
	        } else {
	          HEAP16[$ctx$s1 + 2] = $36;
	        }
	        var $51 = $36 << 16 >> 16;
	        if (HEAP8[$40 + $rc * 12 + 8 | 0] << 24 >> 24 == 0) {
	          __label__ = 22;
	          break;
	        }
	        var $57 = $51;
	        __label__ = 23;
	        break;
	      } while (0);
	      if (__label__ == 22) {
	        var $57 = $rc;
	      }
	      var $57;
	      HEAP16[$ctx$s1 + 3] = $57 & 65535;
	      var $61 = HEAP32[$m + 52 >> 2];
	      var $max_0 = 4;
	      var $level_0 = 0;
	      var $cd_tree_0 = $61;
	      while (1) {
	        var $cd_tree_0;
	        var $level_0;
	        var $max_0;
	        if (($level_0 | 0) >= 4) {
	          var $_0 = -1;
	          break $_$11;
	        }
	        var $64 = ($level_0 << 1) + $ctx | 0;
	        var $i_0 = 0;
	        while (1) {
	          var $i_0;
	          if (($i_0 | 0) >= ($max_0 | 0)) {
	            break;
	          }
	          if (HEAP16[$cd_tree_0 + ($i_0 << 3) >> 1] << 16 >> 16 == HEAP16[$64 >> 1] << 16 >> 16) {
	            break;
	          }
	          var $i_0 = $i_0 + 1 | 0;
	        }
	        if (($i_0 | 0) == ($max_0 | 0)) {
	          var $_0 = -1;
	          break $_$11;
	        }
	        var $77 = HEAP16[$cd_tree_0 + ($i_0 << 3) + 2 >> 1];
	        if ($77 << 16 >> 16 == 0) {
	          break;
	        }
	        var $max_0 = $77 << 16 >> 16;
	        var $level_0 = $level_0 + 1 | 0;
	        var $cd_tree_0 = (HEAP32[$cd_tree_0 + ($i_0 << 3) + 4 >> 2] << 3) + $61 | 0;
	      }
	      var $_0 = HEAP32[$cd_tree_0 + ($i_0 << 3) + 4 >> 2];
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_bin_mdef_phone_id["X"] = 1;

	function _bin_mdef_phone_id_nearest($m, $b, $l, $r, $pos) {
	  var __label__;
	  var $2 = ($r | $l | 0) < 0;
	  $_$53 : do {
	    if ($2) {
	      var $_0 = $b;
	    } else {
	      var $4 = _bin_mdef_phone_id($m, $b, $l, $r, $pos);
	      if (($4 | 0) > -1) {
	        var $_0 = $4;
	        break;
	      }
	      var $tmppos_0 = 0;
	      while (1) {
	        var $tmppos_0;
	        if (($tmppos_0 | 0) >= 4) {
	          break;
	        }
	        if (($tmppos_0 | 0) != ($pos | 0)) {
	          var $10 = _bin_mdef_phone_id($m, $b, $l, $r, $tmppos_0);
	          if (($10 | 0) > -1) {
	            var $_0 = $10;
	            break $_$53;
	          }
	        }
	        var $tmppos_0 = $tmppos_0 + 1 | 0;
	      }
	      var $16 = HEAPU16[$m + 40 >> 1];
	      if ($16 << 16 >> 16 <= -1) {
	        var $_0 = $b;
	        break;
	      }
	      var $20 = HEAP32[$m + 56 >> 2];
	      var $23 = HEAP8[$20 + $l * 12 + 8 | 0] << 24 >> 24 == 0;
	      do {
	        if ($23) {
	          if (($pos | 0) == 3 || ($pos | 0) == 1) {
	            __label__ = 11;
	            break;
	          }
	          var $newl_0 = $l;
	          __label__ = 12;
	          break;
	        } else {
	          __label__ = 11;
	        }
	      } while (0);
	      if (__label__ == 11) {
	        var $newl_0 = $16 << 16 >> 16;
	      }
	      var $newl_0;
	      var $30 = HEAP8[$20 + $r * 12 + 8 | 0] << 24 >> 24 == 0;
	      do {
	        if ($30) {
	          if (($pos - 2 | 0) >>> 0 < 2) {
	            __label__ = 14;
	            break;
	          }
	          var $newr_0 = $r;
	          __label__ = 15;
	          break;
	        } else {
	          __label__ = 14;
	        }
	      } while (0);
	      if (__label__ == 14) {
	        var $newr_0 = $16 << 16 >> 16;
	      }
	      var $newr_0;
	      if (($newl_0 | 0) == ($l | 0) & ($newr_0 | 0) == ($r | 0)) {
	        var $_0 = $b;
	        break;
	      }
	      var $39 = _bin_mdef_phone_id($m, $b, $newl_0, $newr_0, $pos);
	      if (($39 | 0) > -1) {
	        var $_0 = $39;
	        break;
	      }
	      var $tmppos_1 = 0;
	      while (1) {
	        var $tmppos_1;
	        if (($tmppos_1 | 0) >= 4) {
	          var $_0 = $b;
	          break $_$53;
	        }
	        if (($tmppos_1 | 0) != ($pos | 0)) {
	          var $45 = _bin_mdef_phone_id($m, $b, $newl_0, $newr_0, $tmppos_1);
	          if (($45 | 0) > -1) {
	            var $_0 = $45;
	            break $_$53;
	          }
	        }
	        var $tmppos_1 = $tmppos_1 + 1 | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_bin_mdef_phone_id_nearest["X"] = 1;

	function __blkarray_list_init() {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 24, STRING_TABLE.__str206 | 0, 70), $1$s2 = $1 >> 2;
	  var $2 = ___ckd_calloc__(16380, 4, STRING_TABLE.__str206 | 0, 71);
	  HEAP32[$1$s2] = $2;
	  HEAP32[$1$s2 + 1] = 16380;
	  HEAP32[$1$s2 + 2] = 16380;
	  HEAP32[$1$s2 + 3] = 0;
	  HEAP32[$1$s2 + 4] = -1;
	  HEAP32[$1$s2 + 5] = 16380;
	  return $1;
	  return null;
	}

	function _blkarray_list_init() {
	  var $1 = __blkarray_list_init();
	  return $1;
	  return null;
	}

	function _blkarray_list_free($bl) {
	  _blkarray_list_reset($bl);
	  var $3 = HEAP32[$bl >> 2];
	  _ckd_free($3);
	  var $4 = $bl;
	  _ckd_free($4);
	  return;
	  return;
	}

	function _blkarray_list_reset($bl) {
	  var $30$s2;
	  var $27$s2;
	  var $5$s2;
	  var $1$s2;
	  var $1$s2 = ($bl + 16 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = ($2 | 0) > 0;
	  $_$85 : do {
	    if ($3) {
	      var $4 = $bl + 8 | 0;
	      var $5$s2 = ($bl | 0) >> 2;
	      var $i_014 = 0;
	      while (1) {
	        var $i_014;
	        var $7 = (HEAP32[$4 >> 2] | 0) > 0;
	        var $10 = HEAP32[HEAP32[$5$s2] + ($i_014 << 2) >> 2];
	        $_$89 : do {
	          if ($7) {
	            var $j_07 = 0;
	            var $11 = $10;
	            while (1) {
	              var $11;
	              var $j_07;
	              var $13 = HEAP32[$11 + ($j_07 << 2) >> 2];
	              _ckd_free($13);
	              var $14 = $j_07 + 1 | 0;
	              var $19 = HEAP32[HEAP32[$5$s2] + ($i_014 << 2) >> 2];
	              if (($14 | 0) >= (HEAP32[$4 >> 2] | 0)) {
	                var $_lcssa6 = $19;
	                break $_$89;
	              }
	              var $j_07 = $14;
	              var $11 = $19;
	            }
	          } else {
	            var $_lcssa6 = $10;
	          }
	        } while (0);
	        var $_lcssa6;
	        _ckd_free($_lcssa6);
	        var $22 = ($i_014 << 2) + HEAP32[$5$s2] | 0;
	        HEAP32[$22 >> 2] = 0;
	        var $23 = $i_014 + 1 | 0;
	        var $24 = HEAP32[$1$s2];
	        if (($23 | 0) >= ($24 | 0)) {
	          var $i_0_lcssa = $23;
	          var $_lcssa13 = $24;
	          break $_$85;
	        }
	        var $i_014 = $23;
	      }
	    } else {
	      var $i_0_lcssa = 0;
	      var $_lcssa13 = $2;
	    }
	  } while (0);
	  var $_lcssa13;
	  var $i_0_lcssa;
	  var $27$s2 = ($bl + 20 | 0) >> 2;
	  if (($i_0_lcssa | 0) == ($_lcssa13 | 0)) {
	    var $29 = (HEAP32[$27$s2] | 0) > 0;
	    var $30$s2 = ($bl | 0) >> 2;
	    var $33 = HEAP32[HEAP32[$30$s2] + ($_lcssa13 << 2) >> 2];
	    $_$96 : do {
	      if ($29) {
	        var $j_12 = 0;
	        var $34 = $33;
	        while (1) {
	          var $34;
	          var $j_12;
	          var $36 = HEAP32[$34 + ($j_12 << 2) >> 2];
	          _ckd_free($36);
	          var $37 = $j_12 + 1 | 0;
	          var $42 = HEAP32[HEAP32[$30$s2] + ($_lcssa13 << 2) >> 2];
	          if (($37 | 0) >= (HEAP32[$27$s2] | 0)) {
	            var $_lcssa1 = $42;
	            break $_$96;
	          }
	          var $j_12 = $37;
	          var $34 = $42;
	        }
	      } else {
	        var $_lcssa1 = $33;
	      }
	    } while (0);
	    var $_lcssa1;
	    _ckd_free($_lcssa1);
	    var $45 = ($_lcssa13 << 2) + HEAP32[$30$s2] | 0;
	    HEAP32[$45 >> 2] = 0;
	  }
	  HEAP32[$bl + 12 >> 2] = 0;
	  HEAP32[$1$s2] = -1;
	  var $48 = HEAP32[$bl + 8 >> 2];
	  HEAP32[$27$s2] = $48;
	  return;
	  return;
	}

	_blkarray_list_reset["X"] = 1;

	function _blkarray_list_append($bl, $data) {
	  var $_pre1$s2;
	  var $6$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  if (($bl | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str206 | 0, 103, STRING_TABLE.___func___blkarray_list_append | 0, STRING_TABLE.__str3209 | 0);
	  }
	  var $4$s2 = ($bl + 20 | 0) >> 2;
	  var $5 = HEAP32[$4$s2];
	  var $6$s2 = ($bl + 8 | 0) >> 2;
	  var $7 = HEAP32[$6$s2];
	  var $8 = ($5 | 0) < ($7 | 0);
	  var $_pre1$s2 = ($bl + 16 | 0) >> 2;
	  do {
	    if ($8) {
	      var $35 = $5;
	      var $_pre_phi3 = $bl | 0;
	      __label__ = 11;
	      break;
	    }
	    var $11 = HEAP32[$_pre1$s2] + 1 | 0;
	    HEAP32[$_pre1$s2] = $11;
	    var $12 = $bl + 4 | 0;
	    if (($11 | 0) < (HEAP32[$12 >> 2] | 0)) {
	      var $21 = $bl | 0;
	      if ((HEAP32[HEAP32[$21 >> 2] + ($11 << 2) >> 2] | 0) == 0) {
	        var $28 = $7;
	      } else {
	        ___assert_func(STRING_TABLE.__str206 | 0, 117, STRING_TABLE.___func___blkarray_list_append | 0, STRING_TABLE.__str5211 | 0);
	        var $28 = HEAP32[$6$s2];
	      }
	      var $28;
	      var $29 = ___ckd_calloc__($28, 4, STRING_TABLE.__str206 | 0, 119);
	      var $33 = (HEAP32[$_pre1$s2] << 2) + HEAP32[$21 >> 2] | 0;
	      HEAP32[$33 >> 2] = $29;
	      HEAP32[$4$s2] = 0;
	      var $35 = 0;
	      var $_pre_phi3 = $21;
	      __label__ = 11;
	      break;
	    }
	    __E__pr_header(STRING_TABLE.__str206 | 0, 110, STRING_TABLE.__str102579 | 0);
	    var $16 = HEAP32[$12 >> 2];
	    var $17 = HEAP32[$6$s2];
	    __E__pr_warn(STRING_TABLE.__str4210 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $16, HEAP32[tempInt + 4 >> 2] = $17, tempInt));
	    var $19 = HEAP32[$_pre1$s2] - 1 | 0;
	    HEAP32[$_pre1$s2] = $19;
	    __label__ = 13;
	    break;
	  } while (0);
	  do {
	    if (__label__ == 11) {
	      var $_pre_phi3;
	      var $35;
	      var $40 = ($35 << 2) + HEAP32[HEAP32[$_pre_phi3 >> 2] + (HEAP32[$_pre1$s2] << 2) >> 2] | 0;
	      HEAP32[$40 >> 2] = $data;
	      var $42 = HEAP32[$4$s2] + 1 | 0;
	      HEAP32[$4$s2] = $42;
	      var $43 = $bl + 12 | 0;
	      var $44 = HEAP32[$43 >> 2];
	      var $45 = $44 + 1 | 0;
	      HEAP32[$43 >> 2] = $45;
	      if (($44 | 0) > -1) {
	        break;
	      }
	      ___assert_func(STRING_TABLE.__str206 | 0, 128, STRING_TABLE.___func___blkarray_list_append | 0, STRING_TABLE.__str6212 | 0);
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_blkarray_list_append["X"] = 1;

	function _dict_add_word($d, $word, $p, $np) {
	  var $25$s2;
	  var $23$s2;
	  var $22$s2;
	  var $3$s2;
	  var $1$s2;
	  var $w$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $w = __stackBase__, $w$s2 = $w >> 2;
	  var $1$s2 = ($d + 20 | 0) >> 2;
	  var $2 = HEAPU32[$1$s2];
	  var $3$s2 = ($d + 16 | 0) >> 2;
	  var $5 = ($2 | 0) < (HEAP32[$3$s2] | 0);
	  do {
	    if ($5) {
	      var $22$s2 = ($d + 8 | 0) >> 2;
	      var $23 = HEAPU32[$22$s2], $23$s2 = $23 >> 2;
	      var $24 = ___ckd_salloc__($word, STRING_TABLE.__str213 | 0, 99);
	      var $25$s2 = ($23 + $2 * 20 | 0) >> 2;
	      HEAP32[$25$s2] = $24;
	      var $26 = $d + 12 | 0;
	      var $27 = HEAP32[$26 >> 2];
	      var $29 = HEAP32[$1$s2];
	      var $30 = _hash_table_enter($27, $24, $29);
	      if (($30 | 0) == (HEAP32[$1$s2] | 0)) {
	        if (($p | 0) != 0 & ($np | 0) > 0) {
	          var $40 = $np << 1;
	          var $41 = ___ckd_malloc__($40, STRING_TABLE.__str213 | 0, 110);
	          HEAP32[$23$s2 + ($2 * 5 | 0) + 1] = $41;
	          var $44 = $p;
	          _memcpy($41, $44, $40, 2);
	          HEAP32[$23$s2 + ($2 * 5 | 0) + 2] = $np;
	        } else {
	          HEAP32[$23$s2 + ($2 * 5 | 0) + 1] = 0;
	          HEAP32[$23$s2 + ($2 * 5 | 0) + 2] = 0;
	        }
	        var $50 = $23 + $2 * 20 + 12 | 0;
	        HEAP32[$50 >> 2] = -1;
	        var $51 = HEAP32[$1$s2];
	        var $52 = $23 + $2 * 20 + 16 | 0;
	        HEAP32[$52 >> 2] = $51;
	        var $53 = ___ckd_salloc__($word, STRING_TABLE.__str213 | 0, 122);
	        var $54 = _dict_word2basestr($53);
	        if (($54 | 0) > 0) {
	          var $57 = HEAP32[$26 >> 2];
	          var $58 = _hash_table_lookup_int32($57, $53, $w);
	          if (($58 | 0) < 0) {
	            __E__pr_header(STRING_TABLE.__str213 | 0, 128, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str7220 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $word, tempInt));
	            _ckd_free($53);
	            var $61 = HEAP32[$25$s2];
	            _ckd_free($61);
	            HEAP32[$25$s2] = 0;
	            var $_0 = -1;
	            break;
	          }
	          var $63 = HEAP32[$w$s2];
	          HEAP32[$52 >> 2] = $63;
	          var $67 = HEAP32[(HEAP32[$22$s2] + 12 >> 2) + (HEAP32[$w$s2] * 5 | 0)];
	          HEAP32[$50 >> 2] = $67;
	          var $68 = HEAP32[$1$s2];
	          var $71 = HEAP32[$22$s2] + HEAP32[$w$s2] * 20 + 12 | 0;
	          HEAP32[$71 >> 2] = $68;
	        }
	        _ckd_free($53);
	        var $73 = HEAP32[$1$s2];
	        var $74 = $73 + 1 | 0;
	        HEAP32[$1$s2] = $74;
	        var $_0 = $73;
	      } else {
	        var $35 = HEAP32[$25$s2];
	        _ckd_free($35);
	        HEAP32[$25$s2] = 0;
	        var $_0 = -1;
	      }
	    } else {
	      __E__pr_info_header(STRING_TABLE.__str213 | 0, 88);
	      var $10 = (HEAP32[$3$s2] * 20 + 81920 | 0) >>> 10;
	      __E__pr_info(STRING_TABLE.__str5218 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $10, tempInt));
	      var $11 = $d + 8 | 0;
	      var $13 = HEAP32[$11 >> 2];
	      var $16 = HEAP32[$3$s2] * 20 + 81920 | 0;
	      var $17 = ___ckd_realloc__($13, $16, STRING_TABLE.__str213 | 0, 93);
	      var $18 = $17;
	      HEAP32[$11 >> 2] = $18;
	      var $20 = HEAP32[$3$s2] + 4096 | 0;
	      HEAP32[$3$s2] = $20;
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_dict_add_word["X"] = 1;

	function _dict_word2basestr($word) {
	  var $1 = _strlen($word);
	  var $5 = HEAP8[$word + ($1 - 1) | 0] << 24 >> 24 == 41;
	  $_$137 : do {
	    if ($5) {
	      var $i_0 = $1 - 2 | 0;
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) <= 0) {
	          var $_0 = -1;
	          break $_$137;
	        }
	        var $11 = $word + $i_0 | 0;
	        if (HEAP8[$11] << 24 >> 24 == 40) {
	          break;
	        }
	        var $i_0 = $i_0 - 1 | 0;
	      }
	      HEAP8[$11] = 0;
	      var $_0 = $i_0;
	    } else {
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _dict_real_word($d, $w) {
	  var $d$s2 = $d >> 2;
	  var __label__;
	  if (($d | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 398, STRING_TABLE.___func___dict_real_word | 0, STRING_TABLE.__str29242 | 0);
	  }
	  var $4 = ($w | 0) > -1;
	  do {
	    if ($4) {
	      if ((HEAP32[$d$s2 + 5] | 0) > ($w | 0)) {
	        __label__ = 7;
	        break;
	      }
	      __label__ = 6;
	      break;
	    } else {
	      __label__ = 6;
	    }
	  } while (0);
	  if (__label__ == 6) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 399, STRING_TABLE.___func___dict_real_word | 0, STRING_TABLE.__str31244 | 0);
	  }
	  var $14 = HEAP32[(HEAP32[$d$s2 + 2] + 16 >> 2) + ($w * 5 | 0)];
	  var $17 = ($14 | 0) == (HEAP32[$d$s2 + 8] | 0);
	  do {
	    if ($17) {
	      var $_0 = 0;
	    } else {
	      if (($14 | 0) == (HEAP32[$d$s2 + 9] | 0)) {
	        var $_0 = 0;
	        break;
	      }
	      if (($14 | 0) >= (HEAP32[$d$s2 + 6] | 0)) {
	        if (($14 | 0) <= (HEAP32[$d$s2 + 7] | 0)) {
	          var $_0 = 0;
	          break;
	        }
	      }
	      var $_0 = 1;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _dict_retain($d) {
	  var $1 = $d | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return $d;
	  return null;
	}

	function _compress_table($uncomp_tab, $com_tab, $ci_map, $n_ci) {
	  var $1 = ($n_ci | 0) > 0;
	  $_$136 : do {
	    if ($1) {
	      var $r_05 = 0;
	      while (1) {
	        var $r_05;
	        HEAP16[$com_tab + ($r_05 << 1) >> 1] = -1;
	        HEAP16[$ci_map + ($r_05 << 1) >> 1] = -1;
	        var $4 = $r_05 + 1 | 0;
	        if (($4 | 0) == ($n_ci | 0)) {
	          var $r_14 = 0;
	          break;
	        }
	        var $r_05 = $4;
	      }
	      while (1) {
	        var $r_14;
	        var $5 = ($r_14 << 1) + $uncomp_tab | 0;
	        var $tmp_r_0 = 0;
	        $_$141 : while (1) {
	          var $tmp_r_0;
	          var $7 = ($tmp_r_0 | 0) < ($r_14 | 0);
	          var $8 = ($tmp_r_0 << 1) + $com_tab | 0;
	          do {
	            if ($7) {
	              var $10 = HEAP16[$8 >> 1];
	              if ($10 << 16 >> 16 == -1) {
	                break;
	              }
	              if (HEAP16[$5 >> 1] << 16 >> 16 != $10 << 16 >> 16) {
	                var $tmp_r_0 = $tmp_r_0 + 1 | 0;
	                continue $_$141;
	              }
	              HEAP16[$ci_map + ($r_14 << 1) >> 1] = $tmp_r_0 & 65535;
	              break $_$141;
	            }
	          } while (0);
	          var $18 = HEAP16[$5 >> 1];
	          HEAP16[$8 >> 1] = $18;
	          HEAP16[$ci_map + ($r_14 << 1) >> 1] = $tmp_r_0 & 65535;
	          break;
	        }
	        var $22 = $r_14 + 1 | 0;
	        if (($22 | 0) == ($n_ci | 0)) {
	          break $_$136;
	        }
	        var $r_14 = $22;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _dict_read($fp, $d) {
	  var $wptr_1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(516, 2, STRING_TABLE.__str213 | 0, 160);
	  var $2 = $1;
	  var $3 = ___ckd_calloc__(512, 4, STRING_TABLE.__str213 | 0, 161);
	  var $4 = $3;
	  var $5 = _lineiter_start($fp);
	  var $6 = ($5 | 0) == 0;
	  $_$56 : do {
	    if ($6) {
	      var $p_0_lcssa = $2;
	      var $wptr_0_lcssa = $4;
	      var $stralloc_0_lcssa = 0;
	      var $phnalloc_0_lcssa = 0;
	    } else {
	      var $d_idx = $d + 4 | 0;
	      var $d_idx1 = $d + 44 | 0;
	      var $7 = $d + 8 | 0;
	      var $maxwd_04 = 512;
	      var $lineno_05 = 1;
	      var $p_06 = $2;
	      var $wptr_07 = $4;
	      var $li_08 = $5;
	      var $stralloc_09 = 0;
	      var $phnalloc_010 = 0;
	      while (1) {
	        var $phnalloc_010;
	        var $stralloc_09;
	        var $li_08;
	        var $wptr_07;
	        var $p_06;
	        var $lineno_05;
	        var $maxwd_04;
	        var $9 = $li_08 | 0;
	        var $10 = HEAP32[$9 >> 2];
	        var $11 = _strncmp($10, STRING_TABLE.__str36249 | 0, 2);
	        var $12 = ($11 | 0) == 0;
	        do {
	          if ($12) {
	            var $phnalloc_1 = $phnalloc_010;
	            var $stralloc_1 = $stralloc_09;
	            var $wptr_2 = $wptr_07;
	            var $p_2 = $p_06;
	            var $maxwd_2 = $maxwd_04;
	          } else {
	            var $14 = _strncmp($10, STRING_TABLE.__str37250 | 0, 2);
	            if (($14 | 0) == 0) {
	              var $phnalloc_1 = $phnalloc_010;
	              var $stralloc_1 = $stralloc_09;
	              var $wptr_2 = $wptr_07;
	              var $p_2 = $p_06;
	              var $maxwd_2 = $maxwd_04;
	              break;
	            }
	            var $17 = _str2words($10, $wptr_07, $maxwd_04);
	            if (($17 | 0) < 0) {
	              var $20 = HEAP32[$9 >> 2];
	              var $21 = _str2words($20, 0, 0);
	              if (($21 | 0) <= ($maxwd_04 | 0)) {
	                ___assert_func(STRING_TABLE.__str213 | 0, 174, STRING_TABLE.___func___dict_read | 0, STRING_TABLE.__str38251 | 0);
	              }
	              var $27 = ($21 << 1) + 8 | 0;
	              var $28 = ___ckd_realloc__($p_06, $27, STRING_TABLE.__str213 | 0, 176);
	              var $29 = $28;
	              var $31 = $21 << 2;
	              var $32 = ___ckd_realloc__($wptr_07, $31, STRING_TABLE.__str213 | 0, 177);
	              var $wptr_1 = $32, $wptr_1$s2 = $wptr_1 >> 2;
	              var $p_1 = $29;
	              var $nwd_0 = $21;
	              var $maxwd_1 = $21;
	            } else {
	              var $wptr_1 = $wptr_07, $wptr_1$s2 = $wptr_1 >> 2;
	              var $p_1 = $p_06;
	              var $nwd_0 = $17;
	              var $maxwd_1 = $maxwd_04;
	            }
	            var $maxwd_1;
	            var $nwd_0;
	            var $p_1;
	            var $wptr_1;
	            if (($nwd_0 | 0) == 0) {
	              var $phnalloc_1 = $phnalloc_010;
	              var $stralloc_1 = $stralloc_09;
	              var $wptr_2 = $wptr_1;
	              var $p_2 = $p_1;
	              var $maxwd_2 = $maxwd_1;
	              break;
	            } else if (($nwd_0 | 0) == 1) {
	              __E__pr_header(STRING_TABLE.__str213 | 0, 184, STRING_TABLE.__str102579 | 0);
	              var $36 = HEAP32[$wptr_1$s2];
	              __E__pr_warn(STRING_TABLE.__str39252 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $lineno_05, HEAP32[tempInt + 4 >> 2] = $36, tempInt));
	              var $phnalloc_1 = $phnalloc_010;
	              var $stralloc_1 = $stralloc_09;
	              var $wptr_2 = $wptr_1;
	              var $p_2 = $p_1;
	              var $maxwd_2 = $maxwd_1;
	            } else {
	              var $i_0 = 1;
	              while (1) {
	                var $i_0;
	                if (($i_0 | 0) >= ($nwd_0 | 0)) {
	                  break;
	                }
	                var $39 = ($i_0 << 2) + $wptr_1 | 0;
	                var $40 = HEAP32[$39 >> 2];
	                var $d_idx_val = HEAP32[$d_idx >> 2];
	                var $d_idx1_val = HEAP32[$d_idx1 >> 2];
	                var $41 = _dict_ciphone_id($d_idx_val, $d_idx1_val, $40);
	                HEAP16[$p_1 + ($i_0 - 1 << 1) >> 1] = $41;
	                if ($41 << 16 >> 16 >= 0) {
	                  var $i_0 = $i_0 + 1 | 0;
	                  continue;
	                }
	                __E__pr_header(STRING_TABLE.__str213 | 0, 194, STRING_TABLE.__str102579 | 0);
	                var $47 = HEAP32[$39 >> 2];
	                var $48 = HEAP32[$wptr_1$s2];
	                __E__pr_warn(STRING_TABLE.__str40253 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $lineno_05, HEAP32[tempInt + 4 >> 2] = $47, HEAP32[tempInt + 8 >> 2] = $48, tempInt));
	                break;
	              }
	              if (($i_0 | 0) != ($nwd_0 | 0)) {
	                var $phnalloc_1 = $phnalloc_010;
	                var $stralloc_1 = $stralloc_09;
	                var $wptr_2 = $wptr_1;
	                var $p_2 = $p_1;
	                var $maxwd_2 = $maxwd_1;
	                break;
	              }
	              var $51 = HEAP32[$wptr_1$s2];
	              var $53 = _dict_add_word($d, $51, $p_1, $nwd_0 - 1 | 0);
	              if (($53 | 0) < 0) {
	                __E__pr_header(STRING_TABLE.__str213 | 0, 203, STRING_TABLE.__str102579 | 0);
	                var $56 = HEAP32[$wptr_1$s2];
	                __E__pr_warn(STRING_TABLE.__str41254 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $lineno_05, HEAP32[tempInt + 4 >> 2] = $56, tempInt));
	                var $phnalloc_1 = $phnalloc_010;
	                var $stralloc_1 = $stralloc_09;
	                var $wptr_2 = $wptr_1;
	                var $p_2 = $p_1;
	                var $maxwd_2 = $maxwd_1;
	              } else {
	                var $58 = HEAP32[$7 >> 2];
	                var $60 = HEAP32[($58 >> 2) + ($53 * 5 | 0)];
	                var $61 = _strlen($60);
	                var $phnalloc_1 = (HEAP32[($58 + 8 >> 2) + ($53 * 5 | 0)] << 1) + $phnalloc_010 | 0;
	                var $stralloc_1 = $61 + $stralloc_09 | 0;
	                var $wptr_2 = $wptr_1;
	                var $p_2 = $p_1;
	                var $maxwd_2 = $maxwd_1;
	              }
	            }
	          }
	        } while (0);
	        var $maxwd_2;
	        var $p_2;
	        var $wptr_2;
	        var $stralloc_1;
	        var $phnalloc_1;
	        var $68 = _lineiter_next($li_08);
	        if (($68 | 0) == 0) {
	          var $p_0_lcssa = $p_2;
	          var $wptr_0_lcssa = $wptr_2;
	          var $stralloc_0_lcssa = $stralloc_1;
	          var $phnalloc_0_lcssa = $phnalloc_1;
	          break $_$56;
	        }
	        var $maxwd_04 = $maxwd_2;
	        var $lineno_05 = $lineno_05 + 1 | 0;
	        var $p_06 = $p_2;
	        var $wptr_07 = $wptr_2;
	        var $li_08 = $68;
	        var $stralloc_09 = $stralloc_1;
	        var $phnalloc_010 = $phnalloc_1;
	      }
	    }
	  } while (0);
	  var $phnalloc_0_lcssa;
	  var $stralloc_0_lcssa;
	  var $wptr_0_lcssa;
	  var $p_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str213 | 0, 212);
	  __E__pr_info(STRING_TABLE.__str42255 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = ($stralloc_0_lcssa | 0) / 1024 & -1, HEAP32[tempInt + 4 >> 2] = ($phnalloc_0_lcssa | 0) / 1024 & -1, tempInt));
	  _ckd_free($p_0_lcssa);
	  _ckd_free($wptr_0_lcssa);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_dict_read["X"] = 1;

	function _dict_wordid($d, $word) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $w = __stackBase__;
	  if (($d | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 372, STRING_TABLE.___func___dict_wordid | 0, STRING_TABLE.__str29242 | 0);
	  }
	  if (($word | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 373, STRING_TABLE.___func___dict_wordid | 0, STRING_TABLE.__str41812 | 0);
	  }
	  var $8 = HEAP32[$d + 12 >> 2];
	  var $9 = _hash_table_lookup_int32($8, $word, $w);
	  var $_0 = ($9 | 0) < 0 ? -1 : HEAP32[$w >> 2];
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _dict_filler_word($d, $w) {
	  var $d$s2 = $d >> 2;
	  var __label__;
	  if (($d | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 384, STRING_TABLE.___func___dict_filler_word | 0, STRING_TABLE.__str29242 | 0);
	  }
	  var $4 = ($w | 0) > -1;
	  do {
	    if ($4) {
	      if ((HEAP32[$d$s2 + 5] | 0) > ($w | 0)) {
	        __label__ = 7;
	        break;
	      }
	      __label__ = 6;
	      break;
	    } else {
	      __label__ = 6;
	    }
	  } while (0);
	  if (__label__ == 6) {
	    ___assert_func(STRING_TABLE.__str213 | 0, 385, STRING_TABLE.___func___dict_filler_word | 0, STRING_TABLE.__str31244 | 0);
	  }
	  var $14 = HEAP32[(HEAP32[$d$s2 + 2] + 16 >> 2) + ($w * 5 | 0)];
	  var $17 = ($14 | 0) == (HEAP32[$d$s2 + 8] | 0);
	  do {
	    if ($17) {
	      var $_0 = 0;
	    } else {
	      if (($14 | 0) == (HEAP32[$d$s2 + 9] | 0)) {
	        var $_0 = 0;
	        break;
	      }
	      if (($14 | 0) >= (HEAP32[$d$s2 + 6] | 0)) {
	        if (($14 | 0) <= (HEAP32[$d$s2 + 7] | 0)) {
	          var $_0 = 1;
	          break;
	        }
	      }
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _dict_free($d) {
	  var $1 = ($d | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $d | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $7 = $d + 20 | 0;
	      var $9 = (HEAP32[$7 >> 2] | 0) > 0;
	      var $10 = $d + 8 | 0;
	      var $11 = HEAP32[$10 >> 2];
	      $_$110 : do {
	        if ($9) {
	          var $i_01 = 0;
	          var $12 = $11;
	          while (1) {
	            var $12;
	            var $i_01;
	            var $14 = HEAP32[($12 >> 2) + ($i_01 * 5 | 0)];
	            if (($14 | 0) != 0) {
	              _ckd_free($14);
	            }
	            var $19 = HEAP32[($12 + 4 >> 2) + ($i_01 * 5 | 0)];
	            if (($19 | 0) != 0) {
	              var $22 = $19;
	              _ckd_free($22);
	            }
	            var $23 = $i_01 + 1 | 0;
	            var $26 = HEAP32[$10 >> 2];
	            if (($23 | 0) >= (HEAP32[$7 >> 2] | 0)) {
	              var $_lcssa = $26;
	              break $_$110;
	            }
	            var $i_01 = $23;
	            var $12 = $26;
	          }
	        } else {
	          var $_lcssa = $11;
	        }
	      } while (0);
	      var $_lcssa;
	      if (($_lcssa | 0) != 0) {
	        _ckd_free($_lcssa);
	      }
	      var $32 = HEAP32[$d + 12 >> 2];
	      if (($32 | 0) != 0) {
	        _hash_table_free($32);
	      }
	      var $37 = HEAP32[$d + 4 >> 2];
	      if (($37 | 0) != 0) {
	        _bin_mdef_free($37);
	      }
	      var $41 = $d;
	      _ckd_free($41);
	    }
	  } while (0);
	  return;
	  return;
	}

	_dict_free["X"] = 1;

	function _dict_ciphone_id($d_0_1_val, $d_0_11_val, $str) {
	  if (($d_0_11_val | 0) == 0) {
	    var $5 = _bin_mdef_ciphone_id($d_0_1_val, $str);
	    var $_0_in = $5;
	  } else {
	    var $3 = _bin_mdef_ciphone_id_nocase($d_0_1_val, $str);
	    var $_0_in = $3;
	  }
	  var $_0_in;
	  return $_0_in & 65535;
	  return null;
	}

	function _populate_lrdiph($d2p, $rdiph_rc, $b) {
	  var $7$s2;
	  var __label__;
	  var $2 = HEAP32[$d2p + 4 >> 2];
	  var $3 = $2 + 4 | 0;
	  var $4 = HEAP32[$3 >> 2];
	  var $5 = ($4 | 0) > 0;
	  $_$151 : do {
	    if ($5) {
	      var $6 = $b << 16 >> 16;
	      var $7$s2 = ($2 + 56 | 0) >> 2;
	      var $8 = $d2p + 20 | 0;
	      var $9 = $2 + 40 | 0;
	      var $10 = $d2p + 12 | 0;
	      var $11 = ($rdiph_rc | 0) == 0;
	      var $12 = ($6 << 2) + $rdiph_rc | 0;
	      var $l_02 = 0;
	      var $14 = 0;
	      var $13 = $4;
	      while (1) {
	        var $13;
	        var $14;
	        var $l_02;
	        var $15 = ($13 | 0) > 0;
	        $_$155 : do {
	          if ($15) {
	            var $r_01 = 0;
	            var $16 = 0;
	            while (1) {
	              var $16;
	              var $r_01;
	              var $17 = _bin_mdef_phone_id_nearest($2, $6, $14, $16, 3);
	              var $19 = HEAP32[$7$s2] + $17 * 12 | 0;
	              HEAP16[HEAP32[HEAP32[HEAP32[$8 >> 2] + ($6 << 2) >> 2] + ($14 << 2) >> 2] + ($16 << 1) >> 1] = (HEAPU8[$19] | HEAPU8[$19 + 1] << 8 | HEAPU8[$19 + 2] << 16 | HEAPU8[$19 + 3] << 24) & 65535;
	              if ($r_01 << 16 >> 16 == HEAP16[$9 >> 1] << 16 >> 16) {
	                var $32 = HEAP32[$7$s2] + $17 * 12 | 0;
	                HEAP16[HEAP32[HEAP32[HEAP32[$10 >> 2] + ($6 << 2) >> 2] + ($16 << 2) >> 2] + ($14 << 1) >> 1] = (HEAPU8[$32] | HEAPU8[$32 + 1] << 8 | HEAPU8[$32 + 2] << 16 | HEAPU8[$32 + 3] << 24) & 65535;
	              } else {
	                __label__ = 7;
	              }
	              do {
	                if (!$11) {
	                  if ($l_02 << 16 >> 16 != HEAP16[$9 >> 1] << 16 >> 16) {
	                    break;
	                  }
	                  var $47 = HEAP32[$7$s2] + $17 * 12 | 0;
	                  HEAP16[HEAP32[HEAP32[$12 >> 2] + ($14 << 2) >> 2] + ($16 << 1) >> 1] = (HEAPU8[$47] | HEAPU8[$47 + 1] << 8 | HEAPU8[$47 + 2] << 16 | HEAPU8[$47 + 3] << 24) & 65535;
	                }
	              } while (0);
	              var $56 = HEAP32[$7$s2] + $17 * 12 | 0;
	              if ((HEAPU8[$56] | HEAPU8[$56 + 1] << 8 | HEAPU8[$56 + 2] << 16 | HEAPU8[$56 + 3] << 24 | 0) == 65535) {
	                ___assert_func(STRING_TABLE.__str256 | 0, 287, STRING_TABLE.___func___populate_lrdiph | 0, STRING_TABLE.__str22278 | 0);
	              }
	              var $61 = $r_01 + 1 & 65535;
	              var $62 = $61 << 16 >> 16;
	              var $63 = HEAP32[$3 >> 2];
	              if (($62 | 0) >= ($63 | 0)) {
	                var $65 = $63;
	                break $_$155;
	              }
	              var $r_01 = $61;
	              var $16 = $62;
	            }
	          } else {
	            var $65 = $13;
	          }
	        } while (0);
	        var $65;
	        var $66 = $l_02 + 1 & 65535;
	        var $67 = $66 << 16 >> 16;
	        if (($67 | 0) >= ($65 | 0)) {
	          break $_$151;
	        }
	        var $l_02 = $66;
	        var $14 = $67;
	        var $13 = $65;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_populate_lrdiph["X"] = 1;

	function _dict2pid_internal($d2p, $wid, $pos) {
	  var $14$s1;
	  var $2 = HEAP32[$d2p + 4 >> 2];
	  var $3 = ($pos | 0) == 0;
	  do {
	    if ($3) {
	      var $_0 = -1;
	    } else {
	      var $8 = HEAP32[HEAP32[$d2p + 8 >> 2] + 8 >> 2];
	      if ((HEAP32[($8 + 8 >> 2) + ($wid * 5 | 0)] | 0) == ($pos | 0)) {
	        var $_0 = -1;
	        break;
	      }
	      var $14$s1 = HEAP32[($8 + 4 >> 2) + ($wid * 5 | 0)] >> 1;
	      var $23 = HEAP16[($pos << 1 >> 1) + $14$s1] << 16 >> 16;
	      var $24 = HEAP16[($pos - 1 << 1 >> 1) + $14$s1] << 16 >> 16;
	      var $25 = HEAP16[($pos + 1 << 1 >> 1) + $14$s1] << 16 >> 16;
	      var $26 = _bin_mdef_phone_id_nearest($2, $23, $24, $25, 0);
	      var $29 = HEAP32[$2 + 56 >> 2] + $26 * 12 | 0;
	      var $_0 = (HEAPU8[$29] | HEAPU8[$29 + 1] << 8 | HEAPU8[$29 + 2] << 16 | HEAPU8[$29 + 3] << 24) & 65535;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _dict_init($config, $mdef) {
	  var $84$s2;
	  var $54$s2;
	  var $41$s2;
	  var $35$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $sil = __stackBase__;
	  var $1 = ($config | 0) != 0;
	  do {
	    if ($1) {
	      var $config_idx2 = $config + 4 | 0;
	      var $config_idx2_val = HEAP32[$config_idx2 >> 2];
	      var $3 = _cmd_ln_str_r($config_idx2_val, STRING_TABLE.__str2052774 | 0);
	      var $config_idx1_val = HEAP32[$config_idx2 >> 2];
	      var $4 = _cmd_ln_str_r($config_idx1_val, STRING_TABLE.__str2072776 | 0);
	      if (($3 | 0) == 0) {
	        var $fp_0 = 0;
	        var $n_2 = 0;
	        var $dictfile_01 = 0;
	      } else {
	        var $7 = _fopen($3, STRING_TABLE.__str2415 | 0);
	        if (($7 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str213 | 0, 275, STRING_TABLE.__str232533 | 0);
	          __E__fatal_sys_error(STRING_TABLE.__str16229 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $3, tempInt));
	        } else {
	          var $11 = _lineiter_start($7);
	          var $12 = ($11 | 0) == 0;
	          $_$9 : do {
	            if ($12) {
	              var $n_0_lcssa = 0;
	            } else {
	              var $li_08 = $11;
	              var $n_09 = 0;
	              while (1) {
	                var $n_09;
	                var $li_08;
	                var $n_0_ = (HEAP8[HEAP32[$li_08 >> 2]] << 24 >> 24 != 35 & 1) + $n_09 | 0;
	                var $17 = _lineiter_next($li_08);
	                if (($17 | 0) == 0) {
	                  var $n_0_lcssa = $n_0_;
	                  break $_$9;
	                }
	                var $li_08 = $17;
	                var $n_09 = $n_0_;
	              }
	            }
	          } while (0);
	          var $n_0_lcssa;
	          _rewind($7);
	          var $fp_0 = $7;
	          var $n_2 = $n_0_lcssa;
	          var $dictfile_01 = $3;
	        }
	      }
	      var $dictfile_01;
	      var $n_2;
	      var $fp_0;
	      if (($4 | 0) == 0) {
	        var $fp2_0 = 0;
	        var $n_5 = $n_2;
	        var $fillerfile_024 = 0;
	        var $dictfile_015 = $dictfile_01;
	        var $fp_06 = $fp_0;
	        var $34 = 0;
	        break;
	      }
	      var $22 = _fopen($4, STRING_TABLE.__str2415 | 0);
	      if (($22 | 0) == 0) {
	        __E__pr_header(STRING_TABLE.__str213 | 0, 286, STRING_TABLE.__str232533 | 0);
	        __E__fatal_sys_error(STRING_TABLE.__str17230 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $4, tempInt));
	      } else {
	        var $26 = _lineiter_start($22);
	        var $27 = ($26 | 0) == 0;
	        $_$18 : do {
	          if ($27) {
	            var $n_3_lcssa = $n_2;
	          } else {
	            var $li_110 = $26;
	            var $n_311 = $n_2;
	            while (1) {
	              var $n_311;
	              var $li_110;
	              var $n_3_ = (HEAP8[HEAP32[$li_110 >> 2]] << 24 >> 24 != 35 & 1) + $n_311 | 0;
	              var $32 = _lineiter_next($li_110);
	              if (($32 | 0) == 0) {
	                var $n_3_lcssa = $n_3_;
	                break $_$18;
	              }
	              var $li_110 = $32;
	              var $n_311 = $n_3_;
	            }
	          }
	        } while (0);
	        var $n_3_lcssa;
	        _rewind($22);
	        var $fp2_0 = $22;
	        var $n_5 = $n_3_lcssa;
	        var $fillerfile_024 = $4;
	        var $dictfile_015 = $dictfile_01;
	        var $fp_06 = $fp_0;
	        var $34 = 1;
	      }
	    } else {
	      var $fp2_0 = 0;
	      var $n_5 = 0;
	      var $fillerfile_024 = 0;
	      var $dictfile_015 = 0;
	      var $fp_06 = 0;
	      var $34 = 0;
	    }
	  } while (0);
	  var $34;
	  var $fp_06;
	  var $dictfile_015;
	  var $fillerfile_024;
	  var $n_5;
	  var $fp2_0;
	  var $35 = ___ckd_calloc__(1, 48, STRING_TABLE.__str213 | 0, 298), $35$s2 = $35 >> 2;
	  var $36 = $35;
	  HEAP32[$35$s2] = 1;
	  var $38 = $n_5 + 4096 | 0;
	  var $_ = ($38 | 0) < 2147483646 ? $38 : 2147483646;
	  var $41$s2 = ($35 + 16 | 0) >> 2;
	  HEAP32[$41$s2] = $_;
	  if (($n_5 | 0) > 2147483645) {
	    __E__pr_header(STRING_TABLE.__str213 | 0, 303, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str19232 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_5, HEAP32[tempInt + 4 >> 2] = 2147483646, tempInt));
	  } else {
	    __E__pr_info_header(STRING_TABLE.__str213 | 0, 306);
	    var $45 = HEAPU32[$41$s2];
	    var $47 = ($45 * 20 | 0) >>> 10;
	    __E__pr_info(STRING_TABLE.__str20233 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $45, HEAP32[tempInt + 4 >> 2] = 20, HEAP32[tempInt + 8 >> 2] = $47, tempInt));
	    var $48 = HEAP32[$41$s2];
	    var $49 = ___ckd_calloc__($48, 20, STRING_TABLE.__str213 | 0, 309);
	    var $50 = $49;
	    HEAP32[$35$s2 + 2] = $50;
	    var $54$s2 = ($35 + 20 | 0) >> 2;
	    HEAP32[$54$s2] = 0;
	    var $55 = ($mdef | 0) != 0;
	    if ($55) {
	      var $57 = _bin_mdef_retain($mdef);
	      HEAP32[$35$s2 + 1] = $57;
	    } else {
	      __label__ = 19;
	    }
	    do {
	      if ($1) {
	        var $62 = _cmd_ln_exists_r($config, STRING_TABLE.__str2092778 | 0);
	        if (($62 | 0) == 0) {
	          break;
	        }
	        var $config_idx_val = HEAP32[$config + 4 >> 2];
	        var $65 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str2092778 | 0);
	        var $67 = ($65 | 0) != 0 & 1;
	        HEAP32[$35$s2 + 11] = $67;
	      }
	    } while (0);
	    var $70 = HEAP32[$41$s2];
	    var $73 = HEAP32[$35$s2 + 11];
	    var $74 = _hash_table_new($70, $73);
	    HEAP32[$35$s2 + 3] = $74;
	    if (($fp_06 | 0) != 0) {
	      __E__pr_info_header(STRING_TABLE.__str213 | 0, 321);
	      __E__pr_info(STRING_TABLE.__str22235 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $dictfile_015, tempInt));
	      _dict_read($fp_06, $36);
	      var $79 = _fclose($fp_06);
	      __E__pr_info_header(STRING_TABLE.__str213 | 0, 324);
	      var $80 = HEAP32[$54$s2];
	      __E__pr_info(STRING_TABLE.__str23236 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $80, tempInt));
	    }
	    var $82 = HEAP32[$54$s2];
	    var $84$s2 = ($35 + 24 | 0) >> 2;
	    HEAP32[$84$s2] = $82;
	    if ($34) {
	      __E__pr_info_header(STRING_TABLE.__str213 | 0, 330);
	      __E__pr_info(STRING_TABLE.__str24237 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $fillerfile_024, tempInt));
	      _dict_read($fp2_0, $36);
	      var $86 = _fclose($fp2_0);
	      __E__pr_info_header(STRING_TABLE.__str213 | 0, 333);
	      var $89 = HEAP32[$54$s2] - HEAP32[$84$s2] | 0;
	      __E__pr_info(STRING_TABLE.__str23236 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $89, tempInt));
	    } else {
	      __label__ = 26;
	    }
	    if ($55) {
	      var $storemerge = HEAP16[$mdef + 40 >> 1];
	    } else {
	      var $storemerge = 0;
	    }
	    var $storemerge;
	    HEAP16[$sil >> 1] = $storemerge;
	    var $95 = _dict_wordid($36, STRING_TABLE.__str531959 | 0);
	    if (($95 | 0) == -1) {
	      var $98 = _dict_add_word($36, STRING_TABLE.__str531959 | 0, $sil, 1);
	    }
	    var $100 = _dict_wordid($36, STRING_TABLE.__str63982 | 0);
	    if (($100 | 0) == -1) {
	      var $103 = _dict_add_word($36, STRING_TABLE.__str63982 | 0, $sil, 1);
	    }
	    var $105 = _dict_wordid($36, STRING_TABLE.__str55371 | 0);
	    if (($105 | 0) == -1) {
	      var $108 = _dict_add_word($36, STRING_TABLE.__str55371 | 0, $sil, 1);
	    }
	    var $111 = HEAP32[$54$s2] - 1 | 0;
	    var $113 = $35 + 28 | 0;
	    HEAP32[$113 >> 2] = $111;
	    var $114 = _dict_wordid($36, STRING_TABLE.__str531959 | 0);
	    HEAP32[$35$s2 + 8] = $114;
	    var $117 = _dict_wordid($36, STRING_TABLE.__str63982 | 0);
	    HEAP32[$35$s2 + 9] = $117;
	    var $120 = _dict_wordid($36, STRING_TABLE.__str55371 | 0);
	    HEAP32[$35$s2 + 10] = $120;
	    var $125 = (HEAP32[$84$s2] | 0) > (HEAP32[$113 >> 2] | 0);
	    do {
	      if (!$125) {
	        var $127 = _dict_filler_word($36, $120);
	        if (($127 | 0) == 0) {
	          break;
	        }
	        STACKTOP = __stackBase__;
	        return $36;
	      }
	    } while (0);
	    __E__pr_header(STRING_TABLE.__str213 | 0, 358, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str28241 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str55371 | 0, tempInt));
	  }
	  return null;
	}

	_dict_init["X"] = 1;

	function _dict2pid_retain($d2p) {
	  var $1 = $d2p | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return $d2p;
	  return null;
	}

	function _dict2pid_build($mdef, $dict) {
	  var $179$s2;
	  var $89$s2;
	  var $26$s2;
	  var $16$s2;
	  var $15$s2;
	  var __stackBase__ = STACKTOP;
	  __E__pr_info_header(STRING_TABLE.__str256 | 0, 396);
	  __E__pr_info(STRING_TABLE.__str5261 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  if (($mdef | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str256 | 0, 397, STRING_TABLE.___func___dict2pid_build | 0, STRING_TABLE.__str293 | 0);
	  }
	  if (($dict | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str256 | 0, 398, STRING_TABLE.___func___dict2pid_build | 0, STRING_TABLE.__str7263 | 0);
	  }
	  var $7 = ___ckd_calloc__(1, 28, STRING_TABLE.__str256 | 0, 400);
	  var $8 = $7;
	  HEAP32[$7 >> 2] = 1;
	  var $10 = _bin_mdef_retain($mdef);
	  HEAP32[$7 + 4 >> 2] = $10;
	  var $13 = _dict_retain($dict);
	  var $15$s2 = ($7 + 8 | 0) >> 2;
	  HEAP32[$15$s2] = $13;
	  __E__pr_info_header(STRING_TABLE.__str256 | 0, 404);
	  var $16$s2 = ($mdef + 4 | 0) >> 2;
	  var $17 = HEAPU32[$16$s2];
	  var $21 = ($17 * $17 * $17 | 0) >>> 9 & 4194303;
	  __E__pr_info(STRING_TABLE.__str8264 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $17, HEAP32[tempInt + 4 >> 2] = 2, HEAP32[tempInt + 8 >> 2] = $21, tempInt));
	  var $22 = HEAP32[$16$s2];
	  var $23 = ___ckd_calloc_3d__($22, $22, $22, 2, STRING_TABLE.__str256 | 0, 409);
	  var $24 = $23;
	  var $26$s2 = ($7 + 12 | 0) >> 2;
	  HEAP32[$26$s2] = $24;
	  var $27 = HEAP32[$16$s2];
	  var $28 = ___ckd_calloc_3d__($27, $27, $27, 2, STRING_TABLE.__str256 | 0, 413);
	  var $29 = $28;
	  var $30 = HEAP32[$16$s2];
	  var $31 = ___ckd_calloc_3d__($30, $30, $30, 2, STRING_TABLE.__str256 | 0, 419);
	  var $32 = $31;
	  var $34 = $7 + 20 | 0;
	  HEAP32[$34 >> 2] = $32;
	  var $35 = HEAPU32[$16$s2];
	  var $36 = ($35 | 0) > 0;
	  $_$8 : do {
	    if ($36) {
	      var $b_014 = 0;
	      var $37 = $35;
	      while (1) {
	        var $37;
	        var $b_014;
	        var $38 = ($37 | 0) > 0;
	        $_$11 : do {
	          if ($38) {
	            var $39 = ($b_014 << 2) + $29 | 0;
	            var $r_012 = 0;
	            var $40 = $37;
	            while (1) {
	              var $40;
	              var $r_012;
	              var $41 = ($40 | 0) > 0;
	              $_$15 : do {
	                if ($41) {
	                  var $l_08 = 0;
	                  while (1) {
	                    var $l_08;
	                    HEAP16[HEAP32[HEAP32[HEAP32[$26$s2] + ($b_014 << 2) >> 2] + ($r_012 << 2) >> 2] + ($l_08 << 1) >> 1] = -1;
	                    HEAP16[HEAP32[HEAP32[HEAP32[$34 >> 2] + ($b_014 << 2) >> 2] + ($l_08 << 2) >> 2] + ($r_012 << 1) >> 1] = -1;
	                    HEAP16[HEAP32[HEAP32[$39 >> 2] + ($l_08 << 2) >> 2] + ($r_012 << 1) >> 1] = -1;
	                    var $58 = $l_08 + 1 | 0;
	                    var $59 = HEAP32[$16$s2];
	                    if (($58 | 0) >= ($59 | 0)) {
	                      var $61 = $59;
	                      break $_$15;
	                    }
	                    var $l_08 = $58;
	                  }
	                } else {
	                  var $61 = $40;
	                }
	              } while (0);
	              var $61;
	              var $62 = $r_012 + 1 | 0;
	              if (($62 | 0) >= ($61 | 0)) {
	                var $64 = $61;
	                break $_$11;
	              }
	              var $r_012 = $62;
	              var $40 = $61;
	            }
	          } else {
	            var $64 = $37;
	          }
	        } while (0);
	        var $64;
	        var $65 = $b_014 + 1 | 0;
	        if (($65 | 0) >= ($64 | 0)) {
	          var $_lcssa = $64;
	          break $_$8;
	        }
	        var $b_014 = $65;
	        var $37 = $64;
	      }
	    } else {
	      var $_lcssa = $35;
	    }
	  } while (0);
	  var $_lcssa;
	  var $70 = ___ckd_calloc__(($_lcssa * $_lcssa + 31 | 0) >>> 5, 4, STRING_TABLE.__str256 | 0, 433);
	  var $71 = $70;
	  var $72 = HEAP32[$16$s2];
	  var $75 = ($72 * $72 + 31 | 0) >>> 5;
	  var $76 = ___ckd_calloc__($75, 4, STRING_TABLE.__str256 | 0, 434);
	  var $77 = $76;
	  var $80 = (HEAP32[$16$s2] + 31 | 0) / 32 & -1;
	  var $81 = ___ckd_calloc__($80, 4, STRING_TABLE.__str256 | 0, 435);
	  var $82 = $81;
	  var $86 = (HEAP32[HEAP32[$15$s2] + 20 >> 2] | 0) > 0;
	  $_$21 : do {
	    if ($86) {
	      var $87 = $dict + 8 | 0;
	      var $88 = $mdef + 56 | 0;
	      var $w_06 = 0;
	      while (1) {
	        var $w_06;
	        var $89$s2 = HEAPU32[$87 >> 2] >> 2;
	        var $91 = HEAPU32[$89$s2 + ($w_06 * 5 | 0) + 2];
	        var $92 = ($91 | 0) > 1;
	        $_$25 : do {
	          if ($92) {
	            var $95 = HEAPU32[$89$s2 + ($w_06 * 5 | 0) + 1];
	            var $97 = HEAP16[$95 >> 1] << 16 >> 16;
	            var $100 = HEAP16[$95 + 2 >> 1] << 16 >> 16;
	            var $101 = HEAPU32[$16$s2];
	            var $103 = $101 * $97 + $100 | 0;
	            var $105 = ((($103 | 0) / 32 & -1) << 2) + $71 | 0;
	            var $106 = HEAP32[$105 >> 2];
	            var $108 = 1 << ($103 & 31);
	            if (($108 & $106 | 0) == 0) {
	              var $112 = $108 | $106;
	              HEAP32[$105 >> 2] = $112;
	              var $113 = HEAP32[$16$s2];
	              var $114 = ($113 | 0) > 0;
	              $_$29 : do {
	                if ($114) {
	                  var $l_12 = 0;
	                  while (1) {
	                    var $l_12;
	                    var $116 = _bin_mdef_phone_id_nearest($mdef, $97, $l_12 << 16 >> 16, $100, 1);
	                    var $118 = HEAP32[$88 >> 2] + $116 * 12 | 0;
	                    var $120 = (HEAPU8[$118] | HEAPU8[$118 + 1] << 8 | HEAPU8[$118 + 2] << 16 | HEAPU8[$118 + 3] << 24) & 65535;
	                    var $126 = ($l_12 << 1) + HEAP32[HEAP32[HEAP32[$26$s2] + ($97 << 2) >> 2] + ($100 << 2) >> 2] | 0;
	                    HEAP16[$126 >> 1] = $120;
	                    var $127 = $l_12 + 1 | 0;
	                    var $128 = HEAP32[$16$s2];
	                    if (($127 | 0) >= ($128 | 0)) {
	                      var $130 = $128;
	                      break $_$29;
	                    }
	                    var $l_12 = $127;
	                  }
	                } else {
	                  var $130 = $113;
	                }
	              } while (0);
	              var $130;
	              var $_pre = HEAP32[$87 >> 2];
	              var $134 = HEAP32[($_pre + 8 >> 2) + ($w_06 * 5 | 0)];
	              var $133 = HEAP32[($_pre + 4 >> 2) + ($w_06 * 5 | 0)];
	              var $132 = $130;
	            } else {
	              var $134 = $91;
	              var $133 = $95;
	              var $132 = $101;
	            }
	            var $132;
	            var $133;
	            var $134;
	            var $138 = HEAP16[$133 + ($134 - 2 << 1) >> 1] << 16 >> 16;
	            var $142 = HEAP16[$133 + ($134 - 1 << 1) >> 1] << 16 >> 16;
	            var $144 = $142 * $132 + $138 | 0;
	            var $146 = ((($144 | 0) / 32 & -1) << 2) + $77 | 0;
	            var $147 = HEAP32[$146 >> 2];
	            var $149 = 1 << ($144 & 31);
	            if (($149 & $147 | 0) != 0) {
	              break;
	            }
	            var $153 = $149 | $147;
	            HEAP32[$146 >> 2] = $153;
	            if ((HEAP32[$16$s2] | 0) <= 0) {
	              break;
	            }
	            var $156 = ($142 << 2) + $29 | 0;
	            var $r_14 = 0;
	            while (1) {
	              var $r_14;
	              var $159 = _bin_mdef_phone_id_nearest($mdef, $142, $138, $r_14 << 16 >> 16, 2);
	              var $161 = HEAP32[$88 >> 2] + $159 * 12 | 0;
	              var $163 = (HEAPU8[$161] | HEAPU8[$161 + 1] << 8 | HEAPU8[$161 + 2] << 16 | HEAPU8[$161 + 3] << 24) & 65535;
	              var $167 = ($r_14 << 1) + HEAP32[HEAP32[$156 >> 2] + ($138 << 2) >> 2] | 0;
	              HEAP16[$167 >> 1] = $163;
	              var $168 = $r_14 + 1 | 0;
	              if (($168 | 0) >= (HEAP32[$16$s2] | 0)) {
	                break $_$25;
	              }
	              var $r_14 = $168;
	            }
	          } else {
	            if (($91 | 0) != 1) {
	              break;
	            }
	            var $176 = HEAP16[HEAP32[$89$s2 + ($w_06 * 5 | 0) + 1] >> 1];
	            var $177 = $176 << 16 >> 16;
	            var $179$s2 = (((($177 | 0) / 32 & -1) << 2) + $82 | 0) >> 2;
	            var $182 = 1 << ($177 & 31);
	            if (($182 & HEAP32[$179$s2] | 0) != 0) {
	              break;
	            }
	            _populate_lrdiph($8, $29, $176);
	            var $187 = HEAP32[$179$s2] | $182;
	            HEAP32[$179$s2] = $187;
	          }
	        } while (0);
	        var $188 = $w_06 + 1 | 0;
	        if (($188 | 0) >= (HEAP32[HEAP32[$15$s2] + 20 >> 2] | 0)) {
	          break $_$21;
	        }
	        var $w_06 = $188;
	      }
	    }
	  } while (0);
	  _ckd_free($70);
	  _ckd_free($76);
	  _ckd_free($81);
	  _compress_right_context_tree($8, $29);
	  _compress_left_right_context_tree($8);
	  _ckd_free_3d($28);
	  STACKTOP = __stackBase__;
	  return $8;
	  return null;
	}

	_dict2pid_build["X"] = 1;

	function _compress_right_context_tree($d2p, $rdiph_rc) {
	  var $12$s2;
	  var $3$s2;
	  var __stackBase__ = STACKTOP;
	  var $3$s2 = (HEAP32[$d2p + 4 >> 2] + 4 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $5 = ___ckd_calloc__($4, 2, STRING_TABLE.__str256 | 0, 94);
	  var $6 = $5;
	  var $7 = ___ckd_calloc__($4, 2, STRING_TABLE.__str256 | 0, 95);
	  var $8 = $7;
	  var $9 = HEAP32[$3$s2];
	  var $10 = ___ckd_calloc__($9, 4, STRING_TABLE.__str256 | 0, 98);
	  var $11 = $10;
	  var $12$s2 = ($d2p + 16 | 0) >> 2;
	  HEAP32[$12$s2] = $11;
	  var $13 = HEAP32[$3$s2];
	  var $14 = $13 << 2;
	  var $15 = ($4 | 0) > 0;
	  $_$44 : do {
	    if ($15) {
	      var $b_02 = 0;
	      var $alloc_03 = $14;
	      var $16 = $13;
	      while (1) {
	        var $16;
	        var $alloc_03;
	        var $b_02;
	        var $17 = ___ckd_calloc__($16, 12, STRING_TABLE.__str256 | 0, 103);
	        var $20 = ($b_02 << 2) + HEAP32[$12$s2] | 0;
	        HEAP32[$20 >> 2] = $17;
	        var $21 = HEAP32[$3$s2];
	        var $23 = $21 * 12 + $alloc_03 | 0;
	        var $24 = ($b_02 << 2) + $rdiph_rc | 0;
	        var $l_01 = 0;
	        var $26 = $21;
	        while (1) {
	          var $26;
	          var $l_01;
	          var $29 = HEAP32[HEAP32[$24 >> 2] + ($l_01 << 2) >> 2];
	          _compress_table($29, $6, $8, $26);
	          var $30 = HEAP32[$3$s2];
	          var $r_0 = 0;
	          while (1) {
	            var $r_0;
	            if (($r_0 | 0) >= ($30 | 0)) {
	              break;
	            }
	            if (HEAP16[$6 + ($r_0 << 1) >> 1] << 16 >> 16 == -1) {
	              break;
	            }
	            var $r_0 = $r_0 + 1 | 0;
	          }
	          if (HEAP16[$6 >> 1] << 16 >> 16 == -1) {
	            var $77 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 | 0;
	            HEAP32[$77 >> 2] = 0;
	            var $81 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 4 | 0;
	            HEAP32[$81 >> 2] = 0;
	            var $85 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 8 | 0;
	            HEAP32[$85 >> 2] = 0;
	          } else {
	            var $41 = ___ckd_calloc__($r_0, 2, STRING_TABLE.__str256 | 0, 114);
	            var $46 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 | 0;
	            HEAP32[$46 >> 2] = $41;
	            var $52 = HEAP32[(HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] >> 2) + ($l_01 * 3 | 0)];
	            _memcpy($52, $5, $r_0 << 1, 2);
	            var $54 = HEAP32[$3$s2];
	            var $55 = ___ckd_calloc__($54, 2, STRING_TABLE.__str256 | 0, 118);
	            var $56 = $55;
	            var $60 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 4 | 0;
	            HEAP32[$60 >> 2] = $56;
	            var $66 = HEAP32[(HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + 4 >> 2) + ($l_01 * 3 | 0)];
	            var $68 = HEAP32[$3$s2] << 1;
	            _memcpy($66, $7, $68, 2);
	            var $72 = HEAP32[HEAP32[$12$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 8 | 0;
	            HEAP32[$72 >> 2] = $r_0;
	          }
	          var $87 = $l_01 + 1 | 0;
	          if (($87 | 0) == ($4 | 0)) {
	            break;
	          }
	          var $l_01 = $87;
	          var $26 = HEAP32[$3$s2];
	        }
	        var $88 = $b_02 + 1 | 0;
	        if (($88 | 0) == ($4 | 0)) {
	          var $alloc_0_lcssa = $23;
	          break $_$44;
	        }
	        var $b_02 = $88;
	        var $alloc_03 = $23;
	        var $16 = HEAP32[$3$s2];
	      }
	    } else {
	      var $alloc_0_lcssa = $14;
	    }
	  } while (0);
	  var $alloc_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str256 | 0, 131);
	  __E__pr_info(STRING_TABLE.__str21277 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $alloc_0_lcssa, HEAP32[tempInt + 4 >> 2] = ($alloc_0_lcssa | 0) / 1024 & -1, tempInt));
	  _ckd_free($5);
	  _ckd_free($7);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_compress_right_context_tree["X"] = 1;

	function _compress_left_right_context_tree($d2p) {
	  var $17$s2;
	  var $3$s2;
	  var __stackBase__ = STACKTOP;
	  var $3$s2 = (HEAP32[$d2p + 4 >> 2] + 4 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $5 = ___ckd_calloc__($4, 2, STRING_TABLE.__str256 | 0, 150);
	  var $6 = $5;
	  var $7 = ___ckd_calloc__($4, 2, STRING_TABLE.__str256 | 0, 151);
	  var $8 = $7;
	  var $9 = $d2p + 20 | 0;
	  if ((HEAP32[$9 >> 2] | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str256 | 0, 153, STRING_TABLE.___func___compress_left_right_context_tree | 0, STRING_TABLE.__str19275 | 0);
	  }
	  var $14 = HEAP32[$3$s2];
	  var $15 = ___ckd_calloc__($14, 4, STRING_TABLE.__str256 | 0, 156);
	  var $16 = $15;
	  var $17$s2 = ($d2p + 24 | 0) >> 2;
	  HEAP32[$17$s2] = $16;
	  var $18 = HEAP32[$3$s2];
	  var $19 = $18 << 2;
	  var $20 = ($4 | 0) > 0;
	  $_$65 : do {
	    if ($20) {
	      var $b_02 = 0;
	      var $alloc_03 = $19;
	      var $21 = $18;
	      while (1) {
	        var $21;
	        var $alloc_03;
	        var $b_02;
	        var $22 = ___ckd_calloc__($21, 12, STRING_TABLE.__str256 | 0, 162);
	        var $25 = ($b_02 << 2) + HEAP32[$17$s2] | 0;
	        HEAP32[$25 >> 2] = $22;
	        var $26 = HEAP32[$3$s2];
	        var $28 = $26 * 12 + $alloc_03 | 0;
	        var $l_01 = 0;
	        var $30 = $26;
	        while (1) {
	          var $30;
	          var $l_01;
	          var $35 = HEAP32[HEAP32[HEAP32[$9 >> 2] + ($b_02 << 2) >> 2] + ($l_01 << 2) >> 2];
	          _compress_table($35, $6, $8, $30);
	          var $36 = HEAP32[$3$s2];
	          var $r_0 = 0;
	          while (1) {
	            var $r_0;
	            if (($r_0 | 0) >= ($36 | 0)) {
	              break;
	            }
	            if (HEAP16[$6 + ($r_0 << 1) >> 1] << 16 >> 16 == -1) {
	              break;
	            }
	            var $r_0 = $r_0 + 1 | 0;
	          }
	          if (HEAP16[$6 >> 1] << 16 >> 16 == -1) {
	            var $83 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 | 0;
	            HEAP32[$83 >> 2] = 0;
	            var $87 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 4 | 0;
	            HEAP32[$87 >> 2] = 0;
	            var $91 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 8 | 0;
	            HEAP32[$91 >> 2] = 0;
	          } else {
	            var $47 = ___ckd_calloc__($r_0, 2, STRING_TABLE.__str256 | 0, 174);
	            var $52 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 | 0;
	            HEAP32[$52 >> 2] = $47;
	            var $58 = HEAP32[(HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] >> 2) + ($l_01 * 3 | 0)];
	            _memcpy($58, $5, $r_0 << 1, 2);
	            var $60 = HEAP32[$3$s2];
	            var $61 = ___ckd_calloc__($60, 2, STRING_TABLE.__str256 | 0, 178);
	            var $62 = $61;
	            var $66 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 4 | 0;
	            HEAP32[$66 >> 2] = $62;
	            var $72 = HEAP32[(HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + 4 >> 2) + ($l_01 * 3 | 0)];
	            var $74 = HEAP32[$3$s2] << 1;
	            _memcpy($72, $7, $74, 2);
	            var $78 = HEAP32[HEAP32[$17$s2] + ($b_02 << 2) >> 2] + $l_01 * 12 + 8 | 0;
	            HEAP32[$78 >> 2] = $r_0;
	          }
	          var $93 = $l_01 + 1 | 0;
	          if (($93 | 0) == ($4 | 0)) {
	            break;
	          }
	          var $l_01 = $93;
	          var $30 = HEAP32[$3$s2];
	        }
	        var $94 = $b_02 + 1 | 0;
	        if (($94 | 0) == ($4 | 0)) {
	          var $alloc_0_lcssa = $28;
	          break $_$65;
	        }
	        var $b_02 = $94;
	        var $alloc_03 = $28;
	        var $21 = HEAP32[$3$s2];
	      }
	    } else {
	      var $alloc_0_lcssa = $19;
	    }
	  } while (0);
	  var $alloc_0_lcssa;
	  _ckd_free($5);
	  _ckd_free($7);
	  __E__pr_info_header(STRING_TABLE.__str256 | 0, 195);
	  __E__pr_info(STRING_TABLE.__str20276 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $alloc_0_lcssa, HEAP32[tempInt + 4 >> 2] = ($alloc_0_lcssa | 0) / 1024 & -1, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_compress_left_right_context_tree["X"] = 1;

	function _dict2pid_free($d2p) {
	  var $_pre_pre$s2;
	  var $d2p$s2 = $d2p >> 2;
	  var $1 = ($d2p | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $d2p | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$d2p$s2 + 3];
	      if (($9 | 0) != 0) {
	        var $12 = $9;
	        _ckd_free_3d($12);
	      }
	      var $15 = HEAP32[$d2p$s2 + 5];
	      if (($15 | 0) != 0) {
	        var $18 = $15;
	        _ckd_free_3d($18);
	      }
	      var $21 = HEAP32[$d2p$s2 + 4];
	      var $_pre_pre$s2 = ($d2p + 4 | 0) >> 2;
	      if (($21 | 0) != 0) {
	        var $26 = HEAP32[HEAP32[$_pre_pre$s2] + 4 >> 2];
	        _free_compress_map($21, $26);
	      }
	      var $28 = HEAP32[$d2p$s2 + 6];
	      if (($28 | 0) != 0) {
	        var $33 = HEAP32[HEAP32[$_pre_pre$s2] + 4 >> 2];
	        _free_compress_map($28, $33);
	      }
	      var $34 = HEAP32[$_pre_pre$s2];
	      _bin_mdef_free($34);
	      var $36 = HEAP32[$d2p$s2 + 2];
	      _dict_free($36);
	      var $37 = $d2p;
	      _ckd_free($37);
	    }
	  } while (0);
	  return;
	  return;
	}

	_dict2pid_free["X"] = 1;

	function _free_compress_map($tree, $n_ci) {
	  var $2$s2;
	  var $1 = ($n_ci | 0) > 0;
	  $_$101 : do {
	    if ($1) {
	      var $b_02 = 0;
	      while (1) {
	        var $b_02;
	        var $2$s2 = (($b_02 << 2) + $tree | 0) >> 2;
	        var $l_01 = 0;
	        var $5 = HEAP32[$2$s2];
	        while (1) {
	          var $5;
	          var $l_01;
	          var $8 = HEAP32[($5 >> 2) + ($l_01 * 3 | 0)];
	          _ckd_free($8);
	          var $12 = HEAP32[(HEAP32[$2$s2] + 4 >> 2) + ($l_01 * 3 | 0)];
	          _ckd_free($12);
	          var $13 = $l_01 + 1 | 0;
	          var $14 = HEAP32[$2$s2];
	          if (($13 | 0) == ($n_ci | 0)) {
	            break;
	          }
	          var $l_01 = $13;
	          var $5 = $14;
	        }
	        var $15 = $14;
	        _ckd_free($15);
	        var $16 = $b_02 + 1 | 0;
	        if (($16 | 0) == ($n_ci | 0)) {
	          break $_$101;
	        }
	        var $b_02 = $16;
	      }
	    }
	  } while (0);
	  var $17 = $tree;
	  _ckd_free($17);
	  return;
	  return;
	}

	function _fsg_history_init() {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 16, STRING_TABLE.__str279 | 0, 72), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  HEAP32[$1$s2] = 0;
	  var $4 = _blkarray_list_init();
	  HEAP32[$1$s2 + 1] = $4;
	  HEAP32[$1$s2 + 2] = 0;
	  return $2;
	  return null;
	}

	function _fsg_history_free($h) {
	  var $2 = HEAP32[$h >> 2];
	  var $3 = ($2 | 0) == 0;
	  $_$110 : do {
	    if (!$3) {
	      var $6 = HEAP32[$2 + 32 >> 2];
	      var $8 = HEAP32[$h + 12 >> 2];
	      if (($6 | 0) <= 0) {
	        break;
	      }
	      var $10 = ($8 | 0) > 0;
	      var $11 = $h + 8 | 0;
	      var $s_06 = 0;
	      while (1) {
	        var $s_06;
	        $_$115 : do {
	          if ($10) {
	            var $lc_03 = 0;
	            while (1) {
	              var $lc_03;
	              var $gn_01 = HEAP32[HEAP32[HEAP32[$11 >> 2] + ($s_06 << 2) >> 2] + ($lc_03 << 2) >> 2];
	              if (($gn_01 | 0) == 0) {
	                var $22 = 0;
	              } else {
	                var $gn_02 = $gn_01;
	                while (1) {
	                  var $gn_02;
	                  var $18 = HEAP32[$gn_02 >> 2];
	                  _ckd_free($18);
	                  var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	                  if (($gn_0 | 0) == 0) {
	                    break;
	                  }
	                  var $gn_02 = $gn_0;
	                }
	                var $22 = HEAP32[HEAP32[HEAP32[$11 >> 2] + ($s_06 << 2) >> 2] + ($lc_03 << 2) >> 2];
	              }
	              var $22;
	              _glist_free($22);
	              var $23 = $lc_03 + 1 | 0;
	              if (($23 | 0) == ($8 | 0)) {
	                break $_$115;
	              }
	              var $lc_03 = $23;
	            }
	          }
	        } while (0);
	        var $24 = $s_06 + 1 | 0;
	        if (($24 | 0) == ($6 | 0)) {
	          break $_$110;
	        }
	        var $s_06 = $24;
	      }
	    }
	  } while (0);
	  var $27 = HEAP32[$h + 8 >> 2];
	  _ckd_free_2d($27);
	  var $29 = HEAP32[$h + 4 >> 2];
	  _blkarray_list_free($29);
	  var $30 = $h;
	  _ckd_free($30);
	  return;
	  return;
	}

	_fsg_history_free["X"] = 1;

	function _fsg_history_set_fsg($h, $fsg, $dict) {
	  var $9$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $h + 4 | 0;
	  if ((HEAP32[HEAP32[$1 >> 2] + 12 >> 2] | 0) != 0) {
	    __E__pr_header(STRING_TABLE.__str279 | 0, 120, STRING_TABLE.__str212436 | 0);
	    __E__pr_warn(STRING_TABLE.__str2281 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $7 = HEAP32[$1 >> 2];
	    _blkarray_list_reset($7);
	  }
	  var $9$s2 = ($h + 8 | 0) >> 2;
	  var $10 = HEAP32[$9$s2];
	  if (($10 | 0) != 0) {
	    var $13 = $10;
	    _ckd_free_2d($13);
	  }
	  HEAP32[$9$s2] = 0;
	  HEAP32[$h >> 2] = $fsg;
	  if (($fsg | 0) != 0) {
	    var $_pre = $dict + 4 | 0;
	    if (($dict | 0) != 0) {
	      var $22 = HEAP32[HEAP32[$_pre >> 2] + 4 >> 2];
	      HEAP32[$h + 12 >> 2] = $22;
	    }
	    var $25 = HEAP32[$fsg + 32 >> 2];
	    var $28 = HEAP32[HEAP32[$_pre >> 2] + 4 >> 2];
	    var $29 = ___ckd_calloc_2d__($25, $28, 4, STRING_TABLE.__str279 | 0, 135);
	    var $30 = $29;
	    HEAP32[$9$s2] = $30;
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fsg_history_n_entries($h_0_1_val_0_3_val) {
	  return $h_0_1_val_0_3_val;
	  return null;
	}

	function _fsg_history_entry_get($h_0_1_val, $id) {
	  if ((HEAP32[$h_0_1_val + 12 >> 2] | 0) > ($id | 0)) {
	    var $6 = HEAP32[$h_0_1_val + 8 >> 2];
	    var $7 = ($id | 0) / ($6 | 0) & -1;
	    var $_0 = HEAP32[HEAP32[HEAP32[$h_0_1_val >> 2] + ($7 << 2) >> 2] + ($id - $7 * $6 << 2) >> 2];
	  } else {
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_history_entry_add($h, $link, $frame, $score, $pred, $lc, $rc) {
	  var $35$s2;
	  var $30$s2;
	  var $24$s2;
	  var __stackBase__ = STACKTOP;
	  var tempParam = $rc;
	  $rc = STACKTOP;
	  STACKTOP += 8;
	  HEAP32[$rc >> 2] = HEAP32[tempParam >> 2];
	  HEAP32[$rc + 4 >> 2] = HEAP32[tempParam + 4 >> 2];
	  var $1 = ($frame | 0) < 0;
	  $_$2 : do {
	    if ($1) {
	      var $3 = ___ckd_calloc__(1, 24, STRING_TABLE.__str279 | 0, 153);
	      HEAP32[$3 >> 2] = $link;
	      HEAP16[$3 + 12 >> 1] = $frame & 65535;
	      HEAP32[$3 + 4 >> 2] = $score;
	      HEAP32[$3 + 8 >> 2] = $pred;
	      HEAP16[$3 + 14 >> 1] = $lc & 65535;
	      var $16 = $rc;
	      var $17 = $3 + 16 | 0;
	      var $st$20$0 = $16 | 0;
	      var $18$0 = HEAP32[$st$20$0 >> 2];
	      var $st$20$1 = $16 + 4 | 0;
	      var $18$1 = HEAP32[$st$20$1 >> 2];
	      var $st$24$0 = $17 | 0;
	      HEAP32[$st$24$0 >> 2] = $18$0;
	      var $st$24$1 = $17 + 4 | 0;
	      HEAP32[$st$24$1 >> 2] = $18$1;
	      var $20 = HEAP32[$h + 4 >> 2];
	      _blkarray_list_append($20, $3);
	    } else {
	      var $23 = HEAP32[$link + 4 >> 2];
	      var $24$s2 = ($h + 8 | 0) >> 2;
	      var $29 = $rc | 0;
	      var $30$s2 = ($rc + 4 | 0) >> 2;
	      var $prev_gn_0 = 0;
	      var $gn_0_in = ($lc << 2) + HEAP32[HEAP32[$24$s2] + ($23 << 2) >> 2] | 0;
	      while (1) {
	        var $gn_0_in;
	        var $prev_gn_0;
	        var $gn_0 = HEAP32[$gn_0_in >> 2];
	        if (($gn_0 | 0) == 0) {
	          break;
	        }
	        var $35$s2 = HEAP32[$gn_0 >> 2] >> 2;
	        if ((HEAP32[$35$s2 + 1] | 0) < ($score | 0)) {
	          break;
	        }
	        var $46 = HEAP32[$29 >> 2] & (HEAP32[$35$s2 + 4] ^ -1);
	        HEAP32[$29 >> 2] = $46;
	        var $52 = HEAP32[$30$s2] & (HEAP32[$35$s2 + 5] ^ -1);
	        HEAP32[$30$s2] = $52;
	        if (($52 | $46 | 0) == 0) {
	          break $_$2;
	        }
	        var $prev_gn_0 = $gn_0;
	        var $gn_0_in = $gn_0 + 8 | 0;
	      }
	      var $57 = ___ckd_calloc__(1, 24, STRING_TABLE.__str279 | 0, 184);
	      HEAP32[$57 >> 2] = $link;
	      HEAP16[$57 + 12 >> 1] = $frame & 65535;
	      HEAP32[$57 + 4 >> 2] = $score;
	      HEAP32[$57 + 8 >> 2] = $pred;
	      HEAP16[$57 + 14 >> 1] = $lc & 65535;
	      var $70 = $rc;
	      var $71 = $57 + 16 | 0;
	      var $st$20$0 = $70 | 0;
	      var $72$0 = HEAP32[$st$20$0 >> 2];
	      var $st$20$1 = $70 + 4 | 0;
	      var $72$1 = HEAP32[$st$20$1 >> 2];
	      var $st$24$0 = $71 | 0;
	      HEAP32[$st$24$0 >> 2] = $72$0;
	      var $st$24$1 = $71 + 4 | 0;
	      HEAP32[$st$24$1 >> 2] = $72$1;
	      var $74 = $72$0;
	      if (($prev_gn_0 | 0) == 0) {
	        var $80 = HEAP32[HEAP32[HEAP32[$24$s2] + ($23 << 2) >> 2] + ($lc << 2) >> 2];
	        var $81 = _glist_add_ptr($80, $57);
	        var $85 = ($lc << 2) + HEAP32[HEAP32[$24$s2] + ($23 << 2) >> 2] | 0;
	        HEAP32[$85 >> 2] = $81;
	        var $prev_gn_1_ph1_ph = HEAP32[HEAP32[HEAP32[$24$s2] + ($23 << 2) >> 2] + ($lc << 2) >> 2];
	      } else {
	        var $92 = _glist_insert_ptr($prev_gn_0, $57);
	        var $prev_gn_1_ph1_ph = $92;
	      }
	      var $prev_gn_1_ph1_ph;
	      var $93 = $74 ^ -1;
	      var $prev_gn_1_ph1 = $prev_gn_1_ph1_ph;
	      var $gn_1_ph = $gn_0;
	      while (1) {
	        var $gn_1_ph;
	        var $prev_gn_1_ph1;
	        var $gn_1 = $gn_1_ph;
	        while (1) {
	          var $gn_1;
	          if (($gn_1 | 0) == 0) {
	            break $_$2;
	          }
	          var $98 = HEAP32[$gn_1 >> 2];
	          var $100 = $98 + 16 | 0;
	          var $102 = HEAP32[$100 >> 2] & $93;
	          HEAP32[$100 >> 2] = $102;
	          var $106 = $98 + 20 | 0;
	          var $108 = HEAP32[$106 >> 2] & (HEAP32[$30$s2] ^ -1);
	          HEAP32[$106 >> 2] = $108;
	          if (($108 | $102 | 0) != 0) {
	            break;
	          }
	          _ckd_free($98);
	          var $112 = _gnode_free($gn_1, $prev_gn_1_ph1);
	          var $gn_1 = $112;
	        }
	        var $prev_gn_1_ph1 = $gn_1;
	        var $gn_1_ph = HEAP32[$gn_1 + 8 >> 2];
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fsg_history_entry_add["X"] = 1;

	function _fsg_history_end_frame($h) {
	  var $9$s2;
	  var $4 = HEAP32[HEAP32[$h >> 2] + 32 >> 2];
	  var $6 = HEAP32[$h + 12 >> 2];
	  var $7 = ($4 | 0) > 0;
	  $_$23 : do {
	    if ($7) {
	      var $8 = ($6 | 0) > 0;
	      var $9$s2 = ($h + 8 | 0) >> 2;
	      var $10 = $h + 4 | 0;
	      var $s_06 = 0;
	      while (1) {
	        var $s_06;
	        $_$27 : do {
	          if ($8) {
	            var $lc_03 = 0;
	            while (1) {
	              var $lc_03;
	              var $gn_01 = HEAP32[HEAP32[HEAP32[$9$s2] + ($s_06 << 2) >> 2] + ($lc_03 << 2) >> 2];
	              if (($gn_01 | 0) == 0) {
	                var $22 = 0;
	              } else {
	                var $gn_02 = $gn_01;
	                while (1) {
	                  var $gn_02;
	                  var $17 = HEAP32[$gn_02 >> 2];
	                  var $18 = HEAP32[$10 >> 2];
	                  _blkarray_list_append($18, $17);
	                  var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	                  if (($gn_0 | 0) == 0) {
	                    break;
	                  }
	                  var $gn_02 = $gn_0;
	                }
	                var $22 = HEAP32[HEAP32[HEAP32[$9$s2] + ($s_06 << 2) >> 2] + ($lc_03 << 2) >> 2];
	              }
	              var $22;
	              _glist_free($22);
	              var $26 = ($lc_03 << 2) + HEAP32[HEAP32[$9$s2] + ($s_06 << 2) >> 2] | 0;
	              HEAP32[$26 >> 2] = 0;
	              var $27 = $lc_03 + 1 | 0;
	              if (($27 | 0) == ($6 | 0)) {
	                break $_$27;
	              }
	              var $lc_03 = $27;
	            }
	          }
	        } while (0);
	        var $28 = $s_06 + 1 | 0;
	        if (($28 | 0) == ($4 | 0)) {
	          break $_$23;
	        }
	        var $s_06 = $28;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_history_end_frame["X"] = 1;

	function _fsg_history_reset($h_0_1_val) {
	  _blkarray_list_reset($h_0_1_val);
	  return;
	  return;
	}

	function _fsg_history_utt_start($h) {
	  if ((HEAP32[HEAP32[$h + 4 >> 2] + 12 >> 2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str279 | 0, 284, STRING_TABLE.___func___fsg_history_utt_start | 0, STRING_TABLE.__str3282 | 0);
	  }
	  var $8 = $h + 8 | 0;
	  if ((HEAP32[$8 >> 2] | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str279 | 0, 285, STRING_TABLE.___func___fsg_history_utt_start | 0, STRING_TABLE.__str4283 | 0);
	  }
	  var $16 = HEAP32[HEAP32[$h >> 2] + 32 >> 2];
	  var $18 = HEAP32[$h + 12 >> 2];
	  var $19 = ($16 | 0) > 0;
	  $_$50 : do {
	    if ($19) {
	      var $20 = ($18 | 0) > 0;
	      var $s_02 = 0;
	      while (1) {
	        var $s_02;
	        $_$54 : do {
	          if ($20) {
	            var $lc_01 = 0;
	            while (1) {
	              var $lc_01;
	              if ((HEAP32[HEAP32[HEAP32[$8 >> 2] + ($s_02 << 2) >> 2] + ($lc_01 << 2) >> 2] | 0) != 0) {
	                ___assert_func(STRING_TABLE.__str279 | 0, 292, STRING_TABLE.___func___fsg_history_utt_start | 0, STRING_TABLE.__str5284 | 0);
	              }
	              var $29 = $lc_01 + 1 | 0;
	              if (($29 | 0) == ($18 | 0)) {
	                break $_$54;
	              }
	              var $lc_01 = $29;
	            }
	          }
	        } while (0);
	        var $30 = $s_02 + 1 | 0;
	        if (($30 | 0) == ($16 | 0)) {
	          break $_$50;
	        }
	        var $s_02 = $30;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fsg_lextree_init($fsg, $dict, $d2p, $mdef, $ctx, $wip, $pip) {
	  var $28$s2;
	  var $14$s2;
	  var $4$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(1, 48, STRING_TABLE.__str285 | 0, 219), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  HEAP32[$1$s2] = $fsg;
	  var $4$s2 = ($fsg + 32 | 0) >> 2;
	  var $5 = HEAP32[$4$s2];
	  var $6 = ___ckd_calloc__($5, 4, STRING_TABLE.__str285 | 0, 222);
	  var $7 = $6;
	  var $9 = $1 + 28 | 0;
	  HEAP32[$9 >> 2] = $7;
	  var $10 = HEAP32[$4$s2];
	  var $11 = ___ckd_calloc__($10, 4, STRING_TABLE.__str285 | 0, 224);
	  var $12 = $11;
	  var $14$s2 = ($1 + 32 | 0) >> 2;
	  HEAP32[$14$s2] = $12;
	  HEAP32[$1$s2 + 1] = $ctx;
	  HEAP32[$1$s2 + 2] = $dict;
	  HEAP32[$1$s2 + 3] = $d2p;
	  HEAP32[$1$s2 + 4] = $mdef;
	  HEAP32[$1$s2 + 10] = $wip;
	  HEAP32[$1$s2 + 11] = $pip;
	  _fsg_lextree_lc_rc($2);
	  var $28$s2 = ($1 + 36 | 0) >> 2;
	  HEAP32[$28$s2] = 0;
	  var $30 = (HEAP32[$4$s2] | 0) > 0;
	  $_$63 : do {
	    if ($30) {
	      var $s_04 = 0;
	      var $n_leaves_05 = 0;
	      var $32 = HEAP32[$14$s2];
	      while (1) {
	        var $32;
	        var $n_leaves_05;
	        var $s_04;
	        var $34 = _fsg_psubtree_init($2, $fsg, $s_04, ($s_04 << 2) + $32 | 0);
	        var $36 = ($s_04 << 2) + HEAP32[$9 >> 2] | 0;
	        HEAP32[$36 >> 2] = $34;
	        var $37 = HEAP32[$14$s2];
	        var $pn_01 = HEAP32[$37 + ($s_04 << 2) >> 2];
	        var $39 = ($pn_01 | 0) == 0;
	        $_$67 : do {
	          if ($39) {
	            var $n_leaves_1_lcssa = $n_leaves_05;
	          } else {
	            var $n_leaves_12 = $n_leaves_05;
	            var $pn_03 = $pn_01;
	            var $41 = HEAP32[$28$s2];
	            while (1) {
	              var $41;
	              var $pn_03;
	              var $n_leaves_12;
	              var $42 = $41 + 1 | 0;
	              HEAP32[$28$s2] = $42;
	              var $n_leaves_1_ = (HEAP8[$pn_03 + 27 | 0] << 24 >> 24 != 0 & 1) + $n_leaves_12 | 0;
	              var $pn_0 = HEAPU32[$pn_03 + 4 >> 2];
	              if (($pn_0 | 0) == 0) {
	                var $n_leaves_1_lcssa = $n_leaves_1_;
	                break $_$67;
	              }
	              var $n_leaves_12 = $n_leaves_1_;
	              var $pn_03 = $pn_0;
	              var $41 = $42;
	            }
	          }
	        } while (0);
	        var $n_leaves_1_lcssa;
	        var $48 = $s_04 + 1 | 0;
	        if (($48 | 0) >= (HEAP32[$4$s2] | 0)) {
	          var $n_leaves_0_lcssa = $n_leaves_1_lcssa;
	          break $_$63;
	        }
	        var $s_04 = $48;
	        var $n_leaves_05 = $n_leaves_1_lcssa;
	        var $32 = $37;
	      }
	    } else {
	      var $n_leaves_0_lcssa = 0;
	    }
	  } while (0);
	  var $n_leaves_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str285 | 0, 251);
	  var $51 = HEAP32[$28$s2];
	  __E__pr_info(STRING_TABLE.__str2287 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $51, HEAP32[tempInt + 4 >> 2] = $n_leaves_0_lcssa, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str285 | 0, 253);
	  var $53 = HEAP32[$28$s2] * 108 | 0;
	  var $54 = $53 >>> 10;
	  __E__pr_info(STRING_TABLE.__str3288 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $53, HEAP32[tempInt + 4 >> 2] = $54, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str285 | 0, 256);
	  var $55 = $n_leaves_0_lcssa * 108 | 0;
	  __E__pr_info(STRING_TABLE.__str4289 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $55, HEAP32[tempInt + 4 >> 2] = $55 >>> 10, tempInt));
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	_fsg_lextree_init["X"] = 1;

	function _fsg_lextree_lc_rc($lextree) {
	  var $30$s2;
	  var $23$s2;
	  var $19$s2;
	  var $14$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $lextree + 16 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $4 = HEAP16[$2 + 40 >> 1];
	  var $5 = $4 << 16 >> 16;
	  if ($4 << 16 >> 16 > -1) {
	    var $9 = $2;
	  } else {
	    ___assert_func(STRING_TABLE.__str285 | 0, 98, STRING_TABLE.___func___fsg_lextree_lc_rc | 0, STRING_TABLE.__str29314 | 0);
	    var $9 = HEAP32[$1 >> 2];
	  }
	  var $9;
	  var $11 = HEAP32[$9 + 4 >> 2];
	  var $12 = $lextree | 0;
	  var $13 = HEAP32[$12 >> 2];
	  var $14$s2 = ($13 + 32 | 0) >> 2;
	  var $15 = HEAP32[$14$s2];
	  var $16 = $11 + 1 | 0;
	  var $17 = ___ckd_calloc_2d__($15, $16, 2, STRING_TABLE.__str285 | 0, 106);
	  var $18 = $17;
	  var $19$s2 = ($lextree + 20 | 0) >> 2;
	  HEAP32[$19$s2] = $18;
	  var $20 = HEAP32[$14$s2];
	  var $21 = ___ckd_calloc_2d__($20, $16, 2, STRING_TABLE.__str285 | 0, 107);
	  var $22 = $21;
	  var $23$s2 = ($lextree + 24 | 0) >> 2;
	  HEAP32[$23$s2] = $22;
	  __E__pr_info_header(STRING_TABLE.__str285 | 0, 108);
	  var $26 = ($16 << 1) * HEAP32[$14$s2] | 0;
	  var $27 = ($26 | 0) / 1024 & -1;
	  __E__pr_info(STRING_TABLE.__str30315 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $26, HEAP32[tempInt + 4 >> 2] = $27, tempInt));
	  var $29 = (HEAP32[$14$s2] | 0) > 0;
	  $_$77 : do {
	    if ($29) {
	      var $30$s2 = ($lextree + 8 | 0) >> 2;
	      var $31 = $13 + 20 | 0;
	      var $s_032 = 0;
	      while (1) {
	        var $s_032;
	        var $35 = _fsg_model_arcs($13, $s_032);
	        var $36 = ($35 | 0) == 0;
	        $_$81 : do {
	          if (!$36) {
	            var $itor_028 = $35;
	            while (1) {
	              var $itor_028;
	              var $37 = _fsg_arciter_get($itor_028);
	              var $38 = $37 + 12 | 0;
	              var $39 = HEAP32[$38 >> 2];
	              var $40 = ($39 | 0) > -1;
	              $_$84 : do {
	                if ($40) {
	                  var $42 = HEAP32[$30$s2];
	                  var $47 = HEAP32[HEAP32[HEAP32[$12 >> 2] + 16 >> 2] + ($39 << 2) >> 2];
	                  var $48 = _dict_wordid($42, $47);
	                  var $49 = HEAP32[$31 >> 2];
	                  var $50 = ($49 | 0) == 0;
	                  do {
	                    if (!$50) {
	                      var $52 = HEAP32[$38 >> 2];
	                      if ((HEAP32[$49 + ((($52 | 0) / 32 & -1) << 2) >> 2] & 1 << ($52 & 31) | 0) == 0) {
	                        break;
	                      }
	                      var $61 = $37 | 0;
	                      var $66 = ($5 << 1) + HEAP32[HEAP32[$23$s2] + (HEAP32[$61 >> 2] << 2) >> 2] | 0;
	                      HEAP16[$66 >> 1] = 1;
	                      var $72 = ($5 << 1) + HEAP32[HEAP32[$19$s2] + (HEAP32[$37 + 4 >> 2] << 2) >> 2] | 0;
	                      HEAP16[$72 >> 1] = 1;
	                      var $_pre_phi = $61;
	                      break $_$84;
	                    }
	                  } while (0);
	                  var $76 = HEAP32[HEAP32[$30$s2] + 8 >> 2];
	                  var $78 = HEAP32[($76 + 8 >> 2) + ($48 * 5 | 0)];
	                  var $83 = $37 | 0;
	                  var $88 = (HEAP16[HEAP32[($76 + 4 >> 2) + ($48 * 5 | 0)] >> 1] << 16 >> 16 << 1) + HEAP32[HEAP32[$23$s2] + (HEAP32[$83 >> 2] << 2) >> 2] | 0;
	                  HEAP16[$88 >> 1] = 1;
	                  var $103 = (HEAP16[HEAP32[(HEAP32[HEAP32[$30$s2] + 8 >> 2] + 4 >> 2) + ($48 * 5 | 0)] + ($78 - 1 << 1) >> 1] << 16 >> 16 << 1) + HEAP32[HEAP32[$19$s2] + (HEAP32[$37 + 4 >> 2] << 2) >> 2] | 0;
	                  HEAP16[$103 >> 1] = 1;
	                  var $_pre_phi = $83;
	                } else {
	                  var $_pre_phi = $37 | 0;
	                }
	              } while (0);
	              var $_pre_phi;
	              var $109 = ($5 << 1) + HEAP32[HEAP32[$19$s2] + (HEAP32[$_pre_phi >> 2] << 2) >> 2] | 0;
	              HEAP16[$109 >> 1] = 1;
	              var $114 = ($5 << 1) + HEAP32[HEAP32[$23$s2] + (HEAP32[$_pre_phi >> 2] << 2) >> 2] | 0;
	              HEAP16[$114 >> 1] = 1;
	              var $115 = _fsg_arciter_next($itor_028);
	              if (($115 | 0) == 0) {
	                break $_$81;
	              }
	              var $itor_028 = $115;
	            }
	          }
	        } while (0);
	        var $117 = $s_032 + 1 | 0;
	        var $118 = HEAP32[$14$s2];
	        if (($117 | 0) >= ($118 | 0)) {
	          break;
	        }
	        var $s_032 = $117;
	      }
	      if (($118 | 0) <= 0) {
	        break;
	      }
	      var $33 = ($11 | 0) > 0;
	      var $_not44 = $33 ^ 1;
	      var $s_126 = 0;
	      while (1) {
	        var $s_126;
	        var $122 = _fsg_model_arcs($13, $s_126);
	        var $123 = ($122 | 0) == 0;
	        $_$97 : do {
	          if (!$123) {
	            var $itor1_021 = $122;
	            while (1) {
	              var $itor1_021;
	              var $124 = _fsg_arciter_get($itor1_021);
	              var $brmerge = (HEAP32[$124 + 12 >> 2] | 0) > -1 | $_not44;
	              $_$100 : do {
	                if (!$brmerge) {
	                  var $127 = $124 | 0;
	                  var $128 = $124 + 4 | 0;
	                  var $i_016 = 0;
	                  while (1) {
	                    var $i_016;
	                    var $131 = HEAP32[$19$s2];
	                    var $139 = ($i_016 << 1) + HEAP32[$131 + (HEAP32[$128 >> 2] << 2) >> 2] | 0;
	                    var $141 = HEAP16[$139 >> 1] | HEAP16[HEAP32[$131 + (HEAP32[$127 >> 2] << 2) >> 2] + ($i_016 << 1) >> 1];
	                    HEAP16[$139 >> 1] = $141;
	                    var $142 = $i_016 + 1 | 0;
	                    if (($142 | 0) == ($11 | 0)) {
	                      break;
	                    }
	                    var $i_016 = $142;
	                  }
	                  if (!$33) {
	                    break;
	                  }
	                  var $i_119 = 0;
	                  while (1) {
	                    var $i_119;
	                    var $144 = HEAP32[$23$s2];
	                    var $152 = ($i_119 << 1) + HEAP32[$144 + (HEAP32[$127 >> 2] << 2) >> 2] | 0;
	                    var $154 = HEAP16[$152 >> 1] | HEAP16[HEAP32[$144 + (HEAP32[$128 >> 2] << 2) >> 2] + ($i_119 << 1) >> 1];
	                    HEAP16[$152 >> 1] = $154;
	                    var $155 = $i_119 + 1 | 0;
	                    if (($155 | 0) == ($11 | 0)) {
	                      break $_$100;
	                    }
	                    var $i_119 = $155;
	                  }
	                }
	              } while (0);
	              var $156 = _fsg_arciter_next($itor1_021);
	              if (($156 | 0) == 0) {
	                break $_$97;
	              }
	              var $itor1_021 = $156;
	            }
	          }
	        } while (0);
	        var $158 = $s_126 + 1 | 0;
	        var $159 = HEAP32[$14$s2];
	        if (($158 | 0) >= ($159 | 0)) {
	          break;
	        }
	        var $s_126 = $158;
	      }
	      if (($159 | 0) <= 0) {
	        break;
	      }
	      var $s_213 = 0;
	      while (1) {
	        var $s_213;
	        var $161 = HEAP32[$19$s2];
	        var $163 = HEAP32[$161 + ($s_213 << 2) >> 2];
	        $_$112 : do {
	          if ($33) {
	            var $j_01 = 0;
	            var $i_22 = 0;
	            var $168 = $163;
	            var $167 = $161;
	            while (1) {
	              var $167;
	              var $168;
	              var $i_22;
	              var $j_01;
	              if (HEAP16[$168 + ($i_22 << 1) >> 1] << 16 >> 16 == 0) {
	                var $j_1 = $j_01;
	                var $177 = $167;
	              } else {
	                HEAP16[$168 + ($j_01 << 1) >> 1] = $i_22 & 65535;
	                var $j_1 = $j_01 + 1 | 0;
	                var $177 = HEAP32[$19$s2];
	              }
	              var $177;
	              var $j_1;
	              var $178 = $i_22 + 1 | 0;
	              var $180 = HEAP32[$177 + ($s_213 << 2) >> 2];
	              if (($178 | 0) == ($11 | 0)) {
	                break;
	              }
	              var $j_01 = $j_1;
	              var $i_22 = $178;
	              var $168 = $180;
	              var $167 = $177;
	            }
	            HEAP16[$180 + ($j_1 << 1) >> 1] = -1;
	            var $182 = HEAP32[$23$s2];
	            var $j_25 = 0;
	            var $i_36 = 0;
	            var $186 = HEAP32[$182 + ($s_213 << 2) >> 2];
	            var $185 = $182;
	            while (1) {
	              var $185;
	              var $186;
	              var $i_36;
	              var $j_25;
	              if (HEAP16[$186 + ($i_36 << 1) >> 1] << 16 >> 16 == 0) {
	                var $j_3 = $j_25;
	                var $195 = $185;
	              } else {
	                HEAP16[$186 + ($j_25 << 1) >> 1] = $i_36 & 65535;
	                var $j_3 = $j_25 + 1 | 0;
	                var $195 = HEAP32[$23$s2];
	              }
	              var $195;
	              var $j_3;
	              var $196 = $i_36 + 1 | 0;
	              var $198 = HEAP32[$195 + ($s_213 << 2) >> 2];
	              if (($196 | 0) == ($11 | 0)) {
	                var $j_2_lcssa = $j_3;
	                var $_lcssa4 = $198;
	                break $_$112;
	              }
	              var $j_25 = $j_3;
	              var $i_36 = $196;
	              var $186 = $198;
	              var $185 = $195;
	            }
	          } else {
	            HEAP16[$163 >> 1] = -1;
	            var $j_2_lcssa = 0;
	            var $_lcssa4 = HEAP32[HEAP32[$23$s2] + ($s_213 << 2) >> 2];
	          }
	        } while (0);
	        var $_lcssa4;
	        var $j_2_lcssa;
	        HEAP16[$_lcssa4 + ($j_2_lcssa << 1) >> 1] = -1;
	        var $200 = $s_213 + 1 | 0;
	        if (($200 | 0) >= (HEAP32[$14$s2] | 0)) {
	          break $_$77;
	        }
	        var $s_213 = $200;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fsg_lextree_lc_rc["X"] = 1;

	function _fsg_lextree_free($lextree) {
	  if (($lextree | 0) != 0) {
	    var $3 = $lextree | 0;
	    var $4 = HEAP32[$3 >> 2];
	    var $5 = ($4 | 0) == 0;
	    $_$150 : do {
	      if (!$5) {
	        if ((HEAP32[$4 + 32 >> 2] | 0) <= 0) {
	          break;
	        }
	        var $9 = $lextree + 32 | 0;
	        var $s_01 = 0;
	        while (1) {
	          var $s_01;
	          var $13 = HEAP32[HEAP32[$9 >> 2] + ($s_01 << 2) >> 2];
	          _fsg_psubtree_free($13);
	          var $14 = $s_01 + 1 | 0;
	          if (($14 | 0) >= (HEAP32[HEAP32[$3 >> 2] + 32 >> 2] | 0)) {
	            break $_$150;
	          }
	          var $s_01 = $14;
	        }
	      }
	    } while (0);
	    var $21 = HEAP32[$lextree + 20 >> 2];
	    _ckd_free_2d($21);
	    var $24 = HEAP32[$lextree + 24 >> 2];
	    _ckd_free_2d($24);
	    var $27 = HEAP32[$lextree + 28 >> 2];
	    _ckd_free($27);
	    var $30 = HEAP32[$lextree + 32 >> 2];
	    _ckd_free($30);
	    var $31 = $lextree;
	    _ckd_free($31);
	  }
	  return;
	  return;
	}

	function _fsg_psubtree_free($head) {
	  var $1 = ($head | 0) == 0;
	  $_$158 : do {
	    if (!$1) {
	      var $_01 = $head;
	      while (1) {
	        var $_01;
	        var $3 = HEAP32[$_01 + 4 >> 2];
	        _ckd_free($_01);
	        if (($3 | 0) == 0) {
	          break $_$158;
	        }
	        var $_01 = $3;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fsg_glist_linklist_free($glist) {
	  var $1 = ($glist | 0) == 0;
	  $_$163 : do {
	    if (!$1) {
	      var $4 = HEAP32[$glist + 8 >> 2];
	      if (($4 | 0) != 0) {
	        _glist_free($4);
	      }
	      var $nxtglist_02 = HEAP32[$glist + 12 >> 2];
	      var $7 = ($nxtglist_02 | 0) == 0;
	      var $8 = $glist;
	      _ckd_free($8);
	      if ($7) {
	        break;
	      }
	      var $nxtglist_03 = $nxtglist_02;
	      while (1) {
	        var $nxtglist_03;
	        var $10 = HEAP32[$nxtglist_03 + 8 >> 2];
	        if (($10 | 0) != 0) {
	          _glist_free($10);
	        }
	        var $nxtglist_0 = HEAP32[$nxtglist_03 + 12 >> 2];
	        var $12 = ($nxtglist_0 | 0) == 0;
	        _ckd_free($nxtglist_03);
	        if ($12) {
	          break $_$163;
	        }
	        var $nxtglist_03 = $nxtglist_0;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fsg_psubtree_init($lextree, $fsg, $from_state, $alloc_head) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $glist = __stackBase__;
	  HEAP32[$glist >> 2] = 0;
	  if ((HEAP32[$alloc_head >> 2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str285 | 0, 696, STRING_TABLE.___func___fsg_psubtree_init | 0, STRING_TABLE.__str19304 | 0);
	  }
	  if ((HEAP32[HEAP32[$lextree + 16 >> 2] + 4 >> 2] | 0) > 64) {
	    __E__pr_header(STRING_TABLE.__str285 | 0, 700, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str21306 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 64, tempInt));
	  } else {
	    var $10 = $fsg + 32 | 0;
	    if ((HEAP32[$10 >> 2] | 0) > 0) {
	      var $13 = $lextree + 20 | 0;
	      var $14 = $lextree + 24 | 0;
	      var $fsg_idx = $fsg + 48 | 0;
	      var $dst_05 = 0;
	      var $root_06 = 0;
	      while (1) {
	        var $root_06;
	        var $dst_05;
	        var $fsg_idx_val = HEAP32[$fsg_idx >> 2];
	        var $17 = _fsg_model_trans($fsg_idx_val, $from_state, $dst_05);
	        var $18 = ($17 | 0) == 0;
	        $_$137 : do {
	          if ($18) {
	            var $root_1_lcssa = $root_06;
	          } else {
	            var $gn_01 = $17;
	            var $root_12 = $root_06;
	            while (1) {
	              var $root_12;
	              var $gn_01;
	              var $20 = HEAP32[$gn_01 >> 2];
	              var $21 = $20;
	              if ((HEAP32[$20 + 12 >> 2] | 0) <= -1) {
	                ___assert_func(STRING_TABLE.__str285 | 0, 712, STRING_TABLE.___func___fsg_psubtree_init | 0, STRING_TABLE.__str22307 | 0);
	              }
	              var $30 = HEAP32[HEAP32[$13 >> 2] + ($from_state << 2) >> 2];
	              var $33 = HEAP32[HEAP32[$14 >> 2] + ($dst_05 << 2) >> 2];
	              var $34 = _psubtree_add_trans($lextree, $root_12, $glist, $21, $30, $33, $alloc_head);
	              var $36 = HEAP32[$gn_01 + 8 >> 2];
	              if (($36 | 0) == 0) {
	                var $root_1_lcssa = $34;
	                break $_$137;
	              }
	              var $gn_01 = $36;
	              var $root_12 = $34;
	            }
	          }
	        } while (0);
	        var $root_1_lcssa;
	        var $38 = $dst_05 + 1 | 0;
	        if (($38 | 0) >= (HEAP32[$10 >> 2] | 0)) {
	          break;
	        }
	        var $dst_05 = $38;
	        var $root_06 = $root_1_lcssa;
	      }
	      var $root_0_lcssa = $root_1_lcssa;
	      var $42 = HEAP32[$glist >> 2];
	    } else {
	      var $root_0_lcssa = 0;
	      var $42 = 0;
	    }
	    var $42;
	    var $root_0_lcssa;
	    _fsg_glist_linklist_free($42);
	    STACKTOP = __stackBase__;
	    return $root_0_lcssa;
	  }
	  return null;
	}

	_fsg_psubtree_init["X"] = 1;

	function _fsg_pnode_add_all_ctxt($ctxt) {
	  var $1 = $ctxt;
	  HEAP32[$1 >> 2] = -1;
	  HEAP32[$1 + 4 >> 2] = -1;
	  return;
	  return;
	}

	function _fsg_psubtree_pnode_deactivate($pnode) {
	  var $1 = $pnode + 32 | 0;
	  _hmm_clear($1);
	  return;
	  return;
	}

	function _psubtree_add_trans($lextree, $root, $curglist, $fsglink, $lclist, $rclist, $alloc_head) {
	  var $glist_0$s2;
	  var $201$s2;
	  var $199$s2;
	  var $198$s2;
	  var $28$s2;
	  var $1$s2;
	  var $lclist$s1 = $lclist >> 1;
	  var __label__;
	  var $1$s2 = ($lextree + 16 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $4 = HEAPU16[$2 + 40 >> 1];
	  var $5 = $4 << 16 >> 16;
	  var $7 = HEAPU32[$2 + 4 >> 2];
	  var $9 = HEAP32[$fsglink + 12 >> 2];
	  var $10 = ($9 | 0) > -1;
	  do {
	    if ($10) {
	      var $11 = $lextree + 8 | 0;
	      var $19 = $11;
	      var $18 = HEAP32[$11 >> 2];
	      __label__ = 5;
	      break;
	    }
	    ___assert_func(STRING_TABLE.__str285 | 0, 375, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str47363 | 0);
	    var $14 = $lextree + 8 | 0;
	    var $15 = HEAP32[$14 >> 2];
	    if (($9 | 0) == -1) {
	      var $29 = STRING_TABLE.__str32348 | 0;
	      var $28 = $14, $28$s2 = $28 >> 2;
	      var $27 = $15;
	      __label__ = 6;
	      break;
	    }
	    var $19 = $14;
	    var $18 = $15;
	    __label__ = 5;
	    break;
	  } while (0);
	  if (__label__ == 5) {
	    var $18;
	    var $19;
	    var $29 = HEAP32[HEAP32[HEAP32[$lextree >> 2] + 16 >> 2] + ($9 << 2) >> 2];
	    var $28 = $19, $28$s2 = $28 >> 2;
	    var $27 = $18;
	  }
	  var $27;
	  var $28;
	  var $29;
	  var $30 = _dict_wordid($27, $29);
	  var $35 = HEAPU32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 8 >> 2) + ($30 * 5 | 0)];
	  var $36 = ($35 | 0) > 0;
	  if (!$36) {
	    ___assert_func(STRING_TABLE.__str285 | 0, 379, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str24309 | 0);
	  }
	  if (HEAP16[$lclist$s1] << 16 >> 16 <= -1) {
	    ___assert_func(STRING_TABLE.__str285 | 0, 381, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str25310 | 0);
	  }
	  if (HEAP16[$rclist >> 1] << 16 >> 16 <= -1) {
	    ___assert_func(STRING_TABLE.__str285 | 0, 382, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str26311 | 0);
	  }
	  var $47 = HEAPU32[$alloc_head >> 2];
	  if (($35 | 0) == 1) {
	    var $50 = HEAP32[$28$s2];
	    var $56 = HEAP16[HEAP32[(HEAP32[$50 + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] >> 1] << 16 >> 16;
	    var $57 = _dict_filler_word($50, $30);
	    if (($57 | 0) == 0) {
	      var $159 = HEAP32[HEAP32[$1$s2] + 56 >> 2];
	      var $160 = $159 + $56 * 12 | 0;
	      var $161 = HEAPU8[$160] | HEAPU8[$160 + 1] << 8 | HEAPU8[$160 + 2] << 16 | HEAPU8[$160 + 3] << 24 | 0;
	      var $162 = $159 + $56 * 12 + 4 | 0;
	      var $163 = HEAPU8[$162] | HEAPU8[$162 + 1] << 8 | HEAPU8[$162 + 2] << 16 | HEAPU8[$162 + 3] << 24 | 0;
	      var $164 = ___ckd_calloc__(1, 108, STRING_TABLE.__str285 | 0, 443);
	      var $165 = $164;
	      var $166 = $lextree + 4 | 0;
	      var $167 = HEAP32[$166 >> 2];
	      HEAP32[$164 + 28 >> 2] = $167;
	      HEAP32[$164 >> 2] = $fsglink;
	      var $179 = (HEAP32[$fsglink + 8 >> 2] >> 10) + HEAP32[$lextree + 40 >> 2] + HEAP32[$lextree + 44 >> 2] | 0;
	      HEAP32[$164 + 12 >> 2] = $179;
	      HEAP16[$164 + 24 >> 1] = $4;
	      HEAP8[$164 + 26 | 0] = 0;
	      HEAP8[$164 + 27 | 0] = 1;
	      HEAP32[$164 + 8 >> 2] = $root;
	      var $189 = $164 + 16 | 0;
	      _fsg_pnode_add_all_ctxt($189);
	      HEAP32[$164 + 4 >> 2] = $47;
	      var $192 = HEAP32[$166 >> 2];
	      var $194 = $164 + 32 | 0;
	      _hmm_init($192, $194, 0, $161, $163);
	      var $_6 = $165;
	      var $head_8 = $165;
	    } else {
	      var $59 = HEAP16[$lclist$s1];
	      var $60 = $59 << 16 >> 16 > -1;
	      $_$23 : do {
	        if ($60) {
	          var $61 = $lextree + 12 | 0;
	          var $62 = $lextree + 4 | 0;
	          var $63 = $fsglink + 8 | 0;
	          var $64 = $lextree + 40 | 0;
	          var $65 = $lextree + 44 | 0;
	          var $head_079 = $47;
	          var $lc_pnodelist_080 = 0;
	          var $i_081 = 0;
	          var $_083 = $root;
	          var $_in90 = $59;
	          while (1) {
	            var $_in90;
	            var $_083;
	            var $i_081;
	            var $lc_pnodelist_080;
	            var $head_079;
	            var $67 = $_in90 << 16 >> 16;
	            var $76 = HEAPU16[HEAP32[HEAP32[HEAP32[HEAP32[$61 >> 2] + 20 >> 2] + ($56 << 2) >> 2] + ($67 << 2) >> 2] + ($5 << 1) >> 1];
	            var $77 = $76 & 65535;
	            var $88 = HEAP32[HEAP32[$1$s2] + 56 >> 2] + (HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] >> 1] << 16 >> 16) * 12 + 4 | 0;
	            var $89 = HEAPU8[$88] | HEAPU8[$88 + 1] << 8 | HEAPU8[$88 + 2] << 16 | HEAPU8[$88 + 3] << 24 | 0;
	            var $gn_0 = $lc_pnodelist_080;
	            while (1) {
	              var $gn_0;
	              if (($gn_0 | 0) == 0) {
	                var $111 = ___ckd_calloc__(1, 108, STRING_TABLE.__str285 | 0, 414);
	                var $112 = $111;
	                var $113 = HEAP32[$62 >> 2];
	                HEAP32[$111 + 28 >> 2] = $113;
	                HEAP32[$111 >> 2] = $fsglink;
	                var $122 = (HEAP32[$63 >> 2] >> 10) + HEAP32[$64 >> 2] + HEAP32[$65 >> 2] | 0;
	                HEAP32[$111 + 12 >> 2] = $122;
	                var $130 = HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] >> 1];
	                HEAP16[$111 + 24 >> 1] = $130;
	                HEAP8[$111 + 26 | 0] = 0;
	                HEAP8[$111 + 27 | 0] = 1;
	                HEAP32[$111 + 8 >> 2] = $_083;
	                var $142 = ($67 >> 5 << 2) + $111 + 16 | 0;
	                var $144 = HEAP32[$142 >> 2] | 1 << ($67 & 31);
	                HEAP32[$142 >> 2] = $144;
	                HEAP32[$111 + 4 >> 2] = $head_079;
	                var $147 = HEAP32[$62 >> 2];
	                var $149 = $111 + 32 | 0;
	                _hmm_init($147, $149, 0, $77, $89);
	                var $150 = _glist_add_ptr($lc_pnodelist_080, $111);
	                var $_1 = $112;
	                var $lc_pnodelist_1 = $150;
	                var $head_1 = $112;
	                break;
	              }
	              var $94 = HEAP32[$gn_0 >> 2];
	              if (HEAP16[$94 + 84 >> 1] << 16 >> 16 == $76 << 16 >> 16) {
	                var $105 = ($67 >> 5 << 2) + $94 + 16 | 0;
	                var $107 = HEAP32[$105 >> 2] | 1 << ($67 & 31);
	                HEAP32[$105 >> 2] = $107;
	                var $_1 = $_083;
	                var $lc_pnodelist_1 = $lc_pnodelist_080;
	                var $head_1 = $head_079;
	                break;
	              }
	              var $gn_0 = HEAP32[$gn_0 + 8 >> 2];
	            }
	            var $head_1;
	            var $lc_pnodelist_1;
	            var $_1;
	            var $152 = $i_081 + 1 | 0;
	            var $154 = HEAPU16[($152 << 1 >> 1) + $lclist$s1];
	            if ($154 << 16 >> 16 <= -1) {
	              var $head_0_lcssa = $head_1;
	              var $lc_pnodelist_0_lcssa = $lc_pnodelist_1;
	              var $_0_lcssa = $_1;
	              break $_$23;
	            }
	            var $head_079 = $head_1;
	            var $lc_pnodelist_080 = $lc_pnodelist_1;
	            var $i_081 = $152;
	            var $_083 = $_1;
	            var $_in90 = $154;
	          }
	        } else {
	          var $head_0_lcssa = $47;
	          var $lc_pnodelist_0_lcssa = 0;
	          var $_0_lcssa = $root;
	        }
	      } while (0);
	      var $_0_lcssa;
	      var $lc_pnodelist_0_lcssa;
	      var $head_0_lcssa;
	      _glist_free($lc_pnodelist_0_lcssa);
	      var $_6 = $_0_lcssa;
	      var $head_8 = $head_0_lcssa;
	    }
	  } else {
	    var $196 = ___ckd_calloc__($7, 4, STRING_TABLE.__str285 | 0, 464);
	    var $197 = $196;
	    $_$39 : do {
	      if ($36) {
	        var $198$s2 = ($lextree + 12 | 0) >> 2;
	        var $199$s2 = ($lextree + 4 | 0) >> 2;
	        var $200 = $lextree + 40 | 0;
	        var $201$s2 = ($lextree + 44 | 0) >> 2;
	        var $202 = $35 - 1 | 0;
	        var $203 = $7 << 2;
	        var $204 = $fsglink + 8 | 0;
	        var $205 = $35 - 2 | 0;
	        var $206 = $202 & 255;
	        var $207 = ($202 | 0) == 1;
	        var $p_062 = 0;
	        var $head_263 = $47;
	        var $pred_064 = 0;
	        var $lc_pnodelist_265 = 0;
	        var $rc_pnodelist_066 = 0;
	        var $_270 = $root;
	        while (1) {
	          var $_270;
	          var $rc_pnodelist_066;
	          var $lc_pnodelist_265;
	          var $pred_064;
	          var $head_263;
	          var $p_062;
	          var $212 = HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)];
	          var $215 = HEAP16[$212 + ($p_062 << 1) >> 1] << 16 >> 16;
	          var $216 = ($p_062 | 0) == 0;
	          $_$43 : do {
	            if ($216) {
	              var $220 = HEAP16[$212 + 2 >> 1] << 16 >> 16;
	              var $glist_0_in = $curglist;
	              while (1) {
	                var $glist_0_in;
	                var $glist_0 = HEAP32[$glist_0_in >> 2], $glist_0$s2 = $glist_0 >> 2;
	                if (($glist_0 | 0) == 0) {
	                  var $241 = ___ckd_calloc__(1, 16, STRING_TABLE.__str285 | 0, 493);
	                  var $242 = $241;
	                  var $243 = HEAP32[$curglist >> 2];
	                  HEAP32[$241 + 12 >> 2] = $243;
	                  HEAP32[$curglist >> 2] = $242;
	                  var $glist_1 = $242;
	                  break;
	                }
	                var $225 = HEAPU32[$glist_0$s2 + 2];
	                var $226 = ($225 | 0) == 0;
	                var $_pre2 = HEAP32[$glist_0$s2];
	                if (!($226 | ($_pre2 | 0) == ($215 | 0))) {
	                  if ((HEAP32[$glist_0$s2 + 1] | 0) != ($220 | 0)) {
	                    var $glist_0_in = $glist_0 + 12 | 0;
	                    continue;
	                  }
	                }
	                if (($_pre2 | 0) != ($215 | 0)) {
	                  var $glist_1 = $glist_0;
	                  break;
	                }
	                if ((HEAP32[$glist_0$s2 + 1] | 0) != ($220 | 0) | $226) {
	                  var $glist_1 = $glist_0;
	                  break;
	                }
	                var $_5 = $_270;
	                var $rc_pnodelist_3 = $rc_pnodelist_066;
	                var $lc_pnodelist_5 = $225;
	                var $pred_2 = HEAP32[$225 >> 2];
	                var $head_7 = $head_263;
	                break $_$43;
	              }
	              var $glist_1;
	              HEAP32[$glist_1 >> 2] = $215;
	              HEAP32[$glist_1 + 4 >> 2] = $220;
	              var $248 = $glist_1 + 8 | 0;
	              HEAP32[$248 >> 2] = 0;
	              var $249 = HEAP16[$lclist$s1];
	              var $250 = $249 << 16 >> 16 > -1;
	              $_$56 : do {
	                if ($250) {
	                  var $head_320 = $head_263;
	                  var $lc_pnodelist_321 = 0;
	                  var $i_122 = 0;
	                  var $_324 = $_270;
	                  var $_in89 = $249;
	                  while (1) {
	                    var $_in89;
	                    var $_324;
	                    var $i_122;
	                    var $lc_pnodelist_321;
	                    var $head_320;
	                    var $251 = $_in89 << 16 >> 16;
	                    var $260 = HEAPU16[HEAP32[HEAP32[HEAP32[HEAP32[$198$s2] + 12 >> 2] + ($215 << 2) >> 2] + ($220 << 2) >> 2] + ($251 << 1) >> 1];
	                    var $261 = $260 & 65535;
	                    var $272 = HEAP32[HEAP32[$1$s2] + 56 >> 2] + (HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] >> 1] << 16 >> 16) * 12 + 4 | 0;
	                    var $273 = HEAPU8[$272] | HEAPU8[$272 + 1] << 8 | HEAPU8[$272 + 2] << 16 | HEAPU8[$272 + 3] << 24 | 0;
	                    var $j_0 = 0;
	                    var $pnode_0 = HEAP32[$197 >> 2];
	                    while (1) {
	                      var $pnode_0;
	                      var $j_0;
	                      if (($j_0 | 0) >= ($7 | 0)) {
	                        ___assert_func(STRING_TABLE.__str285 | 0, 515, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str27312 | 0);
	                        __label__ = 42;
	                        break;
	                      }
	                      var $279 = HEAPU32[$197 + ($j_0 << 2) >> 2];
	                      if (($279 | 0) == 0) {
	                        __label__ = 42;
	                        break;
	                      }
	                      if (HEAP16[$279 + 84 >> 1] << 16 >> 16 == $260 << 16 >> 16) {
	                        var $_4 = $_324;
	                        var $lc_pnodelist_4 = $lc_pnodelist_321;
	                        var $pnode_2 = $279;
	                        var $head_4 = $head_320;
	                        __label__ = 44;
	                        break;
	                      }
	                      var $j_0 = $j_0 + 1 | 0;
	                      var $pnode_0 = $279;
	                    }
	                    do {
	                      if (__label__ == 42) {
	                        if (($pnode_0 | 0) != 0) {
	                          var $_4 = $_324;
	                          var $lc_pnodelist_4 = $lc_pnodelist_321;
	                          var $pnode_2 = $pnode_0;
	                          var $head_4 = $head_320;
	                          break;
	                        }
	                        var $289 = ___ckd_calloc__(1, 108, STRING_TABLE.__str285 | 0, 520);
	                        var $290 = $289;
	                        var $291 = HEAP32[$199$s2];
	                        HEAP32[$289 + 28 >> 2] = $291;
	                        var $296 = HEAP32[$201$s2] + HEAP32[$200 >> 2] | 0;
	                        HEAP32[$289 + 12 >> 2] = $296;
	                        var $304 = HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] >> 1];
	                        HEAP16[$289 + 24 >> 1] = $304;
	                        HEAP8[$289 + 26 | 0] = 0;
	                        HEAP8[$289 + 27 | 0] = 0;
	                        HEAP32[$289 + 8 >> 2] = $_324;
	                        HEAP32[$289 + 4 >> 2] = $head_320;
	                        var $313 = HEAP32[$199$s2];
	                        var $315 = $289 + 32 | 0;
	                        _hmm_init($313, $315, 0, $261, $273);
	                        var $316 = _glist_add_ptr($lc_pnodelist_321, $289);
	                        var $317 = ($j_0 << 2) + $197 | 0;
	                        HEAP32[$317 >> 2] = $290;
	                        var $_4 = $290;
	                        var $lc_pnodelist_4 = $316;
	                        var $pnode_2 = $290;
	                        var $head_4 = $290;
	                      }
	                    } while (0);
	                    var $head_4;
	                    var $pnode_2;
	                    var $lc_pnodelist_4;
	                    var $_4;
	                    var $321 = ($251 >> 5 << 2) + $pnode_2 + 16 | 0;
	                    var $323 = HEAP32[$321 >> 2] | 1 << ($251 & 31);
	                    HEAP32[$321 >> 2] = $323;
	                    var $324 = $i_122 + 1 | 0;
	                    var $326 = HEAPU16[($324 << 1 >> 1) + $lclist$s1];
	                    if ($326 << 16 >> 16 <= -1) {
	                      var $head_3_lcssa = $head_4;
	                      var $lc_pnodelist_3_lcssa = $lc_pnodelist_4;
	                      var $_3_lcssa = $_4;
	                      break $_$56;
	                    }
	                    var $head_320 = $head_4;
	                    var $lc_pnodelist_321 = $lc_pnodelist_4;
	                    var $i_122 = $324;
	                    var $_324 = $_4;
	                    var $_in89 = $326;
	                  }
	                } else {
	                  var $head_3_lcssa = $head_263;
	                  var $lc_pnodelist_3_lcssa = 0;
	                  var $_3_lcssa = $_270;
	                }
	              } while (0);
	              var $_3_lcssa;
	              var $lc_pnodelist_3_lcssa;
	              var $head_3_lcssa;
	              HEAP32[$248 >> 2] = $lc_pnodelist_3_lcssa;
	              var $_5 = $_3_lcssa;
	              var $rc_pnodelist_3 = $rc_pnodelist_066;
	              var $lc_pnodelist_5 = $lc_pnodelist_3_lcssa;
	              var $pred_2 = $_3_lcssa;
	              var $head_7 = $head_3_lcssa;
	            } else {
	              if (($p_062 | 0) == ($202 | 0)) {
	                _memset($196, 0, $203, 1);
	                var $402 = HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)];
	                var $405 = HEAP16[$402 + ($205 << 1) >> 1] << 16 >> 16;
	                var $410 = HEAP32[HEAP32[HEAP32[$198$s2] + 16 >> 2] + ($215 << 2) >> 2];
	                var $417 = HEAP32[HEAP32[$1$s2] + 56 >> 2] + (HEAP16[$402 + ($202 << 1) >> 1] << 16 >> 16) * 12 + 4 | 0;
	                var $418 = HEAPU8[$417] | HEAPU8[$417 + 1] << 8 | HEAPU8[$417 + 2] << 16 | HEAPU8[$417 + 3] << 24 | 0;
	                var $419 = HEAP16[$rclist >> 1];
	                var $420 = $419 << 16 >> 16 > -1;
	                $_$87 : do {
	                  if ($420) {
	                    var $421 = $410 + $405 * 12 + 4 | 0;
	                    var $422 = $410 + $405 * 12 | 0;
	                    var $head_535 = $head_263;
	                    var $rc_pnodelist_136 = $rc_pnodelist_066;
	                    var $i_237 = 0;
	                    var $_in = $419;
	                    while (1) {
	                      var $_in;
	                      var $i_237;
	                      var $rc_pnodelist_136;
	                      var $head_535;
	                      var $424 = $_in << 16 >> 16;
	                      var $428 = HEAP16[HEAP32[$421 >> 2] + ($424 << 1) >> 1] << 16 >> 16;
	                      var $431 = HEAPU16[HEAP32[$422 >> 2] + ($428 << 1) >> 1];
	                      var $432 = $431 & 65535;
	                      var $433 = ($428 << 2) + $197 | 0;
	                      var $434 = HEAPU32[$433 >> 2];
	                      var $435 = ($434 | 0) == 0;
	                      do {
	                        if ($435) {
	                          var $437 = ___ckd_calloc__(1, 108, STRING_TABLE.__str285 | 0, 612);
	                          var $438 = $437;
	                          var $439 = HEAP32[$199$s2];
	                          HEAP32[$437 + 28 >> 2] = $439;
	                          var $445 = (HEAP32[$204 >> 2] >> 10) + HEAP32[$201$s2] | 0;
	                          HEAP32[$437 + 12 >> 2] = $445;
	                          var $454 = HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] + ($202 << 1) >> 1];
	                          HEAP16[$437 + 24 >> 1] = $454;
	                          HEAP8[$437 + 26 | 0] = $206;
	                          HEAP8[$437 + 27 | 0] = 1;
	                          if (($rc_pnodelist_136 | 0) == 0) {
	                            var $465 = 0;
	                          } else {
	                            var $465 = HEAP32[$rc_pnodelist_136 >> 2];
	                          }
	                          var $465;
	                          HEAP32[$437 + 8 >> 2] = $465;
	                          HEAP32[$437 >> 2] = $fsglink;
	                          HEAP32[$437 + 4 >> 2] = $head_535;
	                          var $471 = HEAP32[$199$s2];
	                          var $473 = $437 + 32 | 0;
	                          _hmm_init($471, $473, 0, $432, $418);
	                          var $474 = _glist_add_ptr($rc_pnodelist_136, $437);
	                          HEAP32[$433 >> 2] = $438;
	                          var $rc_pnodelist_2 = $474;
	                          var $pnode_4 = $438;
	                          var $head_6 = $438;
	                        } else {
	                          if (HEAP16[$434 + 84 >> 1] << 16 >> 16 == $431 << 16 >> 16) {
	                            var $rc_pnodelist_2 = $rc_pnodelist_136;
	                            var $pnode_4 = $434;
	                            var $head_6 = $head_535;
	                            break;
	                          }
	                          ___assert_func(STRING_TABLE.__str285 | 0, 635, STRING_TABLE.___func___psubtree_add_trans | 0, STRING_TABLE.__str28313 | 0);
	                          var $rc_pnodelist_2 = $rc_pnodelist_136;
	                          var $pnode_4 = $434;
	                          var $head_6 = $head_535;
	                        }
	                      } while (0);
	                      var $head_6;
	                      var $pnode_4;
	                      var $rc_pnodelist_2;
	                      var $484 = ($424 >> 5 << 2) + $pnode_4 + 16 | 0;
	                      var $486 = HEAP32[$484 >> 2] | 1 << ($424 & 31);
	                      HEAP32[$484 >> 2] = $486;
	                      var $487 = $i_237 + 1 | 0;
	                      var $489 = HEAPU16[$rclist + ($487 << 1) >> 1];
	                      if ($489 << 16 >> 16 <= -1) {
	                        var $head_5_lcssa = $head_6;
	                        var $rc_pnodelist_1_lcssa = $rc_pnodelist_2;
	                        break $_$87;
	                      }
	                      var $head_535 = $head_6;
	                      var $rc_pnodelist_136 = $rc_pnodelist_2;
	                      var $i_237 = $487;
	                      var $_in = $489;
	                    }
	                  } else {
	                    var $head_5_lcssa = $head_263;
	                    var $rc_pnodelist_1_lcssa = $rc_pnodelist_066;
	                  }
	                } while (0);
	                var $rc_pnodelist_1_lcssa;
	                var $head_5_lcssa;
	                if ($207) {
	                  var $491 = $rc_pnodelist_1_lcssa;
	                  var $gn_2 = $lc_pnodelist_265;
	                  var $pred_1 = $pred_064;
	                  while (1) {
	                    var $pred_1;
	                    var $gn_2;
	                    if (($gn_2 | 0) == 0) {
	                      var $_5 = $_270;
	                      var $rc_pnodelist_3 = $rc_pnodelist_1_lcssa;
	                      var $lc_pnodelist_5 = $lc_pnodelist_265;
	                      var $pred_2 = $pred_1;
	                      var $head_7 = $head_5_lcssa;
	                      break $_$43;
	                    }
	                    var $496 = HEAP32[$gn_2 >> 2];
	                    var $497 = $496;
	                    var $498 = $496;
	                    var $499 = HEAP32[$498 >> 2];
	                    if (($499 | 0) != 0) {
	                      var $succ_0 = $499;
	                      break;
	                    }
	                    var $503 = HEAP32[$491 >> 2];
	                    HEAP32[$498 >> 2] = $503;
	                    var $gn_2 = HEAP32[$gn_2 + 8 >> 2];
	                    var $pred_1 = $497;
	                  }
	                  while (1) {
	                    var $succ_0;
	                    var $506 = $succ_0 + 8 | 0;
	                    var $507 = HEAP32[$506 >> 2];
	                    if (($507 | 0) == 0) {
	                      break;
	                    }
	                    var $succ_0 = $507;
	                  }
	                  var $511 = HEAP32[$491 >> 2];
	                  HEAP32[$506 >> 2] = $511;
	                  var $_5 = $_270;
	                  var $rc_pnodelist_3 = $rc_pnodelist_1_lcssa;
	                  var $lc_pnodelist_5 = $lc_pnodelist_265;
	                  var $pred_2 = $497;
	                  var $head_7 = $head_5_lcssa;
	                } else {
	                  var $513 = $pred_064 | 0;
	                  var $514 = HEAP32[$513 >> 2];
	                  if (($514 | 0) == 0) {
	                    var $519 = HEAP32[$rc_pnodelist_1_lcssa >> 2];
	                    HEAP32[$513 >> 2] = $519;
	                    var $_5 = $_270;
	                    var $rc_pnodelist_3 = $rc_pnodelist_1_lcssa;
	                    var $lc_pnodelist_5 = $lc_pnodelist_265;
	                    var $pred_2 = $pred_064;
	                    var $head_7 = $head_5_lcssa;
	                  } else {
	                    var $succ2_0 = $514;
	                    while (1) {
	                      var $succ2_0;
	                      var $520 = $succ2_0 + 8 | 0;
	                      var $521 = HEAP32[$520 >> 2];
	                      if (($521 | 0) == 0) {
	                        break;
	                      }
	                      var $succ2_0 = $521;
	                    }
	                    var $526 = HEAP32[$rc_pnodelist_1_lcssa >> 2];
	                    HEAP32[$520 >> 2] = $526;
	                    var $_5 = $_270;
	                    var $rc_pnodelist_3 = $rc_pnodelist_1_lcssa;
	                    var $lc_pnodelist_5 = $lc_pnodelist_265;
	                    var $pred_2 = $pred_064;
	                    var $head_7 = $head_5_lcssa;
	                  }
	                }
	              } else {
	                var $331 = HEAP32[$198$s2];
	                var $332 = _dict2pid_internal($331, $30, $p_062);
	                var $333 = $332 & 65535;
	                var $345 = HEAP32[HEAP32[$1$s2] + 56 >> 2] + (HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] + ($p_062 << 1) >> 1] << 16 >> 16) * 12 + 4 | 0;
	                var $346 = HEAPU8[$345] | HEAPU8[$345 + 1] << 8 | HEAPU8[$345 + 2] << 16 | HEAPU8[$345 + 3] << 24 | 0;
	                var $347 = $pred_064 | 0;
	                var $348 = HEAPU32[$347 >> 2];
	                var $pnode_3 = $348;
	                while (1) {
	                  var $pnode_3;
	                  if (($pnode_3 | 0) == 0) {
	                    break;
	                  }
	                  if (HEAP16[$pnode_3 + 84 >> 1] << 16 >> 16 == $332 << 16 >> 16) {
	                    if (HEAP8[$pnode_3 + 27 | 0] << 24 >> 24 == 0) {
	                      var $_5 = $_270;
	                      var $rc_pnodelist_3 = $rc_pnodelist_066;
	                      var $lc_pnodelist_5 = $lc_pnodelist_265;
	                      var $pred_2 = $pnode_3;
	                      var $head_7 = $head_263;
	                      break $_$43;
	                    }
	                  }
	                  var $pnode_3 = HEAP32[$pnode_3 + 8 >> 2];
	                }
	                var $361 = ___ckd_calloc__(1, 108, STRING_TABLE.__str285 | 0, 568);
	                var $362 = $361;
	                var $363 = HEAP32[$199$s2];
	                HEAP32[$361 + 28 >> 2] = $363;
	                var $366 = HEAP32[$201$s2];
	                HEAP32[$361 + 12 >> 2] = $366;
	                var $375 = HEAP16[HEAP32[(HEAP32[HEAP32[$28$s2] + 8 >> 2] + 4 >> 2) + ($30 * 5 | 0)] + ($p_062 << 1) >> 1];
	                HEAP16[$361 + 24 >> 1] = $375;
	                HEAP8[$361 + 26 | 0] = $p_062 & 255;
	                HEAP8[$361 + 27 | 0] = 0;
	                HEAP32[$361 + 8 >> 2] = $348;
	                var $383 = ($p_062 | 0) == 1;
	                $_$80 : do {
	                  if ($383) {
	                    if (($lc_pnodelist_265 | 0) == 0) {
	                      break;
	                    }
	                    var $gn_147 = $lc_pnodelist_265;
	                    while (1) {
	                      var $gn_147;
	                      var $387 = HEAP32[$gn_147 >> 2];
	                      HEAP32[$387 >> 2] = $362;
	                      var $389 = HEAP32[$gn_147 + 8 >> 2];
	                      if (($389 | 0) == 0) {
	                        break $_$80;
	                      }
	                      var $gn_147 = $389;
	                    }
	                  } else {
	                    HEAP32[$347 >> 2] = $362;
	                  }
	                } while (0);
	                HEAP32[$361 + 4 >> 2] = $head_263;
	                var $394 = HEAP32[$199$s2];
	                var $396 = $361 + 32 | 0;
	                _hmm_init($394, $396, 0, $333, $346);
	                var $_5 = $_270;
	                var $rc_pnodelist_3 = $rc_pnodelist_066;
	                var $lc_pnodelist_5 = $lc_pnodelist_265;
	                var $pred_2 = $362;
	                var $head_7 = $362;
	              }
	            }
	          } while (0);
	          var $head_7;
	          var $pred_2;
	          var $lc_pnodelist_5;
	          var $rc_pnodelist_3;
	          var $_5;
	          var $527 = $p_062 + 1 | 0;
	          if (($527 | 0) == ($35 | 0)) {
	            var $head_2_lcssa = $head_7;
	            var $rc_pnodelist_0_lcssa = $rc_pnodelist_3;
	            var $_2_lcssa = $_5;
	            break $_$39;
	          }
	          var $p_062 = $527;
	          var $head_263 = $head_7;
	          var $pred_064 = $pred_2;
	          var $lc_pnodelist_265 = $lc_pnodelist_5;
	          var $rc_pnodelist_066 = $rc_pnodelist_3;
	          var $_270 = $_5;
	        }
	      } else {
	        var $head_2_lcssa = $47;
	        var $rc_pnodelist_0_lcssa = 0;
	        var $_2_lcssa = $root;
	      }
	    } while (0);
	    var $_2_lcssa;
	    var $rc_pnodelist_0_lcssa;
	    var $head_2_lcssa;
	    _ckd_free($196);
	    _glist_free($rc_pnodelist_0_lcssa);
	    var $_6 = $_2_lcssa;
	    var $head_8 = $head_2_lcssa;
	  }
	  var $head_8;
	  var $_6;
	  HEAP32[$alloc_head >> 2] = $head_8;
	  return $_6;
	  return null;
	}

	_psubtree_add_trans["X"] = 1;

	function _fsg_search_init($config, $acmod, $dict, $d2p) {
	  var $132$s2;
	  var $63$s2;
	  var $config_idx7$s2;
	  var $34$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(1, 160, STRING_TABLE.__str316 | 0, 99);
	  var $2 = $1;
	  var $3 = $1;
	  _ps_search_init($3, _fsg_funcs, $config, $acmod, $dict, $d2p);
	  var $5 = HEAP32[$acmod + 20 >> 2];
	  var $7 = HEAP32[$5 + 12 >> 2];
	  var $11 = HEAP32[HEAP32[$acmod + 24 >> 2] >> 2];
	  var $13 = HEAP32[$5 + 60 >> 2];
	  var $14 = _hmm_context_init($7, $11, $13);
	  HEAP32[$1 + 56 >> 2] = $14;
	  var $17 = ($14 | 0) == 0;
	  $_$2 : do {
	    if ($17) {
	      var $22 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2];
	      FUNCTION_TABLE[$22]($3);
	      var $_0 = 0;
	    } else {
	      var $24 = _fsg_history_init();
	      HEAP32[$1 + 76 >> 2] = $24;
	      HEAP16[$1 + 128 >> 1] = -1;
	      var $29 = _hash_table_new(5, 0);
	      HEAP32[$1 + 60 >> 2] = $29;
	      HEAPF32[$1 + 100 >> 2] = 1;
	      var $34$s2 = ($acmod + 4 | 0) >> 2;
	      var $35 = HEAP32[$34$s2];
	      var $config_idx7$s2 = ($config + 4 | 0) >> 2;
	      var $config_idx7_val = HEAP32[$config_idx7$s2];
	      var $36 = _cmd_ln_float_r($config_idx7_val, STRING_TABLE.__str1552724 | 0);
	      var $37 = _logmath_log($35, $36);
	      var $38 = $37 >> 10;
	      var $40 = $1 + 88 | 0;
	      HEAP32[$40 >> 2] = $38;
	      HEAP32[$1 + 104 >> 2] = $38;
	      var $43 = HEAP32[$34$s2];
	      var $config_idx6_val = HEAP32[$config_idx7$s2];
	      var $44 = _cmd_ln_float_r($config_idx6_val, STRING_TABLE.__str1612730 | 0);
	      var $45 = _logmath_log($43, $44);
	      var $46 = $45 >> 10;
	      var $48 = $1 + 92 | 0;
	      HEAP32[$48 >> 2] = $46;
	      HEAP32[$1 + 108 >> 2] = $46;
	      var $51 = HEAP32[$34$s2];
	      var $config_idx5_val = HEAP32[$config_idx7$s2];
	      var $52 = _cmd_ln_float_r($config_idx5_val, STRING_TABLE.__str1582727 | 0);
	      var $53 = _logmath_log($51, $52);
	      var $54 = $53 >> 10;
	      var $56 = $1 + 96 | 0;
	      HEAP32[$56 >> 2] = $54;
	      HEAP32[$1 + 112 >> 2] = $54;
	      var $config_idx4_val = HEAP32[$config_idx7$s2];
	      var $59 = _cmd_ln_float_r($config_idx4_val, STRING_TABLE.__str2232792 | 0);
	      var $61 = $59 & -1;
	      var $63$s2 = ($1 + 116 | 0) >> 2;
	      HEAP32[$63$s2] = $61;
	      var $64 = HEAP32[$34$s2];
	      var $config_idx3_val = HEAP32[$config_idx7$s2];
	      var $65 = _cmd_ln_float_r($config_idx3_val, STRING_TABLE.__str2412810 | 0);
	      var $67 = $65;
	      var $68 = _logmath_log($64, $67);
	      var $71 = HEAP32[$63$s2] * $68 >> 10;
	      var $73 = $1 + 120 | 0;
	      HEAP32[$73 >> 2] = $71;
	      var $74 = HEAP32[$34$s2];
	      var $config_idx2_val = HEAP32[$config_idx7$s2];
	      var $75 = _cmd_ln_float_r($config_idx2_val, STRING_TABLE.__str2352804 | 0);
	      var $77 = $75;
	      var $78 = _logmath_log($74, $77);
	      var $81 = HEAP32[$63$s2] * $78 >> 10;
	      var $83 = $1 + 124 | 0;
	      HEAP32[$83 >> 2] = $81;
	      var $config_idx_val = HEAP32[$config_idx7$s2];
	      var $84 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1872756 | 0);
	      if (($84 | 0) != 0) {
	        HEAP8[$1 + 131 | 0] = 1;
	      }
	      var $config_idx1_val = HEAP32[$config_idx7$s2];
	      var $89 = _cmd_ln_float_r($config_idx1_val, STRING_TABLE.__str2322801 | 0);
	      HEAPF32[$1 + 132 >> 2] = 1 / $89;
	      __E__pr_info_header(STRING_TABLE.__str316 | 0, 145);
	      var $94 = HEAP32[$40 >> 2];
	      var $95 = HEAP32[$48 >> 2];
	      var $96 = HEAP32[$56 >> 2];
	      var $97 = HEAP32[$83 >> 2];
	      var $98 = HEAP32[$73 >> 2];
	      __E__pr_info(STRING_TABLE.__str10326 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $94, HEAP32[tempInt + 4 >> 2] = $95, HEAP32[tempInt + 8 >> 2] = $96, HEAP32[tempInt + 12 >> 2] = $97, HEAP32[tempInt + 16 >> 2] = $98, tempInt));
	      var $config_idx10_val = HEAP32[$config_idx7$s2];
	      var $99 = _cmd_ln_str_r($config_idx10_val, STRING_TABLE.__str2552824 | 0);
	      var $100 = ($99 | 0) == 0;
	      $_$8 : do {
	        if ($100) {
	          var $config_idx9_val = HEAP32[$config_idx7$s2];
	          var $127 = _cmd_ln_str_r($config_idx9_val, STRING_TABLE.__str2572826 | 0);
	          if (($127 | 0) == 0) {
	            var $_0 = $3;
	            break $_$2;
	          }
	          var $130 = _jsgf_parse_file($127, 0);
	          var $132$s2 = ($1 + 68 | 0) >> 2;
	          HEAP32[$132$s2] = $130;
	          if (($130 | 0) == 0) {
	            break;
	          }
	          var $config_idx8_val = HEAP32[$config_idx7$s2];
	          var $135 = _cmd_ln_str_r($config_idx8_val, STRING_TABLE.__str2592828 | 0);
	          var $136 = ($135 | 0) == 0;
	          do {
	            if ($136) {
	              var $_idx11_val = HEAP32[HEAP32[$132$s2] + 16 >> 2];
	              var $145 = _jsgf_rule_iter($_idx11_val);
	              var $itor_0 = $145;
	              var $rule_0 = 0;
	              while (1) {
	                var $rule_0;
	                var $itor_0;
	                if (($itor_0 | 0) == 0) {
	                  var $rule_1 = $rule_0;
	                  break;
	                }
	                var $152 = HEAP32[HEAP32[$itor_0 + 4 >> 2] + 8 >> 2];
	                var $153 = $152;
	                var $_idx12_val = HEAP32[$152 + 8 >> 2];
	                var $155 = _jsgf_rule_public($_idx12_val);
	                if (($155 | 0) != 0) {
	                  var $rule_1 = $153;
	                  break;
	                }
	                var $158 = _hash_table_iter_next($itor_0);
	                var $itor_0 = $158;
	                var $rule_0 = $153;
	              }
	              var $rule_1;
	              if (($rule_1 | 0) != 0) {
	                var $rule_2 = $rule_1;
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str316 | 0, 198, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str18334 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $127, tempInt));
	              break $_$8;
	            }
	            var $138 = _string_join(STRING_TABLE.__str14330 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $135, HEAP32[tempInt + 4 >> 2] = STRING_TABLE.__str15331 | 0, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	            var $_idx_val = HEAP32[HEAP32[$132$s2] + 16 >> 2];
	            var $140 = _jsgf_get_rule($_idx_val, $138);
	            _ckd_free($138);
	            if (($140 | 0) != 0) {
	              var $rule_2 = $140;
	              break;
	            }
	            __E__pr_header(STRING_TABLE.__str316 | 0, 183, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str17333 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $135, tempInt));
	            break $_$8;
	          } while (0);
	          var $rule_2;
	          var $163 = HEAP32[$132$s2];
	          var $164 = HEAP32[$34$s2];
	          var $166 = HEAP32[$63$s2] | 0;
	          var $167 = _jsgf_build_fsg($163, $rule_2, $164, $166);
	          var $168 = $167 + 4 | 0;
	          var $169 = HEAP32[$168 >> 2];
	          var $170 = _fsg_set_add($2, $169, $167);
	          if (($170 | 0) == ($167 | 0)) {
	            var $174 = HEAP32[$168 >> 2];
	            var $175 = _fsg_set_select($2, $174);
	            if (($175 | 0) == 0) {
	              break;
	            }
	            var $180 = HEAP32[$1 + 16 >> 2];
	            var $183 = HEAP32[$1 + 20 >> 2];
	            var $184 = _fsg_search_reinit($3, $180, $183);
	            if (($184 | 0) >= 0) {
	              var $_0 = $3;
	              break $_$2;
	            }
	          } else {
	            _fsg_model_free($167);
	          }
	        } else {
	          var $102 = HEAP32[$34$s2];
	          var $104 = HEAP32[$63$s2] | 0;
	          var $105 = _fsg_model_readfile($99, $102, $104);
	          if (($105 | 0) == 0) {
	            break;
	          }
	          var $108 = $105 + 4 | 0;
	          var $109 = HEAP32[$108 >> 2];
	          var $110 = _fsg_set_add($2, $109, $105);
	          if (($110 | 0) == ($105 | 0)) {
	            var $114 = HEAP32[$108 >> 2];
	            var $115 = _fsg_set_select($2, $114);
	            if (($115 | 0) == 0) {
	              break;
	            }
	            var $120 = HEAP32[$1 + 16 >> 2];
	            var $123 = HEAP32[$1 + 20 >> 2];
	            var $124 = _fsg_search_reinit($3, $120, $123);
	            if (($124 | 0) >= 0) {
	              var $_0 = $3;
	              break $_$2;
	            }
	          } else {
	            _fsg_model_free($105);
	          }
	        }
	      } while (0);
	      _fsg_search_free($3);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_search_init["X"] = 1;

	function _fsg_set_add($fsgs, $name, $fsg) {
	  if (($name | 0) == 0) {
	    var $_01 = HEAP32[$fsg + 4 >> 2];
	  } else {
	    var $_01 = $name;
	  }
	  var $_01;
	  var $fsgs_idx = $fsgs + 16 | 0;
	  var $fsgs_idx_val = HEAP32[$fsgs_idx >> 2];
	  var $6 = _fsg_search_check_dict($fsgs_idx_val, $fsg);
	  if (($6 | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    var $9 = $fsgs + 8 | 0;
	    var $_idx1_val = HEAP32[HEAP32[$9 >> 2] + 4 >> 2];
	    var $11 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str2632832 | 0);
	    var $12 = ($11 | 0) == 0;
	    do {
	      if (!$12) {
	        if ((HEAP32[$fsg + 20 >> 2] | 0) != 0) {
	          break;
	        }
	        _fsg_search_add_silences($fsgs, $fsg);
	      }
	    } while (0);
	    var $_idx_val = HEAP32[HEAP32[$9 >> 2] + 4 >> 2];
	    var $20 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str2612830 | 0);
	    var $21 = ($20 | 0) == 0;
	    do {
	      if (!$21) {
	        if ((HEAP32[$fsg + 24 >> 2] | 0) != 0) {
	          break;
	        }
	        var $fsgs_idx2_val = HEAP32[$fsgs_idx >> 2];
	        _fsg_search_add_altpron($fsgs_idx2_val, $fsg);
	      }
	    } while (0);
	    var $29 = HEAP32[$fsgs + 60 >> 2];
	    var $30 = $fsg;
	    var $31 = _hash_table_enter($29, $_01, $30);
	    var $_0 = $31;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_set_select($fsgs, $name) {
	  var __stackBase__ = STACKTOP;
	  var $fsgs_idx_val = HEAP32[$fsgs + 60 >> 2];
	  var $1 = _fsg_set_get_fsg($fsgs_idx_val, $name);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str316 | 0, 459, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str24340 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
	    var $_0 = 0;
	  } else {
	    HEAP32[$fsgs + 64 >> 2] = $1;
	    var $_0 = $1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_search_reinit($search, $dict, $d2p) {
	  var $search$s2 = $search >> 2;
	  var $1 = $search + 72 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) != 0) {
	    var $5 = $2;
	    _fsg_lextree_free($5);
	  }
	  _ps_search_base_reinit($search, $dict, $d2p);
	  var $7 = $search + 64 | 0;
	  var $8 = HEAP32[$7 >> 2];
	  if (($8 | 0) == 0) {
	    var $_0 = 1;
	  } else {
	    var $12 = HEAP32[$dict + 20 >> 2];
	    HEAP32[$search$s2 + 10] = $12;
	    var $14 = $8;
	    var $18 = HEAP32[HEAP32[$search$s2 + 3] + 20 >> 2];
	    var $21 = HEAP32[$search$s2 + 14];
	    var $24 = HEAP32[$search$s2 + 31];
	    var $27 = HEAP32[$search$s2 + 30];
	    var $28 = _fsg_lextree_init($14, $dict, $d2p, $18, $21, $24, $27);
	    var $_c = $28;
	    HEAP32[$1 >> 2] = $_c;
	    var $31 = HEAP32[$search$s2 + 19];
	    var $33 = HEAP32[$7 >> 2];
	    _fsg_history_set_fsg($31, $33, $dict);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_search_free($search) {
	  var $10$s2;
	  _ps_search_deinit($search);
	  var $2 = HEAP32[$search + 68 >> 2];
	  if (($2 | 0) != 0) {
	    var $5 = $2;
	    _jsgf_grammar_free($5);
	  }
	  var $9 = HEAP32[$search + 72 >> 2];
	  _fsg_lextree_free($9);
	  var $10$s2 = ($search + 76 | 0) >> 2;
	  var $11 = HEAP32[$10$s2];
	  if (($11 | 0) != 0) {
	    var $_idx_val = HEAP32[$11 + 4 >> 2];
	    _fsg_history_reset($_idx_val);
	    var $16 = HEAP32[$10$s2];
	    _fsg_history_set_fsg($16, 0, 0);
	    var $18 = HEAP32[$10$s2];
	    _fsg_history_free($18);
	  }
	  var $20 = $search + 60 | 0;
	  var $21 = HEAP32[$20 >> 2];
	  if (($21 | 0) != 0) {
	    var $24 = $21;
	    var $25 = _hash_table_iter($24);
	    var $26 = ($25 | 0) == 0;
	    $_$71 : do {
	      if (!$26) {
	        var $itor_01 = $25;
	        while (1) {
	          var $itor_01;
	          var $31 = HEAP32[HEAP32[$itor_01 + 4 >> 2] + 8 >> 2];
	          _fsg_model_free($31);
	          var $32 = _hash_table_iter_next($itor_01);
	          if (($32 | 0) == 0) {
	            break $_$71;
	          }
	          var $itor_01 = $32;
	        }
	      }
	    } while (0);
	    var $35 = HEAP32[$20 >> 2];
	    _hash_table_free($35);
	  }
	  var $39 = HEAP32[$search + 56 >> 2];
	  _hmm_context_free($39);
	  var $40 = $search;
	  _ckd_free($40);
	  return;
	  return;
	}

	_fsg_search_free["X"] = 1;

	function _fsg_set_get_fsg($fsgs_0_2_val, $name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $1 = _hash_table_lookup($fsgs_0_2_val, $name, $val);
	  if (($1 | 0) < 0) {
	    var $_0 = 0;
	  } else {
	    var $_0 = HEAP32[$val >> 2];
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_search_check_dict($fsgs_0_0_4_val, $fsg) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $fsg + 8 | 0;
	  var $2 = $fsg + 16 | 0;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	      var $_0 = 1;
	      break;
	    }
	    var $9 = HEAP32[HEAP32[$2 >> 2] + ($i_0 << 2) >> 2];
	    var $10 = _dict_wordid($fsgs_0_0_4_val, $9);
	    if (($10 | 0) != -1) {
	      var $i_0 = $i_0 + 1 | 0;
	      continue;
	    }
	    __E__pr_header(STRING_TABLE.__str316 | 0, 332, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str56372 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $9, tempInt));
	    var $_0 = 0;
	    break;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_search_add_silences($fsgs, $fsg) {
	  var $2 = HEAP32[$fsgs + 16 >> 2];
	  var $3 = $fsgs + 8 | 0;
	  var $_idx1_val = HEAP32[HEAP32[$3 >> 2] + 4 >> 2];
	  var $5 = _cmd_ln_float_r($_idx1_val, STRING_TABLE.__str2452814 | 0);
	  var $6 = $5;
	  _fsg_model_add_silence($fsg, STRING_TABLE.__str55371 | 0, $6);
	  var $8 = HEAP32[$2 + 24 >> 2];
	  var $9 = $2 + 28 | 0;
	  var $10 = HEAP32[$9 >> 2];
	  var $11 = ($8 | 0) < ($10 | 0);
	  $_$87 : do {
	    if ($11) {
	      var $12 = $2 + 32 | 0;
	      var $13 = $2 + 36 | 0;
	      var $14 = $2 + 8 | 0;
	      var $wid_01 = $8;
	      var $16 = $10;
	      while (1) {
	        var $16;
	        var $wid_01;
	        if (($wid_01 | 0) < 0) {
	          var $22 = 0;
	        } else {
	          var $22 = HEAP32[(HEAP32[$14 >> 2] >> 2) + ($wid_01 * 5 | 0)];
	        }
	        var $22;
	        var $24 = ($wid_01 | 0) == (HEAP32[$12 >> 2] | 0);
	        do {
	          if ($24) {
	            var $33 = $16;
	          } else {
	            if (($wid_01 | 0) == (HEAP32[$13 >> 2] | 0)) {
	              var $33 = $16;
	              break;
	            }
	            var $_idx_val = HEAP32[HEAP32[$3 >> 2] + 4 >> 2];
	            var $30 = _cmd_ln_float_r($_idx_val, STRING_TABLE.__str2482817 | 0);
	            var $31 = $30;
	            _fsg_model_add_silence($fsg, $22, $31);
	            var $33 = HEAP32[$9 >> 2];
	          }
	        } while (0);
	        var $33;
	        var $34 = $wid_01 + 1 | 0;
	        if (($34 | 0) >= ($33 | 0)) {
	          break $_$87;
	        }
	        var $wid_01 = $34;
	        var $16 = $33;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fsg_search_add_altpron($fsgs_0_0_4_val, $fsg) {
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAP32[$fsg + 8 >> 2];
	  var $3 = ($2 | 0) > 0;
	  $_$100 : do {
	    if ($3) {
	      var $4 = $fsgs_0_0_4_val + 8 | 0;
	      var $5 = $fsg + 16 | 0;
	      var $n_alt_02 = 0;
	      var $i_03 = 0;
	      while (1) {
	        var $i_03;
	        var $n_alt_02;
	        var $9 = HEAP32[HEAP32[$5 >> 2] + ($i_03 << 2) >> 2];
	        var $10 = _dict_wordid($fsgs_0_0_4_val, $9);
	        var $11 = ($10 | 0) == -1;
	        $_$104 : do {
	          if ($11) {
	            var $n_alt_2 = $n_alt_02;
	          } else {
	            var $12 = HEAP32[$4 >> 2];
	            var $14 = HEAP32[($12 + 12 >> 2) + ($10 * 5 | 0)];
	            if (($14 | 0) == -1) {
	              var $n_alt_2 = $n_alt_02;
	              break;
	            }
	            var $n_alt_11 = $n_alt_02;
	            var $17 = $12;
	            var $16 = $14;
	            while (1) {
	              var $16;
	              var $17;
	              var $n_alt_11;
	              if (($16 | 0) < 0) {
	                var $23 = 0;
	              } else {
	                var $23 = HEAP32[($17 >> 2) + ($16 * 5 | 0)];
	              }
	              var $23;
	              var $24 = _fsg_model_add_alt($fsg, $9, $23);
	              var $25 = $24 + $n_alt_11 | 0;
	              var $26 = HEAP32[$4 >> 2];
	              var $28 = HEAP32[($26 + 12 >> 2) + ($16 * 5 | 0)];
	              if (($28 | 0) == -1) {
	                var $n_alt_2 = $25;
	                break $_$104;
	              }
	              var $n_alt_11 = $25;
	              var $17 = $26;
	              var $16 = $28;
	            }
	          }
	        } while (0);
	        var $n_alt_2;
	        var $30 = $i_03 + 1 | 0;
	        if (($30 | 0) == ($2 | 0)) {
	          var $n_alt_0_lcssa = $n_alt_2;
	          break $_$100;
	        }
	        var $n_alt_02 = $n_alt_2;
	        var $i_03 = $30;
	      }
	    } else {
	      var $n_alt_0_lcssa = 0;
	    }
	  } while (0);
	  var $n_alt_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str316 | 0, 364);
	  __E__pr_info(STRING_TABLE.__str54370 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_alt_0_lcssa, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fsg_search_step($search, $frame_idx) {
	  var $30$s2;
	  var $20$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $1 = __stackBase__;
	  HEAP32[$1 >> 2] = $frame_idx;
	  var $2 = $search;
	  var $4 = HEAP32[$search + 12 >> 2];
	  if (HEAP8[$4 + 89 | 0] << 24 >> 24 == 0) {
	    _fsg_search_sen_active($2);
	  }
	  var $10 = _acmod_score($4, $1);
	  var $13 = $search + 156 | 0;
	  var $15 = HEAP32[$13 >> 2] + HEAP32[$4 + 52 >> 2] | 0;
	  HEAP32[$13 >> 2] = $15;
	  var $19 = HEAP32[$search + 56 >> 2] + 8 | 0;
	  HEAP32[$19 >> 2] = $10;
	  var $20$s2 = ($search + 76 | 0) >> 2;
	  var $_idx_val_idx_val = HEAP32[HEAP32[HEAP32[$20$s2] + 4 >> 2] + 12 >> 2];
	  var $24 = _fsg_history_n_entries($_idx_val_idx_val);
	  var $_c = $24;
	  HEAP32[$search + 140 >> 2] = $_c;
	  _fsg_search_hmm_eval($2);
	  _fsg_search_hmm_prune_prop($2);
	  var $27 = HEAP32[$20$s2];
	  _fsg_history_end_frame($27);
	  _fsg_search_null_prop($2);
	  var $29 = HEAP32[$20$s2];
	  _fsg_history_end_frame($29);
	  _fsg_search_word_trans($2);
	  var $30$s2 = ($search + 80 | 0) >> 2;
	  var $31 = HEAP32[$30$s2];
	  if (($31 | 0) == 0) {
	    var $56 = 0;
	    var $_pre_phi7 = $search + 128 | 0;
	  } else {
	    var $35 = $search + 128 | 0;
	    var $gn_02 = $31;
	    while (1) {
	      var $gn_02;
	      var $37 = HEAP32[$gn_02 >> 2];
	      var $40 = HEAP16[$37 + 102 >> 1];
	      var $41 = HEAP16[$35 >> 1];
	      var $42 = $40 << 16 >> 16 == $41 << 16 >> 16;
	      do {
	        if ($42) {
	          var $44 = $37;
	          _fsg_psubtree_pnode_deactivate($44);
	        } else {
	          if (($40 << 16 >> 16 | 0) == (($41 << 16 >> 16) + 1 | 0)) {
	            break;
	          }
	          ___assert_func(STRING_TABLE.__str316 | 0, 927, STRING_TABLE.___func___fsg_search_step | 0, STRING_TABLE.__str25341 | 0);
	        }
	      } while (0);
	      var $53 = HEAP32[$gn_02 + 8 >> 2];
	      if (($53 | 0) == 0) {
	        break;
	      }
	      var $gn_02 = $53;
	    }
	    var $56 = HEAP32[$30$s2];
	    var $_pre_phi7 = $35;
	  }
	  var $_pre_phi7;
	  var $56;
	  _glist_free($56);
	  var $57 = $search + 84 | 0;
	  var $_c1 = HEAP32[$57 >> 2];
	  HEAP32[$30$s2] = $_c1;
	  HEAP32[$57 >> 2] = 0;
	  var $60 = HEAP16[$_pre_phi7 >> 1] + 1 & 65535;
	  HEAP16[$_pre_phi7 >> 1] = $60;
	  STACKTOP = __stackBase__;
	  return 1;
	  return null;
	}

	_fsg_search_step["X"] = 1;

	function _fsg_search_sen_active($fsgs) {
	  var $1 = $fsgs + 12 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  _acmod_clear_active($2);
	  var $gn_01 = HEAP32[$fsgs + 80 >> 2];
	  var $4 = ($gn_01 | 0) == 0;
	  $_$130 : do {
	    if (!$4) {
	      var $5 = $fsgs + 128 | 0;
	      var $gn_02 = $gn_01;
	      while (1) {
	        var $gn_02;
	        var $8 = HEAP32[$gn_02 >> 2];
	        var $10 = $8 + 32 | 0;
	        if (HEAP16[$8 + 102 >> 1] << 16 >> 16 != HEAP16[$5 >> 1] << 16 >> 16) {
	          ___assert_func(STRING_TABLE.__str316 | 0, 502, STRING_TABLE.___func___fsg_search_sen_active | 0, STRING_TABLE.__str50366 | 0);
	        }
	        var $18 = HEAP32[$1 >> 2];
	        _acmod_activate_hmm($18, $10);
	        var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	        if (($gn_0 | 0) == 0) {
	          break $_$130;
	        }
	        var $gn_02 = $gn_0;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fsg_search_hmm_eval($fsgs) {
	  var $35$s2;
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAP32[$fsgs + 80 >> 2];
	  if (($2 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str316 | 0, 524, STRING_TABLE.__str102579 | 0);
	    var $8 = HEAP16[$fsgs + 128 >> 1] << 16 >> 16;
	    __E__pr_warn(STRING_TABLE.__str49365 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	  } else {
	    var $4 = $fsgs + 128 | 0;
	    var $bestscore_01 = -536870912;
	    var $gn_02 = $2;
	    var $n_03 = 0;
	    while (1) {
	      var $n_03;
	      var $gn_02;
	      var $bestscore_01;
	      var $11 = HEAP32[$gn_02 >> 2];
	      var $13 = $11 + 32 | 0;
	      if (HEAP16[$11 + 102 >> 1] << 16 >> 16 != HEAP16[$4 >> 1] << 16 >> 16) {
	        ___assert_func(STRING_TABLE.__str316 | 0, 533, STRING_TABLE.___func___fsg_search_hmm_eval | 0, STRING_TABLE.__str50366 | 0);
	      }
	      var $21 = _hmm_vit_eval($13);
	      var $_bestscore_0 = ($21 | 0) > ($bestscore_01 | 0) ? $21 : $bestscore_01;
	      var $24 = HEAP32[$gn_02 + 8 >> 2];
	      var $25 = $n_03 + 1 | 0;
	      if (($24 | 0) == 0) {
	        break;
	      }
	      var $bestscore_01 = $_bestscore_0;
	      var $gn_02 = $24;
	      var $n_03 = $25;
	    }
	    var $27 = $fsgs + 152 | 0;
	    var $29 = HEAP32[$27 >> 2] + $25 | 0;
	    HEAP32[$27 >> 2] = $29;
	    var $_idx_val = HEAP32[HEAP32[$fsgs + 8 >> 2] + 4 >> 2];
	    var $32 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1962765 | 0);
	    var $or_cond = ($32 | 0) != -1 & ($25 | 0) > ($32 | 0);
	    var $35$s2 = ($fsgs + 100 | 0) >> 2;
	    do {
	      if ($or_cond) {
	        var $37 = HEAPF32[$35$s2];
	        if ($37 <= .1) {
	          break;
	        }
	        var $41 = $37 * .8999999761581421;
	        HEAPF32[$35$s2] = $41;
	        var $46 = HEAP32[$fsgs + 88 >> 2] * $41 & -1;
	        HEAP32[$fsgs + 104 >> 2] = $46;
	        var $52 = HEAP32[$fsgs + 92 >> 2] * $41 & -1;
	        HEAP32[$fsgs + 108 >> 2] = $52;
	        var $58 = HEAP32[$fsgs + 96 >> 2] * $41 & -1;
	        HEAP32[$fsgs + 112 >> 2] = $58;
	      } else {
	        HEAPF32[$35$s2] = 1;
	        var $62 = HEAP32[$fsgs + 88 >> 2];
	        HEAP32[$fsgs + 104 >> 2] = $62;
	        var $65 = HEAP32[$fsgs + 92 >> 2];
	        HEAP32[$fsgs + 108 >> 2] = $65;
	        var $68 = HEAP32[$fsgs + 96 >> 2];
	        HEAP32[$fsgs + 112 >> 2] = $68;
	      }
	    } while (0);
	    var $71 = $fsgs + 72 | 0;
	    if (($25 | 0) > (HEAP32[HEAP32[$71 >> 2] + 36 >> 2] | 0)) {
	      __E__pr_header(STRING_TABLE.__str316 | 0, 581, STRING_TABLE.__str72422 | 0);
	      var $78 = HEAP16[$4 >> 1] << 16 >> 16;
	      var $81 = HEAP32[HEAP32[$71 >> 2] + 36 >> 2];
	      __E__die_error(STRING_TABLE.__str53369 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $78, HEAP32[tempInt + 4 >> 2] = $25, HEAP32[tempInt + 8 >> 2] = $81, tempInt));
	    } else {
	      HEAP32[$fsgs + 136 >> 2] = $_bestscore_0;
	    }
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fsg_search_hmm_eval["X"] = 1;

	function _fsg_search_hmm_prune_prop($fsgs) {
	  var $1$s2;
	  var $fsgs$s2 = $fsgs >> 2;
	  var $1$s2 = ($fsgs + 84 | 0) >> 2;
	  if ((HEAP32[$1$s2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 694, STRING_TABLE.___func___fsg_search_hmm_prune_prop | 0, STRING_TABLE.__str28344 | 0);
	  }
	  var $7 = HEAP32[$fsgs$s2 + 34];
	  var $10 = HEAP32[$fsgs$s2 + 26] + $7 | 0;
	  var $13 = HEAP32[$fsgs$s2 + 27] + $7 | 0;
	  var $16 = HEAP32[$fsgs$s2 + 28] + $7 | 0;
	  var $gn_01 = HEAP32[$fsgs$s2 + 20];
	  var $18 = ($gn_01 | 0) == 0;
	  $_$5 : do {
	    if (!$18) {
	      var $19 = $fsgs + 128 | 0;
	      var $gn_02 = $gn_01;
	      while (1) {
	        var $gn_02;
	        var $22 = HEAP32[$gn_02 >> 2];
	        var $23 = $22;
	        var $27 = (HEAP32[$22 + 96 >> 2] | 0) < ($10 | 0);
	        do {
	          if (!$27) {
	            var $30 = $22 + 102 | 0;
	            var $31 = HEAP16[$30 >> 1];
	            var $32 = HEAP16[$19 >> 1];
	            var $33 = $31 << 16 >> 16 == $32 << 16 >> 16;
	            do {
	              if ($33) {
	                var $35 = $31 + 1 & 65535;
	                HEAP16[$30 >> 1] = $35;
	                var $36 = HEAP32[$1$s2];
	                var $37 = _glist_add_ptr($36, $22);
	                HEAP32[$1$s2] = $37;
	              } else {
	                if (($31 << 16 >> 16 | 0) == (($32 << 16 >> 16) + 1 | 0)) {
	                  break;
	                }
	                ___assert_func(STRING_TABLE.__str316 | 0, 713, STRING_TABLE.___func___fsg_search_hmm_prune_prop | 0, STRING_TABLE.__str43359 | 0);
	              }
	            } while (0);
	            var $50 = HEAP32[$22 + 76 >> 2];
	            if (HEAP8[$22 + 27 | 0] << 24 >> 24 == 0) {
	              if (($50 | 0) < ($13 | 0)) {
	                break;
	              }
	              _fsg_search_pnode_trans($fsgs, $23);
	            } else {
	              if (($50 | 0) < ($16 | 0)) {
	                break;
	              }
	              _fsg_search_pnode_exit($fsgs, $23);
	            }
	          }
	        } while (0);
	        var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	        if (($gn_0 | 0) == 0) {
	          break $_$5;
	        }
	        var $gn_02 = $gn_0;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_search_hmm_prune_prop["X"] = 1;

	function _fsg_search_null_prop($fsgs) {
	  var $8$s2;
	  var $2 = HEAP32[$fsgs + 64 >> 2];
	  var $7 = HEAP32[$fsgs + 112 >> 2] + HEAP32[$fsgs + 136 >> 2] | 0;
	  var $8$s2 = ($fsgs + 76 | 0) >> 2;
	  var $_idx_val = HEAP32[HEAP32[$8$s2] + 4 >> 2];
	  var $_idx_val_idx_val = HEAP32[$_idx_val + 12 >> 2];
	  var $10 = _fsg_history_n_entries($_idx_val_idx_val);
	  var $12 = HEAP32[$fsgs + 140 >> 2];
	  var $13 = ($12 | 0) < ($10 | 0);
	  $_$24 : do {
	    if ($13) {
	      var $14 = $2 + 36 | 0;
	      var $bpidx_02 = $12;
	      var $_idx1_val = $_idx_val;
	      while (1) {
	        var $_idx1_val;
	        var $bpidx_02;
	        var $16 = _fsg_history_entry_get($_idx1_val, $bpidx_02);
	        var $18 = HEAP32[$16 >> 2];
	        var $_in = ($18 | 0) == 0 ? $14 : $18 + 4 | 0;
	        var $21 = HEAP32[$_in >> 2];
	        var $22 = _fsg_model_arcs($2, $21);
	        var $23 = ($22 | 0) == 0;
	        $_$28 : do {
	          if (!$23) {
	            var $24 = $16 + 4 | 0;
	            var $25 = $16 + 12 | 0;
	            var $26 = $16 + 14 | 0;
	            var $27 = $16 + 16 | 0;
	            var $itor_01 = $22;
	            while (1) {
	              var $itor_01;
	              var $29 = _fsg_arciter_get($itor_01);
	              var $32 = (HEAP32[$29 + 12 >> 2] | 0) == -1;
	              do {
	                if ($32) {
	                  var $38 = (HEAP32[$29 + 8 >> 2] >> 10) + HEAP32[$24 >> 2] | 0;
	                  if (($38 | 0) < ($7 | 0)) {
	                    break;
	                  }
	                  var $41 = HEAP32[$8$s2];
	                  var $43 = HEAP16[$25 >> 1] << 16 >> 16;
	                  var $45 = HEAP16[$26 >> 1] << 16 >> 16;
	                  _fsg_history_entry_add($41, $29, $43, $38, $bpidx_02, $45, $27);
	                }
	              } while (0);
	              var $47 = _fsg_arciter_next($itor_01);
	              if (($47 | 0) == 0) {
	                break $_$28;
	              }
	              var $itor_01 = $47;
	            }
	          }
	        } while (0);
	        var $49 = $bpidx_02 + 1 | 0;
	        if (($49 | 0) == ($10 | 0)) {
	          break $_$24;
	        }
	        var $bpidx_02 = $49;
	        var $_idx1_val = HEAP32[HEAP32[$8$s2] + 4 >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_search_null_prop["X"] = 1;

	function _fsg_search_word_trans($fsgs) {
	  var $1 = $fsgs + 76 | 0;
	  var $_idx_val = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
	  var $_idx_val_idx_val = HEAP32[$_idx_val + 12 >> 2];
	  var $3 = _fsg_history_n_entries($_idx_val_idx_val);
	  var $8 = HEAP32[$fsgs + 104 >> 2] + HEAP32[$fsgs + 136 >> 2] | 0;
	  var $9 = $fsgs + 128 | 0;
	  var $12 = (HEAP16[$9 >> 1] << 16 >> 16) + 1 | 0;
	  var $14 = HEAP32[$fsgs + 140 >> 2];
	  var $15 = ($14 | 0) < ($3 | 0);
	  $_$40 : do {
	    if ($15) {
	      var $16 = $fsgs + 64 | 0;
	      var $17 = $fsgs + 72 | 0;
	      var $18 = $fsgs + 84 | 0;
	      var $bpidx_03 = $14;
	      var $_idx1_val = $_idx_val;
	      while (1) {
	        var $_idx1_val;
	        var $bpidx_03;
	        var $20 = _fsg_history_entry_get($_idx1_val, $bpidx_03);
	        if (($20 | 0) == 0) {
	          ___assert_func(STRING_TABLE.__str316 | 0, 810, STRING_TABLE.___func___fsg_search_word_trans | 0, STRING_TABLE.__str41357 | 0);
	        }
	        var $24 = HEAP32[$20 + 4 >> 2];
	        if (HEAP16[$9 >> 1] << 16 >> 16 != HEAP16[$20 + 12 >> 1] << 16 >> 16) {
	          ___assert_func(STRING_TABLE.__str316 | 0, 812, STRING_TABLE.___func___fsg_search_word_trans | 0, STRING_TABLE.__str42358 | 0);
	        }
	        var $32 = HEAP32[$20 >> 2];
	        if (($32 | 0) == 0) {
	          var $_in = HEAP32[$16 >> 2] + 36 | 0;
	        } else {
	          var $_in = $32 + 4 | 0;
	        }
	        var $_in;
	        var $43 = HEAP16[$20 + 14 >> 1] << 16 >> 16;
	        var $root_01 = HEAP32[HEAP32[HEAP32[$17 >> 2] + 28 >> 2] + (HEAP32[$_in >> 2] << 2) >> 2];
	        var $48 = ($root_01 | 0) == 0;
	        $_$54 : do {
	          if (!$48) {
	            var $49 = $43 >> 5;
	            var $51 = 1 << ($43 & 31);
	            var $root_02 = $root_01;
	            while (1) {
	              var $root_02;
	              var $55 = HEAPU16[$root_02 + 24 >> 1] & 65535;
	              var $59 = (HEAP32[$root_02 + ($49 << 2) + 16 >> 2] & $51 | 0) == 0;
	              do {
	                if (!$59) {
	                  if ((HEAP32[$20 + ($55 >>> 5 << 2) + 16 >> 2] & 1 << ($55 & 31) | 0) == 0) {
	                    break;
	                  }
	                  var $71 = HEAP32[$root_02 + 12 >> 2] + $24 | 0;
	                  if (($71 | 0) <= ($8 | 0)) {
	                    break;
	                  }
	                  var $74 = $root_02 + 32 | 0;
	                  if (($71 | 0) <= (HEAP32[$root_02 + 36 >> 2] | 0)) {
	                    break;
	                  }
	                  if ((HEAP16[$root_02 + 102 >> 1] << 16 >> 16 | 0) < ($12 | 0)) {
	                    var $84 = HEAP32[$18 >> 2];
	                    var $86 = _glist_add_ptr($84, $root_02);
	                    HEAP32[$18 >> 2] = $86;
	                  }
	                  _hmm_enter($74, $71, $bpidx_03, $12);
	                }
	              } while (0);
	              var $root_0 = HEAPU32[$root_02 + 8 >> 2];
	              if (($root_0 | 0) == 0) {
	                break $_$54;
	              }
	              var $root_02 = $root_0;
	            }
	          }
	        } while (0);
	        var $91 = $bpidx_03 + 1 | 0;
	        if (($91 | 0) == ($3 | 0)) {
	          break $_$40;
	        }
	        var $bpidx_03 = $91;
	        var $_idx1_val = HEAP32[HEAP32[$1 >> 2] + 4 >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_search_word_trans["X"] = 1;

	function _fsg_search_start($search) {
	  var $36$s1;
	  var $29$s2;
	  var $24$s2;
	  var $search$s2 = $search >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $ctxt = __stackBase__;
	  var $1 = $search;
	  HEAPF32[$search$s2 + 25] = 1;
	  var $6 = HEAP32[$search$s2 + 22];
	  HEAP32[$search$s2 + 26] = $6;
	  var $9 = HEAP32[$search$s2 + 23];
	  HEAP32[$search$s2 + 27] = $9;
	  var $_c = HEAP32[$search$s2 + 24];
	  HEAP32[$search$s2 + 28] = $_c;
	  var $17 = HEAP32[HEAP32[$search$s2 + 3] + 20 >> 2];
	  var $18 = _bin_mdef_ciphone_id($17, STRING_TABLE.__str43450 | 0);
	  var $19 = $search + 80 | 0;
	  if ((HEAP32[$19 >> 2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 966, STRING_TABLE.___func___fsg_search_start | 0, STRING_TABLE.__str27343 | 0);
	  }
	  var $24$s2 = ($search + 84 | 0) >> 2;
	  if ((HEAP32[$24$s2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 967, STRING_TABLE.___func___fsg_search_start | 0, STRING_TABLE.__str28344 | 0);
	  }
	  var $29$s2 = ($search + 76 | 0) >> 2;
	  var $_idx_val = HEAP32[HEAP32[$29$s2] + 4 >> 2];
	  _fsg_history_reset($_idx_val);
	  var $33 = HEAP32[$29$s2];
	  _fsg_history_utt_start($33);
	  HEAP8[$1 + 130 | 0] = 0;
	  _fsg_pnode_add_all_ctxt($ctxt);
	  var $36$s1 = ($search + 128 | 0) >> 1;
	  HEAP16[$36$s1] = -1;
	  HEAP32[$search$s2 + 34] = 0;
	  var $39 = HEAP32[$29$s2];
	  _fsg_history_entry_add($39, 0, -1, 0, -1, $18, $ctxt);
	  HEAP32[$search$s2 + 35] = 0;
	  _fsg_search_null_prop($1);
	  _fsg_search_word_trans($1);
	  var $_c1 = HEAP32[$24$s2];
	  HEAP32[$19 >> 2] = $_c1;
	  HEAP32[$24$s2] = 0;
	  var $43 = HEAP16[$36$s1] + 1 & 65535;
	  HEAP16[$36$s1] = $43;
	  HEAP32[$search$s2 + 38] = 0;
	  HEAP32[$search$s2 + 39] = 0;
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	_fsg_search_start["X"] = 1;

	function _fsg_search_finish($search) {
	  var $13$s2;
	  var $2$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $search;
	  var $2$s2 = ($search + 80 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  var $4 = ($3 | 0) == 0;
	  $_$78 : do {
	    if (!$4) {
	      var $gn_06 = $3;
	      while (1) {
	        var $gn_06;
	        var $9 = HEAP32[$gn_06 >> 2];
	        _fsg_psubtree_pnode_deactivate($9);
	        var $11 = HEAP32[$gn_06 + 8 >> 2];
	        if (($11 | 0) == 0) {
	          break $_$78;
	        }
	        var $gn_06 = $11;
	      }
	    }
	  } while (0);
	  var $13$s2 = ($search + 84 | 0) >> 2;
	  var $14 = HEAP32[$13$s2];
	  var $15 = ($14 | 0) == 0;
	  $_$83 : do {
	    if (!$15) {
	      var $gn_15 = $14;
	      while (1) {
	        var $gn_15;
	        var $20 = HEAP32[$gn_15 >> 2];
	        _fsg_psubtree_pnode_deactivate($20);
	        var $22 = HEAP32[$gn_15 + 8 >> 2];
	        if (($22 | 0) == 0) {
	          break $_$83;
	        }
	        var $gn_15 = $22;
	      }
	    }
	  } while (0);
	  var $25 = HEAP32[$2$s2];
	  _glist_free($25);
	  HEAP32[$2$s2] = 0;
	  var $27 = HEAP32[$13$s2];
	  _glist_free($27);
	  HEAP32[$13$s2] = 0;
	  HEAP8[$1 + 130 | 0] = 1;
	  var $_idx_val_idx_val = HEAP32[HEAP32[HEAP32[$search + 76 >> 2] + 4 >> 2] + 12 >> 2];
	  var $33 = _fsg_history_n_entries($_idx_val_idx_val);
	  __E__pr_info_header(STRING_TABLE.__str316 | 0, 1030);
	  var $36 = HEAP16[$search + 128 >> 1];
	  var $37 = $36 << 16 >> 16;
	  var $39 = HEAP32[$search + 152 >> 2];
	  if ($36 << 16 >> 16 > 0) {
	    var $47 = HEAP32[$search + 156 >> 2];
	    var $50 = ($33 | 0) / ($37 | 0) & -1;
	    var $_ph12 = $47;
	    var $_ph114 = ($39 | 0) / ($37 | 0) & -1;
	    var $_ph216 = ($47 | 0) / ($37 | 0) & -1;
	  } else {
	    var $50 = 0;
	    var $_ph12 = HEAP32[$search + 156 >> 2];
	    var $_ph114 = 0;
	    var $_ph216 = 0;
	  }
	  var $_ph216;
	  var $_ph114;
	  var $_ph12;
	  var $50;
	  __E__pr_info(STRING_TABLE.__str29345 | 0, (tempInt = STACKTOP, STACKTOP += 28, HEAP32[tempInt >> 2] = $37, HEAP32[tempInt + 4 >> 2] = $39, HEAP32[tempInt + 8 >> 2] = $_ph114, HEAP32[tempInt + 12 >> 2] = $_ph12, HEAP32[tempInt + 16 >> 2] = $_ph216, HEAP32[tempInt + 20 >> 2] = $33, HEAP32[tempInt + 24 >> 2] = $50, tempInt));
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	_fsg_search_finish["X"] = 1;

	function _fsg_search_hyp($search, $out_score) {
	  var $78$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $search;
	  var $3 = HEAP32[$search + 16 >> 2];
	  var $7 = HEAP16[$search + 128 >> 1] << 16 >> 16;
	  var $8 = $1 + 130 | 0;
	  var $10 = HEAPU8[$8] & 255;
	  var $11 = _fsg_search_find_exit($1, $7, $10, $out_score);
	  var $12 = ($11 | 0) < 1;
	  $_$93 : do {
	    if ($12) {
	      var $_0 = 0;
	    } else {
	      var $16 = HEAP8[$1 + 131 | 0] << 24 >> 24 == 0;
	      do {
	        if (!$16) {
	          if (HEAP8[$8] << 24 >> 24 == 0) {
	            break;
	          }
	          var $24 = _fsg_search_lattice($search);
	          if (($24 | 0) == 0) {
	            __E__pr_header(STRING_TABLE.__str316 | 0, 1151, STRING_TABLE.__str212436 | 0);
	            __E__pr_warn(STRING_TABLE.__str30346 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            var $_0 = 0;
	            break $_$93;
	          }
	          var $28 = _fsg_search_bestpath($search, $out_score);
	          if (($28 | 0) == 0) {
	            __E__pr_header(STRING_TABLE.__str316 | 0, 1155, STRING_TABLE.__str212436 | 0);
	            __E__pr_warn(STRING_TABLE.__str31347 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            var $_0 = 0;
	            break $_$93;
	          }
	          var $32 = _ps_lattice_hyp($24, $28);
	          var $_0 = $32;
	          break $_$93;
	        }
	      } while (0);
	      var $17 = $search + 76 | 0;
	      var $18 = $search + 64 | 0;
	      var $19 = $3 + 8 | 0;
	      var $bp_0_ph = $11;
	      var $len_0_ph = 0;
	      $_$105 : while (1) {
	        var $len_0_ph;
	        var $bp_0_ph;
	        var $bp_0 = $bp_0_ph;
	        while (1) {
	          var $bp_0;
	          if (($bp_0 | 0) <= 0) {
	            break $_$105;
	          }
	          var $_idx1_val = HEAP32[HEAP32[$17 >> 2] + 4 >> 2];
	          var $37 = _fsg_history_entry_get($_idx1_val, $bp_0);
	          var $41 = HEAP32[$37 + 8 >> 2];
	          var $43 = HEAP32[HEAP32[$37 >> 2] + 12 >> 2];
	          if (($43 | 0) < 0) {
	            var $bp_0 = $41;
	            continue;
	          }
	          var $46 = HEAP32[$18 >> 2];
	          var $48 = HEAP32[$46 + 20 >> 2];
	          if (($48 | 0) == 0) {
	            __label__ = 16;
	            break;
	          }
	          if ((HEAP32[$48 + ((($43 | 0) / 32 & -1) << 2) >> 2] & 1 << ($43 & 31) | 0) != 0) {
	            var $bp_0 = $41;
	            continue;
	          }
	          if (($43 | 0) == -1) {
	            var $67 = STRING_TABLE.__str32348 | 0;
	            __label__ = 17;
	            break;
	          }
	          __label__ = 16;
	          break;
	        }
	        if (__label__ == 16) {
	          var $67 = HEAP32[HEAP32[$46 + 16 >> 2] + ($43 << 2) >> 2];
	        }
	        var $67;
	        var $68 = _dict_wordid($3, $67);
	        var $69 = HEAP32[$19 >> 2];
	        var $73 = HEAP32[($69 >> 2) + (HEAP32[($69 + 16 >> 2) + ($68 * 5 | 0)] * 5 | 0)];
	        var $74 = _strlen($73);
	        var $bp_0_ph = $41;
	        var $len_0_ph = $74 + ($len_0_ph + 1) | 0;
	      }
	      var $78$s2 = ($search + 24 | 0) >> 2;
	      var $79 = HEAP32[$78$s2];
	      _ckd_free($79);
	      if (($len_0_ph | 0) == 0) {
	        HEAP32[$78$s2] = 0;
	        var $_0 = 0;
	      } else {
	        var $83 = ___ckd_calloc__(1, $len_0_ph, STRING_TABLE.__str316 | 0, 1184);
	        HEAP32[$78$s2] = $83;
	        var $bp_1_ph = $11;
	        var $c_0_ph = $83 + ($len_0_ph - 1) | 0;
	        $_$120 : while (1) {
	          var $c_0_ph;
	          var $bp_1_ph;
	          var $bp_1 = $bp_1_ph;
	          while (1) {
	            var $bp_1;
	            if (($bp_1 | 0) <= 0) {
	              break $_$120;
	            }
	            var $_idx_val = HEAP32[HEAP32[$17 >> 2] + 4 >> 2];
	            var $89 = _fsg_history_entry_get($_idx_val, $bp_1);
	            var $93 = HEAP32[$89 + 8 >> 2];
	            var $95 = HEAP32[HEAP32[$89 >> 2] + 12 >> 2];
	            if (($95 | 0) < 0) {
	              var $bp_1 = $93;
	              continue;
	            }
	            var $98 = HEAP32[$18 >> 2];
	            var $100 = HEAP32[$98 + 20 >> 2];
	            if (($100 | 0) == 0) {
	              __label__ = 28;
	              break;
	            }
	            if ((HEAP32[$100 + ((($95 | 0) / 32 & -1) << 2) >> 2] & 1 << ($95 & 31) | 0) != 0) {
	              var $bp_1 = $93;
	              continue;
	            }
	            if (($95 | 0) == -1) {
	              var $119 = STRING_TABLE.__str32348 | 0;
	              __label__ = 29;
	              break;
	            }
	            __label__ = 28;
	            break;
	          }
	          if (__label__ == 28) {
	            var $119 = HEAP32[HEAP32[$98 + 16 >> 2] + ($95 << 2) >> 2];
	          }
	          var $119;
	          var $120 = _dict_wordid($3, $119);
	          var $121 = HEAP32[$19 >> 2];
	          var $125 = HEAP32[($121 >> 2) + (HEAP32[($121 + 16 >> 2) + ($120 * 5 | 0)] * 5 | 0)];
	          var $126 = _strlen($125);
	          var $128 = $c_0_ph + -$126 | 0;
	          _memcpy($128, $125, $126, 1);
	          if ($128 >>> 0 <= HEAPU32[$78$s2] >>> 0) {
	            var $bp_1_ph = $93;
	            var $c_0_ph = $128;
	            continue;
	          }
	          var $132 = $c_0_ph + ($126 ^ -1) | 0;
	          HEAP8[$132] = 32;
	          var $bp_1_ph = $93;
	          var $c_0_ph = $132;
	        }
	        var $_0 = HEAP32[$78$s2];
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_search_hyp["X"] = 1;

	function _fsg_search_find_exit($fsgs, $frame_idx, $final, $out_score) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  if (($frame_idx | 0) == -1) {
	    var $_01 = (HEAP16[$fsgs + 128 >> 1] << 16 >> 16) - 1 | 0;
	  } else {
	    var $_01 = $frame_idx;
	  }
	  var $_01;
	  var $_idx_val = HEAP32[HEAP32[$fsgs + 76 >> 2] + 4 >> 2];
	  var $_idx_val_idx_val = HEAP32[$_idx_val + 12 >> 2];
	  var $10 = _fsg_history_n_entries($_idx_val_idx_val);
	  var $11 = $10 - 1 | 0;
	  var $12 = ($11 | 0) > 0;
	  while (1) {
	    if (!$12) {
	      var $_0 = $11;
	      __label__ = 21;
	      break;
	    }
	    var $15 = _fsg_history_entry_get($_idx_val, $11);
	    var $18 = HEAP16[$15 + 12 >> 1] << 16 >> 16;
	    if (($18 | 0) <= ($_01 | 0)) {
	      __label__ = 7;
	      break;
	    }
	  }
	  do {
	    if (__label__ == 7) {
	      if (($11 | 0) < 1) {
	        var $_0 = $11;
	        break;
	      }
	      var $25 = ($final | 0) == 0;
	      var $26 = HEAP32[$fsgs + 64 >> 2] + 40 | 0;
	      var $bestscore_0 = -2147483648;
	      var $besthist_0 = -1;
	      var $hist_entry_2 = $15;
	      var $frm_1 = $18;
	      var $bpidx_0 = $11;
	      while (1) {
	        var $bpidx_0;
	        var $frm_1;
	        var $hist_entry_2;
	        var $besthist_0;
	        var $bestscore_0;
	        if (($frm_1 | 0) != ($18 | 0)) {
	          var $bestscore_2 = $bestscore_0;
	          var $besthist_2 = $besthist_0;
	          break;
	        }
	        var $31 = HEAP32[$hist_entry_2 >> 2];
	        var $33 = HEAP32[$hist_entry_2 + 4 >> 2];
	        if (($31 | 0) == 0) {
	          var $bestscore_2 = $bestscore_0;
	          var $besthist_2 = $besthist_0;
	          break;
	        }
	        var $36 = ($33 | 0) > ($bestscore_0 | 0);
	        do {
	          if ($36) {
	            if (!$25) {
	              if ((HEAP32[$31 + 4 >> 2] | 0) != (HEAP32[$26 >> 2] | 0)) {
	                var $bestscore_1 = $bestscore_0;
	                var $besthist_1 = $besthist_0;
	                break;
	              }
	            }
	            var $bestscore_1 = $33;
	            var $besthist_1 = $bpidx_0;
	          } else {
	            var $bestscore_1 = $bestscore_0;
	            var $besthist_1 = $besthist_0;
	          }
	        } while (0);
	        var $besthist_1;
	        var $bestscore_1;
	        var $45 = $bpidx_0 - 1 | 0;
	        if (($45 | 0) < 0) {
	          var $bestscore_2 = $bestscore_1;
	          var $besthist_2 = $besthist_1;
	          break;
	        }
	        var $48 = _fsg_history_entry_get($_idx_val, $45);
	        var $bestscore_0 = $bestscore_1;
	        var $besthist_0 = $besthist_1;
	        var $hist_entry_2 = $48;
	        var $frm_1 = HEAP16[$48 + 12 >> 1] << 16 >> 16;
	        var $bpidx_0 = $45;
	      }
	      var $besthist_2;
	      var $bestscore_2;
	      if (($besthist_2 | 0) == -1) {
	        __E__pr_header(STRING_TABLE.__str316 | 0, 1099, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str40356 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_01, tempInt));
	        var $_0 = -1;
	      } else {
	        if (($out_score | 0) == 0) {
	          var $_0 = $besthist_2;
	          break;
	        }
	        HEAP32[$out_score >> 2] = $bestscore_2;
	        var $_0 = $besthist_2;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_search_find_exit["X"] = 1;

	function _find_node($dag, $sf, $wid) {
	  var $node_0_in = $dag + 24 | 0;
	  while (1) {
	    var $node_0_in;
	    var $node_0 = HEAP32[$node_0_in >> 2];
	    if (($node_0 | 0) == 0) {
	      break;
	    }
	    if ((HEAP16[$node_0 + 20 >> 1] << 16 >> 16 | 0) == ($sf | 0)) {
	      if ((HEAP32[$node_0 + 4 >> 2] | 0) == ($wid | 0)) {
	        break;
	      }
	    }
	    var $node_0_in = $node_0 + 40 | 0;
	  }
	  return $node_0;
	  return null;
	}

	function _fsg_search_lattice($search) {
	  var $140$s2;
	  var $96$s1;
	  var $68$s2;
	  var $19$s2;
	  var $2$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $search;
	  var $2$s2 = ($search + 28 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_pre_phi25 = $search + 128 | 0;
	      __label__ = 5;
	      break;
	    }
	    var $9 = $search + 128 | 0;
	    if (HEAP16[$3 + 36 >> 1] << 16 >> 16 == HEAP16[$9 >> 1] << 16 >> 16) {
	      var $_0 = $3;
	      __label__ = 44;
	      break;
	    }
	    var $_pre_phi25 = $9;
	    __label__ = 5;
	    break;
	  } while (0);
	  $_$5 : do {
	    if (__label__ == 5) {
	      var $_pre_phi25;
	      _ps_lattice_free($3);
	      HEAP32[$2$s2] = 0;
	      var $14 = HEAP16[$_pre_phi25 >> 1] << 16 >> 16;
	      var $15 = _ps_lattice_init_search($search, $14);
	      var $17 = HEAP32[$search + 64 >> 2];
	      var $18 = $17;
	      var $19$s2 = ($search + 76 | 0) >> 2;
	      var $20 = HEAP32[$19$s2];
	      var $21 = $20;
	      var $_idx_val_idx_val = HEAP32[HEAP32[$20 + 4 >> 2] + 12 >> 2];
	      var $24 = _fsg_history_n_entries($_idx_val_idx_val);
	      var $25 = ($24 | 0) > 0;
	      $_$7 : do {
	        if ($25) {
	          var $i_014 = 0;
	          var $27 = $21;
	          var $26 = $20;
	          while (1) {
	            var $26;
	            var $27;
	            var $i_014;
	            var $_idx4_val = HEAP32[$27 + 4 >> 2];
	            var $28 = _fsg_history_entry_get($_idx4_val, $i_014);
	            var $30 = HEAP32[$28 >> 2];
	            var $31 = ($30 | 0) == 0;
	            do {
	              if ($31) {
	                var $60 = $26;
	              } else {
	                var $34 = HEAP32[$30 + 12 >> 2];
	                if (($34 | 0) == -1) {
	                  var $60 = $26;
	                  break;
	                }
	                var $38 = HEAP32[$28 + 8 >> 2];
	                if (($38 | 0) == 0) {
	                  var $sf_0 = 0;
	                  var $ascr_0 = HEAP32[$28 + 4 >> 2];
	                } else {
	                  var $41 = _fsg_history_entry_get($_idx4_val, $38);
	                  var $sf_0 = (HEAP16[$41 + 12 >> 1] << 16 >> 16) + 1 | 0;
	                  var $ascr_0 = HEAP32[$28 + 4 >> 2] - HEAP32[$41 + 4 >> 2] | 0;
	                }
	                var $ascr_0;
	                var $sf_0;
	                var $57 = HEAP16[$28 + 12 >> 1] << 16 >> 16;
	                var $58 = _new_node($15, $sf_0, $57, $34, $ascr_0);
	                var $60 = HEAP32[$19$s2];
	              }
	            } while (0);
	            var $60;
	            var $61 = $i_014 + 1 | 0;
	            var $62 = $60;
	            if (($61 | 0) == ($24 | 0)) {
	              var $_lcssa = $62;
	              var $63 = $60;
	              break $_$7;
	            }
	            var $i_014 = $61;
	            var $27 = $62;
	            var $26 = $60;
	          }
	        } else {
	          var $_lcssa = $21;
	          var $63 = $20;
	        }
	      } while (0);
	      var $63;
	      var $_lcssa;
	      var $_lcssa_idx_val_idx_val = HEAP32[HEAP32[$_lcssa + 4 >> 2] + 12 >> 2];
	      var $64 = _fsg_history_n_entries($_lcssa_idx_val_idx_val);
	      var $65 = ($64 | 0) > 0;
	      $_$19 : do {
	        if ($65) {
	          var $i_110 = 0;
	          var $66 = $63;
	          while (1) {
	            var $66;
	            var $i_110;
	            var $_idx2_val = HEAP32[$66 + 4 >> 2];
	            var $68 = _fsg_history_entry_get($_idx2_val, $i_110), $68$s2 = $68 >> 2;
	            var $70 = HEAP32[$68$s2];
	            var $71 = ($70 | 0) == 0;
	            $_$22 : do {
	              if (!$71) {
	                var $74 = HEAP32[$70 + 12 >> 2];
	                if (($74 | 0) == -1) {
	                  break;
	                }
	                var $78 = HEAP32[$68$s2 + 2];
	                if (($78 | 0) == 0) {
	                  var $sf4_0 = 0;
	                  var $ascr3_0 = HEAP32[$68$s2 + 1];
	                } else {
	                  var $81 = _fsg_history_entry_get($_idx2_val, $78);
	                  var $sf4_0 = (HEAP16[$81 + 12 >> 1] << 16 >> 16) + 1 | 0;
	                  var $ascr3_0 = HEAP32[$68$s2 + 1] - HEAP32[$81 + 4 >> 2] | 0;
	                }
	                var $ascr3_0;
	                var $sf4_0;
	                var $95 = _find_node($15, $sf4_0, $74);
	                var $96$s1 = ($68 + 12 | 0) >> 1;
	                var $99 = (HEAP16[$96$s1] << 16 >> 16) + 1 | 0;
	                var $101 = HEAP32[$70 + 4 >> 2];
	                var $102 = _fsg_model_arcs($18, $101);
	                if (($102 | 0) == 0) {
	                  break;
	                }
	                var $itor_07 = $102;
	                while (1) {
	                  var $itor_07;
	                  var $104 = _fsg_arciter_get($itor_07);
	                  var $106 = HEAP32[$104 + 12 >> 2];
	                  var $107 = ($106 | 0) > -1;
	                  $_$31 : do {
	                    if ($107) {
	                      var $109 = _find_node($15, $99, $106);
	                      if (($109 | 0) == 0) {
	                        break;
	                      }
	                      var $113 = HEAP16[$96$s1] << 16 >> 16;
	                      _ps_lattice_link($15, $95, $109, $ascr3_0, $113);
	                    } else {
	                      var $116 = HEAP32[$104 + 4 >> 2];
	                      var $117 = _fsg_model_arcs($18, $116);
	                      if (($117 | 0) == 0) {
	                        break;
	                      }
	                      var $itor2_03 = $117;
	                      while (1) {
	                        var $itor2_03;
	                        var $119 = _fsg_arciter_get($itor2_03);
	                        var $121 = HEAP32[$119 + 12 >> 2];
	                        var $122 = ($121 | 0) == -1;
	                        do {
	                          if (!$122) {
	                            var $124 = _find_node($15, $99, $121);
	                            if (($124 | 0) == 0) {
	                              break;
	                            }
	                            var $128 = HEAP16[$96$s1] << 16 >> 16;
	                            _ps_lattice_link($15, $95, $124, $ascr3_0, $128);
	                          }
	                        } while (0);
	                        var $130 = _fsg_arciter_next($itor2_03);
	                        if (($130 | 0) == 0) {
	                          break $_$31;
	                        }
	                        var $itor2_03 = $130;
	                      }
	                    }
	                  } while (0);
	                  var $132 = _fsg_arciter_next($itor_07);
	                  if (($132 | 0) == 0) {
	                    break $_$22;
	                  }
	                  var $itor_07 = $132;
	                }
	              }
	            } while (0);
	            var $134 = $i_110 + 1 | 0;
	            if (($134 | 0) == ($64 | 0)) {
	              break $_$19;
	            }
	            var $i_110 = $134;
	            var $66 = HEAP32[$19$s2];
	          }
	        }
	      } while (0);
	      var $135 = _find_start_node($1, $15);
	      var $136 = $15 + 28 | 0;
	      HEAP32[$136 >> 2] = $135;
	      var $137 = ($135 | 0) == 0;
	      do {
	        if (!$137) {
	          var $139 = _find_end_node($1, $15);
	          var $140$s2 = ($15 + 32 | 0) >> 2;
	          HEAP32[$140$s2] = $139;
	          if (($139 | 0) == 0) {
	            break;
	          }
	          __E__pr_info_header(STRING_TABLE.__str316 | 0, 1662);
	          var $143 = HEAP32[$136 >> 2];
	          var $145 = HEAP32[$143 + 4 >> 2];
	          if (($145 | 0) == -1) {
	            var $154 = STRING_TABLE.__str32348 | 0;
	          } else {
	            var $154 = HEAP32[HEAP32[$17 + 16 >> 2] + ($145 << 2) >> 2];
	          }
	          var $154;
	          var $157 = HEAP16[$143 + 20 >> 1] << 16 >> 16;
	          var $158 = HEAP32[$140$s2];
	          var $160 = HEAP32[$158 + 4 >> 2];
	          if (($160 | 0) == -1) {
	            var $169 = STRING_TABLE.__str32348 | 0;
	          } else {
	            var $169 = HEAP32[HEAP32[$17 + 16 >> 2] + ($160 << 2) >> 2];
	          }
	          var $169;
	          var $172 = HEAP16[$158 + 20 >> 1] << 16 >> 16;
	          __E__pr_info(STRING_TABLE.__str36643 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $154, HEAP32[tempInt + 4 >> 2] = $157, HEAP32[tempInt + 8 >> 2] = $169, HEAP32[tempInt + 12 >> 2] = $172, tempInt));
	          var $node_01 = HEAP32[$15 + 24 >> 2];
	          var $174 = ($node_01 | 0) == 0;
	          $_$54 : do {
	            if (!$174) {
	              var $175 = $15 + 8 | 0;
	              var $177 = $17 + 16 | 0;
	              var $node_02 = $node_01;
	              while (1) {
	                var $node_02;
	                var $181 = HEAP32[HEAP32[$175 >> 2] + 16 >> 2];
	                var $182 = $node_02 + 4 | 0;
	                var $183 = HEAP32[$182 >> 2];
	                if (($183 | 0) == -1) {
	                  var $190 = STRING_TABLE.__str32348 | 0;
	                } else {
	                  var $190 = HEAP32[HEAP32[$177 >> 2] + ($183 << 2) >> 2];
	                }
	                var $190;
	                var $191 = _dict_wordid($181, $190);
	                HEAP32[$182 >> 2] = $191;
	                var $198 = HEAP32[(HEAP32[HEAP32[HEAP32[$175 >> 2] + 16 >> 2] + 8 >> 2] + 16 >> 2) + ($191 * 5 | 0)];
	                HEAP32[$node_02 + 8 >> 2] = $198;
	                var $node_0 = HEAP32[$node_02 + 40 >> 2];
	                if (($node_0 | 0) == 0) {
	                  break $_$54;
	                }
	                var $node_02 = $node_0;
	              }
	            }
	          } while (0);
	          var $202 = HEAP32[$140$s2];
	          _mark_reachable($202);
	          _ps_lattice_delete_unreachable($15);
	          var $204 = $17 + 28 | 0;
	          var $205 = HEAP32[$204 >> 2];
	          var $206 = $search + 8 | 0;
	          var $_idx6_val = HEAP32[HEAP32[$206 >> 2] + 4 >> 2];
	          var $208 = _cmd_ln_float_r($_idx6_val, STRING_TABLE.__str2452814 | 0);
	          var $210 = $208;
	          var $211 = _logmath_log($205, $210);
	          var $214 = $17 + 44 | 0;
	          var $218 = ($211 * HEAPF32[$214 >> 2] & -1) >> 10;
	          var $219 = HEAP32[$204 >> 2];
	          var $_idx5_val = HEAP32[HEAP32[$206 >> 2] + 4 >> 2];
	          var $221 = _cmd_ln_float_r($_idx5_val, STRING_TABLE.__str2482817 | 0);
	          var $223 = $221;
	          var $224 = _logmath_log($219, $223);
	          var $229 = ($224 * HEAPF32[$214 >> 2] & -1) >> 10;
	          _ps_lattice_bypass_fillers($15, $218, $229);
	          HEAP32[$2$s2] = $15;
	          var $_0 = $15;
	          break $_$5;
	        }
	      } while (0);
	      _ps_lattice_free($15);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_search_lattice["X"] = 1;

	function _fsg_search_bestpath($search, $out_score) {
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($search + 32 | 0) >> 2;
	  var $3 = (HEAP32[$1$s2] | 0) == 0;
	  do {
	    if ($3) {
	      var $5 = $search + 28 | 0;
	      var $6 = HEAP32[$5 >> 2];
	      var $8 = $search + 132 | 0;
	      var $9 = HEAPF32[$8 >> 2];
	      var $10 = _ps_lattice_bestpath($6, 0, 1, $9);
	      HEAP32[$1$s2] = $10;
	      if (($10 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 9;
	        break;
	      }
	      var $13 = $search + 36 | 0;
	      if ((HEAP32[$13 >> 2] | 0) != 0) {
	        __label__ = 6;
	        break;
	      }
	      var $17 = HEAP32[$5 >> 2];
	      var $18 = HEAPF32[$8 >> 2];
	      var $19 = _ps_lattice_posterior($17, 0, $18);
	      HEAP32[$13 >> 2] = $19;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 6;
	  } while (0);
	  if (__label__ == 6) {
	    if (($out_score | 0) != 0) {
	      var $30 = HEAP32[HEAP32[$search + 28 >> 2] + 40 >> 2] + HEAP32[HEAP32[$1$s2] + 16 >> 2] | 0;
	      HEAP32[$out_score >> 2] = $30;
	    }
	    var $_0 = HEAP32[$1$s2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _new_node($dag, $sf, $ef, $wid, $ascr) {
	  var $1 = $dag + 24 | 0;
	  var $node_0_in = $1;
	  $_$76 : while (1) {
	    var $node_0_in;
	    var $node_0 = HEAP32[$node_0_in >> 2];
	    if (($node_0 | 0) == 0) {
	      var $35 = HEAP32[$dag + 52 >> 2];
	      var $36 = ___listelem_malloc__($35, STRING_TABLE.__str316 | 0, 1369);
	      var $37 = $36;
	      var $39 = $36 + 4 | 0;
	      HEAP32[$39 >> 2] = $wid;
	      HEAP16[$36 + 20 >> 1] = $sf & 65535;
	      var $44 = $36 + 16 | 0;
	      HEAP32[$44 >> 2] = $ef;
	      var $46 = $36 + 12 | 0;
	      HEAP32[$46 >> 2] = $ef;
	      HEAP16[$36 + 22 >> 1] = 0;
	      var $50 = $36 + 32 | 0;
	      HEAP32[$50 >> 2] = 0;
	      var $52 = $36 + 28 | 0;
	      HEAP32[$52 >> 2] = 0;
	      var $54 = $36 + 24 | 0;
	      HEAP32[$54 >> 2] = $ascr;
	      var $55 = HEAP32[$1 >> 2];
	      var $57 = $36 + 40 | 0;
	      HEAP32[$57 >> 2] = $55;
	      HEAP32[$1 >> 2] = $37;
	      var $58 = $dag + 38 | 0;
	      var $60 = HEAP16[$58 >> 1] + 1 & 65535;
	      HEAP16[$58 >> 1] = $60;
	      var $node_1 = $37;
	      break;
	    }
	    var $8 = (HEAP16[$node_0 + 20 >> 1] << 16 >> 16 | 0) == ($sf | 0);
	    do {
	      if ($8) {
	        if ((HEAP32[$node_0 + 4 >> 2] | 0) != ($wid | 0)) {
	          break;
	        }
	        var $16 = $node_0 + 16 | 0;
	        var $17 = HEAP32[$16 >> 2];
	        if (($17 | 0) == -1 | ($17 | 0) < ($ef | 0)) {
	          HEAP32[$16 >> 2] = $ef;
	        }
	        var $22 = $node_0 + 12 | 0;
	        var $23 = HEAP32[$22 >> 2];
	        if (($23 | 0) == -1 | ($23 | 0) > ($ef | 0)) {
	          HEAP32[$22 >> 2] = $ef;
	        }
	        var $28 = $node_0 + 24 | 0;
	        if ((HEAP32[$28 >> 2] | 0) >= ($ascr | 0)) {
	          var $node_1 = $node_0;
	          break $_$76;
	        }
	        var $33 = $28 | 0;
	        HEAP32[$33 >> 2] = $ascr;
	        var $node_1 = $node_0;
	        break $_$76;
	      }
	    } while (0);
	    var $node_0_in = $node_0 + 40 | 0;
	  }
	  var $node_1;
	  return $node_1;
	  return null;
	}

	_new_node["X"] = 1;

	function _find_start_node($fsgs, $dag) {
	  var $node_06$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $node_03 = HEAP32[$dag + 24 >> 2];
	  var $2 = ($node_03 | 0) == 0;
	  var $_pre = $fsgs + 64 | 0;
	  do {
	    if (!$2) {
	      var $start_04 = 0;
	      var $nstart_05 = 0;
	      var $node_06 = $node_03, $node_06$s2 = $node_06 >> 2;
	      while (1) {
	        var $node_06;
	        var $nstart_05;
	        var $start_04;
	        var $3 = $node_06 + 20 | 0;
	        var $5 = HEAP16[$3 >> 1] << 16 >> 16 == 0;
	        do {
	          if ($5) {
	            if ((HEAP32[$node_06$s2 + 7] | 0) == 0) {
	              var $nstart_1 = $nstart_05;
	              var $start_1 = $start_04;
	              break;
	            }
	            __E__pr_info_header(STRING_TABLE.__str316 | 0, 1407);
	            var $12 = HEAP32[$node_06$s2 + 1];
	            if (($12 | 0) == -1) {
	              var $21 = STRING_TABLE.__str32348 | 0;
	            } else {
	              var $21 = HEAP32[HEAP32[HEAP32[$_pre >> 2] + 16 >> 2] + ($12 << 2) >> 2];
	            }
	            var $21;
	            var $23 = HEAP16[$3 >> 1] << 16 >> 16;
	            var $25 = HEAP32[$node_06$s2 + 3];
	            var $27 = HEAP32[$node_06$s2 + 4];
	            __E__pr_info(STRING_TABLE.__str38354 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $21, HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = $25, HEAP32[tempInt + 12 >> 2] = $27, tempInt));
	            var $29 = _glist_add_ptr($start_04, $node_06);
	            var $nstart_1 = $nstart_05 + 1 | 0;
	            var $start_1 = $29;
	          } else {
	            var $nstart_1 = $nstart_05;
	            var $start_1 = $start_04;
	          }
	        } while (0);
	        var $start_1;
	        var $nstart_1;
	        var $node_0 = HEAP32[$node_06$s2 + 10];
	        if (($node_0 | 0) == 0) {
	          break;
	        }
	        var $start_04 = $start_1;
	        var $nstart_05 = $nstart_1;
	        var $node_06 = $node_0, $node_06$s2 = $node_06 >> 2;
	      }
	      if (($nstart_1 | 0) != 1) {
	        var $start_0_lcssa10 = $start_1;
	        var $_pre_phi = $_pre;
	        __label__ = 11;
	        break;
	      }
	      var $node_1 = HEAP32[$start_1 >> 2];
	      var $start_0_lcssa11 = $start_1;
	      __label__ = 15;
	      break;
	    }
	    var $start_0_lcssa10 = 0;
	    var $_pre_phi = $_pre;
	    __label__ = 11;
	  } while (0);
	  $_$114 : do {
	    if (__label__ == 11) {
	      var $_pre_phi;
	      var $start_0_lcssa10;
	      var $39 = HEAP32[$_pre_phi >> 2];
	      var $40 = _fsg_model_word_add($39, STRING_TABLE.__str531959 | 0);
	      var $43 = HEAP32[HEAP32[$_pre_phi >> 2] + 20 >> 2];
	      if (($43 | 0) != 0) {
	        var $49 = ((($40 | 0) / 32 & -1) << 2) + $43 | 0;
	        var $51 = HEAP32[$49 >> 2] | 1 << ($40 & 31);
	        HEAP32[$49 >> 2] = $51;
	      }
	      var $53 = _new_node($dag, 0, 0, $40, 0);
	      if (($start_0_lcssa10 | 0) == 0) {
	        var $node_1 = $53;
	        var $start_0_lcssa11 = 0;
	        break;
	      }
	      var $st_01 = $start_0_lcssa10;
	      while (1) {
	        var $st_01;
	        var $57 = HEAP32[$st_01 >> 2];
	        _ps_lattice_link($dag, $53, $57, 0, 0);
	        var $59 = HEAP32[$st_01 + 8 >> 2];
	        if (($59 | 0) == 0) {
	          var $node_1 = $53;
	          var $start_0_lcssa11 = $start_0_lcssa10;
	          break $_$114;
	        }
	        var $st_01 = $59;
	      }
	    }
	  } while (0);
	  var $start_0_lcssa11;
	  var $node_1;
	  _glist_free($start_0_lcssa11);
	  STACKTOP = __stackBase__;
	  return $node_1;
	  return null;
	}

	_find_start_node["X"] = 1;

	function _find_end_node($fsgs, $dag) {
	  var $node_14$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $dag + 24 | 0;
	  var $node_09 = HEAP32[$1 >> 2];
	  var $2 = ($node_09 | 0) == 0;
	  $_$123 : do {
	    if ($2) {
	      var $node_2 = 0;
	      var $end_0_lcssa20 = 0;
	    } else {
	      var $3 = $dag + 36 | 0;
	      var $4$s2 = ($fsgs + 64 | 0) >> 2;
	      var $nend_010 = 0;
	      var $end_011 = 0;
	      var $node_012 = $node_09;
	      while (1) {
	        var $node_012;
	        var $end_011;
	        var $nend_010;
	        var $5 = $node_012 + 16 | 0;
	        var $10 = (HEAP32[$5 >> 2] | 0) == ((HEAP16[$3 >> 1] << 16 >> 16) - 1 | 0);
	        do {
	          if ($10) {
	            if ((HEAP32[$node_012 + 32 >> 2] | 0) == 0) {
	              var $end_1 = $end_011;
	              var $nend_1 = $nend_010;
	              break;
	            }
	            __E__pr_info_header(STRING_TABLE.__str316 | 0, 1446);
	            var $17 = HEAP32[$node_012 + 4 >> 2];
	            if (($17 | 0) == -1) {
	              var $26 = STRING_TABLE.__str32348 | 0;
	            } else {
	              var $26 = HEAP32[HEAP32[HEAP32[$4$s2] + 16 >> 2] + ($17 << 2) >> 2];
	            }
	            var $26;
	            var $29 = HEAP16[$node_012 + 20 >> 1] << 16 >> 16;
	            var $31 = HEAP32[$node_012 + 12 >> 2];
	            var $32 = HEAP32[$5 >> 2];
	            var $35 = HEAP32[$node_012 + 24 >> 2];
	            __E__pr_info(STRING_TABLE.__str36352 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $26, HEAP32[tempInt + 4 >> 2] = $29, HEAP32[tempInt + 8 >> 2] = $31, HEAP32[tempInt + 12 >> 2] = $32, HEAP32[tempInt + 16 >> 2] = $35, tempInt));
	            var $37 = _glist_add_ptr($end_011, $node_012);
	            var $end_1 = $37;
	            var $nend_1 = $nend_010 + 1 | 0;
	          } else {
	            var $end_1 = $end_011;
	            var $nend_1 = $nend_010;
	          }
	        } while (0);
	        var $nend_1;
	        var $end_1;
	        var $node_0 = HEAP32[$node_012 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break;
	        }
	        var $nend_010 = $nend_1;
	        var $end_011 = $end_1;
	        var $node_012 = $node_0;
	      }
	      if (($nend_1 | 0) == 1) {
	        var $node_2 = HEAP32[$end_1 >> 2];
	        var $end_0_lcssa20 = $end_1;
	      } else if (($nend_1 | 0) == 0) {
	        var $node_11_pr = HEAP32[$1 >> 2];
	        if (($node_11_pr | 0) == 0) {
	          var $node_2 = 0;
	          var $end_0_lcssa20 = $end_1;
	          break;
	        }
	        var $last_02 = 0;
	        var $ef_03 = 0;
	        var $node_14 = $node_11_pr, $node_14$s2 = $node_14 >> 2;
	        while (1) {
	          var $node_14;
	          var $ef_03;
	          var $last_02;
	          var $48 = HEAP32[$node_14$s2 + 4];
	          if (($48 | 0) > ($ef_03 | 0)) {
	            var $53 = (HEAP32[$node_14$s2 + 8] | 0) == 0;
	            var $last_0_node_1 = $53 ? $last_02 : $node_14;
	            var $ef_0_ = $53 ? $ef_03 : $48;
	            var $ef_1 = $ef_0_;
	            var $last_1 = $last_0_node_1;
	          } else {
	            var $ef_1 = $ef_03;
	            var $last_1 = $last_02;
	          }
	          var $last_1;
	          var $ef_1;
	          var $node_1 = HEAP32[$node_14$s2 + 10];
	          if (($node_1 | 0) == 0) {
	            break;
	          }
	          var $last_02 = $last_1;
	          var $ef_03 = $ef_1;
	          var $node_14 = $node_1, $node_14$s2 = $node_14 >> 2;
	        }
	        if (($last_1 | 0) == 0) {
	          var $node_2 = 0;
	          var $end_0_lcssa20 = $end_1;
	          break;
	        }
	        __E__pr_info_header(STRING_TABLE.__str316 | 0, 1471);
	        var $60 = HEAP32[$last_1 + 4 >> 2];
	        if (($60 | 0) == -1) {
	          var $69 = STRING_TABLE.__str32348 | 0;
	        } else {
	          var $69 = HEAP32[HEAP32[HEAP32[$4$s2] + 16 >> 2] + ($60 << 2) >> 2];
	        }
	        var $69;
	        var $72 = HEAP16[$last_1 + 20 >> 1] << 16 >> 16;
	        var $74 = HEAP32[$last_1 + 12 >> 2];
	        var $76 = HEAP32[$last_1 + 16 >> 2];
	        var $79 = HEAP32[$last_1 + 24 >> 2];
	        __E__pr_info(STRING_TABLE.__str36352 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $69, HEAP32[tempInt + 4 >> 2] = $72, HEAP32[tempInt + 8 >> 2] = $74, HEAP32[tempInt + 12 >> 2] = $76, HEAP32[tempInt + 16 >> 2] = $79, tempInt));
	        var $node_2 = $last_1;
	        var $end_0_lcssa20 = $end_1;
	      } else {
	        var $81 = HEAP32[$4$s2];
	        var $82 = _fsg_model_word_add($81, STRING_TABLE.__str63982 | 0);
	        var $85 = HEAP32[HEAP32[$4$s2] + 20 >> 2];
	        if (($85 | 0) != 0) {
	          var $91 = ((($82 | 0) / 32 & -1) << 2) + $85 | 0;
	          var $93 = HEAP32[$91 >> 2] | 1 << ($82 & 31);
	          HEAP32[$91 >> 2] = $93;
	        }
	        var $95 = $fsgs + 128 | 0;
	        var $97 = HEAP16[$95 >> 1] << 16 >> 16;
	        var $98 = _new_node($dag, $97, $97, $82, 0);
	        if (($end_1 | 0) == 0) {
	          var $node_2 = $98;
	          var $end_0_lcssa20 = 0;
	          break;
	        }
	        var $st_05 = $end_1;
	        while (1) {
	          var $st_05;
	          var $101 = HEAP32[$st_05 >> 2];
	          var $102 = $101;
	          var $105 = HEAP32[$101 + 24 >> 2];
	          var $107 = HEAP16[$95 >> 1] << 16 >> 16;
	          _ps_lattice_link($dag, $102, $98, $105, $107);
	          var $109 = HEAP32[$st_05 + 8 >> 2];
	          if (($109 | 0) == 0) {
	            var $node_2 = $98;
	            var $end_0_lcssa20 = $end_1;
	            break $_$123;
	          }
	          var $st_05 = $109;
	        }
	      }
	    }
	  } while (0);
	  var $end_0_lcssa20;
	  var $node_2;
	  _glist_free($end_0_lcssa20);
	  STACKTOP = __stackBase__;
	  return $node_2;
	  return null;
	}

	_find_end_node["X"] = 1;

	function _mark_reachable($end) {
	  HEAP16[$end + 22 >> 1] = 1;
	  var $2 = $end;
	  var $3 = _glist_add_ptr(0, $2);
	  var $4 = ($3 | 0) == 0;
	  $_$156 : do {
	    if (!$4) {
	      var $q_04 = $3;
	      while (1) {
	        var $q_04;
	        var $7 = HEAP32[$q_04 >> 2];
	        var $8 = _gnode_free($q_04, 0);
	        var $x_01 = HEAP32[$7 + 32 >> 2];
	        var $11 = ($x_01 | 0) == 0;
	        $_$159 : do {
	          if ($11) {
	            var $q_1_lcssa = $8;
	          } else {
	            var $q_12 = $8;
	            var $x_03 = $x_01;
	            while (1) {
	              var $x_03;
	              var $q_12;
	              var $15 = HEAP32[HEAP32[$x_03 >> 2] >> 2];
	              var $16 = $15 + 22 | 0;
	              if (HEAP16[$16 >> 1] << 16 >> 16 == 0) {
	                HEAP16[$16 >> 1] = 1;
	                var $20 = $15;
	                var $21 = _glist_add_ptr($q_12, $20);
	                var $q_2 = $21;
	              } else {
	                var $q_2 = $q_12;
	              }
	              var $q_2;
	              var $x_0 = HEAP32[$x_03 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                var $q_1_lcssa = $q_2;
	                break $_$159;
	              }
	              var $q_12 = $q_2;
	              var $x_03 = $x_0;
	            }
	          }
	        } while (0);
	        var $q_1_lcssa;
	        if (($q_1_lcssa | 0) == 0) {
	          break $_$156;
	        }
	        var $q_04 = $q_1_lcssa;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _hmm_clear($h) {
	  HEAP32[$h + 4 >> 2] = -536870912;
	  HEAP32[$h + 24 >> 2] = -1;
	  var $3 = $h + 73 | 0;
	  var $5 = (HEAPU8[$3] & 255) > 1;
	  $_$111 : do {
	    if ($5) {
	      var $i_01 = 1;
	      while (1) {
	        var $i_01;
	        HEAP32[$h + ($i_01 << 2) + 4 >> 2] = -536870912;
	        HEAP32[$h + ($i_01 << 2) + 24 >> 2] = -1;
	        var $8 = $i_01 + 1 | 0;
	        if (($8 | 0) >= (HEAPU8[$3] & 255 | 0)) {
	          break $_$111;
	        }
	        var $i_01 = $8;
	      }
	    }
	  } while (0);
	  HEAP32[$h + 44 >> 2] = -536870912;
	  HEAP32[$h + 48 >> 2] = -1;
	  HEAP32[$h + 64 >> 2] = -536870912;
	  HEAP16[$h + 70 >> 1] = -1;
	  return;
	  return;
	}

	function _hmm_clear_scores($h) {
	  HEAP32[$h + 4 >> 2] = -536870912;
	  var $2 = $h + 73 | 0;
	  var $4 = (HEAPU8[$2] & 255) > 1;
	  $_$116 : do {
	    if ($4) {
	      var $i_01 = 1;
	      while (1) {
	        var $i_01;
	        HEAP32[$h + ($i_01 << 2) + 4 >> 2] = -536870912;
	        var $6 = $i_01 + 1 | 0;
	        if (($6 | 0) >= (HEAPU8[$2] & 255 | 0)) {
	          break $_$116;
	        }
	        var $i_01 = $6;
	      }
	    }
	  } while (0);
	  HEAP32[$h + 44 >> 2] = -536870912;
	  HEAP32[$h + 64 >> 2] = -536870912;
	  return;
	  return;
	}

	function _hmm_enter($h, $score, $histid, $frame) {
	  HEAP32[$h + 4 >> 2] = $score;
	  HEAP32[$h + 24 >> 2] = $histid;
	  HEAP16[$h + 70 >> 1] = $frame & 65535;
	  return;
	  return;
	}

	function _hmm_normalize($h, $bestscr) {
	  var $1 = $h + 73 | 0;
	  var $2 = HEAP8[$1];
	  var $3 = $2 << 24 >> 24 == 0;
	  $_$122 : do {
	    if (!$3) {
	      var $i_01 = 0;
	      var $4 = $2;
	      while (1) {
	        var $4;
	        var $i_01;
	        var $5 = ($i_01 << 2) + $h + 4 | 0;
	        var $6 = HEAP32[$5 >> 2];
	        if (($6 | 0) > -536870912) {
	          var $9 = $6 - $bestscr | 0;
	          HEAP32[$5 >> 2] = $9;
	          var $11 = HEAP8[$1];
	        } else {
	          var $11 = $4;
	        }
	        var $11;
	        var $12 = $i_01 + 1 | 0;
	        if (($12 | 0) >= ($11 & 255 | 0)) {
	          break $_$122;
	        }
	        var $i_01 = $12;
	        var $4 = $11;
	      }
	    }
	  } while (0);
	  var $15 = $h + 44 | 0;
	  var $16 = HEAP32[$15 >> 2];
	  if (($16 | 0) > -536870912) {
	    var $19 = $16 - $bestscr | 0;
	    HEAP32[$15 >> 2] = $19;
	  }
	  return;
	  return;
	}

	function _fsg_search_pnode_trans($fsgs, $pnode) {
	  if (($pnode | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 595, STRING_TABLE.___func___fsg_search_pnode_trans | 0, STRING_TABLE.__str44360 | 0);
	  }
	  if (HEAP8[$pnode + 27 | 0] << 24 >> 24 != 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 596, STRING_TABLE.___func___fsg_search_pnode_trans | 0, STRING_TABLE.__str48364 | 0);
	  }
	  var $12 = (HEAP16[$fsgs + 128 >> 1] << 16 >> 16) + 1 | 0;
	  var $17 = HEAP32[$fsgs + 104 >> 2] + HEAP32[$fsgs + 136 >> 2] | 0;
	  var $child_01 = HEAP32[$pnode >> 2];
	  var $19 = ($child_01 | 0) == 0;
	  $_$8 : do {
	    if (!$19) {
	      var $20 = $pnode + 76 | 0;
	      var $21 = $fsgs + 84 | 0;
	      var $22 = $pnode + 80 | 0;
	      var $child_02 = $child_01;
	      while (1) {
	        var $child_02;
	        var $26 = HEAP32[$child_02 + 12 >> 2] + HEAP32[$20 >> 2] | 0;
	        var $27 = ($26 | 0) > ($17 | 0);
	        do {
	          if ($27) {
	            var $29 = $child_02 + 32 | 0;
	            if (($26 | 0) <= (HEAP32[$child_02 + 36 >> 2] | 0)) {
	              break;
	            }
	            if ((HEAP16[$child_02 + 102 >> 1] << 16 >> 16 | 0) < ($12 | 0)) {
	              var $39 = HEAP32[$21 >> 2];
	              var $41 = _glist_add_ptr($39, $child_02);
	              HEAP32[$21 >> 2] = $41;
	            }
	            var $43 = HEAP32[$22 >> 2];
	            _hmm_enter($29, $26, $43, $12);
	          }
	        } while (0);
	        var $child_0 = HEAP32[$child_02 + 8 >> 2];
	        if (($child_0 | 0) == 0) {
	          break $_$8;
	        }
	        var $child_02 = $child_0;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_search_pnode_trans["X"] = 1;

	function _fsg_search_pnode_exit($fsgs, $pnode) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $ctxt = __stackBase__;
	  if (($pnode | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 631, STRING_TABLE.___func___fsg_search_pnode_exit | 0, STRING_TABLE.__str44360 | 0);
	  }
	  if (HEAP8[$pnode + 27 | 0] << 24 >> 24 == 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 632, STRING_TABLE.___func___fsg_search_pnode_exit | 0, STRING_TABLE.__str45361 | 0);
	  }
	  var $10 = HEAPU32[$pnode >> 2];
	  if (($10 | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 636, STRING_TABLE.___func___fsg_search_pnode_exit | 0, STRING_TABLE.__str46362 | 0);
	  }
	  var $15 = HEAP32[$10 + 12 >> 2];
	  if (($15 | 0) <= -1) {
	    ___assert_func(STRING_TABLE.__str316 | 0, 639, STRING_TABLE.___func___fsg_search_pnode_exit | 0, STRING_TABLE.__str47363 | 0);
	  }
	  var $20 = HEAP32[$fsgs + 64 >> 2];
	  var $22 = HEAP32[$20 + 20 >> 2];
	  var $23 = ($22 | 0) == 0;
	  do {
	    if ($23) {
	      __label__ = 12;
	    } else {
	      if ((HEAP32[$22 + ((($15 | 0) / 32 & -1) << 2) >> 2] & 1 << ($15 & 31) | 0) == 0) {
	        __label__ = 12;
	        break;
	      }
	      __label__ = 15;
	      break;
	    }
	  } while (0);
	  do {
	    if (__label__ == 12) {
	      var $33 = $fsgs + 16 | 0;
	      var $34 = HEAP32[$33 >> 2];
	      if (($15 | 0) == -1) {
	        var $42 = STRING_TABLE.__str32348 | 0;
	      } else {
	        var $42 = HEAP32[HEAP32[$20 + 16 >> 2] + ($15 << 2) >> 2];
	      }
	      var $42;
	      var $43 = _dict_wordid($34, $42);
	      if ((HEAP32[(HEAP32[HEAP32[$33 >> 2] + 8 >> 2] + 8 >> 2) + ($43 * 5 | 0)] | 0) == 1) {
	        __label__ = 15;
	        break;
	      }
	      var $65 = HEAP32[$fsgs + 76 >> 2];
	      var $68 = HEAP16[$fsgs + 128 >> 1] << 16 >> 16;
	      var $70 = HEAP32[$pnode + 76 >> 2];
	      var $72 = HEAP32[$pnode + 80 >> 2];
	      var $75 = HEAPU16[$pnode + 24 >> 1] & 65535;
	      var $76 = $pnode + 16 | 0;
	      _fsg_history_entry_add($65, $10, $68, $70, $72, $75, $76);
	      __label__ = 17;
	      break;
	    }
	  } while (0);
	  if (__label__ == 15) {
	    _fsg_pnode_add_all_ctxt($ctxt);
	    var $52 = HEAP32[$fsgs + 76 >> 2];
	    var $55 = HEAP16[$fsgs + 128 >> 1] << 16 >> 16;
	    var $57 = HEAP32[$pnode + 76 >> 2];
	    var $59 = HEAP32[$pnode + 80 >> 2];
	    var $62 = HEAPU16[$pnode + 24 >> 1] & 65535;
	    _fsg_history_entry_add($52, $10, $55, $57, $59, $62, $ctxt);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fsg_search_pnode_exit["X"] = 1;

	function _fsg_search_prob($search) {
	  var $1 = $search;
	  var $4 = HEAP8[$1 + 131 | 0] << 24 >> 24 == 0;
	  do {
	    if ($4) {
	      var $_0 = 0;
	    } else {
	      if (HEAP8[$1 + 130 | 0] << 24 >> 24 == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $10 = _fsg_search_lattice($search);
	      if (($10 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $13 = _fsg_search_bestpath($search, 0);
	      if (($13 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_0 = HEAP32[$search + 36 >> 2];
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_search_seg_iter($search, $out_score) {
	  var $34$s1;
	  var $27$s2;
	  var $1 = $search;
	  var $5 = HEAP16[$search + 128 >> 1] << 16 >> 16;
	  var $6 = $1 + 130 | 0;
	  var $8 = HEAPU8[$6] & 255;
	  var $9 = _fsg_search_find_exit($1, $5, $8, $out_score);
	  var $10 = ($9 | 0) < 1;
	  $_$52 : do {
	    if ($10) {
	      var $_0 = 0;
	    } else {
	      var $14 = HEAP8[$1 + 131 | 0] << 24 >> 24 == 0;
	      do {
	        if (!$14) {
	          if (HEAP8[$6] << 24 >> 24 == 0) {
	            break;
	          }
	          var $19 = _fsg_search_lattice($search);
	          if (($19 | 0) == 0) {
	            var $_0 = 0;
	            break $_$52;
	          }
	          var $22 = _fsg_search_bestpath($search, $out_score);
	          if (($22 | 0) == 0) {
	            var $_0 = 0;
	            break $_$52;
	          }
	          var $25 = _ps_lattice_seg_iter($19, $22, 1);
	          var $_0 = $25;
	          break $_$52;
	        }
	      } while (0);
	      var $27 = ___ckd_calloc__(1, 44, STRING_TABLE.__str316 | 0, 1295), $27$s2 = $27 >> 2;
	      HEAP32[$27$s2] = _fsg_segfuncs;
	      HEAP32[$27$s2 + 1] = $search;
	      HEAPF32[$27$s2 + 8] = 1;
	      var $34$s1 = ($27 + 40 | 0) >> 1;
	      HEAP16[$34$s1] = 0;
	      var $35 = ($9 | 0) > 0;
	      do {
	        if ($35) {
	          var $36 = $search + 76 | 0;
	          var $storemerge4 = 0;
	          var $bp_05 = $9;
	          while (1) {
	            var $bp_05;
	            var $storemerge4;
	            var $_idx1_val = HEAP32[HEAP32[$36 >> 2] + 4 >> 2];
	            var $40 = _fsg_history_entry_get($_idx1_val, $bp_05);
	            var $42 = HEAP32[$40 + 8 >> 2];
	            var $43 = $storemerge4 + 1 & 65535;
	            HEAP16[$34$s1] = $43;
	            if (($42 | 0) <= 0) {
	              break;
	            }
	            var $storemerge4 = $43;
	            var $bp_05 = $42;
	          }
	          if ($43 << 16 >> 16 == 0) {
	            break;
	          }
	          var $47 = ___ckd_calloc__($43 << 16 >> 16, 4, STRING_TABLE.__str316 | 0, 1310);
	          var $48 = $47;
	          var $50 = $27 + 36 | 0;
	          HEAP32[$50 >> 2] = $48;
	          var $bp_12 = $9;
	          var $cur_03_in = HEAP16[$34$s1] << 16 >> 16;
	          var $53 = $48;
	          while (1) {
	            var $53;
	            var $cur_03_in;
	            var $bp_12;
	            var $cur_03 = $cur_03_in - 1 | 0;
	            var $_idx_val = HEAP32[HEAP32[$36 >> 2] + 4 >> 2];
	            var $56 = _fsg_history_entry_get($_idx_val, $bp_12);
	            HEAP32[$53 + ($cur_03 << 2) >> 2] = $56;
	            var $59 = HEAP32[$56 + 8 >> 2];
	            var $_pre10 = HEAP32[$50 >> 2];
	            if (($59 | 0) <= 0) {
	              break;
	            }
	            var $bp_12 = $59;
	            var $cur_03_in = $cur_03;
	            var $53 = $_pre10;
	          }
	          var $61 = $27;
	          var $62 = HEAP32[$_pre10 >> 2];
	          _fsg_seg_bp2itor($61, $62);
	          var $_0 = $61;
	          break $_$52;
	        }
	      } while (0);
	      _ckd_free($27);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_fsg_search_seg_iter["X"] = 1;

	function _fsg_seg_bp2itor($seg, $hist_entry) {
	  var $2 = HEAP32[$seg + 4 >> 2];
	  var $4 = HEAP32[$hist_entry + 8 >> 2];
	  if (($4 | 0) > -1) {
	    var $_idx_val = HEAP32[HEAP32[$2 + 76 >> 2] + 4 >> 2];
	    var $10 = _fsg_history_entry_get($_idx_val, $4);
	    var $ph_0 = $10;
	  } else {
	    var $ph_0 = 0;
	  }
	  var $ph_0;
	  var $12 = $hist_entry | 0;
	  var $15 = HEAP32[HEAP32[$12 >> 2] + 12 >> 2];
	  if (($15 | 0) == -1) {
	    var $26 = STRING_TABLE.__str32348 | 0;
	  } else {
	    var $26 = HEAP32[HEAP32[HEAP32[$2 + 64 >> 2] + 16 >> 2] + ($15 << 2) >> 2];
	  }
	  var $26;
	  HEAP32[$seg + 8 >> 2] = $26;
	  var $29 = HEAP16[$hist_entry + 12 >> 1];
	  HEAP16[$seg + 14 >> 1] = $29;
	  var $31 = ($ph_0 | 0) != 0;
	  if ($31) {
	    var $37 = HEAP16[$ph_0 + 12 >> 1] + 1 & 65535;
	  } else {
	    var $37 = 0;
	  }
	  var $37;
	  var $_ = $37 << 16 >> 16 > $29 << 16 >> 16 ? $29 : $37;
	  HEAP16[$seg + 12 >> 1] = $_;
	  HEAP32[$seg + 24 >> 2] = 0;
	  HEAP32[$seg + 28 >> 2] = 1;
	  var $44 = HEAP32[HEAP32[$12 >> 2] + 8 >> 2];
	  HEAP32[$seg + 20 >> 2] = $44;
	  var $47 = HEAP32[$hist_entry + 4 >> 2];
	  if ($31) {
	    var $52 = $47 - $44 - HEAP32[$ph_0 + 4 >> 2] | 0;
	    HEAP32[$seg + 16 >> 2] = $52;
	  } else {
	    var $55 = $47 - $44 | 0;
	    HEAP32[$seg + 16 >> 2] = $55;
	  }
	  return;
	  return;
	}

	_fsg_seg_bp2itor["X"] = 1;

	function _fsg_seg_next($seg) {
	  var $2 = $seg + 42 | 0;
	  var $4 = HEAP16[$2 >> 1] + 1 & 65535;
	  HEAP16[$2 >> 1] = $4;
	  if ($4 << 16 >> 16 == HEAP16[$seg + 40 >> 1] << 16 >> 16) {
	    _fsg_seg_free($seg);
	    var $_0 = 0;
	  } else {
	    var $16 = HEAP32[HEAP32[$seg + 36 >> 2] + ($4 << 16 >> 16 << 2) >> 2];
	    _fsg_seg_bp2itor($seg, $16);
	    var $_0 = $seg;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_seg_free($seg) {
	  var $4 = HEAP32[$seg + 36 >> 2];
	  _ckd_free($4);
	  var $5 = $seg;
	  _ckd_free($5);
	  return;
	  return;
	}

	function _hmm_context_init($n_emit_state, $tp, $sseq) {
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ($n_emit_state | 0) > 0;
	  do {
	    if ($1) {
	      if (($n_emit_state | 0) <= 5) {
	        __label__ = 6;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str374 | 0, 65, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str3377 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 5, tempInt));
	      var $_0 = 0;
	      __label__ = 7;
	      break;
	    }
	    ___assert_func(STRING_TABLE.__str374 | 0, 63, STRING_TABLE.___func___hmm_context_init | 0, STRING_TABLE.__str1375 | 0);
	    __label__ = 6;
	    break;
	  } while (0);
	  if (__label__ == 6) {
	    var $6 = ___ckd_calloc__(1, 28, STRING_TABLE.__str374 | 0, 69), $6$s2 = $6 >> 2;
	    var $7 = $6;
	    HEAP32[$6$s2] = $n_emit_state;
	    HEAP32[$6$s2 + 1] = $tp;
	    HEAP32[$6$s2 + 2] = 0;
	    HEAP32[$6$s2 + 3] = $sseq;
	    var $15 = ___ckd_calloc__($n_emit_state, 4, STRING_TABLE.__str374 | 0, 74);
	    HEAP32[$6$s2 + 4] = $15;
	    var $_0 = $7;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _hmm_context_free($ctx) {
	  if (($ctx | 0) != 0) {
	    var $5 = HEAP32[$ctx + 16 >> 2];
	    _ckd_free($5);
	    var $6 = $ctx;
	    _ckd_free($6);
	  }
	  return;
	  return;
	}

	function _hmm_init($ctx, $hmm, $mpx, $ssid, $tmatid) {
	  HEAP32[$hmm >> 2] = $ctx;
	  HEAP8[$hmm + 72 | 0] = $mpx & 255;
	  var $5 = HEAPU32[$ctx >> 2];
	  var $6 = $5 & 255;
	  var $7 = $hmm + 73 | 0;
	  HEAP8[$7] = $6;
	  var $8 = ($mpx | 0) == 0;
	  $_$104 : do {
	    if ($8) {
	      HEAP16[$hmm + 52 >> 1] = $ssid & 65535;
	      var $23 = $hmm + 54 | 0;
	      var $28 = HEAP32[HEAP32[$ctx + 12 >> 2] + ($ssid << 2) >> 2];
	      var $30 = $5 << 1 & 510;
	      _memcpy($23, $28, $30, 2);
	    } else {
	      HEAP16[$hmm + 52 >> 1] = -1;
	      HEAP16[$hmm + 54 >> 1] = $ssid & 65535;
	      if (($6 & 255) <= 1) {
	        break;
	      }
	      var $i_01 = 1;
	      while (1) {
	        var $i_01;
	        HEAP16[$hmm + ($i_01 << 1) + 54 >> 1] = -1;
	        var $15 = $i_01 + 1 | 0;
	        if (($15 | 0) >= (HEAPU8[$7] & 255 | 0)) {
	          break $_$104;
	        }
	        var $i_01 = $15;
	      }
	    }
	  } while (0);
	  HEAP16[$hmm + 68 >> 1] = $tmatid & 65535;
	  _hmm_clear($hmm);
	  return;
	  return;
	}

	function _hmm_vit_eval($hmm) {
	  var $5 = HEAP8[$hmm + 73 | 0];
	  var $6 = $5 << 24 >> 24 == 5;
	  if (HEAP8[$hmm + 72 | 0] << 24 >> 24 == 0) {
	    if ($6) {
	      var $18 = _hmm_vit_eval_5st_lr($hmm);
	      var $_0 = $18;
	    } else {
	      if ($5 << 24 >> 24 == 3) {
	        var $22 = _hmm_vit_eval_3st_lr($hmm);
	        var $_0 = $22;
	      } else {
	        var $24 = _hmm_vit_eval_anytopo($hmm);
	        var $_0 = $24;
	      }
	    }
	  } else {
	    if ($6) {
	      var $9 = _hmm_vit_eval_5st_lr_mpx($hmm);
	      var $_0 = $9;
	    } else {
	      if ($5 << 24 >> 24 == 3) {
	        var $13 = _hmm_vit_eval_3st_lr_mpx($hmm);
	        var $_0 = $13;
	      } else {
	        var $15 = _hmm_vit_eval_anytopo($hmm);
	        var $_0 = $15;
	      }
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _hmm_vit_eval_5st_lr_mpx($hmm) {
	  var $70$s1;
	  var $37$s1;
	  var $16$s1;
	  var $14$s2;
	  var $12$s1;
	  var $5$s2;
	  var $5$s2 = HEAP32[$hmm >> 2] >> 2;
	  var $10 = HEAPU32[HEAP32[HEAP32[$5$s2 + 1] + (HEAP16[$hmm + 68 >> 1] << 16 >> 16 << 2) >> 2] >> 2];
	  var $12$s1 = HEAPU32[$5$s2 + 2] >> 1;
	  var $14$s2 = HEAPU32[$5$s2 + 3] >> 2;
	  var $15 = $hmm + 54 | 0;
	  var $16$s1 = ($hmm + 62 | 0) >> 1;
	  var $17 = HEAPU16[$16$s1];
	  if ($17 << 16 >> 16 == -1) {
	    var $t1_0 = -536870912;
	    var $s4_0 = -536870912;
	  } else {
	    var $31 = HEAP32[$hmm + 20 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($17 & 65535) << 2 >> 2) + $14$s2] + 8 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	    var $t1_0 = $31 - (HEAPU8[$10 + 29 | 0] & 255) | 0;
	    var $s4_0 = $31;
	  }
	  var $s4_0;
	  var $t1_0;
	  var $37$s1 = ($hmm + 60 | 0) >> 1;
	  var $38 = HEAPU16[$37$s1];
	  if ($38 << 16 >> 16 == -1) {
	    var $t2_0 = -536870912;
	    var $s3_0 = -536870912;
	  } else {
	    var $52 = HEAP32[$hmm + 16 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($38 & 65535) << 2 >> 2) + $14$s2] + 6 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	    var $t2_0 = $52 - (HEAPU8[$10 + 23 | 0] & 255) | 0;
	    var $s3_0 = $52;
	  }
	  var $s3_0;
	  var $t2_0;
	  if (($t1_0 | 0) > ($t2_0 | 0)) {
	    var $61 = HEAP32[$hmm + 40 >> 2];
	    HEAP32[$hmm + 48 >> 2] = $61;
	    var $s5_0 = $t1_0;
	  } else {
	    var $65 = HEAP32[$hmm + 36 >> 2];
	    HEAP32[$hmm + 48 >> 2] = $65;
	    var $s5_0 = $t2_0;
	  }
	  var $s5_0;
	  var $_s5_0 = ($s5_0 | 0) < -536870912 ? -536870912 : $s5_0;
	  HEAP32[$hmm + 44 >> 2] = $_s5_0;
	  var $70$s1 = ($hmm + 58 | 0) >> 1;
	  var $71 = HEAPU16[$70$s1];
	  if ($71 << 16 >> 16 == -1) {
	    var $t2_1 = -536870912;
	    var $s2_0 = -536870912;
	  } else {
	    var $85 = HEAP32[$hmm + 12 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($71 & 65535) << 2 >> 2) + $14$s2] + 4 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	    var $t2_1 = $85 - (HEAPU8[$10 + 16 | 0] & 255) | 0;
	    var $s2_0 = $85;
	  }
	  var $s2_0;
	  var $t2_1;
	  if (($s4_0 | 0) == -536870912) {
	    var $t0_0 = -536870912;
	  } else {
	    var $t0_0 = $s4_0 - (HEAPU8[$10 + 28 | 0] & 255) | 0;
	  }
	  var $t0_0;
	  var $98 = ($s3_0 | 0) != -536870912;
	  if ($98) {
	    var $t1_1 = $s3_0 - (HEAPU8[$10 + 22 | 0] & 255) | 0;
	  } else {
	    var $t1_1 = -536870912;
	  }
	  var $t1_1;
	  var $105 = ($t0_0 | 0) > ($t1_1 | 0);
	  do {
	    if ($105) {
	      if (($t2_1 | 0) <= ($t0_0 | 0)) {
	        var $s4_1 = $t0_0;
	        break;
	      }
	      var $110 = HEAP32[$hmm + 32 >> 2];
	      HEAP32[$hmm + 40 >> 2] = $110;
	      HEAP16[$16$s1] = $71;
	      var $s4_1 = $t2_1;
	    } else {
	      if (($t2_1 | 0) > ($t1_1 | 0)) {
	        var $116 = HEAP32[$hmm + 32 >> 2];
	        HEAP32[$hmm + 40 >> 2] = $116;
	        HEAP16[$16$s1] = $71;
	        var $s4_1 = $t2_1;
	      } else {
	        var $120 = HEAP32[$hmm + 36 >> 2];
	        HEAP32[$hmm + 40 >> 2] = $120;
	        HEAP16[$16$s1] = $38;
	        var $s4_1 = $t1_1;
	      }
	    }
	  } while (0);
	  var $s4_1;
	  var $_s4_1 = ($s4_1 | 0) < -536870912 ? -536870912 : $s4_1;
	  var $bestScore_0 = ($_s4_1 | 0) > ($_s5_0 | 0) ? $_s4_1 : $_s5_0;
	  HEAP32[$hmm + 20 >> 2] = $_s4_1;
	  var $126 = $hmm + 56 | 0;
	  var $127 = HEAPU16[$126 >> 1];
	  if ($127 << 16 >> 16 == -1) {
	    var $t2_2 = -536870912;
	    var $s1_0 = -536870912;
	  } else {
	    var $141 = HEAP32[$hmm + 8 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($127 & 65535) << 2 >> 2) + $14$s2] + 2 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	    var $t2_2 = $141 - (HEAPU8[$10 + 9 | 0] & 255) | 0;
	    var $s1_0 = $141;
	  }
	  var $s1_0;
	  var $t2_2;
	  if ($98) {
	    var $t0_1 = $s3_0 - (HEAPU8[$10 + 21 | 0] & 255) | 0;
	  } else {
	    var $t0_1 = -536870912;
	  }
	  var $t0_1;
	  var $153 = ($s2_0 | 0) != -536870912;
	  if ($153) {
	    var $t1_2 = $s2_0 - (HEAPU8[$10 + 15 | 0] & 255) | 0;
	  } else {
	    var $t1_2 = -536870912;
	  }
	  var $t1_2;
	  var $160 = ($t0_1 | 0) > ($t1_2 | 0);
	  do {
	    if ($160) {
	      if (($t2_2 | 0) <= ($t0_1 | 0)) {
	        var $s3_1 = $t0_1;
	        break;
	      }
	      var $165 = HEAP32[$hmm + 28 >> 2];
	      HEAP32[$hmm + 36 >> 2] = $165;
	      HEAP16[$37$s1] = $127;
	      var $s3_1 = $t2_2;
	    } else {
	      if (($t2_2 | 0) > ($t1_2 | 0)) {
	        var $171 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 36 >> 2] = $171;
	        HEAP16[$37$s1] = $127;
	        var $s3_1 = $t2_2;
	      } else {
	        var $175 = HEAP32[$hmm + 32 >> 2];
	        HEAP32[$hmm + 36 >> 2] = $175;
	        HEAP16[$37$s1] = $71;
	        var $s3_1 = $t1_2;
	      }
	    }
	  } while (0);
	  var $s3_1;
	  var $_s3_1 = ($s3_1 | 0) < -536870912 ? -536870912 : $s3_1;
	  var $bestScore_1 = ($_s3_1 | 0) > ($bestScore_0 | 0) ? $_s3_1 : $bestScore_0;
	  HEAP32[$hmm + 16 >> 2] = $_s3_1;
	  var $181 = $hmm + 4 | 0;
	  var $183 = HEAPU16[$15 >> 1];
	  var $192 = HEAP32[$181 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($183 & 65535) << 2 >> 2) + $14$s2] >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	  if ($153) {
	    var $t0_2 = $s2_0 - (HEAPU8[$10 + 14 | 0] & 255) | 0;
	  } else {
	    var $t0_2 = -536870912;
	  }
	  var $t0_2;
	  var $199 = ($s1_0 | 0) != -536870912;
	  if ($199) {
	    var $t1_3 = $s1_0 - (HEAPU8[$10 + 8 | 0] & 255) | 0;
	  } else {
	    var $t1_3 = -536870912;
	  }
	  var $t1_3;
	  var $209 = $192 - (HEAPU8[$10 + 2 | 0] & 255) | 0;
	  var $210 = ($t0_2 | 0) > ($t1_3 | 0);
	  do {
	    if ($210) {
	      if (($209 | 0) <= ($t0_2 | 0)) {
	        var $s2_1 = $t0_2;
	        break;
	      }
	      var $215 = HEAP32[$hmm + 24 >> 2];
	      HEAP32[$hmm + 32 >> 2] = $215;
	      HEAP16[$70$s1] = $183;
	      var $s2_1 = $209;
	    } else {
	      if (($209 | 0) > ($t1_3 | 0)) {
	        var $221 = HEAP32[$hmm + 24 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $221;
	        HEAP16[$70$s1] = $183;
	        var $s2_1 = $209;
	      } else {
	        var $225 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $225;
	        HEAP16[$70$s1] = $127;
	        var $s2_1 = $t1_3;
	      }
	    }
	  } while (0);
	  var $s2_1;
	  var $_s2_1 = ($s2_1 | 0) < -536870912 ? -536870912 : $s2_1;
	  var $bestScore_2 = ($_s2_1 | 0) > ($bestScore_1 | 0) ? $_s2_1 : $bestScore_1;
	  HEAP32[$hmm + 12 >> 2] = $_s2_1;
	  if ($199) {
	    var $t0_3 = $s1_0 - (HEAPU8[$10 + 7 | 0] & 255) | 0;
	  } else {
	    var $t0_3 = -536870912;
	  }
	  var $t0_3;
	  var $240 = $192 - (HEAPU8[$10 + 1 | 0] & 255) | 0;
	  if (($t0_3 | 0) > ($240 | 0)) {
	    var $s1_1 = $t0_3;
	  } else {
	    var $244 = HEAP32[$hmm + 24 >> 2];
	    HEAP32[$hmm + 28 >> 2] = $244;
	    HEAP16[$126 >> 1] = $183;
	    var $s1_1 = $240;
	  }
	  var $s1_1;
	  var $_s1_1 = ($s1_1 | 0) < -536870912 ? -536870912 : $s1_1;
	  var $bestScore_3 = ($_s1_1 | 0) > ($bestScore_2 | 0) ? $_s1_1 : $bestScore_2;
	  HEAP32[$hmm + 8 >> 2] = $_s1_1;
	  var $252 = $192 - (HEAPU8[$10] & 255) | 0;
	  var $_ = ($252 | 0) < -536870912 ? -536870912 : $252;
	  var $bestScore_4 = ($_ | 0) > ($bestScore_3 | 0) ? $_ : $bestScore_3;
	  HEAP32[$181 >> 2] = $_;
	  HEAP32[$hmm + 64 >> 2] = $bestScore_4;
	  return $bestScore_4;
	  return null;
	}

	_hmm_vit_eval_5st_lr_mpx["X"] = 1;

	function _hmm_vit_eval_3st_lr_mpx($hmm) {
	  var $16$s1;
	  var $14$s2;
	  var $12$s1;
	  var $5$s2;
	  var $5$s2 = HEAP32[$hmm >> 2] >> 2;
	  var $10 = HEAPU32[HEAP32[HEAP32[$5$s2 + 1] + (HEAP16[$hmm + 68 >> 1] << 16 >> 16 << 2) >> 2] >> 2];
	  var $12$s1 = HEAPU32[$5$s2 + 2] >> 1;
	  var $14$s2 = HEAPU32[$5$s2 + 3] >> 2;
	  var $15 = $hmm + 54 | 0;
	  var $16$s1 = ($hmm + 58 | 0) >> 1;
	  var $17 = HEAPU16[$16$s1];
	  if ($17 << 16 >> 16 == -1) {
	    var $t1_0 = -536870912;
	    var $s2_0 = -536870912;
	  } else {
	    var $31 = HEAP32[$hmm + 12 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($17 & 65535) << 2 >> 2) + $14$s2] + 4 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	    var $t1_0 = $31 - (HEAPU8[$10 + 11 | 0] & 255) | 0;
	    var $s2_0 = $31;
	  }
	  var $s2_0;
	  var $t1_0;
	  var $37 = $hmm + 56 | 0;
	  var $38 = HEAPU16[$37 >> 1];
	  var $39 = $38 << 16 >> 16 == -1;
	  do {
	    if ($39) {
	      var $t2_0 = -536870912;
	      var $s1_0 = -536870912;
	    } else {
	      var $52 = HEAP32[$hmm + 8 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($38 & 65535) << 2 >> 2) + $14$s2] + 2 >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	      var $55 = HEAPU8[$10 + 7 | 0] & 255;
	      if ((-$55 | 0) <= -255) {
	        var $t2_0 = -2147483648;
	        var $s1_0 = $52;
	        break;
	      }
	      var $t2_0 = $52 - $55 | 0;
	      var $s1_0 = $52;
	    }
	  } while (0);
	  var $s1_0;
	  var $t2_0;
	  if (($t1_0 | 0) > ($t2_0 | 0)) {
	    var $64 = HEAP32[$hmm + 32 >> 2];
	    HEAP32[$hmm + 48 >> 2] = $64;
	    var $s3_0 = $t1_0;
	  } else {
	    var $68 = HEAP32[$hmm + 28 >> 2];
	    HEAP32[$hmm + 48 >> 2] = $68;
	    var $s3_0 = $t2_0;
	  }
	  var $s3_0;
	  var $_s3_0 = ($s3_0 | 0) < -536870912 ? -536870912 : $s3_0;
	  HEAP32[$hmm + 44 >> 2] = $_s3_0;
	  var $73 = $hmm + 4 | 0;
	  var $75 = HEAPU16[$15 >> 1];
	  var $84 = HEAP32[$73 >> 2] - (HEAP16[((HEAPU16[HEAP32[(($75 & 65535) << 2 >> 2) + $14$s2] >> 1] & 65535) << 1 >> 1) + $12$s1] << 16 >> 16) | 0;
	  if (($s2_0 | 0) == -536870912) {
	    var $t0_0 = -536870912;
	  } else {
	    var $t0_0 = $s2_0 - (HEAPU8[$10 + 10 | 0] & 255) | 0;
	  }
	  var $t0_0;
	  var $92 = ($s1_0 | 0) != -536870912;
	  if ($92) {
	    var $t1_1 = $s1_0 - (HEAPU8[$10 + 6 | 0] & 255) | 0;
	  } else {
	    var $t1_1 = -536870912;
	  }
	  var $t1_1;
	  var $101 = HEAPU8[$10 + 2 | 0] & 255;
	  var $t2_1 = (-$101 | 0) > -255 ? $84 - $101 | 0 : $t2_0;
	  var $105 = ($t0_0 | 0) > ($t1_1 | 0);
	  do {
	    if ($105) {
	      if (($t2_1 | 0) <= ($t0_0 | 0)) {
	        var $s2_1 = $t0_0;
	        break;
	      }
	      var $110 = HEAP32[$hmm + 24 >> 2];
	      HEAP32[$hmm + 32 >> 2] = $110;
	      HEAP16[$16$s1] = $75;
	      var $s2_1 = $t2_1;
	    } else {
	      if (($t2_1 | 0) > ($t1_1 | 0)) {
	        var $116 = HEAP32[$hmm + 24 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $116;
	        HEAP16[$16$s1] = $75;
	        var $s2_1 = $t2_1;
	      } else {
	        var $120 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $120;
	        HEAP16[$16$s1] = $38;
	        var $s2_1 = $t1_1;
	      }
	    }
	  } while (0);
	  var $s2_1;
	  var $_s2_1 = ($s2_1 | 0) < -536870912 ? -536870912 : $s2_1;
	  var $bestScore_0 = ($_s2_1 | 0) > ($_s3_0 | 0) ? $_s2_1 : $_s3_0;
	  HEAP32[$hmm + 12 >> 2] = $_s2_1;
	  if ($92) {
	    var $t0_1 = $s1_0 - (HEAPU8[$10 + 5 | 0] & 255) | 0;
	  } else {
	    var $t0_1 = -536870912;
	  }
	  var $t0_1;
	  var $135 = $84 - (HEAPU8[$10 + 1 | 0] & 255) | 0;
	  if (($t0_1 | 0) > ($135 | 0)) {
	    var $s1_1 = $t0_1;
	  } else {
	    var $139 = HEAP32[$hmm + 24 >> 2];
	    HEAP32[$hmm + 28 >> 2] = $139;
	    HEAP16[$37 >> 1] = $75;
	    var $s1_1 = $135;
	  }
	  var $s1_1;
	  var $_s1_1 = ($s1_1 | 0) < -536870912 ? -536870912 : $s1_1;
	  var $bestScore_1 = ($_s1_1 | 0) > ($bestScore_0 | 0) ? $_s1_1 : $bestScore_0;
	  HEAP32[$hmm + 8 >> 2] = $_s1_1;
	  var $147 = $84 - (HEAPU8[$10] & 255) | 0;
	  var $_ = ($147 | 0) < -536870912 ? -536870912 : $147;
	  var $bestScore_2 = ($_ | 0) > ($bestScore_1 | 0) ? $_ : $bestScore_1;
	  HEAP32[$73 >> 2] = $_;
	  HEAP32[$hmm + 64 >> 2] = $bestScore_2;
	  return $bestScore_2;
	  return null;
	}

	_hmm_vit_eval_3st_lr_mpx["X"] = 1;

	function _hmm_vit_eval_anytopo($hmm) {
	  var $43$s2;
	  var $2$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($hmm | 0) >> 2;
	  var $2 = HEAPU32[$1$s2], $2$s2 = $2 >> 2;
	  var $3 = $hmm + 4 | 0;
	  var $4 = HEAP32[$3 >> 2];
	  var $5 = $hmm + 72 | 0;
	  var $7 = HEAP8[$5] << 24 >> 24 == 0;
	  var $9 = HEAPU16[$hmm + 54 >> 1];
	  var $10 = $9 & 65535;
	  do {
	    if (!$7) {
	      if ($9 << 16 >> 16 == -1) {
	        var $41 = -536870912;
	        __label__ = 10;
	        break;
	      }
	      var $21 = HEAPU16[HEAP32[HEAP32[$2$s2 + 3] + ($10 << 2) >> 2] >> 1] & 65535;
	      __label__ = 5;
	      break;
	    }
	    var $21 = $10;
	    __label__ = 5;
	  } while (0);
	  do {
	    if (__label__ == 5) {
	      var $21;
	      if (($21 | 0) == 65535) {
	        var $41 = -536870912;
	        break;
	      }
	      do {
	        if ($7) {
	          var $34 = $10;
	        } else {
	          if ($9 << 16 >> 16 == -1) {
	            var $34 = 65535;
	            break;
	          }
	          var $34 = HEAPU16[HEAP32[HEAP32[$2$s2 + 3] + ($10 << 2) >> 2] >> 1] & 65535;
	        }
	      } while (0);
	      var $34;
	      var $41 = -(HEAP16[HEAP32[$2$s2 + 2] + ($34 << 1) >> 1] << 16 >> 16) | 0;
	    }
	  } while (0);
	  var $41;
	  var $42 = $41 + $4 | 0;
	  var $43$s2 = ($2 + 16 | 0) >> 2;
	  var $44 = HEAP32[$43$s2];
	  HEAP32[$44 >> 2] = $42;
	  var $45 = $hmm + 73 | 0;
	  var $46 = HEAPU8[$45];
	  var $47 = $46 & 255;
	  var $48 = ($46 & 255) > 1;
	  $_$110 : do {
	    if ($48) {
	      var $from_017 = 1;
	      while (1) {
	        var $from_017;
	        var $50 = HEAP32[$hmm + ($from_017 << 2) + 4 >> 2];
	        var $52 = HEAP8[$5] << 24 >> 24 == 0;
	        var $54 = HEAPU16[$hmm + ($from_017 << 1) + 54 >> 1];
	        var $55 = $54 & 65535;
	        do {
	          if (!$52) {
	            if ($54 << 16 >> 16 == -1) {
	              var $90 = -536870912;
	              __label__ = 19;
	              break;
	            }
	            var $68 = HEAPU16[HEAP32[HEAP32[HEAP32[$1$s2] + 12 >> 2] + ($55 << 2) >> 2] + ($from_017 << 1) >> 1] & 65535;
	            __label__ = 14;
	            break;
	          }
	          var $68 = $55;
	          __label__ = 14;
	        } while (0);
	        do {
	          if (__label__ == 14) {
	            var $68;
	            if (($68 | 0) == 65535) {
	              var $90 = -536870912;
	              break;
	            }
	            do {
	              if ($52) {
	                var $82 = $55;
	              } else {
	                if ($54 << 16 >> 16 == -1) {
	                  var $82 = 65535;
	                  break;
	                }
	                var $82 = HEAPU16[HEAP32[HEAP32[HEAP32[$1$s2] + 12 >> 2] + ($55 << 2) >> 2] + ($from_017 << 1) >> 1] & 65535;
	              }
	            } while (0);
	            var $82;
	            var $90 = -(HEAP16[HEAP32[HEAP32[$1$s2] + 8 >> 2] + ($82 << 1) >> 1] << 16 >> 16) | 0;
	          }
	        } while (0);
	        var $90;
	        var $91 = $90 + $50 | 0;
	        var $93 = ($from_017 << 2) + HEAP32[$43$s2] | 0;
	        HEAP32[$93 >> 2] = $91;
	        if (($91 | 0) < -536870912) {
	          var $97 = ($from_017 << 2) + HEAP32[$43$s2] | 0;
	          HEAP32[$97 >> 2] = -536870912;
	        }
	        var $99 = $from_017 + 1 | 0;
	        var $101 = HEAPU8[$45] & 255;
	        if (($99 | 0) >= ($101 | 0)) {
	          var $_lcssa16 = $101;
	          break $_$110;
	        }
	        var $from_017 = $99;
	      }
	    } else {
	      var $_lcssa16 = $47;
	    }
	  } while (0);
	  var $_lcssa16;
	  var $103 = $_lcssa16 - 1 | 0;
	  var $104 = ($_lcssa16 | 0) == 0;
	  $_$128 : do {
	    if ($104) {
	      HEAP32[$hmm + 44 >> 2] = -536870912;
	      var $bestscr_0_lcssa = -536870912;
	    } else {
	      var $106 = $hmm + 68 | 0;
	      var $107 = HEAPU16[$106 >> 1];
	      var $109 = HEAPU32[$1$s2];
	      var $113 = HEAP32[HEAP32[$109 + 4 >> 2] + ($107 << 16 >> 16 << 2) >> 2];
	      var $bestfrom_08 = -1;
	      var $from_19 = $103;
	      var $scr_010 = -536870912;
	      while (1) {
	        var $scr_010;
	        var $from_19;
	        var $bestfrom_08;
	        var $119 = HEAPU8[HEAP32[$113 + ($from_19 << 2) >> 2] + $_lcssa16 | 0] & 255;
	        if ((-$119 | 0) > -255) {
	          var $126 = HEAP32[HEAP32[$43$s2] + ($from_19 << 2) >> 2] - $119 | 0;
	          var $127 = ($126 | 0) > ($scr_010 | 0);
	          var $from_1_bestfrom_0 = $127 ? $from_19 : $bestfrom_08;
	          var $_scr_0 = $127 ? $126 : $scr_010;
	          var $scr_1 = $_scr_0;
	          var $bestfrom_1 = $from_1_bestfrom_0;
	        } else {
	          var $scr_1 = $scr_010;
	          var $bestfrom_1 = $bestfrom_08;
	        }
	        var $bestfrom_1;
	        var $scr_1;
	        if (($from_19 | 0) <= 0) {
	          break;
	        }
	        var $bestfrom_08 = $bestfrom_1;
	        var $from_19 = $from_19 - 1 | 0;
	        var $scr_010 = $scr_1;
	      }
	      HEAP32[$hmm + 44 >> 2] = $scr_1;
	      if (($bestfrom_1 | 0) > -1) {
	        var $135 = HEAP32[$hmm + ($bestfrom_1 << 2) + 24 >> 2];
	        HEAP32[$hmm + 48 >> 2] = $135;
	      }
	      var $137 = $hmm + 24 | 0;
	      var $to_06 = $103;
	      var $bestscr_07 = $scr_1;
	      var $140 = $107;
	      var $139 = $109;
	      $_$140 : while (1) {
	        var $139;
	        var $140;
	        var $bestscr_07;
	        var $to_06;
	        var $145 = HEAPU32[HEAP32[$139 + 4 >> 2] + ($140 << 16 >> 16 << 2) >> 2];
	        var $150 = HEAPU8[HEAP32[$145 + ($to_06 << 2) >> 2] + $to_06 | 0] & 255;
	        if ((-$150 | 0) > -255) {
	          var $scr_2_ph3 = HEAP32[HEAP32[$43$s2] + ($to_06 << 2) >> 2] - $150 | 0;
	          var $from_2_in_ph = $to_06;
	          var $bestfrom_2_ph = -1;
	        } else {
	          var $scr_2_ph3 = -536870912;
	          var $from_2_in_ph = $to_06;
	          var $bestfrom_2_ph = -1;
	          __label__ = 33;
	        }
	        $_$144 : while (1) {
	          var $bestfrom_2_ph;
	          var $from_2_in_ph;
	          var $scr_2_ph3;
	          var $from_2_in = $from_2_in_ph;
	          while (1) {
	            var $from_2_in;
	            var $from_2 = $from_2_in - 1 | 0;
	            if (($from_2_in | 0) <= 0) {
	              break $_$144;
	            }
	            var $165 = HEAPU8[HEAP32[$145 + ($from_2 << 2) >> 2] + $to_06 | 0] & 255;
	            if ((-$165 | 0) > -255) {
	              break;
	            }
	            var $from_2_in = $from_2;
	          }
	          var $172 = HEAP32[HEAP32[$43$s2] + ($from_2 << 2) >> 2] - $165 | 0;
	          var $173 = ($172 | 0) > ($scr_2_ph3 | 0);
	          var $from_2_bestfrom_2 = $173 ? $from_2 : $bestfrom_2_ph;
	          var $_scr_2 = $173 ? $172 : $scr_2_ph3;
	          var $scr_2_ph3 = $_scr_2;
	          var $from_2_in_ph = $from_2;
	          var $bestfrom_2_ph = $from_2_bestfrom_2;
	        }
	        var $175 = ($to_06 | 0) == 0;
	        do {
	          if ($175) {
	            HEAP32[$3 >> 2] = $scr_2_ph3;
	            if (($bestfrom_2_ph | 0) <= -1) {
	              break $_$140;
	            }
	            var $181 = HEAP32[$hmm + ($bestfrom_2_ph << 2) + 24 >> 2];
	            HEAP32[$137 >> 2] = $181;
	            __label__ = 43;
	            break;
	          }
	          HEAP32[$hmm + ($to_06 << 2) + 4 >> 2] = $scr_2_ph3;
	          if (($bestfrom_2_ph | 0) <= -1) {
	            __label__ = 45;
	            break;
	          }
	          var $187 = HEAP32[$hmm + ($bestfrom_2_ph << 2) + 24 >> 2];
	          HEAP32[$hmm + ($to_06 << 2) + 24 >> 2] = $187;
	          __label__ = 43;
	          break;
	        } while (0);
	        do {
	          if (__label__ == 43) {
	            if (HEAP8[$5] << 24 >> 24 == 0) {
	              break;
	            }
	            var $194 = HEAP16[$hmm + ($bestfrom_2_ph << 1) + 54 >> 1];
	            HEAP16[$hmm + ($to_06 << 1) + 54 >> 1] = $194;
	          }
	        } while (0);
	        var $scr_2_bestscr_0 = ($bestscr_07 | 0) < ($scr_2_ph3 | 0) ? $scr_2_ph3 : $bestscr_07;
	        if (($to_06 | 0) <= 0) {
	          var $bestscr_0_lcssa = $scr_2_bestscr_0;
	          break $_$128;
	        }
	        var $to_06 = $to_06 - 1 | 0;
	        var $bestscr_07 = $scr_2_bestscr_0;
	        var $140 = HEAP16[$106 >> 1];
	        var $139 = HEAP32[$1$s2];
	      }
	      var $scr_2_bestscr_028 = ($bestscr_07 | 0) < ($scr_2_ph3 | 0) ? $scr_2_ph3 : $bestscr_07;
	      var $bestscr_0_lcssa = $scr_2_bestscr_028;
	    }
	  } while (0);
	  var $bestscr_0_lcssa;
	  HEAP32[$hmm + 64 >> 2] = $bestscr_0_lcssa;
	  return $bestscr_0_lcssa;
	  return null;
	}

	_hmm_vit_eval_anytopo["X"] = 1;

	function _hmm_vit_eval_5st_lr($hmm) {
	  var $4$s1;
	  var $2 = HEAP32[$hmm >> 2];
	  var $4$s1 = HEAPU32[$2 + 8 >> 2] >> 1;
	  var $12 = HEAPU32[HEAP32[HEAP32[$2 + 4 >> 2] + (HEAP16[$hmm + 68 >> 1] << 16 >> 16 << 2) >> 2] >> 2];
	  var $14 = $hmm + 20 | 0;
	  var $22 = HEAP32[$14 >> 2] - (HEAP16[((HEAPU16[$hmm + 62 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  var $23 = $hmm + 16 | 0;
	  var $31 = HEAP32[$23 >> 2] - (HEAP16[((HEAPU16[$hmm + 60 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  if (($31 | 0) > -536870912) {
	    var $37 = $22 - (HEAPU8[$12 + 29 | 0] & 255) | 0;
	    var $41 = $31 - (HEAPU8[$12 + 23 | 0] & 255) | 0;
	    if (($37 | 0) > ($41 | 0)) {
	      var $45 = HEAP32[$hmm + 40 >> 2];
	      HEAP32[$hmm + 48 >> 2] = $45;
	      var $s5_0 = $37;
	    } else {
	      var $49 = HEAP32[$hmm + 36 >> 2];
	      HEAP32[$hmm + 48 >> 2] = $49;
	      var $s5_0 = $41;
	    }
	    var $s5_0;
	    var $_s5_0 = ($s5_0 | 0) < -536870912 ? -536870912 : $s5_0;
	    HEAP32[$hmm + 44 >> 2] = $_s5_0;
	    var $bestScore_0 = $_s5_0;
	  } else {
	    var $bestScore_0 = -536870912;
	  }
	  var $bestScore_0;
	  var $55 = $hmm + 12 | 0;
	  var $63 = HEAP32[$55 >> 2] - (HEAP16[((HEAPU16[$hmm + 58 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  if (($63 | 0) > -536870912) {
	    var $69 = $22 - (HEAPU8[$12 + 28 | 0] & 255) | 0;
	    var $73 = $31 - (HEAPU8[$12 + 22 | 0] & 255) | 0;
	    var $77 = $63 - (HEAPU8[$12 + 16 | 0] & 255) | 0;
	    var $78 = ($69 | 0) > ($73 | 0);
	    do {
	      if ($78) {
	        if (($77 | 0) <= ($69 | 0)) {
	          var $s4_0 = $69;
	          break;
	        }
	        var $83 = HEAP32[$hmm + 32 >> 2];
	        HEAP32[$hmm + 40 >> 2] = $83;
	        var $s4_0 = $77;
	      } else {
	        if (($77 | 0) > ($73 | 0)) {
	          var $89 = HEAP32[$hmm + 32 >> 2];
	          HEAP32[$hmm + 40 >> 2] = $89;
	          var $s4_0 = $77;
	        } else {
	          var $93 = HEAP32[$hmm + 36 >> 2];
	          HEAP32[$hmm + 40 >> 2] = $93;
	          var $s4_0 = $73;
	        }
	      }
	    } while (0);
	    var $s4_0;
	    var $_s4_0 = ($s4_0 | 0) < -536870912 ? -536870912 : $s4_0;
	    var $bestScore_1 = ($_s4_0 | 0) > ($bestScore_0 | 0) ? $_s4_0 : $bestScore_0;
	    HEAP32[$14 >> 2] = $_s4_0;
	    var $bestScore_2 = $bestScore_1;
	  } else {
	    var $bestScore_2 = $bestScore_0;
	  }
	  var $bestScore_2;
	  var $99 = $hmm + 8 | 0;
	  var $107 = HEAP32[$99 >> 2] - (HEAP16[((HEAPU16[$hmm + 56 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  if (($107 | 0) > -536870912) {
	    var $113 = $31 - (HEAPU8[$12 + 21 | 0] & 255) | 0;
	    var $117 = $63 - (HEAPU8[$12 + 15 | 0] & 255) | 0;
	    var $121 = $107 - (HEAPU8[$12 + 9 | 0] & 255) | 0;
	    var $122 = ($113 | 0) > ($117 | 0);
	    do {
	      if ($122) {
	        if (($121 | 0) <= ($113 | 0)) {
	          var $s3_0 = $113;
	          break;
	        }
	        var $127 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 36 >> 2] = $127;
	        var $s3_0 = $121;
	      } else {
	        if (($121 | 0) > ($117 | 0)) {
	          var $133 = HEAP32[$hmm + 28 >> 2];
	          HEAP32[$hmm + 36 >> 2] = $133;
	          var $s3_0 = $121;
	        } else {
	          var $137 = HEAP32[$hmm + 32 >> 2];
	          HEAP32[$hmm + 36 >> 2] = $137;
	          var $s3_0 = $117;
	        }
	      }
	    } while (0);
	    var $s3_0;
	    var $_s3_0 = ($s3_0 | 0) < -536870912 ? -536870912 : $s3_0;
	    var $bestScore_3 = ($_s3_0 | 0) > ($bestScore_2 | 0) ? $_s3_0 : $bestScore_2;
	    HEAP32[$23 >> 2] = $_s3_0;
	    var $bestScore_4 = $bestScore_3;
	  } else {
	    var $bestScore_4 = $bestScore_2;
	  }
	  var $bestScore_4;
	  var $143 = $hmm + 4 | 0;
	  var $150 = HEAP32[$143 >> 2] - (HEAP16[((HEAPU16[$hmm + 54 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  var $154 = $63 - (HEAPU8[$12 + 14 | 0] & 255) | 0;
	  var $158 = $107 - (HEAPU8[$12 + 8 | 0] & 255) | 0;
	  var $162 = $150 - (HEAPU8[$12 + 2 | 0] & 255) | 0;
	  var $163 = ($154 | 0) > ($158 | 0);
	  do {
	    if ($163) {
	      if (($162 | 0) <= ($154 | 0)) {
	        var $s2_0 = $154;
	        break;
	      }
	      var $168 = HEAP32[$hmm + 24 >> 2];
	      HEAP32[$hmm + 32 >> 2] = $168;
	      var $s2_0 = $162;
	    } else {
	      if (($162 | 0) > ($158 | 0)) {
	        var $174 = HEAP32[$hmm + 24 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $174;
	        var $s2_0 = $162;
	      } else {
	        var $178 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $178;
	        var $s2_0 = $158;
	      }
	    }
	  } while (0);
	  var $s2_0;
	  var $_s2_0 = ($s2_0 | 0) < -536870912 ? -536870912 : $s2_0;
	  var $bestScore_5 = ($_s2_0 | 0) > ($bestScore_4 | 0) ? $_s2_0 : $bestScore_4;
	  HEAP32[$55 >> 2] = $_s2_0;
	  var $186 = $107 - (HEAPU8[$12 + 7 | 0] & 255) | 0;
	  var $190 = $150 - (HEAPU8[$12 + 1 | 0] & 255) | 0;
	  if (($186 | 0) > ($190 | 0)) {
	    var $s1_0 = $186;
	  } else {
	    var $194 = HEAP32[$hmm + 24 >> 2];
	    HEAP32[$hmm + 28 >> 2] = $194;
	    var $s1_0 = $190;
	  }
	  var $s1_0;
	  var $_s1_0 = ($s1_0 | 0) < -536870912 ? -536870912 : $s1_0;
	  var $bestScore_6 = ($_s1_0 | 0) > ($bestScore_5 | 0) ? $_s1_0 : $bestScore_5;
	  HEAP32[$99 >> 2] = $_s1_0;
	  var $201 = $150 - (HEAPU8[$12] & 255) | 0;
	  var $_ = ($201 | 0) < -536870912 ? -536870912 : $201;
	  var $bestScore_7 = ($_ | 0) > ($bestScore_6 | 0) ? $_ : $bestScore_6;
	  HEAP32[$143 >> 2] = $_;
	  HEAP32[$hmm + 64 >> 2] = $bestScore_7;
	  return $bestScore_7;
	  return null;
	}

	_hmm_vit_eval_5st_lr["X"] = 1;

	function _hmm_vit_eval_3st_lr($hmm) {
	  var $4$s1;
	  var $2 = HEAP32[$hmm >> 2];
	  var $4$s1 = HEAPU32[$2 + 8 >> 2] >> 1;
	  var $12 = HEAPU32[HEAP32[HEAP32[$2 + 4 >> 2] + (HEAP16[$hmm + 68 >> 1] << 16 >> 16 << 2) >> 2] >> 2];
	  var $14 = $hmm + 12 | 0;
	  var $22 = HEAP32[$14 >> 2] - (HEAP16[((HEAPU16[$hmm + 58 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  var $23 = $hmm + 8 | 0;
	  var $31 = HEAP32[$23 >> 2] - (HEAP16[((HEAPU16[$hmm + 56 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  var $32 = $hmm + 4 | 0;
	  var $39 = HEAP32[$32 >> 2] - (HEAP16[((HEAPU16[$hmm + 54 >> 1] & 65535) << 1 >> 1) + $4$s1] << 16 >> 16) | 0;
	  if (($31 | 0) > -536870912) {
	    var $45 = $22 - (HEAPU8[$12 + 11 | 0] & 255) | 0;
	    var $48 = HEAPU8[$12 + 7 | 0] & 255;
	    var $t2_0 = (-$48 | 0) > -255 ? $31 - $48 | 0 : -2147483648;
	    if (($45 | 0) > ($t2_0 | 0)) {
	      var $55 = HEAP32[$hmm + 32 >> 2];
	      HEAP32[$hmm + 48 >> 2] = $55;
	      var $s3_0 = $45;
	    } else {
	      var $59 = HEAP32[$hmm + 28 >> 2];
	      HEAP32[$hmm + 48 >> 2] = $59;
	      var $s3_0 = $t2_0;
	    }
	    var $s3_0;
	    var $_s3_0 = ($s3_0 | 0) < -536870912 ? -536870912 : $s3_0;
	    HEAP32[$hmm + 44 >> 2] = $_s3_0;
	    var $bestScore_0 = $_s3_0;
	    var $t2_1 = $t2_0;
	  } else {
	    var $bestScore_0 = -536870912;
	    var $t2_1 = -2147483648;
	  }
	  var $t2_1;
	  var $bestScore_0;
	  var $68 = $22 - (HEAPU8[$12 + 10 | 0] & 255) | 0;
	  var $72 = $31 - (HEAPU8[$12 + 6 | 0] & 255) | 0;
	  var $75 = HEAPU8[$12 + 2 | 0] & 255;
	  var $t2_2 = (-$75 | 0) > -255 ? $39 - $75 | 0 : $t2_1;
	  var $79 = ($68 | 0) > ($72 | 0);
	  do {
	    if ($79) {
	      if (($t2_2 | 0) <= ($68 | 0)) {
	        var $s2_0 = $68;
	        break;
	      }
	      var $84 = HEAP32[$hmm + 24 >> 2];
	      HEAP32[$hmm + 32 >> 2] = $84;
	      var $s2_0 = $t2_2;
	    } else {
	      if (($t2_2 | 0) > ($72 | 0)) {
	        var $90 = HEAP32[$hmm + 24 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $90;
	        var $s2_0 = $t2_2;
	      } else {
	        var $94 = HEAP32[$hmm + 28 >> 2];
	        HEAP32[$hmm + 32 >> 2] = $94;
	        var $s2_0 = $72;
	      }
	    }
	  } while (0);
	  var $s2_0;
	  var $_s2_0 = ($s2_0 | 0) < -536870912 ? -536870912 : $s2_0;
	  var $bestScore_1 = ($_s2_0 | 0) > ($bestScore_0 | 0) ? $_s2_0 : $bestScore_0;
	  HEAP32[$14 >> 2] = $_s2_0;
	  var $102 = $31 - (HEAPU8[$12 + 5 | 0] & 255) | 0;
	  var $106 = $39 - (HEAPU8[$12 + 1 | 0] & 255) | 0;
	  if (($102 | 0) > ($106 | 0)) {
	    var $s1_0 = $102;
	  } else {
	    var $110 = HEAP32[$hmm + 24 >> 2];
	    HEAP32[$hmm + 28 >> 2] = $110;
	    var $s1_0 = $106;
	  }
	  var $s1_0;
	  var $_s1_0 = ($s1_0 | 0) < -536870912 ? -536870912 : $s1_0;
	  var $bestScore_2 = ($_s1_0 | 0) > ($bestScore_1 | 0) ? $_s1_0 : $bestScore_1;
	  HEAP32[$23 >> 2] = $_s1_0;
	  var $117 = $39 - (HEAPU8[$12] & 255) | 0;
	  var $_ = ($117 | 0) < -536870912 ? -536870912 : $117;
	  var $bestScore_3 = ($_ | 0) > ($bestScore_2 | 0) ? $_ : $bestScore_2;
	  HEAP32[$32 >> 2] = $_;
	  HEAP32[$hmm + 64 >> 2] = $bestScore_3;
	  return $bestScore_3;
	  return null;
	}

	_hmm_vit_eval_3st_lr["X"] = 1;

	function _find_ph_lc($lclist, $lc) {
	  var $lcptr_0 = $lclist;
	  while (1) {
	    var $lcptr_0;
	    if (($lcptr_0 | 0) == 0) {
	      break;
	    }
	    if ((HEAP16[$lcptr_0 >> 1] << 16 >> 16 | 0) == ($lc | 0)) {
	      break;
	    }
	    var $lcptr_0 = HEAP32[$lcptr_0 + 8 >> 2];
	  }
	  return $lcptr_0;
	  return null;
	}

	function _find_ph_rc($rclist, $rc) {
	  var $rcptr_0 = $rclist;
	  while (1) {
	    var $rcptr_0;
	    if (($rcptr_0 | 0) == 0) {
	      break;
	    }
	    if ((HEAP16[$rcptr_0 >> 1] << 16 >> 16 | 0) == ($rc | 0)) {
	      break;
	    }
	    var $rcptr_0 = HEAP32[$rcptr_0 + 8 >> 2];
	  }
	  return $rcptr_0;
	  return null;
	}

	function _mdef_ciphone_id($m_0_6_val, $ci) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $id = __stackBase__;
	  var $1 = _hash_table_lookup_int32($m_0_6_val, $ci, $id);
	  var $_0 = ($1 | 0) < 0 ? -1 : HEAP32[$id >> 2];
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _mdef_ciphone_str($m, $id) {
	  var __label__;
	  if (($m | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 188, STRING_TABLE.___func___mdef_ciphone_str | 0, STRING_TABLE.__str1408 | 0);
	  }
	  var $4 = ($id | 0) > -1;
	  do {
	    if ($4) {
	      if ((HEAP32[$m >> 2] | 0) > ($id | 0)) {
	        __label__ = 7;
	        break;
	      }
	      __label__ = 6;
	      break;
	    } else {
	      __label__ = 6;
	    }
	  } while (0);
	  if (__label__ == 6) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 189, STRING_TABLE.___func___mdef_ciphone_str | 0, STRING_TABLE.__str2409 | 0);
	  }
	  return HEAP32[HEAP32[$m + 28 >> 2] + ($id << 3) >> 2];
	  return null;
	}

	function _mdef_phone_str($m, $pid, $buf) {
	  var $17$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  if (($m | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 200, STRING_TABLE.___func___mdef_phone_str | 0, STRING_TABLE.__str1408 | 0);
	  }
	  var $4 = ($pid | 0) > -1;
	  do {
	    if ($4) {
	      if ((HEAP32[$m + 4 >> 2] | 0) > ($pid | 0)) {
	        __label__ = 7;
	        break;
	      }
	      __label__ = 6;
	      break;
	    } else {
	      __label__ = 6;
	    }
	  } while (0);
	  if (__label__ == 6) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 201, STRING_TABLE.___func___mdef_phone_str | 0, STRING_TABLE.__str3410 | 0);
	  }
	  HEAP8[$buf] = 0;
	  if ((HEAP32[$m >> 2] | 0) > ($pid | 0)) {
	    var $15 = _mdef_ciphone_str($m, $pid);
	    var $strlen = _strlen($15);
	    var $leninc = $strlen + 1 | 0;
	    _memcpy($buf, $15, $leninc, 1);
	  } else {
	    var $17$s2 = ($m + 32 | 0) >> 2;
	    var $21 = HEAP16[(HEAP32[$17$s2] + 8 >> 1) + ($pid * 12 | 0)] << 16 >> 16;
	    var $22 = _mdef_ciphone_str($m, $21);
	    var $26 = HEAP16[(HEAP32[$17$s2] + 10 >> 1) + ($pid * 12 | 0)] << 16 >> 16;
	    var $27 = _mdef_ciphone_str($m, $26);
	    var $31 = HEAP16[(HEAP32[$17$s2] + 12 >> 1) + ($pid * 12 | 0)] << 16 >> 16;
	    var $32 = _mdef_ciphone_str($m, $31);
	    var $36 = STRING_TABLE.__str4411 + HEAP32[(HEAP32[$17$s2] + 16 >> 2) + ($pid * 6 | 0)] | 0;
	    var $38 = HEAP8[$36] << 24 >> 24;
	    var $39 = _sprintf($buf, STRING_TABLE.__str6413 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $22, HEAP32[tempInt + 4 >> 2] = $27, HEAP32[tempInt + 8 >> 2] = $32, HEAP32[tempInt + 12 >> 2] = $38, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _noncomment_line($line, $fp) {
	  while (1) {
	    var $2 = _fgets($line, 1024, $fp);
	    if (($2 | 0) == 0) {
	      var $_0 = -1;
	      break;
	    }
	    if (HEAP8[$line] << 24 >> 24 != 35) {
	      var $_0 = 0;
	      break;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _sseq_compress($m) {
	  var $4$s2;
	  var $j$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $j = __stackBase__, $j$s2 = $j >> 2;
	  var $1 = $m + 8 | 0;
	  var $3 = HEAP32[$1 >> 2] << 1;
	  var $4$s2 = ($m + 4 | 0) >> 2;
	  var $5 = HEAP32[$4$s2];
	  var $6 = _hash_table_new($5, 0);
	  var $8 = (HEAP32[$4$s2] | 0) > 0;
	  $_$180 : do {
	    if ($8) {
	      var $9 = $m + 36 | 0;
	      var $10 = $m + 32 | 0;
	      var $n_sseq_02 = 0;
	      var $p_03 = 0;
	      while (1) {
	        var $p_03;
	        var $n_sseq_02;
	        var $15 = HEAP32[HEAP32[$9 >> 2] + ($p_03 << 2) >> 2];
	        var $17 = _hash_table_enter_bkey($6, $15, $3, $n_sseq_02);
	        var $18 = $17;
	        HEAP32[$j$s2] = $18;
	        var $_n_sseq_0 = (($n_sseq_02 | 0) == ($18 | 0) & 1) + $n_sseq_02 | 0;
	        var $22 = HEAP32[$10 >> 2] + $p_03 * 24 | 0;
	        HEAP32[$22 >> 2] = $18;
	        var $23 = $p_03 + 1 | 0;
	        if (($23 | 0) >= (HEAP32[$4$s2] | 0)) {
	          var $n_sseq_0_lcssa = $_n_sseq_0;
	          break $_$180;
	        }
	        var $n_sseq_02 = $_n_sseq_0;
	        var $p_03 = $23;
	      }
	    } else {
	      var $n_sseq_0_lcssa = 0;
	    }
	  } while (0);
	  var $n_sseq_0_lcssa;
	  var $26 = HEAP32[$1 >> 2];
	  var $27 = ___ckd_calloc_2d__($n_sseq_0_lcssa, $26, 2, STRING_TABLE.__str407 | 0, 470);
	  var $28 = $27;
	  var $29 = _hash_table_tolist($6, $j);
	  if ((HEAP32[$j$s2] | 0) != ($n_sseq_0_lcssa | 0)) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 473, STRING_TABLE.___func___sseq_compress | 0, STRING_TABLE.__str51458 | 0);
	  }
	  var $33 = ($29 | 0) == 0;
	  $_$188 : do {
	    if (!$33) {
	      var $gn_01 = $29;
	      while (1) {
	        var $gn_01;
	        var $35 = HEAP32[$gn_01 >> 2];
	        var $39 = HEAP32[$35 + 8 >> 2];
	        HEAP32[$j$s2] = $39;
	        var $42 = HEAP32[$28 + ($39 << 2) >> 2];
	        var $44 = HEAP32[$35 >> 2];
	        _memcpy($42, $44, $3, 1);
	        var $46 = HEAP32[$gn_01 + 8 >> 2];
	        if (($46 | 0) == 0) {
	          break $_$188;
	        }
	        var $gn_01 = $46;
	      }
	    }
	  } while (0);
	  _glist_free($29);
	  var $48 = $m + 36 | 0;
	  var $50 = HEAP32[$48 >> 2];
	  _ckd_free_2d($50);
	  HEAP32[$48 >> 2] = $28;
	  HEAP32[$m + 40 >> 2] = $n_sseq_0_lcssa;
	  _hash_table_free($6);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_sseq_compress["X"] = 1;

	function _mdef_free_recursive_lc($lc) {
	  if (($lc | 0) != 0) {
	    var $4 = HEAP32[$lc + 4 >> 2];
	    if (($4 | 0) != 0) {
	      _mdef_free_recursive_rc($4);
	    }
	    var $9 = HEAP32[$lc + 8 >> 2];
	    if (($9 | 0) != 0) {
	      _mdef_free_recursive_lc($9);
	    }
	    var $13 = $lc;
	    _ckd_free($13);
	  }
	  return;
	  return;
	}

	function _mdef_free_recursive_rc($rc) {
	  if (($rc | 0) != 0) {
	    var $4 = HEAP32[$rc + 8 >> 2];
	    if (($4 | 0) != 0) {
	      _mdef_free_recursive_rc($4);
	    }
	    var $8 = $rc;
	    _ckd_free($8);
	  }
	  return;
	  return;
	}

	function _mdef_init($mdeffile) {
	  var $197$s2;
	  var $192$s2;
	  var $121$s2;
	  var $117$s2;
	  var $108$s2;
	  var $103$s2;
	  var $32$s2;
	  var $30$s2;
	  var $28$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 2052;
	  var __label__;
	  var $n = __stackBase__;
	  var $tag = __stackBase__ + 4;
	  var $buf = __stackBase__ + 1028;
	  if (($mdeffile | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str407 | 0, 517, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str14421 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  } else {
	    __E__pr_info_header(STRING_TABLE.__str407 | 0, 520);
	    __E__pr_info(STRING_TABLE.__str16423 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $mdeffile, tempInt));
	    var $4 = ___ckd_calloc__(1, 64, STRING_TABLE.__str407 | 0, 522);
	    var $5 = $4;
	    var $6 = _fopen($mdeffile, STRING_TABLE.__str2415 | 0);
	    if (($6 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str407 | 0, 525, STRING_TABLE.__str232533 | 0);
	      __E__fatal_sys_error(STRING_TABLE.__str19426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $mdeffile, tempInt));
	    } else {
	      var $10 = $buf | 0;
	      var $11 = _noncomment_line($10, $6);
	      if (($11 | 0) < 0) {
	        __E__pr_header(STRING_TABLE.__str407 | 0, 528, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str20427 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $mdeffile, tempInt));
	      } else {
	        var $15 = _strncmp($10, STRING_TABLE.__str21428 | 0, 4);
	        var $16 = ($15 | 0) == 0;
	        do {
	          if ($16) {
	            __label__ = 10;
	          } else {
	            var $18 = _strncmp($10, STRING_TABLE.__str22429 | 0, 4);
	            if (($18 | 0) == 0) {
	              __label__ = 10;
	              break;
	            }
	            var $23 = _strncmp($10, STRING_TABLE.__str24431 | 0, 3);
	            if (($23 | 0) == 0) {
	              var $28$s2 = ($4 + 12 | 0) >> 2;
	              HEAP32[$28$s2] = -1;
	              var $30$s2 = ($4 + 16 | 0) >> 2;
	              HEAP32[$30$s2] = -1;
	              var $32$s2 = ($4 + 20 | 0) >> 2;
	              HEAP32[$32$s2] = -1;
	              var $33 = $tag | 0;
	              var $n_map_0 = -1;
	              var $n_ci_0 = -1;
	              var $n_tri_0 = -1;
	              while (1) {
	                var $n_tri_0;
	                var $n_ci_0;
	                var $n_map_0;
	                var $34 = _noncomment_line($10, $6);
	                if (($34 | 0) < 0) {
	                  __E__pr_header(STRING_TABLE.__str407 | 0, 551, STRING_TABLE.__str72422 | 0);
	                  __E__die_error(STRING_TABLE.__str26433 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                } else {
	                  var $38 = _sscanf($10, STRING_TABLE.__str27434 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n, HEAP32[tempInt + 4 >> 2] = $33, tempInt));
	                  var $40 = HEAP32[$n >> 2];
	                  if (($38 | 0) != 2 | ($40 | 0) < 0) {
	                    __E__pr_header(STRING_TABLE.__str407 | 0, 554, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str28435 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $10, tempInt));
	                  } else {
	                    var $44 = _strcmp($33, STRING_TABLE.__str29436 | 0);
	                    var $45 = ($44 | 0) == 0;
	                    do {
	                      if ($45) {
	                        var $n_map_1 = $n_map_0;
	                        var $n_ci_1 = $40;
	                        var $n_tri_1 = $n_tri_0;
	                      } else {
	                        var $47 = _strcmp($33, STRING_TABLE.__str30437 | 0);
	                        if (($47 | 0) == 0) {
	                          var $n_map_1 = $n_map_0;
	                          var $n_ci_1 = $n_ci_0;
	                          var $n_tri_1 = $40;
	                          break;
	                        }
	                        var $50 = _strcmp($33, STRING_TABLE.__str31438 | 0);
	                        if (($50 | 0) == 0) {
	                          var $n_map_1 = $40;
	                          var $n_ci_1 = $n_ci_0;
	                          var $n_tri_1 = $n_tri_0;
	                          break;
	                        }
	                        var $53 = _strcmp($33, STRING_TABLE.__str32439 | 0);
	                        if (($53 | 0) == 0) {
	                          HEAP32[$28$s2] = $40;
	                          var $n_map_1 = $n_map_0;
	                          var $n_ci_1 = $n_ci_0;
	                          var $n_tri_1 = $n_tri_0;
	                        } else {
	                          var $57 = _strcmp($33, STRING_TABLE.__str33440 | 0);
	                          if (($57 | 0) == 0) {
	                            HEAP32[$30$s2] = $40;
	                            var $n_map_1 = $n_map_0;
	                            var $n_ci_1 = $n_ci_0;
	                            var $n_tri_1 = $n_tri_0;
	                          } else {
	                            var $61 = _strcmp($33, STRING_TABLE.__str34441 | 0);
	                            if (($61 | 0) == 0) {
	                              HEAP32[$32$s2] = $40;
	                              var $n_map_1 = $n_map_0;
	                              var $n_ci_1 = $n_ci_0;
	                              var $n_tri_1 = $n_tri_0;
	                            } else {
	                              __E__pr_header(STRING_TABLE.__str407 | 0, 569, STRING_TABLE.__str72422 | 0);
	                              __E__die_error(STRING_TABLE.__str35442 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $10, tempInt));
	                            }
	                          }
	                        }
	                      }
	                    } while (0);
	                    var $n_tri_1;
	                    var $n_ci_1;
	                    var $n_map_1;
	                    if (($n_ci_1 | $n_tri_1 | $n_map_1 | 0) < 0) {
	                      var $n_map_0 = $n_map_1;
	                      var $n_ci_0 = $n_ci_1;
	                      var $n_tri_0 = $n_tri_1;
	                      continue;
	                    }
	                    var $70 = HEAP32[$28$s2];
	                    if (($70 | 0) < 0) {
	                      var $n_map_0 = $n_map_1;
	                      var $n_ci_0 = $n_ci_1;
	                      var $n_tri_0 = $n_tri_1;
	                      continue;
	                    }
	                    var $73 = HEAP32[$30$s2];
	                    if (($73 | 0) < 0) {
	                      var $n_map_0 = $n_map_1;
	                      var $n_ci_0 = $n_ci_1;
	                      var $n_tri_0 = $n_tri_1;
	                      continue;
	                    }
	                    var $76 = HEAP32[$32$s2];
	                    if (($76 | 0) >= 0) {
	                      break;
	                    }
	                    var $n_map_0 = $n_map_1;
	                    var $n_ci_0 = $n_ci_1;
	                    var $n_tri_0 = $n_tri_1;
	                  }
	                }
	              }
	              if (($n_ci_1 | 0) == 0 | ($70 | 0) == 0 | ($76 | 0) == 0 | ($70 | 0) > ($73 | 0)) {
	                __E__pr_header(STRING_TABLE.__str407 | 0, 575, STRING_TABLE.__str72422 | 0);
	                __E__die_error(STRING_TABLE.__str36443 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $mdeffile, tempInt));
	              } else {
	                if (($n_ci_1 | 0) > 32766) {
	                  __E__pr_header(STRING_TABLE.__str407 | 0, 579, STRING_TABLE.__str72422 | 0);
	                  __E__die_error(STRING_TABLE.__str37444 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $mdeffile, HEAP32[tempInt + 4 >> 2] = $n_ci_1, HEAP32[tempInt + 8 >> 2] = 32767, tempInt));
	                } else {
	                  var $88 = $n_ci_1 + $n_tri_1 | 0;
	                  if (($88 | 0) == 2147483647) {
	                    __E__pr_header(STRING_TABLE.__str407 | 0, 582, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str38445 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $mdeffile, HEAP32[tempInt + 4 >> 2] = 2147483647, HEAP32[tempInt + 8 >> 2] = 2147483647, tempInt));
	                  } else {
	                    if (($73 | 0) > 32766) {
	                      __E__pr_header(STRING_TABLE.__str407 | 0, 585, STRING_TABLE.__str72422 | 0);
	                      var $94 = HEAP32[$30$s2];
	                      __E__die_error(STRING_TABLE.__str39446 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $mdeffile, HEAP32[tempInt + 4 >> 2] = $94, HEAP32[tempInt + 8 >> 2] = 32767, tempInt));
	                    } else {
	                      if (($76 | 0) == 2147483647) {
	                        __E__pr_header(STRING_TABLE.__str407 | 0, 588, STRING_TABLE.__str72422 | 0);
	                        var $98 = HEAP32[$32$s2];
	                        __E__die_error(STRING_TABLE.__str40447 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $mdeffile, HEAP32[tempInt + 4 >> 2] = $98, HEAP32[tempInt + 8 >> 2] = 2147483647, tempInt));
	                      } else {
	                        var $100 = ($n_map_1 | 0) / ($88 | 0) & -1;
	                        var $103$s2 = ($4 + 8 | 0) >> 2;
	                        HEAP32[$103$s2] = $100 - 1 | 0;
	                        if (($100 * $88 | 0) == ($n_map_1 | 0)) {
	                          var $108$s2 = $4 >> 2;
	                          HEAP32[$108$s2] = $n_ci_1;
	                          var $109 = _hash_table_new($n_ci_1, 0);
	                          var $111 = $4 + 24 | 0;
	                          HEAP32[$111 >> 2] = $109;
	                          var $112 = ___ckd_calloc__($n_ci_1, 8, STRING_TABLE.__str407 | 0, 599);
	                          HEAP32[$4 + 28 >> 2] = $112;
	                          var $117$s2 = ($4 + 4 | 0) >> 2;
	                          HEAP32[$117$s2] = $88;
	                          var $118 = ___ckd_calloc__($88, 24, STRING_TABLE.__str407 | 0, 603);
	                          var $121$s2 = ($4 + 32 | 0) >> 2;
	                          HEAP32[$121$s2] = $118;
	                          var $122 = HEAP32[$117$s2];
	                          var $123 = HEAP32[$103$s2];
	                          var $124 = ___ckd_calloc_2d__($122, $123, 2, STRING_TABLE.__str407 | 0, 606);
	                          var $125 = $124;
	                          var $127 = $4 + 36 | 0;
	                          HEAP32[$127 >> 2] = $125;
	                          var $130 = HEAP32[$103$s2] * HEAP32[$117$s2] | 0;
	                          var $131 = ___ckd_calloc__($130, 2, STRING_TABLE.__str407 | 0, 626);
	                          var $132 = $131;
	                          var $134 = $4 + 60 | 0;
	                          HEAP32[$134 >> 2] = $132;
	                          var $136 = (HEAP32[$117$s2] | 0) > 0;
	                          $_$61 : do {
	                            if ($136) {
	                              var $p_024 = 0;
	                              var $137 = $132;
	                              while (1) {
	                                var $137;
	                                var $p_024;
	                                var $140 = (HEAP32[$103$s2] * $p_024 << 1) + $137 | 0;
	                                var $142 = HEAP32[$121$s2] + $p_024 * 24 + 20 | 0;
	                                HEAP32[$142 >> 2] = $140;
	                                var $143 = $p_024 + 1 | 0;
	                                if (($143 | 0) >= (HEAP32[$117$s2] | 0)) {
	                                  break $_$61;
	                                }
	                                var $p_024 = $143;
	                                var $137 = HEAP32[$134 >> 2];
	                              }
	                            }
	                          } while (0);
	                          var $146 = HEAP32[$108$s2];
	                          var $147 = ___ckd_calloc_2d__(4, $146, 4, STRING_TABLE.__str407 | 0, 633);
	                          var $148 = $147;
	                          HEAP32[$4 + 56 >> 2] = $148;
	                          var $p_1 = 0;
	                          while (1) {
	                            var $p_1;
	                            if (($p_1 | 0) >= ($n_ci_1 | 0)) {
	                              break;
	                            }
	                            var $154 = _noncomment_line($10, $6);
	                            if (($154 | 0) < 0) {
	                              __E__pr_header(STRING_TABLE.__str407 | 0, 643, STRING_TABLE.__str72422 | 0);
	                              __E__die_error(STRING_TABLE.__str42449 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $p_1, tempInt));
	                            } else {
	                              _parse_base_line($5, $10, $p_1);
	                              var $p_1 = $p_1 + 1 | 0;
	                            }
	                          }
	                          var $_idx_val = HEAP32[$111 >> 2];
	                          var $160 = _mdef_ciphone_id($_idx_val, STRING_TABLE.__str43450 | 0);
	                          HEAP16[$4 + 52 >> 1] = $160 & 65535;
	                          var $p_2 = $p_1;
	                          while (1) {
	                            var $p_2;
	                            var $166 = ($p_2 | 0) < (HEAP32[$117$s2] | 0);
	                            var $167 = _noncomment_line($10, $6);
	                            if (!$166) {
	                              break;
	                            }
	                            if (($167 | 0) < 0) {
	                              __E__pr_header(STRING_TABLE.__str407 | 0, 651, STRING_TABLE.__str72422 | 0);
	                              __E__die_error(STRING_TABLE.__str44451 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $p_2, tempInt));
	                            } else {
	                              _parse_tri_line($5, $10, $p_2);
	                              var $p_2 = $p_2 + 1 | 0;
	                            }
	                          }
	                          if (($167 | 0) > -1) {
	                            __E__pr_header(STRING_TABLE.__str407 | 0, 656, STRING_TABLE.__str102579 | 0);
	                            var $176 = HEAP32[$117$s2];
	                            __E__pr_warn(STRING_TABLE.__str46453 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $176, tempInt));
	                          }
	                          if ((HEAP32[$103$s2] * HEAP32[$108$s2] | 0) == (HEAP32[$28$s2] | 0)) {
	                            var $188 = HEAP32[$30$s2];
	                            var $189 = ___ckd_calloc__($188, 2, STRING_TABLE.__str407 | 0, 664);
	                            var $190 = $189;
	                            var $192$s2 = ($4 + 44 | 0) >> 2;
	                            HEAP32[$192$s2] = $190;
	                            var $193 = HEAP32[$30$s2];
	                            var $194 = ___ckd_calloc__($193, 2, STRING_TABLE.__str407 | 0, 666);
	                            var $195 = $194;
	                            var $197$s2 = ($4 + 48 | 0) >> 2;
	                            HEAP32[$197$s2] = $195;
	                            var $199 = (HEAP32[$30$s2] | 0) > 0;
	                            $_$86 : do {
	                              if ($199) {
	                                var $s_018 = 0;
	                                var $202 = $195;
	                                while (1) {
	                                  var $202;
	                                  var $s_018;
	                                  HEAP16[$202 + ($s_018 << 1) >> 1] = -1;
	                                  var $204 = $s_018 + 1 | 0;
	                                  if (($204 | 0) >= (HEAP32[$30$s2] | 0)) {
	                                    break $_$86;
	                                  }
	                                  var $s_018 = $204;
	                                  var $202 = HEAP32[$197$s2];
	                                }
	                              }
	                            } while (0);
	                            var $201 = (HEAP32[$28$s2] | 0) > 0;
	                            $_$91 : do {
	                              if ($201) {
	                                var $s_116 = 0;
	                                while (1) {
	                                  var $s_116;
	                                  HEAP16[HEAP32[$192$s2] + ($s_116 << 1) >> 1] = $s_116 & 65535;
	                                  HEAP16[HEAP32[$197$s2] + ($s_116 << 1) >> 1] = ($s_116 | 0) / (HEAP32[$103$s2] | 0) & -1 & 65535;
	                                  var $217 = $s_116 + 1 | 0;
	                                  if (($217 | 0) >= (HEAP32[$28$s2] | 0)) {
	                                    break $_$91;
	                                  }
	                                  var $s_116 = $217;
	                                }
	                              }
	                            } while (0);
	                            var $207 = HEAP32[$117$s2];
	                            var $208 = ($n_ci_1 | 0) < ($207 | 0);
	                            $_$95 : do {
	                              if ($208) {
	                                var $p_313 = $n_ci_1;
	                                var $221 = HEAP32[$103$s2];
	                                var $220 = $207;
	                                while (1) {
	                                  var $220;
	                                  var $221;
	                                  var $p_313;
	                                  if (($221 | 0) > 0) {
	                                    var $s_211 = 0;
	                                    while (1) {
	                                      var $s_211;
	                                      var $223 = HEAPU32[$127 >> 2];
	                                      var $228 = HEAPU16[HEAP32[$223 + ($p_313 << 2) >> 2] + ($s_211 << 1) >> 1] & 65535;
	                                      var $236 = HEAP16[HEAP32[$223 + (HEAP16[(HEAP32[$121$s2] + 8 >> 1) + ($p_313 * 12 | 0)] << 16 >> 16 << 2) >> 2] + ($s_211 << 1) >> 1];
	                                      HEAP16[HEAP32[$192$s2] + ($228 << 1) >> 1] = $236;
	                                      var $241 = HEAP16[(HEAP32[$121$s2] + 8 >> 1) + ($p_313 * 12 | 0)];
	                                      HEAP16[HEAP32[$197$s2] + ($228 << 1) >> 1] = $241;
	                                      var $244 = $s_211 + 1 | 0;
	                                      var $245 = HEAP32[$103$s2];
	                                      if (($244 | 0) >= ($245 | 0)) {
	                                        break;
	                                      }
	                                      var $s_211 = $244;
	                                    }
	                                    var $249 = $245;
	                                    var $248 = HEAP32[$117$s2];
	                                  } else {
	                                    var $249 = $221;
	                                    var $248 = $220;
	                                  }
	                                  var $248;
	                                  var $249;
	                                  var $250 = $p_313 + 1 | 0;
	                                  if (($250 | 0) >= ($248 | 0)) {
	                                    break $_$95;
	                                  }
	                                  var $p_313 = $250;
	                                  var $221 = $249;
	                                  var $220 = $248;
	                                }
	                              }
	                            } while (0);
	                            _sseq_compress($5);
	                            var $252 = _fclose($6);
	                            var $_0 = $5;
	                            __label__ = 73;
	                            break;
	                          }
	                          __E__pr_header(STRING_TABLE.__str407 | 0, 661, STRING_TABLE.__str72422 | 0);
	                          var $184 = HEAP32[$28$s2];
	                          var $185 = HEAP32[$108$s2];
	                          var $186 = HEAP32[$103$s2];
	                          __E__die_error(STRING_TABLE.__str47454 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $184, HEAP32[tempInt + 4 >> 2] = $185, HEAP32[tempInt + 8 >> 2] = $186, tempInt));
	                        } else {
	                          __E__pr_header(STRING_TABLE.__str407 | 0, 593, STRING_TABLE.__str72422 | 0);
	                          __E__die_error(STRING_TABLE.__str41448 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str407 | 0, 539, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str25432 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str24431 | 0, HEAP32[tempInt + 4 >> 2] = $10, tempInt));
	            }
	          }
	        } while (0);
	        if (__label__ == 10) {
	          __E__pr_info_header(STRING_TABLE.__str407 | 0, 531);
	          __E__pr_info(STRING_TABLE.__str23430 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $10, tempInt));
	          var $21 = _fclose($6);
	          _ckd_free($4);
	          var $_0 = 0;
	        }
	        var $_0;
	        STACKTOP = __stackBase__;
	        return $_0;
	      }
	    }
	  }
	  return null;
	}

	_mdef_init["X"] = 1;

	function _parse_base_line($m, $line, $p) {
	  var $wlen$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1028;
	  var $wlen = __stackBase__, $wlen$s2 = $wlen >> 2;
	  var $1 = __stackBase__ + 4 | 0;
	  var $2 = _sscanf($line, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	  if (($2 | 0) == 1) {
	    var $6 = HEAP32[$wlen$s2];
	    var $m_idx_val = HEAP32[$m + 24 >> 2];
	    var $7 = _mdef_ciphone_id($m_idx_val, $1);
	    if (($7 | 0) > -1) {
	      __E__pr_header(STRING_TABLE.__str407 | 0, 337, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str76483 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	    } else {
	      var $11 = $line + $6 | 0;
	      _ciphone_add($m, $1, $p);
	      var $lp_0 = $11;
	      var $n_0 = 0;
	      $_$120 : while (1) {
	        var $n_0;
	        var $lp_0;
	        var $13 = ($n_0 | 0) < 3;
	        var $14 = _sscanf($lp_0, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	        var $15 = ($14 | 0) != 1;
	        if ($13) {
	          do {
	            if (!$15) {
	              var $18 = _strcmp($1, STRING_TABLE.__str77484 | 0);
	              if (($18 | 0) != 0) {
	                break;
	              }
	              var $lp_0 = $lp_0 + HEAP32[$wlen$s2] | 0;
	              var $n_0 = $n_0 + 1 | 0;
	              continue $_$120;
	            }
	          } while (0);
	          __E__pr_header(STRING_TABLE.__str407 | 0, 347, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str78485 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	        } else {
	          if ($15) {
	            __E__pr_header(STRING_TABLE.__str407 | 0, 353, STRING_TABLE.__str72422 | 0);
	            __E__die_error(STRING_TABLE.__str79486 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	          } else {
	            var $29 = $lp_0 + HEAP32[$wlen$s2] | 0;
	            var $30 = _strcmp($1, STRING_TABLE.__str62469 | 0);
	            if (($30 | 0) == 0) {
	              var $35 = ($p << 3) + HEAP32[$m + 28 >> 2] + 4 | 0;
	              HEAP32[$35 >> 2] = 1;
	            } else {
	              var $37 = _strcmp($1, STRING_TABLE.__str63470 | 0);
	              if (($37 | 0) == 0) {
	                var $42 = ($p << 3) + HEAP32[$m + 28 >> 2] + 4 | 0;
	                HEAP32[$42 >> 2] = 0;
	              } else {
	                __E__pr_header(STRING_TABLE.__str407 | 0, 360, STRING_TABLE.__str72422 | 0);
	                __E__die_error(STRING_TABLE.__str64471 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	              }
	            }
	            _triphone_add($m, $p, -1, -1, 4, $p);
	            var $47 = $29 - $line | 0;
	            _parse_tmat_senmap($m, $line, $47, $p);
	            STACKTOP = __stackBase__;
	            return;
	          }
	        }
	      }
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str407 | 0, 331, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str53460 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	  }
	  return;
	}

	_parse_base_line["X"] = 1;

	function _parse_tri_line($m, $line, $p) {
	  var $m_idx2$s2;
	  var $wlen$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1028;
	  var __label__;
	  var $wlen = __stackBase__, $wlen$s2 = $wlen >> 2;
	  var $word = __stackBase__ + 4;
	  var $1 = $word | 0;
	  var $2 = _sscanf($line, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	  if (($2 | 0) == 1) {
	    var $6 = HEAP32[$wlen$s2];
	    var $m_idx2$s2 = ($m + 24 | 0) >> 2;
	    var $m_idx2_val = HEAP32[$m_idx2$s2];
	    var $7 = _mdef_ciphone_id($m_idx2_val, $1);
	    if (($7 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str407 | 0, 386, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str54461 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	    } else {
	      var $11 = $line + $6 | 0;
	      var $12 = _sscanf($11, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	      if (($12 | 0) == 1) {
	        var $_sum = HEAP32[$wlen$s2] + $6 | 0;
	        var $m_idx1_val = HEAP32[$m_idx2$s2];
	        var $17 = _mdef_ciphone_id($m_idx1_val, $1);
	        if (($17 | 0) < 0) {
	          __E__pr_header(STRING_TABLE.__str407 | 0, 394, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str56463 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	        } else {
	          var $21 = $line + $_sum | 0;
	          var $22 = _sscanf($21, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	          if (($22 | 0) == 1) {
	            var $_sum1 = HEAP32[$wlen$s2] + $_sum | 0;
	            var $m_idx_val = HEAP32[$m_idx2$s2];
	            var $27 = _mdef_ciphone_id($m_idx_val, $1);
	            if (($27 | 0) < 0) {
	              __E__pr_header(STRING_TABLE.__str407 | 0, 402, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str58465 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	            } else {
	              var $31 = $line + $_sum1 | 0;
	              var $32 = _sscanf($31, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	              var $33 = ($32 | 0) == 1;
	              do {
	                if ($33) {
	                  if (HEAP8[$word + 1 | 0] << 24 >> 24 != 0) {
	                    break;
	                  }
	                  var $_sum2 = HEAP32[$wlen$s2] + $_sum1 | 0;
	                  var $41 = $line + $_sum2 | 0;
	                  var $43 = HEAP8[$1] << 24 >> 24;
	                  if (($43 | 0) == 98) {
	                    var $wpos_0 = 1;
	                  } else if (($43 | 0) == 101) {
	                    var $wpos_0 = 2;
	                  } else if (($43 | 0) == 115) {
	                    var $wpos_0 = 3;
	                  } else if (($43 | 0) == 105) {
	                    var $wpos_0 = 0;
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str407 | 0, 422, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str60467 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	                  }
	                  var $wpos_0;
	                  var $49 = _sscanf($41, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	                  if (($49 | 0) == 1) {
	                    var $53 = HEAP32[$wlen$s2];
	                    var $54 = _strcmp($1, STRING_TABLE.__str62469 | 0);
	                    var $55 = ($54 | 0) == 0;
	                    do {
	                      if ($55) {
	                        if ((HEAP32[HEAP32[$m + 28 >> 2] + ($7 << 3) + 4 >> 2] | 0) == 0) {
	                          __label__ = 26;
	                          break;
	                        }
	                        __label__ = 29;
	                        break;
	                      } else {
	                        __label__ = 26;
	                      }
	                    } while (0);
	                    do {
	                      if (__label__ == 26) {
	                        var $63 = _strcmp($1, STRING_TABLE.__str63470 | 0);
	                        if (($63 | 0) == 0) {
	                          if ((HEAP32[HEAP32[$m + 28 >> 2] + ($7 << 3) + 4 >> 2] | 0) == 0) {
	                            break;
	                          }
	                        }
	                        __E__pr_header(STRING_TABLE.__str407 | 0, 434, STRING_TABLE.__str72422 | 0);
	                        __E__die_error(STRING_TABLE.__str64471 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	                      }
	                    } while (0);
	                    _triphone_add($m, $7, $17, $27, $wpos_0, $p);
	                    var $_offs = $53 + $_sum2 | 0;
	                    _parse_tmat_senmap($m, $line, $_offs, $p);
	                    STACKTOP = __stackBase__;
	                    return;
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str407 | 0, 427, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str61468 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	                  }
	                }
	              } while (0);
	              __E__pr_header(STRING_TABLE.__str407 | 0, 406, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str59466 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str407 | 0, 398, STRING_TABLE.__str72422 | 0);
	            __E__die_error(STRING_TABLE.__str57464 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	          }
	        }
	      } else {
	        __E__pr_header(STRING_TABLE.__str407 | 0, 390, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str55462 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	      }
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str407 | 0, 381, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str53460 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	  }
	  return;
	}

	_parse_tri_line["X"] = 1;

	function _mdef_free($m) {
	  var $15$s2;
	  var $14$s2;
	  var $m$s2 = $m >> 2;
	  if (($m | 0) != 0) {
	    var $4 = HEAP32[$m$s2 + 12];
	    if (($4 | 0) != 0) {
	      var $7 = $4;
	      _ckd_free($7);
	    }
	    var $10 = HEAP32[$m$s2 + 11];
	    if (($10 | 0) != 0) {
	      var $13 = $10;
	      _ckd_free($13);
	    }
	    var $14$s2 = ($m | 0) >> 2;
	    var $15$s2 = ($m + 56 | 0) >> 2;
	    var $16 = HEAP32[$14$s2];
	    var $17 = ($16 | 0) > 0;
	    $_$10 : do {
	      if ($17) {
	        var $j_09 = 0;
	        var $18 = $16;
	        while (1) {
	          var $18;
	          var $j_09;
	          var $22 = HEAP32[HEAP32[HEAP32[$15$s2] >> 2] + ($j_09 << 2) >> 2];
	          if (($22 | 0) == 0) {
	            var $34 = $18;
	          } else {
	            var $26 = HEAP32[$22 + 8 >> 2];
	            _mdef_free_recursive_lc($26);
	            var $32 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2] >> 2] + ($j_09 << 2) >> 2] + 4 >> 2];
	            _mdef_free_recursive_rc($32);
	            var $34 = HEAP32[$14$s2];
	          }
	          var $34;
	          var $35 = $j_09 + 1 | 0;
	          if (($35 | 0) >= ($34 | 0)) {
	            break;
	          }
	          var $j_09 = $35;
	          var $18 = $34;
	        }
	        if (($34 | 0) <= 0) {
	          break;
	        }
	        var $j_09_1 = 0;
	        var $140 = $34;
	        while (1) {
	          var $140;
	          var $j_09_1;
	          var $145 = HEAP32[HEAP32[HEAP32[$15$s2] + 4 >> 2] + ($j_09_1 << 2) >> 2];
	          if (($145 | 0) == 0) {
	            var $158 = $140;
	          } else {
	            var $149 = HEAP32[$145 + 8 >> 2];
	            _mdef_free_recursive_lc($149);
	            var $156 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2] + 4 >> 2] + ($j_09_1 << 2) >> 2] + 4 >> 2];
	            _mdef_free_recursive_rc($156);
	            var $158 = HEAP32[$14$s2];
	          }
	          var $158;
	          var $159 = $j_09_1 + 1 | 0;
	          if (($159 | 0) >= ($158 | 0)) {
	            break;
	          }
	          var $j_09_1 = $159;
	          var $140 = $158;
	        }
	        if (($158 | 0) <= 0) {
	          break;
	        }
	        var $j_09_2 = 0;
	        var $162 = $158;
	        while (1) {
	          var $162;
	          var $j_09_2;
	          var $167 = HEAP32[HEAP32[HEAP32[$15$s2] + 8 >> 2] + ($j_09_2 << 2) >> 2];
	          if (($167 | 0) == 0) {
	            var $180 = $162;
	          } else {
	            var $171 = HEAP32[$167 + 8 >> 2];
	            _mdef_free_recursive_lc($171);
	            var $178 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2] + 8 >> 2] + ($j_09_2 << 2) >> 2] + 4 >> 2];
	            _mdef_free_recursive_rc($178);
	            var $180 = HEAP32[$14$s2];
	          }
	          var $180;
	          var $181 = $j_09_2 + 1 | 0;
	          if (($181 | 0) >= ($180 | 0)) {
	            break;
	          }
	          var $j_09_2 = $181;
	          var $162 = $180;
	        }
	        if (($180 | 0) <= 0) {
	          break;
	        }
	        var $j_09_3 = 0;
	        var $184 = $180;
	        while (1) {
	          var $184;
	          var $j_09_3;
	          var $189 = HEAP32[HEAP32[HEAP32[$15$s2] + 12 >> 2] + ($j_09_3 << 2) >> 2];
	          if (($189 | 0) == 0) {
	            var $202 = $184;
	          } else {
	            var $193 = HEAP32[$189 + 8 >> 2];
	            _mdef_free_recursive_lc($193);
	            var $200 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2] + 12 >> 2] + ($j_09_3 << 2) >> 2] + 4 >> 2];
	            _mdef_free_recursive_rc($200);
	            var $202 = HEAP32[$14$s2];
	          }
	          var $202;
	          var $203 = $j_09_3 + 1 | 0;
	          if (($203 | 0) >= ($202 | 0)) {
	            break;
	          }
	          var $j_09_3 = $203;
	          var $184 = $202;
	        }
	        if (($202 | 0) <= 0) {
	          break;
	        }
	        var $j_13 = 0;
	        var $38 = $202;
	        while (1) {
	          var $38;
	          var $j_13;
	          var $42 = HEAP32[HEAP32[HEAP32[$15$s2] >> 2] + ($j_13 << 2) >> 2];
	          if (($42 | 0) == 0) {
	            var $47 = $38;
	          } else {
	            var $45 = $42;
	            _ckd_free($45);
	            var $47 = HEAP32[$14$s2];
	          }
	          var $47;
	          var $48 = $j_13 + 1 | 0;
	          if (($48 | 0) >= ($47 | 0)) {
	            break;
	          }
	          var $j_13 = $48;
	          var $38 = $47;
	        }
	        if (($47 | 0) <= 0) {
	          break;
	        }
	        var $j_13_1 = 0;
	        var $97 = $47;
	        while (1) {
	          var $97;
	          var $j_13_1;
	          var $102 = HEAP32[HEAP32[HEAP32[$15$s2] + 4 >> 2] + ($j_13_1 << 2) >> 2];
	          if (($102 | 0) == 0) {
	            var $107 = $97;
	          } else {
	            var $105 = $102;
	            _ckd_free($105);
	            var $107 = HEAP32[$14$s2];
	          }
	          var $107;
	          var $108 = $j_13_1 + 1 | 0;
	          if (($108 | 0) >= ($107 | 0)) {
	            break;
	          }
	          var $j_13_1 = $108;
	          var $97 = $107;
	        }
	        if (($107 | 0) <= 0) {
	          break;
	        }
	        var $j_13_2 = 0;
	        var $111 = $107;
	        while (1) {
	          var $111;
	          var $j_13_2;
	          var $116 = HEAP32[HEAP32[HEAP32[$15$s2] + 8 >> 2] + ($j_13_2 << 2) >> 2];
	          if (($116 | 0) == 0) {
	            var $121 = $111;
	          } else {
	            var $119 = $116;
	            _ckd_free($119);
	            var $121 = HEAP32[$14$s2];
	          }
	          var $121;
	          var $122 = $j_13_2 + 1 | 0;
	          if (($122 | 0) >= ($121 | 0)) {
	            break;
	          }
	          var $j_13_2 = $122;
	          var $111 = $121;
	        }
	        if (($121 | 0) <= 0) {
	          break;
	        }
	        var $j_13_3 = 0;
	        var $125 = $121;
	        while (1) {
	          var $125;
	          var $j_13_3;
	          var $130 = HEAP32[HEAP32[HEAP32[$15$s2] + 12 >> 2] + ($j_13_3 << 2) >> 2];
	          if (($130 | 0) == 0) {
	            var $135 = $125;
	          } else {
	            var $133 = $130;
	            _ckd_free($133);
	            var $135 = HEAP32[$14$s2];
	          }
	          var $135;
	          var $136 = $j_13_3 + 1 | 0;
	          if (($136 | 0) >= ($135 | 0)) {
	            break $_$10;
	          }
	          var $j_13_3 = $136;
	          var $125 = $135;
	        }
	      }
	    } while (0);
	    var $138 = HEAP32[$15$s2];
	    if (($138 | 0) != 0) {
	      var $52 = $138;
	      _ckd_free_2d($52);
	    }
	    var $55 = HEAP32[$m$s2 + 9];
	    if (($55 | 0) != 0) {
	      var $58 = $55;
	      _ckd_free_2d($58);
	    }
	    var $61 = HEAP32[$m$s2 + 8];
	    if (($61 | 0) != 0) {
	      var $64 = $61;
	      _ckd_free($64);
	    }
	    var $67 = HEAP32[$m$s2 + 6];
	    if (($67 | 0) != 0) {
	      _hash_table_free($67);
	    }
	    var $70 = HEAP32[$14$s2];
	    var $71 = ($70 | 0) > 0;
	    var $72 = $m + 28 | 0;
	    var $73 = HEAP32[$72 >> 2];
	    $_$71 : do {
	      if ($71) {
	        var $i_21 = 0;
	        var $75 = $73;
	        var $74 = $70;
	        while (1) {
	          var $74;
	          var $75;
	          var $i_21;
	          var $77 = HEAP32[$75 + ($i_21 << 3) >> 2];
	          if (($77 | 0) == 0) {
	            var $82 = $74;
	            var $81 = $75;
	          } else {
	            _ckd_free($77);
	            var $82 = HEAP32[$14$s2];
	            var $81 = HEAP32[$72 >> 2];
	          }
	          var $81;
	          var $82;
	          var $83 = $i_21 + 1 | 0;
	          if (($83 | 0) >= ($82 | 0)) {
	            var $_lcssa = $81;
	            break $_$71;
	          }
	          var $i_21 = $83;
	          var $75 = $81;
	          var $74 = $82;
	        }
	      } else {
	        var $_lcssa = $73;
	      }
	    } while (0);
	    var $_lcssa;
	    if (($_lcssa | 0) != 0) {
	      _ckd_free($_lcssa);
	    }
	    var $90 = HEAP32[$m$s2 + 15];
	    if (($90 | 0) != 0) {
	      var $93 = $90;
	      _ckd_free($93);
	    }
	    var $95 = $m;
	    _ckd_free($95);
	  }
	  return;
	  return;
	}

	_mdef_free["X"] = 1;

	function _triphone_add($m, $ci, $lc, $rc, $wpos, $p) {
	  var $46$s2;
	  var $22$s2;
	  var $7$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4096;
	  var $buf = __stackBase__;
	  if ((HEAP32[$m + 4 >> 2] | 0) <= ($p | 0)) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 142, STRING_TABLE.___func___triphone_add | 0, STRING_TABLE.__str74481 | 0);
	  }
	  var $7$s2 = ($m + 32 | 0) >> 2;
	  HEAP16[(HEAP32[$7$s2] + 8 >> 1) + ($p * 12 | 0)] = $ci & 65535;
	  var $10 = $lc & 65535;
	  HEAP16[(HEAP32[$7$s2] + 10 >> 1) + ($p * 12 | 0)] = $10;
	  var $13 = $rc & 65535;
	  HEAP16[(HEAP32[$7$s2] + 12 >> 1) + ($p * 12 | 0)] = $13;
	  var $17 = HEAP32[$7$s2] + $p * 24 + 16 | 0;
	  HEAP32[$17 >> 2] = $wpos;
	  if ((HEAP32[$m >> 2] | 0) <= ($p | 0)) {
	    var $22$s2 = ($m + 56 | 0) >> 2;
	    var $27 = HEAP32[HEAP32[HEAP32[$22$s2] + ($wpos << 2) >> 2] + ($ci << 2) >> 2];
	    var $28 = _find_ph_lc($27, $lc);
	    if (($28 | 0) == 0) {
	      var $31 = ___ckd_calloc__(1, 12, STRING_TABLE.__str407 | 0, 154);
	      var $32 = $31;
	      HEAP16[$31 >> 1] = $10;
	      var $38 = HEAP32[HEAP32[HEAP32[$22$s2] + ($wpos << 2) >> 2] + ($ci << 2) >> 2];
	      HEAP32[$31 + 8 >> 2] = $38;
	      var $44 = ($ci << 2) + HEAP32[HEAP32[$22$s2] + ($wpos << 2) >> 2] | 0;
	      HEAP32[$44 >> 2] = $32;
	      var $lcptr_0 = $32;
	    } else {
	      var $lcptr_0 = $28;
	    }
	    var $lcptr_0;
	    var $46$s2 = ($lcptr_0 + 4 | 0) >> 2;
	    var $47 = HEAP32[$46$s2];
	    var $48 = _find_ph_rc($47, $rc);
	    if (($48 | 0) == 0) {
	      var $55 = ___ckd_calloc__(1, 12, STRING_TABLE.__str407 | 0, 166);
	      var $56 = $55;
	      HEAP16[$55 >> 1] = $13;
	      HEAP32[$55 + 4 >> 2] = $p;
	      var $60 = HEAP32[$46$s2];
	      HEAP32[$55 + 8 >> 2] = $60;
	      HEAP32[$46$s2] = $56;
	    } else {
	      var $52 = HEAP32[$48 + 4 >> 2];
	      var $53 = $buf | 0;
	      _mdef_phone_str($m, $52, $53);
	      __E__pr_header(STRING_TABLE.__str407 | 0, 163, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str75482 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $53, tempInt));
	    }
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_triphone_add["X"] = 1;

	function _parse_tmat_senmap($m, $line, $off, $p) {
	  var $s$s2;
	  var $n$s2;
	  var $wlen$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1036;
	  var $wlen = __stackBase__, $wlen$s2 = $wlen >> 2;
	  var $n = __stackBase__ + 4, $n$s2 = $n >> 2;
	  var $s = __stackBase__ + 8, $s$s2 = $s >> 2;
	  var $word = __stackBase__ + 12;
	  var $1 = $line + $off | 0;
	  var $2 = _sscanf($1, STRING_TABLE.__str1515 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	  var $4 = HEAP32[$n$s2];
	  if (($2 | 0) != 1 | ($4 | 0) < 0) {
	    __E__pr_header(STRING_TABLE.__str407 | 0, 282, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str66473 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	  } else {
	    var $8 = $m + 32 | 0;
	    var $10 = HEAP32[$8 >> 2] + $p * 24 + 4 | 0;
	    HEAP32[$10 >> 2] = $4;
	    var $11 = $m + 20 | 0;
	    if ((HEAP32[$11 >> 2] | 0) > (HEAP32[$n$s2] | 0)) {
	      var $21 = $m + 8 | 0;
	      var $22 = $m | 0;
	      var $23 = $m + 12 | 0;
	      var $24 = $m + 16 | 0;
	      var $25 = $m + 36 | 0;
	      var $lp_0 = $line + HEAP32[$wlen$s2] + $off | 0;
	      var $storemerge = 0;
	      while (1) {
	        var $storemerge;
	        var $lp_0;
	        HEAP32[$n$s2] = $storemerge;
	        if (($storemerge | 0) < (HEAP32[$21 >> 2] | 0)) {
	          var $30 = _sscanf($lp_0, STRING_TABLE.__str1515 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	          var $32 = HEAP32[$s$s2];
	          if (($30 | 0) != 1 | ($32 | 0) < 0) {
	            __E__pr_header(STRING_TABLE.__str407 | 0, 292, STRING_TABLE.__str72422 | 0);
	            var $35 = HEAP32[$n$s2];
	            __E__die_error(STRING_TABLE.__str68475 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $35, HEAP32[tempInt + 4 >> 2] = $line, tempInt));
	          } else {
	            HEAP16[HEAP32[(HEAP32[$8 >> 2] + 20 >> 2) + ($p * 6 | 0)] + (HEAP32[$n$s2] << 1) >> 1] = $32 & 65535;
	            var $44 = (HEAP32[$22 >> 2] | 0) > ($p | 0);
	            do {
	              if ($44) {
	                var $47 = HEAP32[$s$s2];
	                if ((HEAP32[$23 >> 2] | 0) > ($47 | 0)) {
	                  var $53 = $47;
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str407 | 0, 299, STRING_TABLE.__str72422 | 0);
	                var $50 = HEAP32[$s$s2];
	                var $51 = HEAP32[$23 >> 2];
	                __E__die_error(STRING_TABLE.__str69476 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $50, HEAP32[tempInt + 4 >> 2] = $51, HEAP32[tempInt + 8 >> 2] = $line, tempInt));
	              } else {
	                var $53 = HEAP32[$s$s2];
	              }
	            } while (0);
	            var $53;
	            if ((HEAP32[$24 >> 2] | 0) > ($53 | 0)) {
	              HEAP16[HEAP32[HEAP32[$25 >> 2] + ($p << 2) >> 2] + (HEAP32[$n$s2] << 1) >> 1] = $53 & 65535;
	              var $lp_0 = $lp_0 + HEAP32[$wlen$s2] | 0;
	              var $storemerge = HEAP32[$n$s2] + 1 | 0;
	            } else {
	              __E__pr_header(STRING_TABLE.__str407 | 0, 302, STRING_TABLE.__str72422 | 0);
	              var $57 = HEAP32[$s$s2];
	              var $58 = HEAP32[$24 >> 2];
	              __E__die_error(STRING_TABLE.__str70477 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $57, HEAP32[tempInt + 4 >> 2] = $58, HEAP32[tempInt + 8 >> 2] = $line, tempInt));
	            }
	          }
	        } else {
	          var $71 = $word | 0;
	          var $72 = _sscanf($lp_0, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $71, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	          var $73 = ($72 | 0) == 1;
	          do {
	            if ($73) {
	              var $75 = _strcmp($71, STRING_TABLE.__str181658 | 0);
	              if (($75 | 0) != 0) {
	                break;
	              }
	              var $80 = $lp_0 + HEAP32[$wlen$s2] | 0;
	              var $81 = _sscanf($80, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $71, HEAP32[tempInt + 4 >> 2] = $wlen, tempInt));
	              if (($81 | 0) == 1) {
	                __E__pr_header(STRING_TABLE.__str407 | 0, 316, STRING_TABLE.__str72422 | 0);
	                __E__die_error(STRING_TABLE.__str73480 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	              } else {
	                STACKTOP = __stackBase__;
	                return;
	              }
	            }
	          } while (0);
	          __E__pr_header(STRING_TABLE.__str407 | 0, 311, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str72479 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $line, tempInt));
	        }
	      }
	    } else {
	      __E__pr_header(STRING_TABLE.__str407 | 0, 285, STRING_TABLE.__str72422 | 0);
	      var $16 = HEAP32[$n$s2];
	      var $17 = HEAP32[$11 >> 2];
	      __E__die_error(STRING_TABLE.__str67474 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $16, HEAP32[tempInt + 4 >> 2] = $17, HEAP32[tempInt + 8 >> 2] = $line, tempInt));
	    }
	  }
	  return;
	}

	_parse_tmat_senmap["X"] = 1;

	function _ciphone_add($m, $ci, $p) {
	  var $7$s2;
	  var __stackBase__ = STACKTOP;
	  if ((HEAP32[$m >> 2] | 0) <= ($p | 0)) {
	    ___assert_func(STRING_TABLE.__str407 | 0, 104, STRING_TABLE.___func___ciphone_add | 0, STRING_TABLE.__str80487 | 0);
	  }
	  var $6 = ___ckd_salloc__($ci, STRING_TABLE.__str407 | 0, 106);
	  var $7$s2 = ($m + 28 | 0) >> 2;
	  var $9 = ($p << 3) + HEAP32[$7$s2] | 0;
	  HEAP32[$9 >> 2] = $6;
	  var $11 = HEAP32[$m + 24 >> 2];
	  var $14 = HEAP32[HEAP32[$7$s2] + ($p << 3) >> 2];
	  var $15 = $p;
	  var $16 = _hash_table_enter($11, $14, $15);
	  if (($16 | 0) == ($15 | 0)) {
	    STACKTOP = __stackBase__;
	    return;
	  } else {
	    __E__pr_header(STRING_TABLE.__str407 | 0, 109, STRING_TABLE.__str72422 | 0);
	    var $21 = HEAP32[HEAP32[$7$s2] + ($p << 3) >> 2];
	    __E__die_error(STRING_TABLE.__str81488 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $21, tempInt));
	  }
	  return;
	}

	function _gauden_init($meanfile, $varfile, $varfloor, $lmath) {
	  var $10$s2;
	  var $fgau$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var $m = __stackBase__;
	  var $f = __stackBase__ + 4;
	  var $d = __stackBase__ + 8;
	  var $flen = __stackBase__ + 12;
	  var $fgau = __stackBase__ + 16, $fgau$s2 = $fgau >> 2;
	  if (($meanfile | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str493 | 0, 367, STRING_TABLE.___func___gauden_init | 0, STRING_TABLE.__str9502 | 0);
	  }
	  if (($varfile | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str493 | 0, 368, STRING_TABLE.___func___gauden_init | 0, STRING_TABLE.__str10503 | 0);
	  }
	  if ($varfloor <= 0) {
	    ___assert_func(STRING_TABLE.__str493 | 0, 369, STRING_TABLE.___func___gauden_init | 0, STRING_TABLE.__str11504 | 0);
	  }
	  var $10 = ___ckd_calloc__(1, 32, STRING_TABLE.__str493 | 0, 371), $10$s2 = $10 >> 2;
	  var $11 = $10;
	  HEAP32[$10$s2 + 3] = $lmath;
	  HEAP32[$fgau$s2] = 0;
	  var $15 = $10 + 16 | 0;
	  var $17 = $10 + 20 | 0;
	  var $19 = $10 + 24 | 0;
	  var $21 = $10 + 28 | 0;
	  _gauden_param_read($fgau, $15, $17, $19, $21, $meanfile);
	  var $22 = HEAP32[$fgau$s2];
	  HEAP32[$10$s2] = $22;
	  HEAP32[$fgau$s2] = 0;
	  _gauden_param_read($fgau, $m, $f, $d, $flen, $varfile);
	  var $24 = HEAP32[$fgau$s2];
	  HEAP32[$10$s2 + 1] = $24;
	  var $29 = (HEAP32[$m >> 2] | 0) == (HEAP32[$15 >> 2] | 0);
	  do {
	    if ($29) {
	      var $31 = HEAP32[$f >> 2];
	      if (($31 | 0) != (HEAP32[$17 >> 2] | 0)) {
	        break;
	      }
	      if ((HEAP32[$d >> 2] | 0) != (HEAP32[$19 >> 2] | 0)) {
	        break;
	      }
	      var $38 = HEAP32[$flen >> 2];
	      var $i_0 = 0;
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) < ($31 | 0)) {
	          if ((HEAP32[HEAP32[$21 >> 2] + ($i_0 << 2) >> 2] | 0) == (HEAP32[$38 + ($i_0 << 2) >> 2] | 0)) {
	            var $i_0 = $i_0 + 1 | 0;
	            continue;
	          }
	          __E__pr_header(STRING_TABLE.__str493 | 0, 389, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str14507 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        } else {
	          var $52 = $38;
	          _ckd_free($52);
	          _gauden_dist_precompute($11, $lmath, $varfloor);
	          STACKTOP = __stackBase__;
	          return $11;
	        }
	      }
	    }
	  } while (0);
	  __E__pr_header(STRING_TABLE.__str493 | 0, 385, STRING_TABLE.__str72422 | 0);
	  __E__die_error(STRING_TABLE.__str13506 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  return null;
	}

	_gauden_init["X"] = 1;

	function _compute_dist_all($out_dist, $obs, $featlen, $mean, $var, $det, $n_density) {
	  var $1 = ($n_density | 0) > 0;
	  $_$189 : do {
	    if ($1) {
	      var $2 = ($featlen | 0) > 0;
	      var $d_03 = 0;
	      while (1) {
	        var $d_03;
	        var $5 = HEAP32[$mean + ($d_03 << 2) >> 2];
	        var $7 = HEAP32[$var + ($d_03 << 2) >> 2];
	        var $9 = HEAPF32[$det + ($d_03 << 2) >> 2];
	        $_$193 : do {
	          if ($2) {
	            var $i_01 = 0;
	            var $dval_02 = $9;
	            while (1) {
	              var $dval_02;
	              var $i_01;
	              var $14 = HEAPF32[$obs + ($i_01 << 2) >> 2] - HEAPF32[$5 + ($i_01 << 2) >> 2];
	              var $19 = $dval_02 - $14 * $14 * HEAPF32[$7 + ($i_01 << 2) >> 2];
	              var $20 = $i_01 + 1 | 0;
	              if (($20 | 0) == ($featlen | 0)) {
	                var $dval_0_lcssa = $19;
	                break $_$193;
	              }
	              var $i_01 = $20;
	              var $dval_02 = $19;
	            }
	          } else {
	            var $dval_0_lcssa = $9;
	          }
	        } while (0);
	        var $dval_0_lcssa;
	        HEAPF32[$out_dist + ($d_03 << 3) + 4 >> 2] = $dval_0_lcssa;
	        HEAP32[$out_dist + ($d_03 << 3) >> 2] = $d_03;
	        var $23 = $d_03 + 1 | 0;
	        if (($23 | 0) == ($n_density | 0)) {
	          break $_$189;
	        }
	        var $d_03 = $23;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _gauden_dist_precompute($g, $lmath, $varfloor) {
	  var $varp_02$s2;
	  var $detp_05$s2;
	  var $5$s2;
	  var $3$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($g + 16 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3$s2 = ($g + 20 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $5$s2 = ($g + 24 | 0) >> 2;
	  var $6 = HEAP32[$5$s2];
	  var $7 = ___ckd_calloc_3d__($2, $4, $6, 4, STRING_TABLE.__str493 | 0, 323);
	  var $8 = $7;
	  var $9 = $g + 8 | 0;
	  HEAP32[$9 >> 2] = $8;
	  var $10 = HEAP32[$1$s2];
	  var $11 = ($10 | 0) > 0;
	  $_$68 : do {
	    if ($11) {
	      var $12 = $g + 28 | 0;
	      var $13 = $g + 4 | 0;
	      var $lmath_idx = $lmath + 9 | 0;
	      var $lmath_idx1 = $lmath + 44 | 0;
	      var $m_016 = 0;
	      var $floored_017 = 0;
	      var $15 = HEAP32[$3$s2];
	      var $14 = $10;
	      while (1) {
	        var $14;
	        var $15;
	        var $floored_017;
	        var $m_016;
	        if (($15 | 0) > 0) {
	          var $f_011 = 0;
	          var $floored_112 = $floored_017;
	          var $18 = HEAP32[$5$s2];
	          var $17 = $15;
	          while (1) {
	            var $17;
	            var $18;
	            var $floored_112;
	            var $f_011;
	            var $21 = HEAP32[HEAP32[$12 >> 2] + ($f_011 << 2) >> 2];
	            if (($18 | 0) > 0) {
	              var $28 = ($21 | 0) > 0;
	              var $d_04 = 0;
	              var $detp_05 = HEAP32[HEAP32[HEAP32[$9 >> 2] + ($m_016 << 2) >> 2] + ($f_011 << 2) >> 2], $detp_05$s2 = $detp_05 >> 2;
	              var $floored_26 = $floored_112;
	              while (1) {
	                var $floored_26;
	                var $detp_05;
	                var $d_04;
	                HEAPF32[$detp_05$s2] = 0;
	                $_$80 : do {
	                  if ($28) {
	                    var $i_01 = 0;
	                    var $varp_02 = HEAP32[HEAP32[HEAP32[HEAP32[$13 >> 2] + ($m_016 << 2) >> 2] + ($f_011 << 2) >> 2] + ($d_04 << 2) >> 2], $varp_02$s2 = $varp_02 >> 2;
	                    var $floored_33 = $floored_26;
	                    while (1) {
	                      var $floored_33;
	                      var $varp_02;
	                      var $i_01;
	                      var $38 = HEAPF32[$varp_02$s2];
	                      if ($38 < $varfloor) {
	                        HEAPF32[$varp_02$s2] = $varfloor;
	                        var $floored_4 = $floored_33 + 1 | 0;
	                        var $43 = $varfloor;
	                      } else {
	                        var $floored_4 = $floored_33;
	                        var $43 = $38;
	                      }
	                      var $43;
	                      var $floored_4;
	                      var $47 = _sqrt($43 * 2 * 3.141592653589793);
	                      var $48 = 1 / $47;
	                      var $49 = _logmath_log($lmath, $48);
	                      var $52 = HEAPF32[$detp_05$s2] + ($49 | 0);
	                      HEAPF32[$detp_05$s2] = $52;
	                      var $56 = 1 / (HEAPF32[$varp_02$s2] * 2);
	                      var $lmath_idx_val = HEAP8[$lmath_idx];
	                      var $lmath_idx1_val = (tempDoubleI32[0] = HEAP32[$lmath_idx1 >> 2], tempDoubleI32[1] = HEAP32[$lmath_idx1 + 4 >> 2], tempDoubleF64[0]);
	                      var $57 = _logmath_ln_to_log($lmath_idx_val, $lmath_idx1_val, $56);
	                      var $58 = $57 | 0;
	                      HEAPF32[$varp_02$s2] = $58;
	                      var $59 = $i_01 + 1 | 0;
	                      if (($59 | 0) == ($21 | 0)) {
	                        var $floored_3_lcssa = $floored_4;
	                        break $_$80;
	                      }
	                      var $i_01 = $59;
	                      var $varp_02 = $varp_02 + 4 | 0, $varp_02$s2 = $varp_02 >> 2;
	                      var $floored_33 = $floored_4;
	                    }
	                  } else {
	                    var $floored_3_lcssa = $floored_26;
	                  }
	                } while (0);
	                var $floored_3_lcssa;
	                var $61 = $d_04 + 1 | 0;
	                var $63 = HEAP32[$5$s2];
	                if (($61 | 0) >= ($63 | 0)) {
	                  break;
	                }
	                var $d_04 = $61;
	                var $detp_05 = $detp_05 + 4 | 0, $detp_05$s2 = $detp_05 >> 2;
	                var $floored_26 = $floored_3_lcssa;
	              }
	              var $floored_2_lcssa = $floored_3_lcssa;
	              var $67 = $63;
	              var $66 = HEAP32[$3$s2];
	            } else {
	              var $floored_2_lcssa = $floored_112;
	              var $67 = $18;
	              var $66 = $17;
	            }
	            var $66;
	            var $67;
	            var $floored_2_lcssa;
	            var $68 = $f_011 + 1 | 0;
	            if (($68 | 0) >= ($66 | 0)) {
	              break;
	            }
	            var $f_011 = $68;
	            var $floored_112 = $floored_2_lcssa;
	            var $18 = $67;
	            var $17 = $66;
	          }
	          var $floored_1_lcssa = $floored_2_lcssa;
	          var $72 = $66;
	          var $71 = HEAP32[$1$s2];
	        } else {
	          var $floored_1_lcssa = $floored_017;
	          var $72 = $15;
	          var $71 = $14;
	        }
	        var $71;
	        var $72;
	        var $floored_1_lcssa;
	        var $73 = $m_016 + 1 | 0;
	        if (($73 | 0) >= ($71 | 0)) {
	          var $floored_0_lcssa = $floored_1_lcssa;
	          break $_$68;
	        }
	        var $m_016 = $73;
	        var $floored_017 = $floored_1_lcssa;
	        var $15 = $72;
	        var $14 = $71;
	      }
	    } else {
	      var $floored_0_lcssa = 0;
	    }
	  } while (0);
	  var $floored_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str493 | 0, 354);
	  __E__pr_info(STRING_TABLE.__str20513 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $floored_0_lcssa, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_gauden_dist_precompute["X"] = 1;

	function _gauden_free($g) {
	  if (($g | 0) != 0) {
	    var $4 = HEAP32[$g >> 2];
	    if (($4 | 0) != 0) {
	      _gauden_param_free($4);
	    }
	    var $9 = HEAP32[$g + 4 >> 2];
	    if (($9 | 0) != 0) {
	      _gauden_param_free($9);
	    }
	    var $14 = HEAP32[$g + 8 >> 2];
	    if (($14 | 0) != 0) {
	      var $17 = $14;
	      _ckd_free_3d($17);
	    }
	    var $20 = HEAP32[$g + 28 >> 2];
	    if (($20 | 0) != 0) {
	      var $23 = $20;
	      _ckd_free($23);
	    }
	    var $25 = $g;
	    _ckd_free($25);
	  }
	  return;
	  return;
	}

	function _gauden_param_free($p) {
	  var $4 = HEAP32[HEAP32[HEAP32[$p >> 2] >> 2] >> 2];
	  _ckd_free($4);
	  var $5 = $p;
	  _ckd_free_3d($5);
	  return;
	  return;
	}

	function _gauden_dist($g, $mgau, $n_top, $obs, $out_dist) {
	  var __label__;
	  var $1 = ($n_top | 0) > 0;
	  do {
	    if ($1) {
	      if ((HEAP32[$g + 24 >> 2] | 0) < ($n_top | 0)) {
	        __label__ = 4;
	        break;
	      }
	      __label__ = 5;
	      break;
	    } else {
	      __label__ = 4;
	    }
	  } while (0);
	  if (__label__ == 4) {
	    ___assert_func(STRING_TABLE.__str493 | 0, 535, STRING_TABLE.___func___gauden_dist | 0, STRING_TABLE.__str15508 | 0);
	  }
	  var $7 = $g + 20 | 0;
	  var $9 = (HEAP32[$7 >> 2] | 0) > 0;
	  $_$116 : do {
	    if ($9) {
	      var $10 = $g + 28 | 0;
	      var $11 = $g | 0;
	      var $12 = $g + 4 | 0;
	      var $13 = $g + 8 | 0;
	      var $14 = $g + 24 | 0;
	      var $f_01 = 0;
	      while (1) {
	        var $f_01;
	        var $16 = HEAP32[$out_dist + ($f_01 << 2) >> 2];
	        var $18 = HEAP32[$obs + ($f_01 << 2) >> 2];
	        var $21 = HEAP32[HEAP32[$10 >> 2] + ($f_01 << 2) >> 2];
	        var $26 = HEAP32[HEAP32[HEAP32[$11 >> 2] + ($mgau << 2) >> 2] + ($f_01 << 2) >> 2];
	        var $31 = HEAP32[HEAP32[HEAP32[$12 >> 2] + ($mgau << 2) >> 2] + ($f_01 << 2) >> 2];
	        var $36 = HEAP32[HEAP32[HEAP32[$13 >> 2] + ($mgau << 2) >> 2] + ($f_01 << 2) >> 2];
	        var $37 = HEAP32[$14 >> 2];
	        _compute_dist($16, $n_top, $18, $21, $26, $31, $36, $37);
	        var $38 = $f_01 + 1 | 0;
	        if (($38 | 0) >= (HEAP32[$7 >> 2] | 0)) {
	          break $_$116;
	        }
	        var $f_01 = $38;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _compute_dist($out_dist, $n_top, $obs, $featlen, $mean, $var, $det, $n_density) {
	  var __label__;
	  var $1 = ($n_top | 0) < ($n_density | 0);
	  $_$122 : do {
	    if ($1) {
	      var $2 = ($n_top | 0) > 0;
	      $_$124 : do {
	        if ($2) {
	          var $i_012 = 0;
	          while (1) {
	            var $i_012;
	            HEAPF32[$out_dist + ($i_012 << 3) + 4 >> 2] = -2147483648;
	            var $5 = $i_012 + 1 | 0;
	            if (($5 | 0) == ($n_top | 0)) {
	              break $_$124;
	            }
	            var $i_012 = $5;
	          }
	        }
	      } while (0);
	      var $6 = $n_top - 1 | 0;
	      if (($n_density | 0) <= 0) {
	        break;
	      }
	      var $8 = ($6 << 3) + $out_dist + 4 | 0;
	      var $d_09 = 0;
	      while (1) {
	        var $d_09;
	        var $10 = HEAP32[$mean + ($d_09 << 2) >> 2];
	        var $12 = HEAP32[$var + ($d_09 << 2) >> 2];
	        var $15 = HEAPF32[$8 >> 2];
	        var $dval_0 = HEAPF32[$det + ($d_09 << 2) >> 2];
	        var $i_1 = 0;
	        while (1) {
	          var $i_1;
	          var $dval_0;
	          if (($i_1 | 0) >= ($featlen | 0)) {
	            __label__ = 12;
	            break;
	          }
	          if ($dval_0 < $15) {
	            __label__ = 19;
	            break;
	          }
	          var $25 = HEAPF32[$obs + ($i_1 << 2) >> 2] - HEAPF32[$10 + ($i_1 << 2) >> 2];
	          var $dval_0 = $dval_0 - $25 * $25 * HEAPF32[$12 + ($i_1 << 2) >> 2];
	          var $i_1 = $i_1 + 1 | 0;
	        }
	        do {
	          if (__label__ == 12) {
	            if ($dval_0 < $15) {
	              break;
	            }
	            var $i_2 = 0;
	            while (1) {
	              var $i_2;
	              if (($i_2 | 0) >= ($n_top | 0)) {
	                ___assert_func(STRING_TABLE.__str493 | 0, 513, STRING_TABLE.___func___compute_dist | 0, STRING_TABLE.__str19512 | 0);
	                break;
	              }
	              if ($dval_0 >= HEAPF32[$out_dist + ($i_2 << 3) + 4 >> 2]) {
	                break;
	              }
	              var $i_2 = $i_2 + 1 | 0;
	            }
	            var $39 = ($6 | 0) > ($i_2 | 0);
	            $_$143 : do {
	              if ($39) {
	                var $j_08 = $6;
	                while (1) {
	                  var $j_08;
	                  var $41 = $j_08 - 1 | 0;
	                  var $43 = ($41 << 3) + $out_dist | 0;
	                  var $44 = ($j_08 << 3) + $out_dist | 0;
	                  var $45$0 = HEAP32[$43 >> 2];
	                  var $45$1 = HEAP32[$43 + 4 >> 2];
	                  HEAP32[$44 >> 2] = $45$0;
	                  HEAP32[$44 + 4 >> 2] = $45$1;
	                  if (($41 | 0) <= ($i_2 | 0)) {
	                    break $_$143;
	                  }
	                  var $j_08 = $41;
	                }
	              }
	            } while (0);
	            HEAPF32[$out_dist + ($i_2 << 3) + 4 >> 2] = $dval_0;
	            HEAP32[$out_dist + ($i_2 << 3) >> 2] = $d_09;
	          }
	        } while (0);
	        var $49 = $d_09 + 1 | 0;
	        if (($49 | 0) == ($n_density | 0)) {
	          break $_$122;
	        }
	        var $d_09 = $49;
	      }
	    } else {
	      _compute_dist_all($out_dist, $obs, $featlen, $mean, $var, $det, $n_density);
	    }
	  } while (0);
	  return;
	  return;
	}

	_compute_dist["X"] = 1;

	function _gauden_param_read($out_param, $out_n_mgau, $out_n_feat, $out_n_density, $out_veclen, $file_name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 36;
	  var $tmp = __stackBase__;
	  var $n = __stackBase__ + 4;
	  var $n_mgau = __stackBase__ + 8;
	  var $n_feat = __stackBase__ + 12;
	  var $n_density = __stackBase__ + 16;
	  var $byteswap = __stackBase__ + 20;
	  var $argname = __stackBase__ + 24;
	  var $argval = __stackBase__ + 28;
	  var $chksum = __stackBase__ + 32;
	  __E__pr_info_header(STRING_TABLE.__str493 | 0, 198);
	  __E__pr_info(STRING_TABLE.__str21514 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str493 | 0, 201, STRING_TABLE.__str232533 | 0);
	    __E__fatal_sys_error(STRING_TABLE.__str24517 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  } else {
	    var $5 = _bio_readhdr($1, $argname, $argval, $byteswap);
	    if (($5 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str493 | 0, 205, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str101199 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      var $7 = HEAP32[$argname >> 2];
	      var $8 = HEAP32[$7 >> 2];
	      var $9 = ($8 | 0) == 0;
	      var $_pre = HEAP32[$argval >> 2];
	      $_$7 : do {
	        if ($9) {
	          var $chksum_present_0_lcssa = 0;
	        } else {
	          var $i_020 = 0;
	          var $chksum_present_021 = 0;
	          var $11 = $8;
	          while (1) {
	            var $11;
	            var $chksum_present_021;
	            var $i_020;
	            var $12 = _strcmp($11, STRING_TABLE.__str82348 | 0);
	            var $13 = ($12 | 0) == 0;
	            do {
	              if ($13) {
	                var $15 = ($i_020 << 2) + $_pre | 0;
	                var $16 = HEAP32[$15 >> 2];
	                var $17 = _strcmp($16, STRING_TABLE.__str2392808 | 0);
	                if (($17 | 0) == 0) {
	                  var $chksum_present_1 = $chksum_present_021;
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str493 | 0, 212, STRING_TABLE.__str212436 | 0);
	                var $20 = HEAP32[$15 >> 2];
	                __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $20, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str2392808 | 0, tempInt));
	                var $chksum_present_1 = $chksum_present_021;
	              } else {
	                var $22 = _strcmp($11, STRING_TABLE.__str92349 | 0);
	                var $_chksum_present_0 = ($22 | 0) == 0 ? 1 : $chksum_present_021;
	                var $chksum_present_1 = $_chksum_present_0;
	              }
	            } while (0);
	            var $chksum_present_1;
	            var $25 = $i_020 + 1 | 0;
	            var $27 = HEAP32[$7 + ($25 << 2) >> 2];
	            if (($27 | 0) == 0) {
	              var $chksum_present_0_lcssa = $chksum_present_1;
	              break $_$7;
	            }
	            var $i_020 = $25;
	            var $chksum_present_021 = $chksum_present_1;
	            var $11 = $27;
	          }
	        }
	      } while (0);
	      var $chksum_present_0_lcssa;
	      _bio_hdrarg_free($7, $_pre);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $29 = $n_mgau;
	      var $30 = HEAP32[$byteswap >> 2];
	      var $31 = _bio_fread($29, 1, $1, $30, $chksum);
	      if (($31 | 0) == 1) {
	        var $35 = HEAP32[$n_mgau >> 2];
	        HEAP32[$out_n_mgau >> 2] = $35;
	        var $36 = $n_feat;
	        var $37 = _bio_fread($36, 1, $1, $30, $chksum);
	        if (($37 | 0) == 1) {
	          var $41 = HEAP32[$n_feat >> 2];
	          HEAP32[$out_n_feat >> 2] = $41;
	          var $42 = $n_density;
	          var $43 = _bio_fread($42, 1, $1, $30, $chksum);
	          if (($43 | 0) == 1) {
	            var $47 = HEAP32[$n_density >> 2];
	            HEAP32[$out_n_density >> 2] = $47;
	            var $48 = ___ckd_calloc__($41, 4, STRING_TABLE.__str493 | 0, 240);
	            var $49 = $48;
	            HEAP32[$out_veclen >> 2] = $49;
	            var $50 = _bio_fread($48, $41, $1, $30, $chksum);
	            if (($50 | 0) == ($41 | 0)) {
	              var $52 = ($41 | 0) > 0;
	              $_$27 : do {
	                if ($52) {
	                  var $i_114 = 0;
	                  var $blk_015 = 0;
	                  while (1) {
	                    var $blk_015;
	                    var $i_114;
	                    var $56 = HEAP32[$49 + ($i_114 << 2) >> 2] + $blk_015 | 0;
	                    var $57 = $i_114 + 1 | 0;
	                    if (($57 | 0) >= ($41 | 0)) {
	                      var $blk_0_lcssa = $56;
	                      break $_$27;
	                    }
	                    var $i_114 = $57;
	                    var $blk_015 = $56;
	                  }
	                } else {
	                  var $blk_0_lcssa = 0;
	                }
	              } while (0);
	              var $blk_0_lcssa;
	              var $59 = $n;
	              var $60 = _bio_fread($59, 1, $1, $30, $chksum);
	              if (($60 | 0) == 1) {
	                var $64 = HEAP32[$n >> 2];
	                if (($64 | 0) == ($35 * $blk_0_lcssa * $47 | 0)) {
	                  var $70 = HEAP32[$out_param >> 2];
	                  var $71 = ($70 | 0) == 0;
	                  $_$37 : do {
	                    if ($71) {
	                      var $73 = ___ckd_calloc_3d__($35, $41, $47, 4, STRING_TABLE.__str493 | 0, 262);
	                      var $74 = $73;
	                      var $75 = ___ckd_calloc__($64, 4, STRING_TABLE.__str493 | 0, 263);
	                      var $76 = $75;
	                      if (($35 | 0) <= 0) {
	                        var $buf_0 = $76;
	                        var $out_0 = $74;
	                        break;
	                      }
	                      var $78 = ($47 | 0) > 0;
	                      var $i_211 = 0;
	                      var $l_012 = 0;
	                      while (1) {
	                        var $l_012;
	                        var $i_211;
	                        $_$42 : do {
	                          if ($52) {
	                            var $79 = ($i_211 << 2) + $74 | 0;
	                            if (!$78) {
	                              var $l_1_lcssa = $l_012;
	                              break;
	                            }
	                            var $j_07_us = 0;
	                            var $l_18_us = $l_012;
	                            while (1) {
	                              var $l_18_us;
	                              var $j_07_us;
	                              var $91 = ($j_07_us << 2) + $49 | 0;
	                              var $k_02_us = 0;
	                              var $l_23_us = $l_18_us;
	                              while (1) {
	                                var $l_23_us;
	                                var $k_02_us;
	                                var $83 = ($l_23_us << 2) + $76 | 0;
	                                var $87 = ($k_02_us << 2) + HEAP32[HEAP32[$79 >> 2] + ($j_07_us << 2) >> 2] | 0;
	                                HEAP32[$87 >> 2] = $83;
	                                var $89 = HEAP32[$91 >> 2] + $l_23_us | 0;
	                                var $90 = $k_02_us + 1 | 0;
	                                if (($90 | 0) == ($47 | 0)) {
	                                  break;
	                                }
	                                var $k_02_us = $90;
	                                var $l_23_us = $89;
	                              }
	                              var $81 = $j_07_us + 1 | 0;
	                              if (($81 | 0) == ($41 | 0)) {
	                                var $l_1_lcssa = $89;
	                                break $_$42;
	                              }
	                              var $j_07_us = $81;
	                              var $l_18_us = $89;
	                            }
	                          } else {
	                            var $l_1_lcssa = $l_012;
	                          }
	                        } while (0);
	                        var $l_1_lcssa;
	                        var $92 = $i_211 + 1 | 0;
	                        if (($92 | 0) >= ($35 | 0)) {
	                          var $buf_0 = $76;
	                          var $out_0 = $74;
	                          break $_$37;
	                        }
	                        var $i_211 = $92;
	                        var $l_012 = $l_1_lcssa;
	                      }
	                    } else {
	                      var $buf_0 = HEAP32[HEAP32[HEAP32[$70 >> 2] >> 2] >> 2];
	                      var $out_0 = $70;
	                    }
	                  } while (0);
	                  var $out_0;
	                  var $buf_0;
	                  var $99 = _bio_fread($buf_0, $64, $1, $30, $chksum);
	                  if (($99 | 0) == ($64 | 0)) {
	                    if (($chksum_present_0_lcssa | 0) != 0) {
	                      var $105 = HEAP32[$chksum >> 2];
	                      _bio_verify_chksum($1, $30, $105);
	                    }
	                    var $107 = _fread($tmp, 1, 1, $1);
	                    if (($107 | 0) == 1) {
	                      __E__pr_header(STRING_TABLE.__str493 | 0, 286, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str361142 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                    } else {
	                      var $111 = _fclose($1);
	                      HEAP32[$out_param >> 2] = $out_0;
	                      __E__pr_info_header(STRING_TABLE.__str493 | 0, 292);
	                      __E__pr_info(STRING_TABLE.__str39532 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $35, HEAP32[tempInt + 4 >> 2] = $41, tempInt));
	                      $_$61 : do {
	                        if ($52) {
	                          var $i_31 = 0;
	                          while (1) {
	                            var $i_31;
	                            __E__pr_info_header(STRING_TABLE.__str493 | 0, 294);
	                            var $113 = HEAP32[$49 + ($i_31 << 2) >> 2];
	                            __E__pr_info(STRING_TABLE.__str40533 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $47, HEAP32[tempInt + 4 >> 2] = $113, tempInt));
	                            var $114 = $i_31 + 1 | 0;
	                            if (($114 | 0) >= ($41 | 0)) {
	                              break $_$61;
	                            }
	                            var $i_31 = $114;
	                          }
	                        }
	                      } while (0);
	                      STACKTOP = __stackBase__;
	                      return;
	                    }
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str493 | 0, 280, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str37530 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                  }
	                } else {
	                  __E__pr_header(STRING_TABLE.__str493 | 0, 254, STRING_TABLE.__str72422 | 0);
	                  __E__die_error(STRING_TABLE.__str36529 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $64, HEAP32[tempInt + 8 >> 2] = $35, HEAP32[tempInt + 12 >> 2] = $47, HEAP32[tempInt + 16 >> 2] = $blk_0_lcssa, tempInt));
	                }
	              } else {
	                __E__pr_header(STRING_TABLE.__str493 | 0, 252, STRING_TABLE.__str72422 | 0);
	                __E__die_error(STRING_TABLE.__str35528 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str493 | 0, 244, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str34527 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str493 | 0, 236, STRING_TABLE.__str72422 | 0);
	            __E__die_error(STRING_TABLE.__str33526 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	          }
	        } else {
	          __E__pr_header(STRING_TABLE.__str493 | 0, 231, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str32525 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	        }
	      } else {
	        __E__pr_header(STRING_TABLE.__str493 | 0, 226, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str31524 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	      }
	    }
	  }
	  return;
	}

	_gauden_param_read["X"] = 1;

	function _gauden_mllr_transform($g, $mllr, $config) {
	  var $58$s2;
	  var $7$s2;
	  var $config_idx2$s2;
	  var $4$s2;
	  var $3$s2;
	  var $2$s2;
	  var $1$s2;
	  var $fgau$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var $m = __stackBase__;
	  var $f = __stackBase__ + 4;
	  var $d = __stackBase__ + 8;
	  var $flen = __stackBase__ + 12;
	  var $fgau = __stackBase__ + 16, $fgau$s2 = $fgau >> 2;
	  HEAP32[$fgau$s2] = 0;
	  var $1 = $g + 16 | 0, $1$s2 = $1 >> 2;
	  var $2 = $g + 20 | 0, $2$s2 = $2 >> 2;
	  var $3 = $g + 24 | 0, $3$s2 = $3 >> 2;
	  var $4 = $g + 28 | 0, $4$s2 = $4 >> 2;
	  var $config_idx2$s2 = ($config + 4 | 0) >> 2;
	  var $config_idx2_val = HEAP32[$config_idx2$s2];
	  var $5 = _cmd_ln_str_r($config_idx2_val, STRING_TABLE.__str1192688 | 0);
	  _gauden_param_read($fgau, $1, $2, $3, $4, $5);
	  var $6 = HEAP32[$fgau$s2];
	  var $7$s2 = ($g | 0) >> 2;
	  HEAP32[$7$s2] = $6;
	  HEAP32[$fgau$s2] = 0;
	  var $config_idx1_val = HEAP32[$config_idx2$s2];
	  var $8 = _cmd_ln_str_r($config_idx1_val, STRING_TABLE.__str1212690 | 0);
	  _gauden_param_read($fgau, $m, $f, $d, $flen, $8);
	  var $9 = HEAP32[$fgau$s2];
	  var $10 = $g + 4 | 0;
	  HEAP32[$10 >> 2] = $9;
	  var $13 = (HEAP32[$m >> 2] | 0) == (HEAP32[$1$s2] | 0);
	  do {
	    if ($13) {
	      var $15 = HEAP32[$f >> 2];
	      if (($15 | 0) != (HEAP32[$2$s2] | 0)) {
	        break;
	      }
	      if ((HEAP32[$d >> 2] | 0) != (HEAP32[$3$s2] | 0)) {
	        break;
	      }
	      var $22 = HEAP32[$flen >> 2];
	      var $i_0 = 0;
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($15 | 0)) {
	          break;
	        }
	        if ((HEAP32[HEAP32[$4$s2] + ($i_0 << 2) >> 2] | 0) == (HEAP32[$22 + ($i_0 << 2) >> 2] | 0)) {
	          var $i_0 = $i_0 + 1 | 0;
	          continue;
	        }
	        __E__pr_header(STRING_TABLE.__str493 | 0, 570, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str14507 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      }
	      var $36 = $22;
	      _ckd_free($36);
	      var $37 = HEAP32[$1$s2];
	      if (($37 | 0) > 0) {
	        var $39 = $mllr + 24 | 0;
	        var $40 = $mllr + 20 | 0;
	        var $41 = $mllr + 16 | 0;
	        var $i_121 = 0;
	        var $43 = HEAP32[$2$s2];
	        var $42 = $37;
	        while (1) {
	          var $42;
	          var $43;
	          var $i_121;
	          if (($43 | 0) > 0) {
	            var $45 = 0;
	            while (1) {
	              var $45;
	              var $48 = HEAP32[HEAP32[$4$s2] + ($45 << 2) >> 2];
	              var $49 = ___ckd_calloc__($48, 8, STRING_TABLE.__str493 | 0, 577);
	              var $50 = $49;
	              var $52 = (HEAP32[$3$s2] | 0) > 0;
	              $_$167 : do {
	                if ($52) {
	                  var $54 = 0;
	                  var $53 = HEAP32[$4$s2];
	                  while (1) {
	                    var $53;
	                    var $54;
	                    var $57 = (HEAP32[$53 + ($45 << 2) >> 2] | 0) > 0;
	                    $_$171 : do {
	                      if ($57) {
	                        var $l_05 = 0;
	                        while (1) {
	                          var $l_05;
	                          var $58$s2 = (($l_05 << 3) + $50 | 0) >> 2;
	                          tempDoubleF64[0] = 0, HEAP32[$58$s2] = tempDoubleI32[0], HEAP32[$58$s2 + 1] = tempDoubleI32[1];
	                          var $62 = (HEAP32[HEAP32[$4$s2] + ($45 << 2) >> 2] | 0) > 0;
	                          $_$174 : do {
	                            if ($62) {
	                              var $64 = 0;
	                              var $63 = 0;
	                              while (1) {
	                                var $63;
	                                var $64;
	                                var $84 = $63 + HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[$41 >> 2] + ($45 << 2) >> 2] >> 2] + ($l_05 << 2) >> 2] + ($64 << 2) >> 2] * HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[$7$s2] + ($i_121 << 2) >> 2] + ($45 << 2) >> 2] + ($54 << 2) >> 2] + ($64 << 2) >> 2];
	                                tempDoubleF64[0] = $84, HEAP32[$58$s2] = tempDoubleI32[0], HEAP32[$58$s2 + 1] = tempDoubleI32[1];
	                                var $85 = $64 + 1 | 0;
	                                if (($85 | 0) >= (HEAP32[HEAP32[$4$s2] + ($45 << 2) >> 2] | 0)) {
	                                  var $_lcssa48 = $85;
	                                  var $90 = $84;
	                                  break $_$174;
	                                }
	                                var $64 = $85;
	                                var $63 = $84;
	                              }
	                            } else {
	                              var $_lcssa48 = 0;
	                              var $90 = 0;
	                            }
	                          } while (0);
	                          var $90;
	                          var $_lcssa48;
	                          tempDoubleF64[0] = $90 + HEAPF32[HEAP32[HEAP32[HEAP32[$40 >> 2] + ($45 << 2) >> 2] >> 2] + ($l_05 << 2) >> 2], HEAP32[$58$s2] = tempDoubleI32[0], HEAP32[$58$s2 + 1] = tempDoubleI32[1];
	                          var $99 = $l_05 + 1 | 0;
	                          var $100 = HEAP32[$4$s2];
	                          var $102 = HEAP32[$100 + ($45 << 2) >> 2];
	                          if (($99 | 0) >= ($102 | 0)) {
	                            break;
	                          }
	                          var $l_05 = $99;
	                        }
	                        HEAP32[$m >> 2] = $_lcssa48;
	                        if (($102 | 0) <= 0) {
	                          var $137 = $100;
	                          break;
	                        }
	                        var $l_19 = 0;
	                        while (1) {
	                          var $l_19;
	                          var $105 = ($l_19 << 3) + $50 | 0;
	                          var $106 = (tempDoubleI32[0] = HEAP32[$105 >> 2], tempDoubleI32[1] = HEAP32[$105 + 4 >> 2], tempDoubleF64[0]);
	                          HEAPF32[HEAP32[HEAP32[HEAP32[HEAP32[$7$s2] + ($i_121 << 2) >> 2] + ($45 << 2) >> 2] + ($54 << 2) >> 2] + ($l_19 << 2) >> 2] = $106;
	                          var $129 = ($l_19 << 2) + HEAP32[HEAP32[HEAP32[HEAP32[$10 >> 2] + ($i_121 << 2) >> 2] + ($45 << 2) >> 2] + ($54 << 2) >> 2] | 0;
	                          var $131 = HEAPF32[$129 >> 2] * HEAPF32[HEAP32[HEAP32[HEAP32[$39 >> 2] + ($45 << 2) >> 2] >> 2] + ($l_19 << 2) >> 2];
	                          HEAPF32[$129 >> 2] = $131;
	                          var $132 = $l_19 + 1 | 0;
	                          var $133 = HEAP32[$4$s2];
	                          if (($132 | 0) >= (HEAP32[$133 + ($45 << 2) >> 2] | 0)) {
	                            var $137 = $133;
	                            break $_$171;
	                          }
	                          var $l_19 = $132;
	                        }
	                      } else {
	                        var $137 = $53;
	                      }
	                    } while (0);
	                    var $137;
	                    var $138 = $54 + 1 | 0;
	                    if (($138 | 0) >= (HEAP32[$3$s2] | 0)) {
	                      var $_lcssa1319 = $138;
	                      break $_$167;
	                    }
	                    var $54 = $138;
	                    var $53 = $137;
	                  }
	                } else {
	                  var $_lcssa1319 = 0;
	                }
	              } while (0);
	              var $_lcssa1319;
	              _ckd_free($49);
	              var $141 = $45 + 1 | 0;
	              var $142 = HEAP32[$2$s2];
	              if (($141 | 0) >= ($142 | 0)) {
	                break;
	              }
	              var $45 = $141;
	            }
	            HEAP32[$d >> 2] = $_lcssa1319;
	            var $_lcssa2024 = $141;
	            var $146 = $142;
	            var $145 = HEAP32[$1$s2];
	          } else {
	            var $_lcssa2024 = 0;
	            var $146 = $43;
	            var $145 = $42;
	          }
	          var $145;
	          var $146;
	          var $_lcssa2024;
	          var $147 = $i_121 + 1 | 0;
	          if (($147 | 0) >= ($145 | 0)) {
	            break;
	          }
	          var $i_121 = $147;
	          var $43 = $146;
	          var $42 = $145;
	        }
	        HEAP32[$f >> 2] = $_lcssa2024;
	      }
	      var $151 = HEAP32[$g + 12 >> 2];
	      var $config_idx_val = HEAP32[$config_idx2$s2];
	      var $152 = _cmd_ln_float_r($config_idx_val, STRING_TABLE.__str1232692 | 0);
	      var $153 = $152;
	      _gauden_dist_precompute($g, $151, $153);
	      STACKTOP = __stackBase__;
	      return;
	    }
	  } while (0);
	  __E__pr_header(STRING_TABLE.__str493 | 0, 566, STRING_TABLE.__str72422 | 0);
	  __E__die_error(STRING_TABLE.__str13506 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  return;
	}

	_gauden_mllr_transform["X"] = 1;

	function _ms_mgau_free($mg) {
	  if (($mg | 0) != 0) {
	    var $5 = HEAP32[$mg + 8 >> 2];
	    _gauden_free($5);
	    var $8 = HEAP32[$mg + 12 >> 2];
	    _senone_free($8);
	    var $12 = HEAP32[$mg + 20 >> 2];
	    _ckd_free_3d($12);
	    var $15 = HEAP32[$mg + 24 >> 2];
	    _ckd_free($15);
	    var $16 = $mg;
	    _ckd_free($16);
	  }
	  return;
	  return;
	}

	function _ms_mgau_mllr_transform($s, $mllr) {
	  var $3 = HEAP32[$s + 8 >> 2];
	  var $6 = HEAP32[$s + 28 >> 2];
	  _gauden_mllr_transform($3, $mllr, $6);
	  return 0;
	  return null;
	}

	function _ms_cont_mgau_frame_eval($mg, $senscr, $senone_active, $n_senone_active, $feat, $frame, $compallsen) {
	  var $18$s2;
	  var $11$s2;
	  var __label__;
	  var $3 = HEAPU32[$mg + 16 >> 2];
	  var $6 = HEAPU32[$mg + 8 >> 2];
	  var $9 = HEAPU32[$mg + 12 >> 2];
	  var $10 = ($compallsen | 0) == 0;
	  var $11$s2 = ($6 + 16 | 0) >> 2;
	  var $12 = HEAPU32[$11$s2];
	  var $13 = ($12 | 0) > 0;
	  $_$25 : do {
	    if ($10) {
	      $_$27 : do {
	        if ($13) {
	          var $15 = $mg + 24 | 0;
	          var $gid_131 = 0;
	          while (1) {
	            var $gid_131;
	            HEAP8[HEAP32[$15 >> 2] + $gid_131 | 0] = 0;
	            var $66 = $gid_131 + 1 | 0;
	            var $67 = HEAP32[$11$s2];
	            if (($66 | 0) >= ($67 | 0)) {
	              var $58 = $67;
	              break $_$27;
	            }
	            var $gid_131 = $66;
	          }
	        } else {
	          var $58 = $12;
	        }
	      } while (0);
	      var $58;
	      var $59 = ($n_senone_active | 0) > 0;
	      if ($59) {
	        var $60 = $9 + 28 | 0;
	        var $62 = $mg + 24 | 0;
	        var $i_026 = 0;
	        var $n_027 = 0;
	        while (1) {
	          var $n_027;
	          var $i_026;
	          var $79 = (HEAPU8[$senone_active + $i_026 | 0] & 255) + $n_027 | 0;
	          HEAP8[HEAP32[$62 >> 2] + HEAP32[HEAP32[$60 >> 2] + ($79 << 2) >> 2] | 0] = 1;
	          var $85 = $i_026 + 1 | 0;
	          if (($85 | 0) == ($n_senone_active | 0)) {
	            break;
	          }
	          var $i_026 = $85;
	          var $n_027 = $79;
	        }
	        var $69 = HEAP32[$11$s2];
	      } else {
	        var $69 = $58;
	      }
	      var $69;
	      var $70 = ($69 | 0) > 0;
	      $_$38 : do {
	        if ($70) {
	          var $72 = $mg + 24 | 0;
	          var $74 = $mg + 20 | 0;
	          var $gid_223 = 0;
	          var $89 = $69;
	          while (1) {
	            var $89;
	            var $gid_223;
	            if (HEAP8[HEAP32[$72 >> 2] + $gid_223 | 0] << 24 >> 24 == 0) {
	              var $99 = $89;
	            } else {
	              var $97 = HEAP32[HEAP32[$74 >> 2] + ($gid_223 << 2) >> 2];
	              _gauden_dist($6, $gid_223, $3, $feat, $97);
	              var $99 = HEAP32[$11$s2];
	            }
	            var $99;
	            var $100 = $gid_223 + 1 | 0;
	            if (($100 | 0) >= ($99 | 0)) {
	              break $_$38;
	            }
	            var $gid_223 = $100;
	            var $89 = $99;
	          }
	        } else {
	          __label__ = 20;
	        }
	      } while (0);
	      if (!$59) {
	        break;
	      }
	      var $86 = $9 + 28 | 0;
	      var $88 = $mg + 20 | 0;
	      var $best_217 = 2147483647;
	      var $i_118 = 0;
	      var $n_119 = 0;
	      while (1) {
	        var $n_119;
	        var $i_118;
	        var $best_217;
	        var $106 = (HEAPU8[$senone_active + $i_118 | 0] & 255) + $n_119 | 0;
	        var $112 = HEAP32[HEAP32[$88 >> 2] + (HEAP32[HEAP32[$86 >> 2] + ($106 << 2) >> 2] << 2) >> 2];
	        var $113 = _senone_eval($9, $106, $112, $3);
	        var $114 = $113 & 65535;
	        HEAP16[$senscr + ($106 << 1) >> 1] = $114;
	        var $116 = $114 << 16 >> 16;
	        var $_best_2 = ($best_217 | 0) > ($116 | 0) ? $116 : $best_217;
	        var $118 = $i_118 + 1 | 0;
	        if (($118 | 0) == ($n_senone_active | 0)) {
	          var $i_213 = 0;
	          var $n_214 = 0;
	          break;
	        }
	        var $best_217 = $_best_2;
	        var $i_118 = $118;
	        var $n_119 = $106;
	      }
	      while (1) {
	        var $n_214;
	        var $i_213;
	        var $122 = (HEAPU8[$senone_active + $i_213 | 0] & 255) + $n_214 | 0;
	        var $123 = ($122 << 1) + $senscr | 0;
	        var $126 = (HEAP16[$123 >> 1] << 16 >> 16) - $_best_2 | 0;
	        var $_1 = ($126 | 0) > 32767 ? 32767 : $126;
	        var $130 = ($_1 | 0) < -32768 ? -32768 : $_1 & 65535;
	        HEAP16[$123 >> 1] = $130;
	        var $131 = $i_213 + 1 | 0;
	        if (($131 | 0) == ($n_senone_active | 0)) {
	          break $_$25;
	        }
	        var $i_213 = $131;
	        var $n_214 = $122;
	      }
	    } else {
	      $_$52 : do {
	        if ($13) {
	          var $17 = $mg + 20 | 0;
	          var $gid_09 = 0;
	          while (1) {
	            var $gid_09;
	            var $27 = HEAP32[HEAP32[$17 >> 2] + ($gid_09 << 2) >> 2];
	            _gauden_dist($6, $gid_09, $3, $feat, $27);
	            var $28 = $gid_09 + 1 | 0;
	            if (($28 | 0) >= (HEAP32[$11$s2] | 0)) {
	              break $_$52;
	            }
	            var $gid_09 = $28;
	          }
	        }
	      } while (0);
	      var $18$s2 = ($9 + 8 | 0) >> 2;
	      if ((HEAP32[$18$s2] | 0) == 0) {
	        break;
	      }
	      var $21 = $9 + 28 | 0;
	      var $23 = $mg + 20 | 0;
	      var $best_04 = 2147483647;
	      var $s_05 = 0;
	      while (1) {
	        var $s_05;
	        var $best_04;
	        var $38 = HEAP32[HEAP32[$23 >> 2] + (HEAP32[HEAP32[$21 >> 2] + ($s_05 << 2) >> 2] << 2) >> 2];
	        var $39 = _senone_eval($9, $s_05, $38, $3);
	        var $40 = $39 & 65535;
	        HEAP16[$senscr + ($s_05 << 1) >> 1] = $40;
	        var $42 = $40 << 16 >> 16;
	        var $_best_0 = ($best_04 | 0) > ($42 | 0) ? $42 : $best_04;
	        var $44 = $s_05 + 1 | 0;
	        var $45 = HEAPU32[$18$s2];
	        if ($44 >>> 0 >= $45 >>> 0) {
	          break;
	        }
	        var $best_04 = $_best_0;
	        var $s_05 = $44;
	      }
	      if (($45 | 0) == 0) {
	        break;
	      }
	      var $s_12 = 0;
	      while (1) {
	        var $s_12;
	        var $47 = ($s_12 << 1) + $senscr | 0;
	        var $50 = (HEAP16[$47 >> 1] << 16 >> 16) - $_best_0 | 0;
	        var $_ = ($50 | 0) > 32767 ? 32767 : $50;
	        var $54 = ($_ | 0) < -32768 ? -32768 : $_ & 65535;
	        HEAP16[$47 >> 1] = $54;
	        var $55 = $s_12 + 1 | 0;
	        if ($55 >>> 0 >= HEAPU32[$18$s2] >>> 0) {
	          break $_$25;
	        }
	        var $s_12 = $55;
	      }
	    }
	  } while (0);
	  return 0;
	  return null;
	}

	_ms_cont_mgau_frame_eval["X"] = 1;

	function _ms_mgau_init($config, $lmath, $mdef) {
	  var $54$s2;
	  var $40$s2;
	  var $38$s2;
	  var $22$s2;
	  var $config_idx7$s2;
	  var $5$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 32, STRING_TABLE.__str534 | 0, 90), $1$s2 = $1 >> 2;
	  HEAP32[$1$s2 + 7] = $config;
	  var $5$s2 = ($1 + 8 | 0) >> 2;
	  HEAP32[$5$s2] = 0;
	  var $7 = $1 + 12 | 0;
	  HEAP32[$7 >> 2] = 0;
	  var $config_idx7$s2 = ($config + 4 | 0) >> 2;
	  var $config_idx7_val = HEAP32[$config_idx7$s2];
	  var $8 = _cmd_ln_str_r($config_idx7_val, STRING_TABLE.__str1192688 | 0);
	  var $config_idx6_val = HEAP32[$config_idx7$s2];
	  var $9 = _cmd_ln_str_r($config_idx6_val, STRING_TABLE.__str1212690 | 0);
	  var $config_idx3_val = HEAP32[$config_idx7$s2];
	  var $10 = _cmd_ln_float_r($config_idx3_val, STRING_TABLE.__str1232692 | 0);
	  var $11 = $10;
	  var $12 = _gauden_init($8, $9, $11, $lmath);
	  HEAP32[$5$s2] = $12;
	  var $config_idx5_val = HEAP32[$config_idx7$s2];
	  var $13 = _cmd_ln_str_r($config_idx5_val, STRING_TABLE.__str1252694 | 0);
	  var $config_idx4_val = HEAP32[$config_idx7$s2];
	  var $14 = _cmd_ln_str_r($config_idx4_val, STRING_TABLE.__str1122681 | 0);
	  var $config_idx2_val = HEAP32[$config_idx7$s2];
	  var $15 = _cmd_ln_float_r($config_idx2_val, STRING_TABLE.__str1272696 | 0);
	  var $16 = $15;
	  var $17 = _senone_init($12, $13, $14, $16, $lmath, $mdef);
	  HEAP32[$7 >> 2] = $17;
	  var $config_idx1_val = HEAP32[$config_idx7$s2];
	  var $18 = _cmd_ln_int_r($config_idx1_val, STRING_TABLE.__str1302699 | 0);
	  var $19 = $17 + 36 | 0;
	  HEAP32[$19 >> 2] = $18;
	  var $20 = $17 + 12 | 0;
	  var $22$s2 = ($12 + 20 | 0) >> 2;
	  if ((HEAP32[$20 >> 2] | 0) == (HEAP32[$22$s2] | 0)) {
	    var $29 = $17 + 16 | 0;
	    var $31 = $12 + 24 | 0;
	    if ((HEAP32[$29 >> 2] | 0) == (HEAP32[$31 >> 2] | 0)) {
	      var $38$s2 = ($17 + 20 | 0) >> 2;
	      var $39 = HEAPU32[$38$s2];
	      var $40$s2 = ($12 + 16 | 0) >> 2;
	      var $41 = HEAPU32[$40$s2];
	      if ($39 >>> 0 > $41 >>> 0) {
	        __E__pr_header(STRING_TABLE.__str534 | 0, 115, STRING_TABLE.__str72422 | 0);
	        var $44 = HEAP32[$38$s2];
	        var $45 = HEAP32[$40$s2];
	        __E__die_error(STRING_TABLE.__str11545 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $44, HEAP32[tempInt + 4 >> 2] = $45, tempInt));
	      } else {
	        if ($39 >>> 0 < $41 >>> 0) {
	          __E__pr_header(STRING_TABLE.__str534 | 0, 118, STRING_TABLE.__str102579 | 0);
	          var $49 = HEAP32[$38$s2];
	          var $50 = HEAP32[$40$s2];
	          __E__pr_warn(STRING_TABLE.__str13547 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $49, HEAP32[tempInt + 4 >> 2] = $50, tempInt));
	        }
	        var $config_idx_val = HEAP32[$config_idx7$s2];
	        var $52 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1412710 | 0);
	        var $54$s2 = ($1 + 16 | 0) >> 2;
	        HEAP32[$54$s2] = $52;
	        __E__pr_info_header(STRING_TABLE.__str534 | 0, 122);
	        var $55 = HEAP32[$54$s2];
	        __E__pr_info(STRING_TABLE.__str16550 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $55, tempInt));
	        var $56 = HEAPU32[$54$s2];
	        var $57 = ($56 | 0) == 0;
	        do {
	          if ($57) {
	            __label__ = 12;
	          } else {
	            if (($56 | 0) > (HEAP32[HEAP32[$5$s2] + 24 >> 2] | 0)) {
	              __label__ = 12;
	              break;
	            }
	            var $72 = $56;
	            __label__ = 13;
	            break;
	          }
	        } while (0);
	        if (__label__ == 12) {
	          __E__pr_header(STRING_TABLE.__str534 | 0, 124, STRING_TABLE.__str212436 | 0);
	          var $64 = HEAP32[$54$s2];
	          var $67 = HEAP32[HEAP32[$5$s2] + 24 >> 2];
	          __E__pr_warn(STRING_TABLE.__str18552 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $64, HEAP32[tempInt + 4 >> 2] = $67, tempInt));
	          var $70 = HEAP32[HEAP32[$5$s2] + 24 >> 2];
	          HEAP32[$54$s2] = $70;
	          var $72 = $70;
	        }
	        var $72;
	        var $73 = HEAP32[$40$s2];
	        var $74 = HEAP32[$22$s2];
	        var $75 = ___ckd_calloc_3d__($73, $74, $72, 8, STRING_TABLE.__str534 | 0, 132);
	        var $76 = $75;
	        HEAP32[$1$s2 + 5] = $76;
	        var $79 = HEAP32[$40$s2];
	        var $80 = ___ckd_calloc__($79, 1, STRING_TABLE.__str534 | 0, 133);
	        HEAP32[$1$s2 + 6] = $80;
	        var $83 = $1;
	        HEAP32[$1$s2] = _ms_mgau_funcs;
	        STACKTOP = __stackBase__;
	        return $83;
	      }
	    } else {
	      __E__pr_header(STRING_TABLE.__str534 | 0, 112, STRING_TABLE.__str72422 | 0);
	      var $35 = HEAP32[$31 >> 2];
	      var $36 = HEAP32[$29 >> 2];
	      __E__die_error(STRING_TABLE.__str10544 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $35, HEAP32[tempInt + 4 >> 2] = $36, tempInt));
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str534 | 0, 109, STRING_TABLE.__str72422 | 0);
	    var $26 = HEAP32[$22$s2];
	    var $27 = HEAP32[$20 >> 2];
	    __E__die_error(STRING_TABLE.__str9543 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $26, HEAP32[tempInt + 4 >> 2] = $27, tempInt));
	  }
	  return null;
	}

	_ms_mgau_init["X"] = 1;

	function _senone_init($g, $mixwfile, $sen2mgau_map_file, $mixwfloor, $lmath, $mdef) {
	  var $76$s2;
	  var $49$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(1, 40, STRING_TABLE.__str556 | 0, 292), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $lmath_idx = $lmath + 20 | 0;
	  var $lmath_idx_val = (tempDoubleI32[0] = HEAP32[$lmath_idx >> 2], tempDoubleI32[1] = HEAP32[$lmath_idx + 4 >> 2], tempDoubleF64[0]);
	  var $3 = _logmath_get_base($lmath_idx_val);
	  var $4 = _logmath_init($3, 10, 1);
	  HEAP32[$1$s2 + 1] = $4;
	  HEAPF32[$1$s2 + 6] = $mixwfloor;
	  var $10 = HEAP32[$g + 16 >> 2];
	  var $12 = $1 + 20 | 0;
	  HEAP32[$12 >> 2] = $10;
	  var $13 = ($sen2mgau_map_file | 0) == 0;
	  do {
	    if ($13) {
	      if (($10 | 0) == 1) {
	        var $n_0 = 0;
	        var $_0 = STRING_TABLE.__str1557 | 0;
	        break;
	      }
	      var $_ = ($10 | 0) == (HEAP32[$mdef + 4 >> 2] | 0) ? STRING_TABLE.__str2558 | 0 : STRING_TABLE.__str3559 | 0;
	      var $n_0 = 0;
	      var $_0 = $_;
	    } else {
	      var $15 = _strcmp($sen2mgau_map_file, STRING_TABLE.__str1557 | 0);
	      if (($15 | 0) == 0) {
	        var $n_0 = 0;
	        var $_0 = $sen2mgau_map_file;
	        break;
	      }
	      var $18 = _strcmp($sen2mgau_map_file, STRING_TABLE.__str2558 | 0);
	      if (($18 | 0) == 0) {
	        var $n_0 = 0;
	        var $_0 = $sen2mgau_map_file;
	        break;
	      }
	      var $21 = _strcmp($sen2mgau_map_file, STRING_TABLE.__str3559 | 0);
	      if (($21 | 0) == 0) {
	        var $n_0 = 0;
	        var $_0 = $sen2mgau_map_file;
	        break;
	      }
	      _senone_mgau_map_read($2, $sen2mgau_map_file);
	      var $n_0 = HEAP32[$1$s2 + 2];
	      var $_0 = $sen2mgau_map_file;
	    }
	  } while (0);
	  var $_0;
	  var $n_0;
	  _senone_mixw_read($2, $mixwfile, $lmath);
	  var $34 = _strcmp($_0, STRING_TABLE.__str1557 | 0);
	  var $35 = ($34 | 0) == 0;
	  $_$73 : do {
	    if ($35) {
	      __E__pr_info_header(STRING_TABLE.__str556 | 0, 318);
	      __E__pr_info(STRING_TABLE.__str5561 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $39 = HEAP32[$1$s2 + 2];
	      var $40 = ___ckd_calloc__($39, 4, STRING_TABLE.__str556 | 0, 319);
	      var $41 = $40;
	      HEAP32[$1$s2 + 7] = $41;
	    } else {
	      var $45 = _strcmp($_0, STRING_TABLE.__str2558 | 0);
	      if (($45 | 0) == 0) {
	        __E__pr_info_header(STRING_TABLE.__str556 | 0, 323);
	        __E__pr_info(STRING_TABLE.__str6562 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $49$s2 = ($1 + 8 | 0) >> 2;
	        var $50 = HEAP32[$49$s2];
	        var $51 = ___ckd_calloc__($50, 4, STRING_TABLE.__str556 | 0, 324);
	        var $52 = $51;
	        var $54 = $1 + 28 | 0;
	        HEAP32[$54 >> 2] = $52;
	        if ((HEAP32[$49$s2] | 0) == 0) {
	          break;
	        }
	        var $57 = $mdef + 72 | 0;
	        var $i_02 = 0;
	        var $59 = $52;
	        while (1) {
	          var $59;
	          var $i_02;
	          var $63 = HEAP16[HEAP32[$57 >> 2] + ($i_02 << 1) >> 1] << 16 >> 16;
	          HEAP32[$59 + ($i_02 << 2) >> 2] = $63;
	          var $65 = $i_02 + 1 | 0;
	          if ($65 >>> 0 >= HEAPU32[$49$s2] >>> 0) {
	            break $_$73;
	          }
	          var $i_02 = $65;
	          var $59 = HEAP32[$54 >> 2];
	        }
	      } else {
	        var $69 = _strcmp($_0, STRING_TABLE.__str3559 | 0);
	        var $70 = ($69 | 0) == 0;
	        do {
	          if (!$70) {
	            var $72 = _strcmp($_0, STRING_TABLE.__str7563 | 0);
	            if (($72 | 0) == 0) {
	              break;
	            }
	            var $95 = $1 + 8 | 0;
	            if ((HEAP32[$95 >> 2] | 0) == ($n_0 | 0)) {
	              break $_$73;
	            }
	            __E__pr_header(STRING_TABLE.__str556 | 0, 343, STRING_TABLE.__str72422 | 0);
	            var $99 = HEAP32[$95 >> 2];
	            __E__die_error(STRING_TABLE.__str11567 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $n_0, HEAP32[tempInt + 4 >> 2] = $_0, HEAP32[tempInt + 8 >> 2] = $99, HEAP32[tempInt + 12 >> 2] = $mixwfile, tempInt));
	          }
	        } while (0);
	        __E__pr_info_header(STRING_TABLE.__str556 | 0, 331);
	        __E__pr_info(STRING_TABLE.__str8564 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $76$s2 = ($1 + 8 | 0) >> 2;
	        var $77 = HEAPU32[$76$s2];
	        if ($77 >>> 0 < 2) {
	          __E__pr_header(STRING_TABLE.__str556 | 0, 333, STRING_TABLE.__str72422 | 0);
	          var $80 = HEAP32[$76$s2];
	          __E__die_error(STRING_TABLE.__str10566 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $80, tempInt));
	        } else {
	          var $82 = ___ckd_calloc__($77, 4, STRING_TABLE.__str556 | 0, 335);
	          var $83 = $82;
	          var $85 = $1 + 28 | 0;
	          HEAP32[$85 >> 2] = $83;
	          var $87 = (HEAP32[$76$s2] | 0) == 0;
	          $_$91 : do {
	            if ($87) {
	              var $_lcssa = 0;
	            } else {
	              var $i_11 = 0;
	              var $88 = $83;
	              while (1) {
	                var $88;
	                var $i_11;
	                HEAP32[$88 + ($i_11 << 2) >> 2] = $i_11;
	                var $90 = $i_11 + 1 | 0;
	                var $91 = HEAPU32[$76$s2];
	                if ($90 >>> 0 >= $91 >>> 0) {
	                  var $_lcssa = $91;
	                  break $_$91;
	                }
	                var $i_11 = $90;
	                var $88 = HEAP32[$85 >> 2];
	              }
	            }
	          } while (0);
	          var $_lcssa;
	          HEAP32[$12 >> 2] = $_lcssa;
	        }
	      }
	    }
	  } while (0);
	  HEAP32[$1$s2 + 8] = 0;
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	_senone_init["X"] = 1;

	function _senone_mgau_map_read($s, $file_name) {
	  var $60$s2;
	  var $51$s2;
	  var $18$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 28;
	  var $byteswap = __stackBase__;
	  var $chksum = __stackBase__ + 4;
	  var $eofchk = __stackBase__ + 8;
	  var $argname = __stackBase__ + 12;
	  var $argval = __stackBase__ + 16;
	  var $ptr = __stackBase__ + 20;
	  var $v = __stackBase__ + 24;
	  __E__pr_info_header(STRING_TABLE.__str556 | 0, 75);
	  __E__pr_info(STRING_TABLE.__str34590 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str556 | 0, 78, STRING_TABLE.__str232533 | 0);
	    __E__fatal_sys_error(STRING_TABLE.__str35591 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  } else {
	    var $5 = _bio_readhdr($1, $argname, $argval, $byteswap);
	    if (($5 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str556 | 0, 82, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str101199 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      var $7 = HEAPU32[$argname >> 2];
	      var $8 = HEAPU32[$argval >> 2];
	      var $i_0 = 0;
	      var $n_gauden_present_0 = 0;
	      var $chksum_present_0 = 0;
	      while (1) {
	        var $chksum_present_0;
	        var $n_gauden_present_0;
	        var $i_0;
	        var $12 = HEAPU32[$7 + ($i_0 << 2) >> 2];
	        if (($12 | 0) == 0) {
	          break;
	        }
	        var $15 = _strcmp($12, STRING_TABLE.__str82348 | 0);
	        if (($15 | 0) == 0) {
	          var $18$s2 = (($i_0 << 2) + $8 | 0) >> 2;
	          var $19 = HEAP32[$18$s2];
	          var $20 = _strcmp($19, STRING_TABLE.__str36592 | 0);
	          if (($20 | 0) == 0) {
	            var $25 = $19;
	          } else {
	            __E__pr_header(STRING_TABLE.__str556 | 0, 90, STRING_TABLE.__str212436 | 0);
	            var $23 = HEAP32[$18$s2];
	            __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str36592 | 0, tempInt));
	            var $25 = HEAP32[$18$s2];
	          }
	          var $25;
	          var $26 = _sscanf($25, STRING_TABLE.__str37593 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $v, tempInt));
	          if (($26 | 0) == 1) {
	            var $n_gauden_present_1 = HEAPF32[$v >> 2] > 1.1 & 1;
	            var $chksum_present_1 = $chksum_present_0;
	          } else {
	            __E__pr_header(STRING_TABLE.__str556 | 0, 96, STRING_TABLE.__str72422 | 0);
	            var $29 = HEAP32[$18$s2];
	            __E__die_error(STRING_TABLE.__str38594 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $29, tempInt));
	          }
	        } else {
	          var $36 = _strcmp($12, STRING_TABLE.__str92349 | 0);
	          var $_chksum_present_0 = ($36 | 0) == 0 ? 1 : $chksum_present_0;
	          var $n_gauden_present_1 = $n_gauden_present_0;
	          var $chksum_present_1 = $_chksum_present_0;
	        }
	        var $chksum_present_1;
	        var $n_gauden_present_1;
	        var $i_0 = $i_0 + 1 | 0;
	        var $n_gauden_present_0 = $n_gauden_present_1;
	        var $chksum_present_0 = $chksum_present_1;
	      }
	      _bio_hdrarg_free($7, $8);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $41 = ($n_gauden_present_0 | 0) != 0;
	      do {
	        if ($41) {
	          __E__pr_info_header(STRING_TABLE.__str556 | 0, 112);
	          __E__pr_info(STRING_TABLE.__str39595 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	          var $44 = $s + 20 | 0;
	          var $45 = HEAP32[$byteswap >> 2];
	          var $46 = _bio_fread($44, 1, $1, $45, $chksum);
	          if (($46 | 0) == 1) {
	            var $50 = $45;
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str556 | 0, 115, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str40596 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	        } else {
	          var $50 = HEAP32[$byteswap >> 2];
	        }
	      } while (0);
	      var $50;
	      var $51 = $s + 8 | 0, $51$s2 = $51 >> 2;
	      var $52 = _bio_fread_1d($ptr, $51, $1, $50, $chksum);
	      if (($52 | 0) < 0) {
	        __E__pr_header(STRING_TABLE.__str556 | 0, 121, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str41597 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	      } else {
	        var $57 = HEAP32[$ptr >> 2];
	        var $58 = $s + 28 | 0;
	        HEAP32[$58 >> 2] = $57;
	        __E__pr_info_header(STRING_TABLE.__str556 | 0, 124);
	        var $59 = HEAP32[$51$s2];
	        var $60$s2 = ($s + 20 | 0) >> 2;
	        var $61 = HEAP32[$60$s2];
	        __E__pr_info(STRING_TABLE.__str42598 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $59, HEAP32[tempInt + 4 >> 2] = $61, tempInt));
	        $_$125 : do {
	          if (!$41) {
	            HEAP32[$60$s2] = 1;
	            var $63 = HEAPU32[$51$s2];
	            if (($63 | 0) == 0) {
	              break;
	            }
	            var $_pre = HEAP32[$58 >> 2];
	            var $i_11 = 0;
	            var $66 = 1;
	            while (1) {
	              var $66;
	              var $i_11;
	              var $68 = HEAPU32[$_pre + ($i_11 << 2) >> 2];
	              if ($68 >>> 0 < $66 >>> 0) {
	                var $73 = $66;
	              } else {
	                var $71 = $68 + 1 | 0;
	                HEAP32[$60$s2] = $71;
	                var $73 = $71;
	              }
	              var $73;
	              var $74 = $i_11 + 1 | 0;
	              if ($74 >>> 0 >= $63 >>> 0) {
	                break $_$125;
	              }
	              var $i_11 = $74;
	              var $66 = $73;
	            }
	          }
	        } while (0);
	        if (($chksum_present_0 | 0) != 0) {
	          var $78 = HEAP32[$chksum >> 2];
	          _bio_verify_chksum($1, $50, $78);
	        }
	        var $80 = _fread($eofchk, 1, 1, $1);
	        if (($80 | 0) == 1) {
	          __E__pr_header(STRING_TABLE.__str556 | 0, 138, STRING_TABLE.__str72422 | 0);
	          var $84 = HEAP8[$eofchk] << 24 >> 24;
	          __E__die_error(STRING_TABLE.__str43599 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $84, tempInt));
	        } else {
	          var $86 = _fclose($1);
	          __E__pr_info_header(STRING_TABLE.__str556 | 0, 142);
	          var $87 = HEAP32[$51$s2];
	          var $88 = HEAP32[$60$s2];
	          __E__pr_info(STRING_TABLE.__str44600 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $87, HEAP32[tempInt + 4 >> 2] = $88, tempInt));
	          STACKTOP = __stackBase__;
	          return;
	        }
	      }
	    }
	  }
	  return;
	}

	_senone_mgau_map_read["X"] = 1;

	function _senone_free($s) {
	  if (($s | 0) != 0) {
	    var $4 = HEAP32[$s >> 2];
	    if (($4 | 0) != 0) {
	      var $7 = $4;
	      _ckd_free_3d($7);
	    }
	    var $10 = HEAP32[$s + 28 >> 2];
	    if (($10 | 0) != 0) {
	      var $13 = $10;
	      _ckd_free($13);
	    }
	    var $16 = HEAP32[$s + 32 >> 2];
	    if (($16 | 0) != 0) {
	      var $19 = $16;
	      _ckd_free($19);
	    }
	    var $22 = HEAP32[$s + 4 >> 2];
	    _logmath_free($22);
	    var $23 = $s;
	    _ckd_free($23);
	  }
	  return;
	  return;
	}

	function _senone_eval($s, $id, $dist, $n_top) {
	  var $23$s2;
	  var __label__;
	  var $1 = ($id | 0) > -1;
	  do {
	    if ($1) {
	      if (HEAPU32[$s + 8 >> 2] >>> 0 > $id >>> 0) {
	        __label__ = 5;
	        break;
	      }
	      __label__ = 4;
	      break;
	    } else {
	      __label__ = 4;
	    }
	  } while (0);
	  if (__label__ == 4) {
	    ___assert_func(STRING_TABLE.__str556 | 0, 382, STRING_TABLE.___func___senone_eval | 0, STRING_TABLE.__str12568 | 0);
	  }
	  var $8 = ($n_top | 0) > 0;
	  do {
	    if ($8) {
	      if (HEAPU32[$s + 16 >> 2] >>> 0 < $n_top >>> 0) {
	        __label__ = 7;
	        break;
	      }
	      __label__ = 8;
	      break;
	    } else {
	      __label__ = 7;
	    }
	  } while (0);
	  if (__label__ == 7) {
	    ___assert_func(STRING_TABLE.__str556 | 0, 383, STRING_TABLE.___func___senone_eval | 0, STRING_TABLE.__str13569 | 0);
	  }
	  var $14 = $s + 12 | 0;
	  var $15 = HEAPU32[$14 >> 2];
	  var $16 = ($15 | 0) == 0;
	  $_$93 : do {
	    if ($16) {
	      var $scr_0_lcssa = 0;
	    } else {
	      var $17 = $s + 20 | 0;
	      var $18 = $s | 0;
	      var $19 = ($n_top | 0) > 1;
	      var $20 = $s + 4 | 0;
	      var $scr_04 = 0;
	      var $f_05 = 0;
	      var $21 = $15;
	      while (1) {
	        var $21;
	        var $f_05;
	        var $scr_04;
	        var $23$s2 = HEAPU32[$dist + ($f_05 << 2) >> 2] >> 2;
	        var $29 = HEAPU32[$17 >> 2];
	        var $32 = HEAP32[$23$s2];
	        var $33 = HEAPU32[$18 >> 2];
	        if ($29 >>> 0 > 1) {
	          var $_pn1_in_in = HEAP32[HEAP32[$33 + ($id << 2) >> 2] + ($f_05 << 2) >> 2] + $32 | 0;
	        } else {
	          var $_pn1_in_in = HEAP32[HEAP32[$33 + ($f_05 << 2) >> 2] + ($32 << 2) >> 2] + $id | 0;
	        }
	        var $_pn1_in_in;
	        var $47 = ((HEAPF32[$23$s2 + 1] & -1) + 1023 >> 10) - (HEAPU8[$_pn1_in_in] & 255) | 0;
	        if ($19) {
	          var $fscr_02 = $47;
	          var $t_03 = 1;
	          var $49 = $29;
	          var $48 = $33;
	          while (1) {
	            var $48;
	            var $49;
	            var $t_03;
	            var $fscr_02;
	            var $57 = HEAP32[($t_03 << 3 >> 2) + $23$s2];
	            if ($49 >>> 0 > 1) {
	              var $_pn_in_in = HEAP32[HEAP32[$48 + ($id << 2) >> 2] + ($f_05 << 2) >> 2] + $57 | 0;
	            } else {
	              var $_pn_in_in = HEAP32[HEAP32[$48 + ($f_05 << 2) >> 2] + ($57 << 2) >> 2] + $id | 0;
	            }
	            var $_pn_in_in;
	            var $71 = ((HEAPF32[(($t_03 << 3) + 4 >> 2) + $23$s2] & -1) + 1023 >> 10) - (HEAPU8[$_pn_in_in] & 255) | 0;
	            var $72 = HEAP32[$20 >> 2];
	            var $73 = _logmath_add($72, $fscr_02, $71);
	            var $74 = $t_03 + 1 | 0;
	            if (($74 | 0) == ($n_top | 0)) {
	              break;
	            }
	            var $fscr_02 = $73;
	            var $t_03 = $74;
	            var $49 = HEAP32[$17 >> 2];
	            var $48 = HEAP32[$18 >> 2];
	          }
	          var $fscr_0_lcssa = $73;
	          var $76 = HEAP32[$14 >> 2];
	        } else {
	          var $fscr_0_lcssa = $47;
	          var $76 = $21;
	        }
	        var $76;
	        var $fscr_0_lcssa;
	        var $77 = $scr_04 - $fscr_0_lcssa | 0;
	        var $78 = $f_05 + 1 | 0;
	        if ($78 >>> 0 >= $76 >>> 0) {
	          var $scr_0_lcssa = $77;
	          break $_$93;
	        }
	        var $scr_04 = $77;
	        var $f_05 = $78;
	        var $21 = $76;
	      }
	    }
	  } while (0);
	  var $scr_0_lcssa;
	  var $82 = ($scr_0_lcssa | 0) / (HEAP32[$s + 36 >> 2] | 0) & -1;
	  var $_ = ($82 | 0) > 32767 ? 32767 : $82;
	  var $scr_2 = ($_ | 0) < -32768 ? -32768 : $_;
	  return $scr_2;
	  return null;
	}

	_senone_eval["X"] = 1;

	function _ngram_search_init($config, $acmod, $dict, $d2p) {
	  var $config_idx3$s2;
	  var $33$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $lm = __stackBase__;
	  var $1 = ___ckd_calloc__(1, 528, STRING_TABLE.__str607 | 0, 147), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $3 = $1;
	  _ps_search_init($3, _ngram_funcs, $config, $acmod, $dict, $d2p);
	  var $5 = HEAP32[$acmod + 20 >> 2];
	  var $7 = HEAP32[$5 + 12 >> 2];
	  var $11 = HEAP32[HEAP32[$acmod + 24 >> 2] >> 2];
	  var $13 = HEAP32[$5 + 60 >> 2];
	  var $14 = _hmm_context_init($7, $11, $13);
	  HEAP32[$1$s2 + 15] = $14;
	  var $17 = ($14 | 0) == 0;
	  $_$113 : do {
	    if ($17) {
	      var $22 = HEAP32[HEAP32[$1$s2] + 20 >> 2];
	      FUNCTION_TABLE[$22]($3);
	      var $_0 = 0;
	    } else {
	      var $24 = _listelem_alloc_init(92);
	      HEAP32[$1$s2 + 17] = $24;
	      var $27 = _listelem_alloc_init(92);
	      HEAP32[$1$s2 + 18] = $27;
	      var $30 = _listelem_alloc_init(44);
	      HEAP32[$1$s2 + 19] = $30;
	      _ngram_search_calc_beams($2);
	      var $33$s2 = ($dict + 20 | 0) >> 2;
	      var $34 = HEAP32[$33$s2];
	      var $35 = ___ckd_calloc__($34, 4, STRING_TABLE.__str607 | 0, 164);
	      var $36 = $35;
	      HEAP32[$1$s2 + 26] = $36;
	      var $39 = HEAP32[$33$s2];
	      var $40 = ___ckd_calloc__($39, 4, STRING_TABLE.__str607 | 0, 166);
	      var $41 = $40;
	      HEAP32[$1$s2 + 53] = $41;
	      var $46 = (HEAP32[$33$s2] + 31 | 0) / 32 & -1;
	      var $47 = ___ckd_calloc__($46, 4, STRING_TABLE.__str607 | 0, 167);
	      var $48 = $47;
	      HEAP32[$1$s2 + 27] = $48;
	      var $51 = HEAP32[$33$s2];
	      var $52 = ___ckd_calloc__($51, 12, STRING_TABLE.__str607 | 0, 169);
	      var $53 = $52;
	      HEAP32[$1$s2 + 40] = $53;
	      var $config_idx3$s2 = ($config + 4 | 0) >> 2;
	      var $config_idx3_val = HEAP32[$config_idx3$s2];
	      var $56 = _cmd_ln_int_r($config_idx3_val, STRING_TABLE.__str1912760 | 0);
	      var $58 = $1 + 184 | 0;
	      HEAP32[$58 >> 2] = $56;
	      var $59 = ___ckd_calloc__($56, 32, STRING_TABLE.__str607 | 0, 175);
	      var $60 = $59;
	      HEAP32[$1$s2 + 44] = $60;
	      var $64 = HEAP32[$58 >> 2] * 20 | 0;
	      HEAP32[$1$s2 + 49] = $64;
	      var $67 = ___ckd_calloc__($64, 4, STRING_TABLE.__str607 | 0, 179);
	      var $68 = $67;
	      HEAP32[$1$s2 + 47] = $68;
	      HEAP32[$1$s2 + 50] = 256;
	      var $73 = ___ckd_calloc__(257, 4, STRING_TABLE.__str607 | 0, 182);
	      HEAP32[$1$s2 + 52] = $73 + 4 | 0;
	      var $78 = HEAP32[$33$s2];
	      var $79 = ___ckd_calloc_2d__(2, $78, 4, STRING_TABLE.__str607 | 0, 187);
	      var $80 = $79;
	      HEAP32[$1$s2 + 35] = $80;
	      var $config_idx6_val = HEAP32[$config_idx3$s2];
	      var $83 = _cmd_ln_str_r($config_idx6_val, STRING_TABLE.__str2182787 | 0);
	      var $84 = ($83 | 0) == 0;
	      do {
	        if ($84) {
	          var $config_idx4_val = HEAP32[$config_idx3$s2];
	          var $99 = _cmd_ln_str_r($config_idx4_val, STRING_TABLE.__str2162785 | 0);
	          if (($99 | 0) == 0) {
	            var $_pre_phi3 = $1 + 56 | 0;
	            __label__ = 15;
	            break;
	          }
	          var $103 = HEAP32[$acmod + 4 >> 2];
	          var $104 = _ngram_model_read($config, $99, $103);
	          HEAP32[$lm >> 2] = $104;
	          if (($104 | 0) == 0) {
	            __E__pr_header(STRING_TABLE.__str607 | 0, 208, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str8615 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $99, tempInt));
	            __label__ = 24;
	            break;
	          }
	          var $108 = _ngram_model_set_init($lm, _ngram_search_init_name, 1);
	          var $110 = $1 + 56 | 0;
	          HEAP32[$110 >> 2] = $108;
	          if (($108 | 0) != 0) {
	            var $_pre_phi3 = $110;
	            __label__ = 15;
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str607 | 0, 215, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str9616 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          __label__ = 24;
	          break;
	        } else {
	          var $87 = HEAP32[$acmod + 4 >> 2];
	          var $88 = _ngram_model_set_read($config, $83, $87);
	          var $90 = $1 + 56 | 0;
	          HEAP32[$90 >> 2] = $88;
	          if (($88 | 0) == 0) {
	            __E__pr_header(STRING_TABLE.__str607 | 0, 193, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str4611 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $83, tempInt));
	            __label__ = 24;
	            break;
	          }
	          var $config_idx5_val = HEAP32[$config_idx3$s2];
	          var $94 = _cmd_ln_str_r($config_idx5_val, STRING_TABLE.__str2202789 | 0);
	          if (($94 | 0) == 0) {
	            var $_pre_phi3 = $90;
	            __label__ = 15;
	            break;
	          }
	          var $97 = HEAP32[$90 >> 2];
	          _ngram_model_set_select($97, $94);
	          var $_pre_phi3 = $90;
	          __label__ = 15;
	          break;
	        }
	      } while (0);
	      $_$130 : do {
	        if (__label__ == 15) {
	          var $_pre_phi3;
	          var $113 = HEAP32[$_pre_phi3 >> 2];
	          var $114 = ($113 | 0) == 0;
	          do {
	            if (!$114) {
	              var $116 = _ngram_wid($113, STRING_TABLE.__str63982 | 0);
	              var $_idx_val = HEAP32[HEAP32[$_pre_phi3 >> 2] + 52 >> 2];
	              var $118 = _ngram_unknown_wid($_idx_val);
	              if (($116 | 0) != ($118 | 0)) {
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str607 | 0, 221, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str11618 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	              break $_$130;
	            }
	          } while (0);
	          _ngram_search_update_widmap($2);
	          var $config_idx2_val = HEAP32[$config_idx3$s2];
	          var $122 = _cmd_ln_int_r($config_idx2_val, STRING_TABLE.__str1832752 | 0);
	          if (($122 | 0) != 0) {
	            _ngram_fwdtree_init($2);
	            HEAP8[$1 + 64 | 0] = 1;
	            var $126 = $1 + 308 | 0;
	            var $127 = $126;
	            HEAP32[$126 >> 2] = STRING_TABLE.__str13620 | 0;
	            _ptmr_init($127);
	          }
	          var $config_idx1_val = HEAP32[$config_idx3$s2];
	          var $130 = _cmd_ln_int_r($config_idx1_val, STRING_TABLE.__str1852754 | 0);
	          if (($130 | 0) != 0) {
	            _ngram_fwdflat_init($2);
	            HEAP8[$1 + 65 | 0] = 1;
	            var $134 = $1 + 360 | 0;
	            var $135 = $134;
	            HEAP32[$134 >> 2] = STRING_TABLE.__str15622 | 0;
	            _ptmr_init($135);
	          }
	          var $config_idx_val = HEAP32[$config_idx3$s2];
	          var $138 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1872756 | 0);
	          if (($138 | 0) == 0) {
	            var $_0 = $3;
	            break $_$113;
	          }
	          HEAP8[$1 + 66 | 0] = 1;
	          var $142 = $1 + 412 | 0;
	          var $143 = $142;
	          HEAP32[$142 >> 2] = STRING_TABLE.__str17624 | 0;
	          _ptmr_init($143);
	          var $_0 = $3;
	          break $_$113;
	        }
	      } while (0);
	      _ngram_search_free($3);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_search_init["X"] = 1;

	function _ngram_search_calc_beams($ngs) {
	  var $_idx18$s2;
	  var $5$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var $5$s2 = (HEAP32[$ngs$s2 + 3] + 4 | 0) >> 2;
	  var $6 = HEAP32[$5$s2];
	  var $_idx18$s2 = (HEAP32[$ngs$s2 + 2] + 4 | 0) >> 2;
	  var $_idx18_val = HEAP32[$_idx18$s2];
	  var $7 = _cmd_ln_float_r($_idx18_val, STRING_TABLE.__str1552724 | 0);
	  var $8 = _logmath_log($6, $7);
	  var $9 = $8 >> 10;
	  HEAP32[$ngs$s2 + 117] = $9;
	  var $11 = HEAP32[$5$s2];
	  var $_idx17_val = HEAP32[$_idx18$s2];
	  var $12 = _cmd_ln_float_r($_idx17_val, STRING_TABLE.__str1582727 | 0);
	  var $13 = _logmath_log($11, $12);
	  var $14 = $13 >> 10;
	  HEAP32[$ngs$s2 + 120] = $14;
	  var $16 = HEAP32[$5$s2];
	  var $_idx16_val = HEAP32[$_idx18$s2];
	  var $17 = _cmd_ln_float_r($_idx16_val, STRING_TABLE.__str1612730 | 0);
	  var $18 = _logmath_log($16, $17);
	  var $19 = $18 >> 10;
	  HEAP32[$ngs$s2 + 119] = $19;
	  var $21 = HEAP32[$5$s2];
	  var $_idx15_val = HEAP32[$_idx18$s2];
	  var $22 = _cmd_ln_float_r($_idx15_val, STRING_TABLE.__str1632732 | 0);
	  var $23 = _logmath_log($21, $22);
	  var $24 = $23 >> 10;
	  HEAP32[$ngs$s2 + 121] = $24;
	  var $26 = HEAP32[$5$s2];
	  var $_idx14_val = HEAP32[$_idx18$s2];
	  var $27 = _cmd_ln_float_r($_idx14_val, STRING_TABLE.__str1662735 | 0);
	  var $28 = _logmath_log($26, $27);
	  var $29 = $28 >> 10;
	  HEAP32[$ngs$s2 + 122] = $29;
	  var $31 = HEAP32[$5$s2];
	  var $_idx13_val = HEAP32[$_idx18$s2];
	  var $32 = _cmd_ln_float_r($_idx13_val, STRING_TABLE.__str1682737 | 0);
	  var $33 = _logmath_log($31, $32);
	  var $34 = $33 >> 10;
	  HEAP32[$ngs$s2 + 123] = $34;
	  var $36 = HEAP32[$5$s2];
	  var $_idx12_val = HEAP32[$_idx18$s2];
	  var $37 = _cmd_ln_float_r($_idx12_val, STRING_TABLE.__str1712740 | 0);
	  var $38 = _logmath_log($36, $37);
	  var $39 = $38 >> 10;
	  HEAP32[$ngs$s2 + 124] = $39;
	  var $_idx1_val = HEAP32[$_idx18$s2];
	  var $41 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str1942763 | 0);
	  HEAP32[$ngs$s2 + 130] = $41;
	  var $_idx_val = HEAP32[$_idx18$s2];
	  var $43 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1962765 | 0);
	  HEAP32[$ngs$s2 + 131] = $43;
	  var $45 = HEAP32[$5$s2];
	  var $_idx11_val = HEAP32[$_idx18$s2];
	  var $46 = _cmd_ln_float_r($_idx11_val, STRING_TABLE.__str2352804 | 0);
	  var $48 = $46;
	  var $49 = _logmath_log($45, $48);
	  var $50 = $49 >> 10;
	  HEAP32[$ngs$s2 + 127] = $50;
	  var $52 = HEAP32[$5$s2];
	  var $_idx10_val = HEAP32[$_idx18$s2];
	  var $53 = _cmd_ln_float_r($_idx10_val, STRING_TABLE.__str2382807 | 0);
	  var $55 = $53;
	  var $56 = _logmath_log($52, $55);
	  var $57 = $56 >> 10;
	  HEAP32[$ngs$s2 + 128] = $57;
	  var $59 = HEAP32[$5$s2];
	  var $_idx9_val = HEAP32[$_idx18$s2];
	  var $60 = _cmd_ln_float_r($_idx9_val, STRING_TABLE.__str2412810 | 0);
	  var $62 = $60;
	  var $63 = _logmath_log($59, $62);
	  var $64 = $63 >> 10;
	  var $65 = $ngs + 516 | 0;
	  HEAP32[$65 >> 2] = $64;
	  var $66 = HEAP32[$5$s2];
	  var $_idx8_val = HEAP32[$_idx18$s2];
	  var $67 = _cmd_ln_float_r($_idx8_val, STRING_TABLE.__str2452814 | 0);
	  var $69 = $67;
	  var $70 = _logmath_log($66, $69);
	  var $72 = ($70 >> 10) + $64 | 0;
	  HEAP32[$ngs$s2 + 126] = $72;
	  var $74 = HEAP32[$65 >> 2];
	  var $75 = HEAP32[$5$s2];
	  var $_idx7_val = HEAP32[$_idx18$s2];
	  var $76 = _cmd_ln_float_r($_idx7_val, STRING_TABLE.__str2482817 | 0);
	  var $78 = $76;
	  var $79 = _logmath_log($75, $78);
	  var $81 = ($79 >> 10) + $74 | 0;
	  HEAP32[$ngs$s2 + 125] = $81;
	  var $_idx6_val = HEAP32[$_idx18$s2];
	  var $83 = _cmd_ln_float_r($_idx6_val, STRING_TABLE.__str2262795 | 0);
	  var $84 = $83;
	  var $_idx5_val = HEAP32[$_idx18$s2];
	  var $85 = _cmd_ln_float_r($_idx5_val, STRING_TABLE.__str2232792 | 0);
	  HEAPF32[$ngs$s2 + 61] = $84 / $85;
	  var $_idx4_val = HEAP32[$_idx18$s2];
	  var $89 = _cmd_ln_float_r($_idx4_val, STRING_TABLE.__str2292798 | 0);
	  var $90 = $89;
	  var $_idx3_val = HEAP32[$_idx18$s2];
	  var $91 = _cmd_ln_float_r($_idx3_val, STRING_TABLE.__str2232792 | 0);
	  HEAPF32[$ngs$s2 + 65] = $90 / $91;
	  var $_idx2_val = HEAP32[$_idx18$s2];
	  var $95 = _cmd_ln_float_r($_idx2_val, STRING_TABLE.__str2322801 | 0);
	  HEAPF32[$ngs$s2 + 66] = 1 / $95;
	  return;
	  return;
	}

	_ngram_search_calc_beams["X"] = 1;

	function _ngram_search_update_widmap($ngs) {
	  var $2 = HEAP32[$ngs + 40 >> 2];
	  var $3 = ___ckd_calloc__($2, 4, STRING_TABLE.__str607 | 0, 87);
	  var $4 = $3;
	  var $5 = ($2 | 0) > 0;
	  $_$147 : do {
	    if ($5) {
	      var $6 = $ngs + 16 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $12 = HEAP32[(HEAP32[HEAP32[$6 >> 2] + 8 >> 2] >> 2) + ($i_01 * 5 | 0)];
	        var $13 = ($i_01 << 2) + $4 | 0;
	        HEAP32[$13 >> 2] = $12;
	        var $14 = $i_01 + 1 | 0;
	        if (($14 | 0) == ($2 | 0)) {
	          break $_$147;
	        }
	        var $i_01 = $14;
	      }
	    }
	  } while (0);
	  var $16 = HEAP32[$ngs + 56 >> 2];
	  _ngram_model_set_map_words($16, $4, $2);
	  _ckd_free($3);
	  return;
	  return;
	}

	function _senone_mixw_read($s, $file_name, $lmath) {
	  var $63$s2;
	  var $41$s2;
	  var $36$s2;
	  var $30$s2;
	  var $i$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 24;
	  var $eofchk = __stackBase__;
	  var $byteswap = __stackBase__ + 4;
	  var $chksum = __stackBase__ + 8;
	  var $i = __stackBase__ + 12, $i$s2 = $i >> 2;
	  var $argname = __stackBase__ + 16;
	  var $argval = __stackBase__ + 20;
	  __E__pr_info_header(STRING_TABLE.__str556 | 0, 160);
	  __E__pr_info(STRING_TABLE.__str14570 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str556 | 0, 163, STRING_TABLE.__str232533 | 0);
	    __E__fatal_sys_error(STRING_TABLE.__str17573 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  } else {
	    var $5 = _bio_readhdr($1, $argname, $argval, $byteswap);
	    if (($5 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str556 | 0, 167, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str101199 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      HEAP32[$i$s2] = 0;
	      var $7 = HEAP32[$argname >> 2];
	      var $8 = HEAP32[$7 >> 2];
	      var $_pre = HEAP32[$argval >> 2];
	      if (($8 | 0) == 0) {
	        var $chksum_present_0_lcssa = 0;
	      } else {
	        var $chksum_present_09 = 0;
	        var $12 = $8;
	        var $11 = 0;
	        while (1) {
	          var $11;
	          var $12;
	          var $chksum_present_09;
	          var $13 = _strcmp($12, STRING_TABLE.__str82348 | 0);
	          var $14 = ($13 | 0) == 0;
	          do {
	            if ($14) {
	              var $16 = ($11 << 2) + $_pre | 0;
	              var $17 = HEAP32[$16 >> 2];
	              var $18 = _strcmp($17, STRING_TABLE.__str2392808 | 0);
	              if (($18 | 0) == 0) {
	                var $chksum_present_1 = $chksum_present_09;
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str556 | 0, 174, STRING_TABLE.__str212436 | 0);
	              var $21 = HEAP32[$16 >> 2];
	              __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $21, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str2392808 | 0, tempInt));
	              var $chksum_present_1 = $chksum_present_09;
	            } else {
	              var $23 = _strcmp($12, STRING_TABLE.__str92349 | 0);
	              var $_chksum_present_0 = ($23 | 0) == 0 ? 1 : $chksum_present_09;
	              var $chksum_present_1 = $_chksum_present_0;
	            }
	          } while (0);
	          var $chksum_present_1;
	          var $26 = $11 + 1 | 0;
	          var $28 = HEAP32[$7 + ($26 << 2) >> 2];
	          if (($28 | 0) == 0) {
	            break;
	          }
	          var $chksum_present_09 = $chksum_present_1;
	          var $12 = $28;
	          var $11 = $26;
	        }
	        HEAP32[$i$s2] = $26;
	        var $chksum_present_0_lcssa = $chksum_present_1;
	      }
	      var $chksum_present_0_lcssa;
	      _bio_hdrarg_free($7, $_pre);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $30 = $s + 8 | 0, $30$s2 = $30 >> 2;
	      var $31 = $30;
	      var $32 = HEAPU32[$byteswap >> 2];
	      var $33 = _bio_fread($31, 1, $1, $32, $chksum);
	      var $34 = ($33 | 0) == 1;
	      do {
	        if ($34) {
	          var $36 = $s + 12 | 0, $36$s2 = $36 >> 2;
	          var $37 = $36;
	          var $38 = _bio_fread($37, 1, $1, $32, $chksum);
	          if (($38 | 0) != 1) {
	            break;
	          }
	          var $41 = $s + 16 | 0, $41$s2 = $41 >> 2;
	          var $42 = $41;
	          var $43 = _bio_fread($42, 1, $1, $32, $chksum);
	          if (($43 | 0) != 1) {
	            break;
	          }
	          var $46 = $i;
	          var $47 = _bio_fread($46, 1, $1, $32, $chksum);
	          if (($47 | 0) != 1) {
	            break;
	          }
	          var $51 = HEAP32[$i$s2];
	          if (($51 | 0) == (HEAP32[$36$s2] * HEAP32[$30$s2] * HEAP32[$41$s2] | 0)) {
	            var $63$s2 = ($s + 24 | 0) >> 2;
	            var $64 = HEAPF32[$63$s2];
	            if ($64 > 0 & $64 < 1) {
	              __E__pr_info_header(STRING_TABLE.__str556 | 0, 211);
	              __E__pr_info(STRING_TABLE.__str27583 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 10, tempInt));
	              var $71 = $s + 20 | 0;
	              if (HEAPU32[$71 >> 2] >>> 0 > 1) {
	                __E__pr_info_header(STRING_TABLE.__str556 | 0, 218);
	                __E__pr_info(STRING_TABLE.__str28584 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                var $75 = HEAP32[$30$s2];
	                var $76 = HEAP32[$36$s2];
	                var $77 = HEAP32[$41$s2];
	                var $78 = ___ckd_calloc_3d__($75, $76, $77, 1, STRING_TABLE.__str556 | 0, 221);
	                var $79 = $78;
	                HEAP32[$s >> 2] = $79;
	              } else {
	                __E__pr_info_header(STRING_TABLE.__str556 | 0, 224);
	                __E__pr_info(STRING_TABLE.__str29585 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                var $82 = HEAP32[$36$s2];
	                var $83 = HEAP32[$41$s2];
	                var $84 = HEAP32[$30$s2];
	                var $85 = ___ckd_calloc_3d__($82, $83, $84, 1, STRING_TABLE.__str556 | 0, 227);
	                var $86 = $85;
	                HEAP32[$s >> 2] = $86;
	              }
	              var $89 = HEAP32[$41$s2];
	              var $90 = ___ckd_calloc__($89, 4, STRING_TABLE.__str556 | 0, 231);
	              var $91 = $90;
	              var $92 = $s | 0;
	              var $n_err_0 = 0;
	              var $storemerge1 = 0;
	              $_$32 : while (1) {
	                var $storemerge1;
	                var $n_err_0;
	                if ($storemerge1 >>> 0 < HEAPU32[$30$s2] >>> 0) {
	                  var $n_err_1 = $n_err_0;
	                  var $f_0 = 0;
	                  while (1) {
	                    var $f_0;
	                    var $n_err_1;
	                    if ($f_0 >>> 0 >= HEAPU32[$36$s2] >>> 0) {
	                      var $n_err_0 = $n_err_1;
	                      var $storemerge1 = $storemerge1 + 1 | 0;
	                      continue $_$32;
	                    }
	                    var $99 = HEAP32[$41$s2];
	                    var $100 = _bio_fread($90, $99, $1, $32, $chksum);
	                    if (($100 | 0) == (HEAP32[$41$s2] | 0)) {
	                      var $105 = _vector_sum_norm($91, $100);
	                      var $n_err_2 = ($105 <= 0 & 1) + $n_err_1 | 0;
	                      var $107 = HEAP32[$41$s2];
	                      var $109 = HEAPF32[$63$s2];
	                      _vector_floor($91, $107, $109);
	                      var $110 = HEAP32[$41$s2];
	                      var $111 = _vector_sum_norm($91, $110);
	                      var $113 = (HEAP32[$41$s2] | 0) == 0;
	                      $_$42 : do {
	                        if (!$113) {
	                          var $c_03 = 0;
	                          while (1) {
	                            var $c_03;
	                            var $116 = HEAPF32[$91 + ($c_03 << 2) >> 2];
	                            var $117 = _logmath_log($lmath, $116);
	                            var $118 = 511 - $117 | 0;
	                            var $121 = ($118 | 0) < 261120;
	                            if (HEAPU32[$71 >> 2] >>> 0 > 1) {
	                              if ($121) {
	                                var $126 = $118 >>> 10 & 255;
	                              } else {
	                                var $126 = -1;
	                              }
	                              var $126;
	                              HEAP8[HEAP32[HEAP32[HEAP32[$92 >> 2] + ($storemerge1 << 2) >> 2] + ($f_0 << 2) >> 2] + $c_03 | 0] = $126;
	                            } else {
	                              if ($121) {
	                                var $137 = $118 >>> 10 & 255;
	                              } else {
	                                var $137 = -1;
	                              }
	                              var $137;
	                              HEAP8[HEAP32[HEAP32[HEAP32[$92 >> 2] + ($f_0 << 2) >> 2] + ($c_03 << 2) >> 2] + $storemerge1 | 0] = $137;
	                            }
	                            var $145 = $c_03 + 1 | 0;
	                            if ($145 >>> 0 >= HEAPU32[$41$s2] >>> 0) {
	                              break $_$42;
	                            }
	                            var $c_03 = $145;
	                          }
	                        }
	                      } while (0);
	                      var $n_err_1 = $n_err_2;
	                      var $f_0 = $f_0 + 1 | 0;
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str556 | 0, 241, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str341140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                    }
	                  }
	                } else {
	                  HEAP32[$i$s2] = $storemerge1;
	                  if (($n_err_0 | 0) > 0) {
	                    __E__pr_header(STRING_TABLE.__str556 | 0, 265, STRING_TABLE.__str212436 | 0);
	                    __E__pr_warn(STRING_TABLE.__str351141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_err_0, tempInt));
	                  }
	                  _ckd_free($90);
	                  if (($chksum_present_0_lcssa | 0) != 0) {
	                    var $157 = HEAP32[$chksum >> 2];
	                    _bio_verify_chksum($1, $32, $157);
	                  }
	                  var $159 = _fread($eofchk, 1, 1, $1);
	                  if (($159 | 0) == 1) {
	                    __E__pr_header(STRING_TABLE.__str556 | 0, 273, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str361142 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                  } else {
	                    var $163 = _fclose($1);
	                    __E__pr_info_header(STRING_TABLE.__str556 | 0, 277);
	                    var $164 = HEAP32[$30$s2];
	                    var $165 = HEAP32[$36$s2];
	                    var $166 = HEAP32[$41$s2];
	                    __E__pr_info(STRING_TABLE.__str33589 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $164, HEAP32[tempInt + 4 >> 2] = $165, HEAP32[tempInt + 8 >> 2] = $166, tempInt));
	                    STACKTOP = __stackBase__;
	                    return;
	                  }
	                }
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str556 | 0, 208, STRING_TABLE.__str72422 | 0);
	              var $69 = HEAPF32[$63$s2];
	              __E__die_error(STRING_TABLE.__str26582 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $69, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str556 | 0, 198, STRING_TABLE.__str72422 | 0);
	            var $59 = HEAP32[$30$s2];
	            var $60 = HEAP32[$36$s2];
	            var $61 = HEAP32[$41$s2];
	            __E__die_error(STRING_TABLE.__str25581 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $51, HEAP32[tempInt + 8 >> 2] = $59, HEAP32[tempInt + 12 >> 2] = $60, HEAP32[tempInt + 16 >> 2] = $61, tempInt));
	          }
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str556 | 0, 195, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str311137 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    }
	  }
	  return;
	}

	_senone_mixw_read["X"] = 1;

	function _ngram_search_exit_score($ngs, $pbe, $rcphone) {
	  var $2 = HEAP16[$pbe + 30 >> 1];
	  if ($2 << 16 >> 16 == -1) {
	    var $_0_in = $pbe + 12 | 0;
	  } else {
	    var $_0_in = ((HEAP16[HEAP32[(HEAP32[HEAP32[HEAP32[$ngs + 20 >> 2] + 16 >> 2] + (HEAP16[$pbe + 28 >> 1] << 16 >> 16 << 2) >> 2] + 4 >> 2) + (($2 << 16 >> 16) * 3 | 0)] + ($rcphone << 1) >> 1] << 16 >> 16) + HEAP32[$pbe + 16 >> 2] << 2) + HEAP32[$ngs + 188 >> 2] | 0;
	  }
	  var $_0_in;
	  return HEAP32[$_0_in >> 2];
	  return null;
	}

	function _ngram_search_free($search) {
	  var $search$s2 = $search >> 2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $search;
	  _ps_search_deinit($search);
	  if (HEAP8[$search + 64 | 0] << 24 >> 24 != 0) {
	    _ngram_fwdtree_deinit($1);
	  }
	  if (HEAP8[$1 + 65 | 0] << 24 >> 24 != 0) {
	    _ngram_fwdflat_deinit($1);
	  }
	  if (HEAP8[$1 + 66 | 0] << 24 >> 24 != 0) {
	    var $20 = HEAP32[$search$s2 + 116] | 0;
	    var $_idx_val = HEAP32[HEAP32[$search$s2 + 2] + 4 >> 2];
	    var $23 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	    var $25 = $20 / ($23 | 0);
	    __E__pr_info_header(STRING_TABLE.__str607 | 0, 317);
	    var $26 = $search + 412 | 0;
	    var $28 = $26 + 20 | 0;
	    var $29 = (tempDoubleI32[0] = HEAP32[$28 >> 2], tempDoubleI32[1] = HEAP32[$28 + 4 >> 2], tempDoubleF64[0]);
	    var $30 = $29 / $25;
	    __E__pr_info(STRING_TABLE.__str20627 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $29, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $30, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	    __E__pr_info_header(STRING_TABLE.__str607 | 0, 320);
	    var $32 = $26 + 28 | 0;
	    var $33 = (tempDoubleI32[0] = HEAP32[$32 >> 2], tempDoubleI32[1] = HEAP32[$32 + 4 >> 2], tempDoubleF64[0]);
	    var $34 = $33 / $25;
	    __E__pr_info(STRING_TABLE.__str21628 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $33, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $34, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  }
	  var $38 = HEAP32[$search$s2 + 15];
	  _hmm_context_free($38);
	  var $41 = HEAP32[$search$s2 + 17];
	  _listelem_alloc_free($41);
	  var $44 = HEAP32[$search$s2 + 18];
	  _listelem_alloc_free($44);
	  var $47 = HEAP32[$search$s2 + 19];
	  _listelem_alloc_free($47);
	  var $50 = HEAP32[$search$s2 + 14];
	  _ngram_model_free($50);
	  var $54 = HEAP32[$search$s2 + 26];
	  _ckd_free($54);
	  var $58 = HEAP32[$search$s2 + 53];
	  _ckd_free($58);
	  var $62 = HEAP32[$search$s2 + 27];
	  _ckd_free($62);
	  var $65 = HEAP32[$search$s2 + 44];
	  _ckd_free($65);
	  var $68 = HEAP32[$search$s2 + 47];
	  _ckd_free($68);
	  var $71 = HEAP32[$search$s2 + 52];
	  if (($71 | 0) != 0) {
	    var $75 = $71 - 4 | 0;
	    _ckd_free($75);
	  }
	  var $79 = HEAP32[$search$s2 + 35];
	  _ckd_free_2d($79);
	  var $83 = HEAP32[$search$s2 + 40];
	  _ckd_free($83);
	  var $84 = $search;
	  _ckd_free($84);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_search_free["X"] = 1;

	function _ngram_search_mark_bptable($ngs, $frame_idx) {
	  var $6$s2;
	  var $1$s2;
	  var $1$s2 = ($ngs + 200 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if (($2 | 0) > ($frame_idx | 0)) {
	    var $27 = HEAP32[$ngs + 208 >> 2];
	  } else {
	    var $5 = $2 << 1;
	    HEAP32[$1$s2] = $5;
	    var $6$s2 = ($ngs + 208 | 0) >> 2;
	    var $9 = HEAP32[$6$s2] - 4 | 0;
	    var $11 = $2 << 3 | 4;
	    var $12 = ___ckd_realloc__($9, $11, STRING_TABLE.__str607 | 0, 350);
	    var $13 = $12;
	    HEAP32[$6$s2] = $13;
	    var $14 = $ngs + 216 | 0;
	    var $15 = HEAP32[$14 >> 2];
	    if (($15 | 0) == 0) {
	      var $24 = $13;
	    } else {
	      var $18 = $15;
	      var $20 = HEAP32[$1$s2] << 2;
	      var $21 = ___ckd_realloc__($18, $20, STRING_TABLE.__str607 | 0, 354);
	      var $22 = $21;
	      HEAP32[$14 >> 2] = $22;
	      var $24 = HEAP32[$6$s2];
	    }
	    var $24;
	    var $25 = $24 + 4 | 0;
	    HEAP32[$6$s2] = $25;
	    var $27 = $25;
	  }
	  var $27;
	  var $29 = HEAP32[$ngs + 180 >> 2];
	  HEAP32[$27 + ($frame_idx << 2) >> 2] = $29;
	  return;
	  return;
	}

	function _ngram_search_save_bp($ngs, $frame_idx, $w, $score, $path, $rc) {
	  var $16$s2;
	  var $7$s2;
	  var $101$s1;
	  var $77$s2;
	  var $75$s2;
	  var $62$s2;
	  var $57$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $ngs + 212 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($w << 2) >> 2];
	  var $5 = ($4 | 0) == -1;
	  do {
	    if ($5) {
	      var $57$s2 = ($ngs + 180 | 0) >> 2;
	      var $58 = HEAP32[$57$s2];
	      if (($58 | 0) == -1) {
	        __E__pr_header(STRING_TABLE.__str607 | 0, 456, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str23630 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      } else {
	        var $62$s2 = ($ngs + 184 | 0) >> 2;
	        var $63 = HEAP32[$62$s2];
	        if (($58 | 0) >= ($63 | 0)) {
	          var $66 = $63 << 1;
	          HEAP32[$62$s2] = $66;
	          var $67 = $ngs + 176 | 0;
	          var $69 = HEAP32[$67 >> 2];
	          var $70 = $63 << 6;
	          var $71 = ___ckd_realloc__($69, $70, STRING_TABLE.__str607 | 0, 465);
	          var $72 = $71;
	          HEAP32[$67 >> 2] = $72;
	          __E__pr_info_header(STRING_TABLE.__str607 | 0, 466);
	          var $73 = HEAP32[$62$s2];
	          __E__pr_info(STRING_TABLE.__str24631 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $73, tempInt));
	        }
	        var $75$s2 = ($ngs + 192 | 0) >> 2;
	        var $77$s2 = ($ngs + 196 | 0) >> 2;
	        var $78 = HEAP32[$77$s2];
	        if ((HEAP32[$75$s2] | 0) >= ($78 - HEAP32[HEAP32[HEAP32[$ngs$s2 + 3] + 20 >> 2] + 4 >> 2] | 0)) {
	          var $88 = $78 << 1;
	          HEAP32[$77$s2] = $88;
	          var $89 = $ngs + 188 | 0;
	          var $91 = HEAP32[$89 >> 2];
	          var $92 = $78 << 3;
	          var $93 = ___ckd_realloc__($91, $92, STRING_TABLE.__str607 | 0, 473);
	          var $94 = $93;
	          HEAP32[$89 >> 2] = $94;
	          __E__pr_info_header(STRING_TABLE.__str607 | 0, 474);
	          var $95 = HEAP32[$77$s2];
	          __E__pr_info(STRING_TABLE.__str25632 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $95, tempInt));
	        }
	        var $96 = HEAP32[$57$s2];
	        var $98 = ($w << 2) + HEAP32[$1 >> 2] | 0;
	        HEAP32[$98 >> 2] = $96;
	        var $99 = HEAP32[$57$s2];
	        var $101 = HEAP32[$ngs$s2 + 44], $101$s1 = $101 >> 1;
	        var $102 = ($99 << 5) + $101 + 4 | 0;
	        HEAP32[$102 >> 2] = $w;
	        HEAP16[($99 << 5 >> 1) + $101$s1] = $frame_idx & 65535;
	        var $105 = ($99 << 5) + $101 + 8 | 0;
	        HEAP32[$105 >> 2] = $path;
	        var $106 = ($99 << 5) + $101 + 12 | 0;
	        HEAP32[$106 >> 2] = $score;
	        var $107 = HEAP32[$75$s2];
	        var $108 = ($99 << 5) + $101 + 16 | 0;
	        HEAP32[$108 >> 2] = $107;
	        HEAP8[($99 << 5) + $101 + 2 | 0] = 1;
	        if ((HEAP32[$57$s2] | 0) == ($path | 0)) {
	          ___assert_func(STRING_TABLE.__str607 | 0, 485, STRING_TABLE.___func___ngram_search_save_bp | 0, STRING_TABLE.__str26633 | 0);
	        }
	        var $114 = $ngs + 16 | 0;
	        var $117 = HEAP32[HEAP32[$114 >> 2] + 8 >> 2];
	        var $124 = HEAP16[HEAP32[($117 + 4 >> 2) + ($w * 5 | 0)] + (HEAP32[($117 + 8 >> 2) + ($w * 5 | 0)] - 1 << 1) >> 1];
	        HEAP16[(($99 << 5) + 28 >> 1) + $101$s1] = $124;
	        var $128 = HEAP32[HEAP32[$114 >> 2] + 8 >> 2];
	        var $130 = HEAP32[($128 + 8 >> 2) + ($w * 5 | 0)];
	        var $131 = ($130 | 0) == 1;
	        do {
	          if ($131) {
	            HEAP16[(($99 << 5) + 30 >> 1) + $101$s1] = -1;
	            HEAP32[$108 >> 2] = -1;
	            var $rcsize_089 = 0;
	          } else {
	            var $138 = HEAP16[HEAP32[($128 + 4 >> 2) + ($w * 5 | 0)] + ($130 - 2 << 1) >> 1];
	            HEAP16[(($99 << 5) + 30 >> 1) + $101$s1] = $138;
	            var $149 = HEAP32[(HEAP32[HEAP32[HEAP32[$ngs$s2 + 5] + 16 >> 2] + ($124 << 16 >> 16 << 2) >> 2] + 8 >> 2) + (($138 << 16 >> 16) * 3 | 0)];
	            var $150 = ($149 | 0) > 0;
	            $_$60 : do {
	              if ($150) {
	                var $151 = $ngs + 188 | 0;
	                var $i_01 = 0;
	                while (1) {
	                  var $i_01;
	                  var $156 = (HEAP32[$75$s2] + $i_01 << 2) + HEAP32[$151 >> 2] | 0;
	                  HEAP32[$156 >> 2] = -536870912;
	                  var $157 = $i_01 + 1 | 0;
	                  if (($157 | 0) == ($149 | 0)) {
	                    break $_$60;
	                  }
	                  var $i_01 = $157;
	                }
	              }
	            } while (0);
	            if (($149 | 0) == 0) {
	              var $rcsize_089 = 0;
	              break;
	            }
	            var $164 = (HEAP32[$75$s2] + $rc << 2) + HEAP32[$ngs$s2 + 47] | 0;
	            HEAP32[$164 >> 2] = $score;
	            var $rcsize_089 = $149;
	          }
	        } while (0);
	        var $rcsize_089;
	        var $166 = HEAP32[$57$s2];
	        _set_real_wid($ngs, $166);
	        var $168 = HEAP32[$57$s2] + 1 | 0;
	        HEAP32[$57$s2] = $168;
	        var $170 = HEAP32[$75$s2] + $rcsize_089 | 0;
	        HEAP32[$75$s2] = $170;
	      }
	    } else {
	      var $7$s2 = ($ngs + 176 | 0) >> 2;
	      var $8 = HEAP32[$7$s2];
	      if ((HEAP32[$8 + ($4 << 5) + 12 >> 2] | 0) < ($score | 0)) {
	        if (($4 | 0) == ($path | 0)) {
	          ___assert_func(STRING_TABLE.__str607 | 0, 410, STRING_TABLE.___func___ngram_search_save_bp | 0, STRING_TABLE.__str22629 | 0);
	          var $16 = HEAP32[$7$s2], $16$s2 = $16 >> 2;
	        } else {
	          var $16 = $8, $16$s2 = $16 >> 2;
	        }
	        var $16;
	        var $18 = HEAP32[(($4 << 5) + 8 >> 2) + $16$s2];
	        if (($18 | 0) == ($path | 0)) {
	          var $44 = $16;
	        } else {
	          if (($18 | 0) == -1) {
	            var $28 = -1;
	            var $27 = -1;
	          } else {
	            var $28 = HEAP32[(($18 << 5) + 20 >> 2) + $16$s2];
	            var $27 = HEAP32[(($18 << 5) + 24 >> 2) + $16$s2];
	          }
	          var $27;
	          var $28;
	          if (($path | 0) == -1) {
	            var $36 = -1;
	            var $35 = -1;
	          } else {
	            var $36 = HEAP32[(($path << 5) + 20 >> 2) + $16$s2];
	            var $35 = HEAP32[(($path << 5) + 24 >> 2) + $16$s2];
	          }
	          var $35;
	          var $36;
	          if (($27 | 0) == ($35 | 0) & ($28 | 0) == ($36 | 0)) {
	            var $41 = $16;
	          } else {
	            _set_real_wid($ngs, $4);
	            var $41 = HEAP32[$7$s2];
	          }
	          var $41;
	          var $42 = ($4 << 5) + $41 + 8 | 0;
	          HEAP32[$42 >> 2] = $path;
	          var $44 = HEAP32[$7$s2];
	        }
	        var $44;
	        var $45 = ($4 << 5) + $44 + 12 | 0;
	        HEAP32[$45 >> 2] = $score;
	        var $47 = HEAP32[$7$s2];
	      } else {
	        var $47 = $8;
	      }
	      var $47;
	      var $49 = HEAP32[$47 + ($4 << 5) + 16 >> 2];
	      if (($49 | 0) == -1) {
	        break;
	      }
	      var $55 = ($49 + $rc << 2) + HEAP32[$ngs$s2 + 47] | 0;
	      HEAP32[$55 >> 2] = $score;
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_search_save_bp["X"] = 1;

	function _set_real_wid($ngs, $bp) {
	  var $14$s2;
	  var $12$s2;
	  var $prev_0$s2;
	  if (($bp | 0) == -1) {
	    ___assert_func(STRING_TABLE.__str607 | 0, 367, STRING_TABLE.___func___set_real_wid | 0, STRING_TABLE.__str47654 | 0);
	  }
	  var $5 = HEAP32[$ngs + 176 >> 2];
	  var $7 = HEAP32[$5 + ($bp << 5) + 8 >> 2];
	  if (($7 | 0) == -1) {
	    var $prev_0 = 0, $prev_0$s2 = $prev_0 >> 2;
	  } else {
	    var $prev_0 = ($7 << 5) + $5 | 0, $prev_0$s2 = $prev_0 >> 2;
	  }
	  var $prev_0;
	  var $12$s2 = ($ngs + 16 | 0) >> 2;
	  var $13 = HEAP32[$12$s2];
	  var $14$s2 = (($bp << 5) + $5 + 4 | 0) >> 2;
	  var $15 = HEAP32[$14$s2];
	  var $16 = _dict_filler_word($13, $15);
	  if (($16 | 0) == 0) {
	    var $42 = HEAP32[(HEAP32[HEAP32[$12$s2] + 8 >> 2] + 16 >> 2) + (HEAP32[$14$s2] * 5 | 0)];
	    var $43 = ($bp << 5) + $5 + 20 | 0;
	    HEAP32[$43 >> 2] = $42;
	    if (($prev_0 | 0) == 0) {
	      var $50 = ($bp << 5) + $5 + 24 | 0;
	      HEAP32[$50 >> 2] = -1;
	    } else {
	      var $47 = HEAP32[$prev_0$s2 + 5];
	      var $48 = ($bp << 5) + $5 + 24 | 0;
	      HEAP32[$48 >> 2] = $47;
	    }
	  } else {
	    if (($prev_0 | 0) == 0) {
	      var $33 = HEAP32[(HEAP32[HEAP32[$12$s2] + 8 >> 2] + 16 >> 2) + (HEAP32[$14$s2] * 5 | 0)];
	      var $34 = ($bp << 5) + $5 + 20 | 0;
	      HEAP32[$34 >> 2] = $33;
	      var $35 = ($bp << 5) + $5 + 24 | 0;
	      HEAP32[$35 >> 2] = -1;
	    } else {
	      var $22 = HEAP32[$prev_0$s2 + 5];
	      var $23 = ($bp << 5) + $5 + 20 | 0;
	      HEAP32[$23 >> 2] = $22;
	      var $25 = HEAP32[$prev_0$s2 + 6];
	      var $26 = ($bp << 5) + $5 + 24 | 0;
	      HEAP32[$26 >> 2] = $25;
	    }
	  }
	  return;
	  return;
	}

	_set_real_wid["X"] = 1;

	function _ngram_search_find_exit($ngs, $out_best_score) {
	  var $2 = HEAP32[$ngs + 204 >> 2];
	  var $3 = ($2 | 0) == 0;
	  $_$86 : do {
	    if ($3) {
	      var $_0 = -1;
	    } else {
	      var $5 = $2 - 1 | 0;
	      var $6 = $ngs + 208 | 0;
	      var $7 = HEAP32[$6 >> 2];
	      var $9 = HEAP32[$7 + ($5 << 2) >> 2];
	      var $_1 = $5;
	      while (1) {
	        var $_1;
	        if (($_1 | 0) <= -1) {
	          var $_0 = -1;
	          break $_$86;
	        }
	        var $14 = HEAP32[$7 + ($_1 << 2) >> 2];
	        if (($14 | 0) != ($9 | 0)) {
	          break;
	        }
	        var $_1 = $_1 - 1 | 0;
	      }
	      if (($9 | 0) < (HEAP32[$ngs + 184 >> 2] | 0)) {
	        var $23 = $14;
	      } else {
	        ___assert_func(STRING_TABLE.__str607 | 0, 539, STRING_TABLE.___func___ngram_search_find_exit | 0, STRING_TABLE.__str27634 | 0);
	        var $23 = HEAP32[HEAP32[$6 >> 2] + ($_1 << 2) >> 2];
	      }
	      var $23;
	      var $24 = $ngs + 176 | 0;
	      var $25 = $ngs + 52 | 0;
	      var $best_score_0 = -536870912;
	      var $bp_0 = $23;
	      var $best_exit_0 = -1;
	      while (1) {
	        var $best_exit_0;
	        var $bp_0;
	        var $best_score_0;
	        if (($bp_0 | 0) >= ($9 | 0)) {
	          var $best_score_2 = $best_score_0;
	          var $best_exit_2 = $best_exit_0;
	          break;
	        }
	        var $29 = HEAP32[$24 >> 2];
	        var $_pre6 = HEAP32[$29 + ($bp_0 << 5) + 12 >> 2];
	        if ((HEAP32[$29 + ($bp_0 << 5) + 4 >> 2] | 0) == (HEAP32[$25 >> 2] | 0)) {
	          var $best_score_2 = $_pre6;
	          var $best_exit_2 = $bp_0;
	          break;
	        }
	        var $35 = ($_pre6 | 0) > ($best_score_0 | 0);
	        var $bp_0_best_exit_0 = $35 ? $bp_0 : $best_exit_0;
	        var $_pre6_best_score_0 = $35 ? $_pre6 : $best_score_0;
	        var $best_score_0 = $_pre6_best_score_0;
	        var $bp_0 = $bp_0 + 1 | 0;
	        var $best_exit_0 = $bp_0_best_exit_0;
	      }
	      var $best_exit_2;
	      var $best_score_2;
	      if (($out_best_score | 0) == 0) {
	        var $_0 = $best_exit_2;
	        break;
	      }
	      HEAP32[$out_best_score >> 2] = $best_score_2;
	      var $_0 = $best_exit_2;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_search_find_exit["X"] = 1;

	function _ngram_search_bp_hyp($ngs, $bpidx) {
	  var $28$s2;
	  var $3$s2;
	  if (($bpidx | 0) == -1) {
	    var $_0 = 0;
	  } else {
	    var $2 = $ngs + 176 | 0;
	    var $3$s2 = ($ngs + 16 | 0) >> 2;
	    var $bp_0_ph = $bpidx;
	    var $len_0_ph = 0;
	    $_$105 : while (1) {
	      var $len_0_ph;
	      var $bp_0_ph;
	      var $bp_0 = $bp_0_ph;
	      while (1) {
	        var $bp_0;
	        if (($bp_0 | 0) == -1) {
	          break $_$105;
	        }
	        var $7 = HEAP32[$2 >> 2];
	        var $9 = HEAP32[$7 + ($bp_0 << 5) + 8 >> 2];
	        var $10 = HEAP32[$3$s2];
	        var $11 = ($bp_0 << 5) + $7 + 4 | 0;
	        var $12 = HEAP32[$11 >> 2];
	        var $13 = _dict_real_word($10, $12);
	        if (($13 | 0) != 0) {
	          break;
	        }
	        var $bp_0 = $9;
	      }
	      var $19 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	      var $23 = HEAP32[($19 >> 2) + (HEAP32[($19 + 16 >> 2) + (HEAP32[$11 >> 2] * 5 | 0)] * 5 | 0)];
	      var $24 = _strlen($23);
	      var $bp_0_ph = $9;
	      var $len_0_ph = $24 + ($len_0_ph + 1) | 0;
	    }
	    var $28$s2 = ($ngs + 24 | 0) >> 2;
	    var $29 = HEAP32[$28$s2];
	    _ckd_free($29);
	    if (($len_0_ph | 0) == 0) {
	      HEAP32[$28$s2] = 0;
	      var $_0 = 0;
	    } else {
	      var $33 = ___ckd_calloc__(1, $len_0_ph, STRING_TABLE.__str607 | 0, 579);
	      HEAP32[$28$s2] = $33;
	      var $bp_1_ph = $bpidx;
	      var $c_0_ph = $33 + ($len_0_ph - 1) | 0;
	      $_$115 : while (1) {
	        var $c_0_ph;
	        var $bp_1_ph;
	        var $bp_1 = $bp_1_ph;
	        while (1) {
	          var $bp_1;
	          if (($bp_1 | 0) == -1) {
	            break $_$115;
	          }
	          var $38 = HEAP32[$2 >> 2];
	          var $40 = HEAP32[$38 + ($bp_1 << 5) + 8 >> 2];
	          var $41 = HEAP32[$3$s2];
	          var $42 = ($bp_1 << 5) + $38 + 4 | 0;
	          var $43 = HEAP32[$42 >> 2];
	          var $44 = _dict_real_word($41, $43);
	          if (($44 | 0) != 0) {
	            break;
	          }
	          var $bp_1 = $40;
	        }
	        var $50 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	        var $54 = HEAP32[($50 >> 2) + (HEAP32[($50 + 16 >> 2) + (HEAP32[$42 >> 2] * 5 | 0)] * 5 | 0)];
	        var $55 = _strlen($54);
	        var $57 = $c_0_ph + -$55 | 0;
	        _memcpy($57, $54, $55, 1);
	        if ($57 >>> 0 <= HEAPU32[$28$s2] >>> 0) {
	          var $bp_1_ph = $40;
	          var $c_0_ph = $57;
	          continue;
	        }
	        var $61 = $c_0_ph + ($55 ^ -1) | 0;
	        HEAP8[$61] = 32;
	        var $bp_1_ph = $40;
	        var $c_0_ph = $61;
	      }
	      var $_0 = HEAP32[$28$s2];
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_search_bp_hyp["X"] = 1;

	function _ngram_search_alloc_all_rc($ngs, $w) {
	  var $79$s2;
	  var $37$s2;
	  var __label__;
	  var $1 = $ngs + 16 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
	  var $6 = HEAP32[($4 + 8 >> 2) + ($w * 5 | 0)];
	  if (($6 | 0) == 1) {
	    ___assert_func(STRING_TABLE.__str607 | 0, 611, STRING_TABLE.___func___ngram_search_alloc_all_rc | 0, STRING_TABLE.__str17729 | 0);
	    var $_pre3 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
	    var $11 = $_pre3;
	    var $10 = HEAP32[($_pre3 + 8 >> 2) + ($w * 5 | 0)];
	  } else {
	    var $11 = $4;
	    var $10 = $6;
	  }
	  var $10;
	  var $11;
	  var $14 = HEAP32[($11 + 4 >> 2) + ($w * 5 | 0)];
	  var $17 = HEAP16[$14 + ($10 - 1 << 1) >> 1] << 16 >> 16;
	  var $21 = HEAP16[$14 + ($10 - 2 << 1) >> 1] << 16 >> 16;
	  var $27 = HEAPU32[HEAP32[HEAP32[$ngs + 20 >> 2] + 16 >> 2] + ($17 << 2) >> 2];
	  var $28 = $27 + $21 * 12 | 0;
	  var $35 = HEAP32[HEAP32[HEAP32[$ngs + 12 >> 2] + 20 >> 2] + 56 >> 2] + $17 * 12 + 4 | 0;
	  var $36 = (HEAPU8[$35] | HEAPU8[$35 + 1] << 8 | HEAPU8[$35 + 2] << 16 | HEAPU8[$35 + 3] << 24) >>> 0;
	  var $37$s2 = ($ngs + 104 | 0) >> 2;
	  var $40 = HEAPU32[HEAP32[$37$s2] + ($w << 2) >> 2];
	  var $41 = ($40 | 0) == 0;
	  do {
	    if ($41) {
	      var $_pre_phi = $28 | 0;
	      __label__ = 7;
	      break;
	    }
	    var $45 = $28 | 0;
	    if (HEAP16[$40 + 52 >> 1] << 16 >> 16 == HEAP16[HEAP32[$45 >> 2] >> 1] << 16 >> 16) {
	      var $hmm_1_ph = $40;
	      __label__ = 8;
	      break;
	    }
	    var $_pre_phi = $45;
	    __label__ = 7;
	    break;
	  } while (0);
	  if (__label__ == 7) {
	    var $_pre_phi;
	    var $51 = HEAP32[$ngs + 68 >> 2];
	    var $52 = ___listelem_malloc__($51, STRING_TABLE.__str607 | 0, 619);
	    var $53 = $52;
	    var $56 = HEAP32[HEAP32[$37$s2] + ($w << 2) >> 2];
	    var $58 = $52 + 76 | 0;
	    HEAP32[$58 >> 2] = $56;
	    var $60 = ($w << 2) + HEAP32[$37$s2] | 0;
	    HEAP32[$60 >> 2] = $53;
	    var $62 = $52 + 88 | 0;
	    HEAP32[$62 >> 2] = 0;
	    var $64 = $52 + 84 | 0;
	    HEAP32[$64 >> 2] = $17;
	    var $66 = HEAP32[$ngs + 60 >> 2];
	    var $67 = $52;
	    var $70 = HEAPU16[HEAP32[$_pre_phi >> 2] >> 1] & 65535;
	    _hmm_init($66, $67, 0, $70, $36);
	    var $hmm_1_ph = $53;
	  }
	  var $hmm_1_ph;
	  var $71 = $27 + $21 * 12 + 8 | 0;
	  var $72 = HEAPU32[$71 >> 2];
	  var $73 = ($72 | 0) > 1;
	  $_$134 : do {
	    if ($73) {
	      var $74 = $ngs + 68 | 0;
	      var $75 = $ngs + 60 | 0;
	      var $76 = $28 | 0;
	      var $hmm_11 = $hmm_1_ph;
	      var $i_02 = 1;
	      var $78 = $72;
	      while (1) {
	        var $78;
	        var $i_02;
	        var $hmm_11;
	        var $79$s2 = ($hmm_11 + 76 | 0) >> 2;
	        var $80 = HEAPU32[$79$s2];
	        var $81 = ($80 | 0) == 0;
	        do {
	          if ($81) {
	            __label__ = 12;
	          } else {
	            if (HEAP16[$80 + 52 >> 1] << 16 >> 16 == HEAP16[HEAP32[$76 >> 2] + ($i_02 << 1) >> 1] << 16 >> 16) {
	              var $hmm_2 = $80;
	              var $107 = $78;
	              __label__ = 13;
	              break;
	            }
	            __label__ = 12;
	            break;
	          }
	        } while (0);
	        if (__label__ == 12) {
	          var $90 = HEAP32[$74 >> 2];
	          var $91 = ___listelem_malloc__($90, STRING_TABLE.__str607 | 0, 633);
	          var $92 = $91;
	          var $93 = HEAP32[$79$s2];
	          var $95 = $91 + 76 | 0;
	          HEAP32[$95 >> 2] = $93;
	          HEAP32[$79$s2] = $92;
	          var $97 = $91 + 88 | 0;
	          HEAP32[$97 >> 2] = $i_02;
	          var $99 = $91 + 84 | 0;
	          HEAP32[$99 >> 2] = $17;
	          var $100 = HEAP32[$75 >> 2];
	          var $101 = $91;
	          var $105 = HEAPU16[HEAP32[$76 >> 2] + ($i_02 << 1) >> 1] & 65535;
	          _hmm_init($100, $101, 0, $105, $36);
	          var $hmm_2 = $92;
	          var $107 = HEAP32[$71 >> 2];
	        }
	        var $107;
	        var $hmm_2;
	        var $108 = $i_02 + 1 | 0;
	        if (($108 | 0) >= ($107 | 0)) {
	          break $_$134;
	        }
	        var $hmm_11 = $hmm_2;
	        var $i_02 = $108;
	        var $78 = $107;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ngram_search_alloc_all_rc["X"] = 1;

	function _ngram_search_free_all_rc($ngs, $w) {
	  var $1 = $ngs + 104 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $4 = HEAP32[$2 + ($w << 2) >> 2];
	  if (($4 | 0) == 0) {
	    var $14 = $2;
	  } else {
	    var $6 = $ngs + 68 | 0;
	    var $hmm_01 = $4;
	    while (1) {
	      var $hmm_01;
	      var $9 = HEAP32[$hmm_01 + 76 >> 2];
	      var $10 = HEAP32[$6 >> 2];
	      ___listelem_free__($10, $hmm_01);
	      if (($9 | 0) == 0) {
	        break;
	      }
	      var $hmm_01 = $9;
	    }
	    var $14 = HEAP32[$1 >> 2];
	  }
	  var $14;
	  HEAP32[$14 + ($w << 2) >> 2] = 0;
	  return;
	  return;
	}

	function _ngram_compute_seg_score($ngs, $be, $lwf, $out_ascr, $out_lscr) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $2 = HEAP32[$be + 8 >> 2];
	  if (($2 | 0) == -1) {
	    var $6 = HEAP32[$be + 12 >> 2];
	    HEAP32[$out_ascr >> 2] = $6;
	    HEAP32[$out_lscr >> 2] = 0;
	  } else {
	    var $9 = HEAP32[$ngs$s2 + 44];
	    var $10 = ($2 << 5) + $9 | 0;
	    var $11 = $be + 4 | 0;
	    var $12 = HEAP32[$11 >> 2];
	    var $13 = $ngs + 16 | 0;
	    var $20 = HEAP16[HEAP32[(HEAP32[HEAP32[$13 >> 2] + 8 >> 2] + 4 >> 2) + ($12 * 5 | 0)] >> 1] << 16 >> 16;
	    var $21 = _ngram_search_exit_score($ngs, $10, $20);
	    if (($21 | 0) > -536870912) {
	      var $25 = $12;
	    } else {
	      ___assert_func(STRING_TABLE.__str607 | 0, 707, STRING_TABLE.___func___ngram_compute_seg_score | 0, STRING_TABLE.__str18730 | 0);
	      var $25 = HEAP32[$11 >> 2];
	    }
	    var $25;
	    if (($25 | 0) == (HEAP32[$ngs$s2 + 12] | 0)) {
	      var $31 = HEAP32[$ngs$s2 + 126];
	      HEAP32[$out_lscr >> 2] = $31;
	      var $54 = $31;
	    } else {
	      var $33 = HEAP32[$13 >> 2];
	      var $34 = _dict_filler_word($33, $25);
	      if (($34 | 0) == 0) {
	        var $41 = HEAP32[$ngs$s2 + 14];
	        var $43 = HEAP32[$be + 20 >> 2];
	        var $45 = HEAP32[$9 + ($2 << 5) + 20 >> 2];
	        var $47 = HEAP32[$9 + ($2 << 5) + 24 >> 2];
	        var $48 = _ngram_tg_score($41, $43, $45, $47, $n_used);
	        var $52 = ($48 >> 10) * $lwf & -1;
	        HEAP32[$out_lscr >> 2] = $52;
	        var $54 = $52;
	      } else {
	        var $38 = HEAP32[$ngs$s2 + 125];
	        HEAP32[$out_lscr >> 2] = $38;
	        var $54 = $38;
	      }
	    }
	    var $54;
	    var $58 = HEAP32[$be + 12 >> 2] - $21 - $54 | 0;
	    HEAP32[$out_ascr >> 2] = $58;
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_compute_seg_score["X"] = 1;

	function _ngram_search_lattice($search) {
	  var $node_06$s2;
	  var $166$s1;
	  var $to_017$s2;
	  var $83$s2;
	  var $75$s2;
	  var $40$s2;
	  var $33$s2;
	  var $10$s2;
	  var $search$s2 = $search >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $ascr = __stackBase__;
	  var $lscr = __stackBase__ + 4;
	  var $1 = $search;
	  var $_idx_val = HEAP32[HEAP32[$search$s2 + 2] + 4 >> 2];
	  var $4 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1982767 | 0);
	  var $8 = (HEAP32[$search$s2 + 62] | 0) < -536870911;
	  $_$17 : do {
	    if ($8) {
	      var $_0 = 0;
	    } else {
	      var $10$s2 = ($search + 28 | 0) >> 2;
	      var $11 = HEAP32[$10$s2];
	      if (($11 | 0) == 0) {
	        var $_pre_phi = $search + 204 | 0;
	      } else {
	        var $17 = $search + 204 | 0;
	        if ((HEAP16[$11 + 36 >> 1] << 16 >> 16 | 0) == (HEAP32[$17 >> 2] | 0)) {
	          var $_0 = $11;
	          break;
	        }
	        var $_pre_phi = $17;
	      }
	      var $_pre_phi;
	      _ps_lattice_free($11);
	      HEAP32[$10$s2] = 0;
	      var $21 = HEAP32[$_pre_phi >> 2];
	      var $22 = _ps_lattice_init_search($search, $21);
	      if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	        var $31 = 1;
	      } else {
	        var $31 = HEAPF32[$search$s2 + 61];
	      }
	      var $31;
	      _create_dag_nodes($1, $22);
	      var $32 = _find_start_node676($1, $22);
	      var $33$s2 = ($22 + 28 | 0) >> 2;
	      HEAP32[$33$s2] = $32;
	      var $34 = ($32 | 0) == 0;
	      do {
	        if (!$34) {
	          var $38 = HEAPF32[$search$s2 + 65];
	          var $39 = _find_end_node677($1, $22, $38);
	          var $40$s2 = ($22 + 32 | 0) >> 2;
	          HEAP32[$40$s2] = $39;
	          if (($39 | 0) == 0) {
	            break;
	          }
	          __E__pr_info_header(STRING_TABLE.__str607 | 0, 1253);
	          var $43 = HEAP32[$33$s2];
	          var $45 = HEAP32[$43 + 4 >> 2];
	          if (($45 | 0) < 0) {
	            var $55 = 0;
	          } else {
	            var $55 = HEAP32[(HEAP32[HEAP32[$search$s2 + 4] + 8 >> 2] >> 2) + ($45 * 5 | 0)];
	          }
	          var $55;
	          var $58 = HEAP16[$43 + 20 >> 1] << 16 >> 16;
	          var $59 = HEAP32[$40$s2];
	          var $61 = HEAP32[$59 + 4 >> 2];
	          if (($61 | 0) < 0) {
	            var $71 = 0;
	          } else {
	            var $71 = HEAP32[(HEAP32[HEAP32[$search$s2 + 4] + 8 >> 2] >> 2) + ($61 * 5 | 0)];
	          }
	          var $71;
	          var $74 = HEAP16[$59 + 20 >> 1] << 16 >> 16;
	          __E__pr_info(STRING_TABLE.__str36643 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $55, HEAP32[tempInt + 4 >> 2] = $58, HEAP32[tempInt + 8 >> 2] = $71, HEAP32[tempInt + 12 >> 2] = $74, tempInt));
	          var $75$s2 = ($search + 176 | 0) >> 2;
	          var $81 = (HEAP32[HEAP32[$40$s2] + 16 >> 2] << 5) + HEAP32[$75$s2] | 0;
	          var $82 = $22 + 40 | 0;
	          _ngram_compute_seg_score($1, $81, $31, $82, $lscr);
	          var $83$s2 = ($22 + 24 | 0) >> 2;
	          var $84 = $22 + 52 | 0;
	          var $i_0 = 0;
	          var $86 = HEAP32[$83$s2];
	          while (1) {
	            var $86;
	            var $i_0;
	            if (($86 | 0) == 0) {
	              break;
	            }
	            if (($86 | 0) == (HEAP32[$40$s2] | 0)) {
	              break;
	            }
	            var $93 = HEAP32[$86 + 40 >> 2];
	            var $94 = HEAP32[$84 >> 2];
	            ___listelem_free__($94, $86);
	            HEAP32[$83$s2] = $93;
	            var $i_0 = $i_0 + 1 | 0;
	            var $86 = $93;
	          }
	          __E__pr_info_header(STRING_TABLE.__str607 | 0, 1281);
	          __E__pr_info(STRING_TABLE.__str37644 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $i_0, tempInt));
	          HEAP16[HEAP32[$40$s2] + 22 >> 1] = 1;
	          var $to_015 = HEAP32[$40$s2];
	          var $99 = ($to_015 | 0) == 0;
	          $_$40 : do {
	            if ($99) {
	              var $nlink_0_lcssa = 0;
	            } else {
	              var $100 = $search + 16 | 0;
	              var $nlink_016 = 0;
	              var $to_017 = $to_015, $to_017$s2 = $to_017 >> 2;
	              while (1) {
	                var $to_017;
	                var $nlink_016;
	                var $102 = $to_017 + 22 | 0;
	                var $104 = HEAP16[$102 >> 1] << 16 >> 16 == 0;
	                $_$44 : do {
	                  if ($104) {
	                    var $nlink_3 = $nlink_016;
	                  } else {
	                    var $106 = HEAP32[$75$s2];
	                    var $107 = $106;
	                    var $109 = ($to_017 | 0) == (HEAP32[$40$s2] | 0);
	                    do {
	                      if (!$109) {
	                        if (((HEAP16[$107 + (HEAP32[$to_017$s2 + 4] << 5) >> 1] << 16 >> 16) - (HEAP16[$107 + (HEAP32[$to_017$s2 + 3] << 5) >> 1] << 16 >> 16) | 0) >= ($4 | 0)) {
	                          break;
	                        }
	                        HEAP16[$102 >> 1] = 0;
	                        var $nlink_3 = $nlink_016;
	                        break $_$44;
	                      }
	                    } while (0);
	                    var $from_011 = HEAP32[$to_017$s2 + 10];
	                    if (($from_011 | 0) == 0) {
	                      var $nlink_3 = $nlink_016;
	                      break;
	                    }
	                    var $124 = $to_017 + 20 | 0;
	                    var $125 = $to_017 + 4 | 0;
	                    var $nlink_112 = $nlink_016;
	                    var $from_013 = $from_011;
	                    var $128 = $106;
	                    while (1) {
	                      var $128;
	                      var $from_013;
	                      var $nlink_112;
	                      var $130 = HEAP32[$from_013 + 12 >> 2];
	                      var $131 = $128;
	                      var $132 = ($130 << 5) + $131 | 0;
	                      var $134 = HEAP16[$132 >> 1];
	                      var $135 = $134 << 16 >> 16;
	                      var $137 = HEAP32[$from_013 + 16 >> 2];
	                      var $140 = HEAP16[$131 + ($137 << 5) >> 1] << 16 >> 16;
	                      var $141 = HEAP16[$124 >> 1];
	                      var $142 = $141 << 16 >> 16 > $134 << 16 >> 16;
	                      $_$53 : do {
	                        if ($142) {
	                          var $144 = $141 << 16 >> 16;
	                          if (($144 | 0) > ($140 + 1 | 0)) {
	                            var $nlink_1_be = $nlink_112;
	                            break;
	                          }
	                          if (($140 - $135 | 0) < ($4 | 0)) {
	                            if (HEAP16[$from_013 + 22 >> 1] << 16 >> 16 == 0) {
	                              var $nlink_1_be = $nlink_112;
	                              break;
	                            }
	                            ___assert_func(STRING_TABLE.__str607 | 0, 1310, STRING_TABLE.___func___ngram_search_lattice | 0, STRING_TABLE.__str38645 | 0);
	                            var $nlink_1_be = $nlink_112;
	                          } else {
	                            var $150 = $from_013 + 4 | 0;
	                            var $151 = $144 - 1 | 0;
	                            var $i_1 = $130;
	                            var $from_bpe_0 = $132;
	                            while (1) {
	                              var $from_bpe_0;
	                              var $i_1;
	                              if (($i_1 | 0) > ($137 | 0)) {
	                                var $nlink_1_be = $nlink_112;
	                                break $_$53;
	                              }
	                              if ((HEAP32[$from_bpe_0 + 4 >> 2] | 0) == (HEAP32[$150 >> 2] | 0)) {
	                                var $166$s1 = ($from_bpe_0 | 0) >> 1;
	                                var $168 = HEAP16[$166$s1] << 16 >> 16;
	                                if (($168 | 0) >= ($151 | 0)) {
	                                  break;
	                                }
	                              }
	                              var $i_1 = $i_1 + 1 | 0;
	                              var $from_bpe_0 = $from_bpe_0 + 32 | 0;
	                            }
	                            if (($168 | 0) != ($151 | 0)) {
	                              var $nlink_1_be = $nlink_112;
	                              break;
	                            }
	                            _ngram_compute_seg_score($1, $from_bpe_0, $31, $ascr, $lscr);
	                            var $183 = HEAP16[HEAP32[(HEAP32[HEAP32[$100 >> 2] + 8 >> 2] + 4 >> 2) + (HEAP32[$125 >> 2] * 5 | 0)] >> 1] << 16 >> 16;
	                            var $184 = _ngram_search_exit_score($1, $from_bpe_0, $183);
	                            if (($184 | 0) == -536870912) {
	                              var $nlink_1_be = $nlink_112;
	                              break;
	                            }
	                            var $191 = $184 - HEAP32[$from_bpe_0 + 12 >> 2] + HEAP32[$ascr >> 2] | 0;
	                            if (($191 | 0) > 0) {
	                              var $195 = HEAP16[$166$s1] << 16 >> 16;
	                              _ps_lattice_link($22, $from_013, $to_017, -424242, $195);
	                              HEAP16[$from_013 + 22 >> 1] = 1;
	                              var $nlink_1_be = $nlink_112 + 1 | 0;
	                            } else {
	                              if (($191 | 0) <= -536870912) {
	                                var $nlink_1_be = $nlink_112;
	                                break;
	                              }
	                              var $202 = HEAP16[$166$s1] << 16 >> 16;
	                              _ps_lattice_link($22, $from_013, $to_017, $191, $202);
	                              HEAP16[$from_013 + 22 >> 1] = 1;
	                              var $nlink_1_be = $nlink_112 + 1 | 0;
	                            }
	                          }
	                        } else {
	                          var $nlink_1_be = $nlink_112;
	                        }
	                      } while (0);
	                      var $nlink_1_be;
	                      var $from_0 = HEAP32[$from_013 + 40 >> 2];
	                      if (($from_0 | 0) == 0) {
	                        var $nlink_3 = $nlink_1_be;
	                        break $_$44;
	                      }
	                      var $nlink_112 = $nlink_1_be;
	                      var $from_013 = $from_0;
	                      var $128 = HEAP32[$75$s2];
	                    }
	                  }
	                } while (0);
	                var $nlink_3;
	                var $to_0 = HEAP32[$to_017$s2 + 10];
	                if (($to_0 | 0) == 0) {
	                  var $nlink_0_lcssa = $nlink_3;
	                  break $_$40;
	                }
	                var $nlink_016 = $nlink_3;
	                var $to_017 = $to_0, $to_017$s2 = $to_017 >> 2;
	              }
	            }
	          } while (0);
	          var $nlink_0_lcssa;
	          if (HEAP16[HEAP32[$33$s2] + 22 >> 1] << 16 >> 16 != 0) {
	            var $node_05 = HEAP32[$83$s2];
	            var $211 = ($node_05 | 0) == 0;
	            var $_pre1 = $search + 16 | 0;
	            $_$79 : do {
	              if ($211) {
	                var $_pre_phi2 = $_pre1;
	              } else {
	                var $node_06 = $node_05, $node_06$s2 = $node_06 >> 2;
	                while (1) {
	                  var $node_06;
	                  var $214 = $node_06 + 12 | 0;
	                  var $220 = HEAP16[HEAP32[$75$s2] + (HEAP32[$214 >> 2] << 5) >> 1] << 16 >> 16;
	                  HEAP32[$214 >> 2] = $220;
	                  var $221 = $node_06 + 16 | 0;
	                  var $227 = HEAP16[HEAP32[$75$s2] + (HEAP32[$221 >> 2] << 5) >> 1] << 16 >> 16;
	                  HEAP32[$221 >> 2] = $227;
	                  var $234 = HEAP32[(HEAP32[HEAP32[$_pre1 >> 2] + 8 >> 2] + 16 >> 2) + (HEAP32[$node_06$s2 + 1] * 5 | 0)];
	                  HEAP32[$node_06$s2 + 2] = $234;
	                  var $node_0 = HEAP32[$node_06$s2 + 10];
	                  if (($node_0 | 0) == 0) {
	                    break;
	                  }
	                  var $node_06 = $node_0, $node_06$s2 = $node_06 >> 2;
	                }
	                var $node_13_pre = HEAP32[$83$s2];
	                if (($node_13_pre | 0) == 0) {
	                  var $_pre_phi2 = $_pre1;
	                  break;
	                }
	                var $node_14 = $node_13_pre;
	                while (1) {
	                  var $node_14;
	                  var $238 = $node_14 + 40 | 0;
	                  var $239 = $node_14 + 20 | 0;
	                  var $240 = $node_14 + 8 | 0;
	                  var $alt_0_in = $238;
	                  while (1) {
	                    var $alt_0_in;
	                    var $alt_0 = HEAP32[$alt_0_in >> 2];
	                    if (($alt_0 | 0) == 0) {
	                      break;
	                    }
	                    if (HEAP16[$alt_0 + 20 >> 1] << 16 >> 16 != HEAP16[$239 >> 1] << 16 >> 16) {
	                      break;
	                    }
	                    if ((HEAP32[$alt_0 + 8 >> 2] | 0) != (HEAP32[$240 >> 2] | 0)) {
	                      var $alt_0_in = $alt_0 + 40 | 0;
	                      continue;
	                    }
	                    var $255 = $node_14 + 36 | 0;
	                    var $256 = HEAP32[$255 >> 2];
	                    var $257 = $alt_0 + 36 | 0;
	                    HEAP32[$257 >> 2] = $256;
	                    HEAP32[$255 >> 2] = $alt_0;
	                    break;
	                  }
	                  var $node_1 = HEAP32[$238 >> 2];
	                  if (($node_1 | 0) == 0) {
	                    var $_pre_phi2 = $_pre1;
	                    break $_$79;
	                  }
	                  var $node_14 = $node_1;
	                }
	              }
	            } while (0);
	            var $_pre_phi2;
	            __E__pr_info_header(STRING_TABLE.__str607 | 0, 1386);
	            var $261 = HEAP16[$22 + 38 >> 1] << 16 >> 16;
	            __E__pr_info(STRING_TABLE.__str40647 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $261, HEAP32[tempInt + 4 >> 2] = $nlink_0_lcssa, tempInt));
	            var $262 = HEAP32[$_pre_phi2 >> 2];
	            var $265 = HEAP32[HEAP32[$40$s2] + 4 >> 2];
	            var $266 = _dict_filler_word($262, $265);
	            if (($266 | 0) != 0) {
	              var $270 = HEAP32[$search$s2 + 13];
	              var $272 = HEAP32[$40$s2] + 8 | 0;
	              HEAP32[$272 >> 2] = $270;
	            }
	            _ps_lattice_delete_unreachable($22);
	            var $276 = HEAP32[$search$s2 + 126];
	            var $278 = HEAP32[$search$s2 + 125];
	            _ps_lattice_bypass_fillers($22, $276, $278);
	            HEAP32[$10$s2] = $22;
	            var $_0 = $22;
	            break $_$17;
	          }
	          __E__pr_header(STRING_TABLE.__str607 | 0, 1362, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str39646 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        }
	      } while (0);
	      _ps_lattice_free($22);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_search_lattice["X"] = 1;

	function _create_dag_nodes($ngs, $dag) {
	  var __label__;
	  var $1 = $ngs + 176 | 0;
	  var $2 = $ngs + 180 | 0;
	  var $4 = (HEAP32[$2 >> 2] | 0) > 0;
	  $_$99 : do {
	    if ($4) {
	      var $6 = $dag + 36 | 0;
	      var $7 = $ngs + 52 | 0;
	      var $8 = $ngs + 16 | 0;
	      var $9 = $ngs + 56 | 0;
	      var $10 = $dag + 24 | 0;
	      var $11 = $dag + 52 | 0;
	      var $12 = $dag + 38 | 0;
	      var $bp_ptr_03 = HEAP32[$1 >> 2];
	      var $i_04 = 0;
	      while (1) {
	        var $i_04;
	        var $bp_ptr_03;
	        var $16 = HEAP8[$bp_ptr_03 + 2 | 0] << 24 >> 24 == 0;
	        $_$103 : do {
	          if (!$16) {
	            var $19 = HEAP32[$bp_ptr_03 + 8 >> 2];
	            if (($19 | 0) < 0) {
	              var $27 = 0;
	            } else {
	              var $27 = (HEAP16[HEAP32[$1 >> 2] + ($19 << 5) >> 1] << 16 >> 16) + 1 | 0;
	            }
	            var $27;
	            var $29 = HEAP16[$bp_ptr_03 >> 1];
	            var $30 = $29 << 16 >> 16;
	            var $32 = HEAP32[$bp_ptr_03 + 4 >> 2];
	            if ($29 << 16 >> 16 >= HEAP16[$6 >> 1] << 16 >> 16) {
	              ___assert_func(STRING_TABLE.__str607 | 0, 1092, STRING_TABLE.___func___create_dag_nodes | 0, STRING_TABLE.__str46653 | 0);
	            }
	            if (($32 | 0) == (HEAP32[$7 >> 2] | 0)) {
	              if (($30 | 0) < ((HEAP16[$6 >> 1] << 16 >> 16) - 1 | 0)) {
	                break;
	              }
	            }
	            var $44 = HEAP32[$8 >> 2];
	            var $45 = _dict_filler_word($44, $32);
	            if (($45 | 0) == 0) {
	              var $48 = HEAP32[$9 >> 2];
	              var $53 = HEAP32[(HEAP32[HEAP32[$8 >> 2] + 8 >> 2] + 16 >> 2) + ($32 * 5 | 0)];
	              var $54 = _ngram_model_set_known_wid($48, $53);
	              if (($54 | 0) == 0) {
	                break;
	              }
	              var $node_0_in = $10;
	            } else {
	              var $node_0_in = $10;
	              __label__ = 13;
	            }
	            while (1) {
	              var $node_0_in;
	              var $node_0 = HEAP32[$node_0_in >> 2];
	              if (($node_0 | 0) == 0) {
	                var $70 = HEAP32[$11 >> 2];
	                var $71 = ___listelem_malloc__($70, STRING_TABLE.__str607 | 0, 1114);
	                var $72 = $71;
	                var $74 = $71 + 4 | 0;
	                HEAP32[$74 >> 2] = $32;
	                HEAP16[$71 + 20 >> 1] = $27 & 65535;
	                var $79 = $71 + 16 | 0;
	                HEAP32[$79 >> 2] = $i_04;
	                var $81 = $71 + 12 | 0;
	                HEAP32[$81 >> 2] = $i_04;
	                HEAP16[$71 + 22 >> 1] = 0;
	                var $85 = $71 + 32 | 0;
	                HEAP32[$85 >> 2] = 0;
	                var $87 = $71 + 28 | 0;
	                HEAP32[$87 >> 2] = 0;
	                var $88 = HEAP32[$10 >> 2];
	                var $90 = $71 + 40 | 0;
	                HEAP32[$90 >> 2] = $88;
	                HEAP32[$10 >> 2] = $72;
	                var $92 = HEAP16[$12 >> 1] + 1 & 65535;
	                HEAP16[$12 >> 1] = $92;
	                break $_$103;
	              }
	              var $60 = (HEAP32[$node_0 + 4 >> 2] | 0) == ($32 | 0);
	              do {
	                if ($60) {
	                  if ((HEAP16[$node_0 + 20 >> 1] << 16 >> 16 | 0) != ($27 | 0)) {
	                    break;
	                  }
	                  var $69 = $node_0 + 16 | 0;
	                  HEAP32[$69 >> 2] = $i_04;
	                  break $_$103;
	                }
	              } while (0);
	              var $node_0_in = $node_0 + 40 | 0;
	            }
	          }
	        } while (0);
	        var $93 = $i_04 + 1 | 0;
	        if (($93 | 0) >= (HEAP32[$2 >> 2] | 0)) {
	          break $_$99;
	        }
	        var $bp_ptr_03 = $bp_ptr_03 + 32 | 0;
	        var $i_04 = $93;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_create_dag_nodes["X"] = 1;

	function _find_start_node676($ngs, $dag) {
	  var __stackBase__ = STACKTOP;
	  var $2 = $ngs + 44 | 0;
	  var $node_0_in = $dag + 24 | 0;
	  while (1) {
	    var $node_0_in;
	    var $node_0 = HEAP32[$node_0_in >> 2];
	    if (($node_0 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str607 | 0, 1144, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str45652 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = 0;
	      break;
	    }
	    if ((HEAP32[$node_0 + 4 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
	      if (HEAP16[$node_0 + 20 >> 1] << 16 >> 16 == 0) {
	        var $_0 = $node_0;
	        break;
	      }
	    }
	    var $node_0_in = $node_0 + 40 | 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _find_end_node677($ngs, $dag, $lwf) {
	  var $26$s2;
	  var $3$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_used = __stackBase__;
	  var $1 = $dag + 24 | 0;
	  var $2 = $ngs + 52 | 0;
	  var $3$s2 = ($ngs + 176 | 0) >> 2;
	  var $4 = $dag + 36 | 0;
	  var $node_0_in = $1;
	  while (1) {
	    var $node_0_in;
	    var $node_0 = HEAP32[$node_0_in >> 2];
	    if (($node_0 | 0) == 0) {
	      __label__ = 7;
	      break;
	    }
	    if ((HEAP32[$node_0 + 4 >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) {
	      if ((HEAP16[HEAP32[$3$s2] + (HEAP32[$node_0 + 16 >> 2] << 5) >> 1] << 16 >> 16 | 0) == ((HEAP16[$4 >> 1] << 16 >> 16) - 1 | 0)) {
	        var $_0 = $node_0;
	        __label__ = 22;
	        break;
	      }
	    }
	    var $node_0_in = $node_0 + 40 | 0;
	  }
	  $_$144 : do {
	    if (__label__ == 7) {
	      var $26$s2 = ($ngs + 208 | 0) >> 2;
	      var $27 = $ngs + 180 | 0;
	      var $ef_0_in = HEAP16[$4 >> 1] << 16 >> 16;
	      while (1) {
	        var $ef_0_in;
	        var $ef_0 = $ef_0_in - 1 | 0;
	        if (($ef_0_in | 0) <= 0) {
	          break;
	        }
	        if ((HEAP32[HEAP32[$26$s2] + ($ef_0 << 2) >> 2] | 0) != (HEAP32[$27 >> 2] | 0)) {
	          break;
	        }
	        var $ef_0_in = $ef_0;
	      }
	      if (($ef_0 | 0) < 0) {
	        __E__pr_header(STRING_TABLE.__str607 | 0, 1173, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str41648 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = 0;
	      } else {
	        var $39 = HEAP32[$26$s2];
	        var $42 = $ngs + 56 | 0;
	        var $bestscore_0 = -536870912;
	        var $bp_0 = HEAP32[$39 + ($ef_0 << 2) >> 2];
	        var $bestbp_0 = -1;
	        var $44 = $39;
	        while (1) {
	          var $44;
	          var $bestbp_0;
	          var $bp_0;
	          var $bestscore_0;
	          if (($bp_0 | 0) >= (HEAP32[$44 + ($ef_0_in << 2) >> 2] | 0)) {
	            var $bestbp_2 = $bestbp_0;
	            break;
	          }
	          var $49 = HEAP32[$3$s2];
	          var $51 = HEAP32[$49 + ($bp_0 << 5) + 20 >> 2];
	          var $52 = HEAP32[$2 >> 2];
	          if (($51 | 0) == ($52 | 0)) {
	            var $bestbp_2 = $bp_0;
	            break;
	          }
	          var $56 = HEAP32[$49 + ($bp_0 << 5) + 24 >> 2];
	          var $57 = HEAP32[$42 >> 2];
	          var $58 = _ngram_tg_score($57, $52, $51, $56, $n_used);
	          var $66 = (($58 >> 10) * $lwf & -1) + HEAP32[HEAP32[$3$s2] + ($bp_0 << 5) + 12 >> 2] | 0;
	          var $67 = ($66 | 0) > ($bestscore_0 | 0);
	          var $bp_0_bestbp_0 = $67 ? $bp_0 : $bestbp_0;
	          var $_bestscore_0 = $67 ? $66 : $bestscore_0;
	          var $bestscore_0 = $_bestscore_0;
	          var $bp_0 = $bp_0 + 1 | 0;
	          var $bestbp_0 = $bp_0_bestbp_0;
	          var $44 = HEAP32[$26$s2];
	        }
	        var $bestbp_2;
	        if (($bestbp_2 | 0) == -1) {
	          __E__pr_header(STRING_TABLE.__str607 | 0, 1198, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str42649 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $ef_0, tempInt));
	          var $_0 = 0;
	        } else {
	          __E__pr_info_header(STRING_TABLE.__str607 | 0, 1201);
	          var $76 = $ngs + 16 | 0;
	          var $79 = HEAP32[HEAP32[$76 >> 2] + 8 >> 2];
	          var $83 = HEAP32[($79 >> 2) + (HEAP32[($79 + 16 >> 2) + (HEAP32[HEAP32[$3$s2] + ($bestbp_2 << 5) + 4 >> 2] * 5 | 0)] * 5 | 0)];
	          __E__pr_info(STRING_TABLE.__str43650 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $83, HEAP32[tempInt + 4 >> 2] = $ef_0, tempInt));
	          var $node_1_in = $1;
	          while (1) {
	            var $node_1_in;
	            var $node_1 = HEAP32[$node_1_in >> 2];
	            if (($node_1 | 0) == 0) {
	              break;
	            }
	            if ((HEAP32[$node_1 + 16 >> 2] | 0) == ($bestbp_2 | 0)) {
	              var $_0 = $node_1;
	              break $_$144;
	            }
	            var $node_1_in = $node_1 + 40 | 0;
	          }
	          __E__pr_header(STRING_TABLE.__str607 | 0, 1211, STRING_TABLE.__str102579 | 0);
	          var $97 = HEAP32[HEAP32[$76 >> 2] + 8 >> 2];
	          var $101 = HEAP32[($97 >> 2) + (HEAP32[($97 + 16 >> 2) + (HEAP32[HEAP32[$3$s2] + ($bestbp_2 << 5) + 4 >> 2] * 5 | 0)] * 5 | 0)];
	          __E__pr_warn(STRING_TABLE.__str44651 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $101, tempInt));
	          var $_0 = 0;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_find_end_node677["X"] = 1;

	function _ngram_search_start($search) {
	  var $1 = $search;
	  HEAP8[$1 + 67 | 0] = 0;
	  var $5 = HEAP32[$search + 56 >> 2];
	  _ngram_model_flush($5);
	  var $9 = HEAP8[$search + 64 | 0] << 24 >> 24 == 0;
	  do {
	    if ($9) {
	      if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	        var $_0 = -1;
	        break;
	      }
	      _ngram_fwdflat_start($1);
	      var $_0 = 0;
	    } else {
	      _ngram_fwdtree_start($1);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_search_step($search, $frame_idx) {
	  var $1 = $search;
	  var $5 = HEAP8[$search + 64 | 0] << 24 >> 24 == 0;
	  do {
	    if ($5) {
	      if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $13 = _ngram_fwdflat_search($1, $frame_idx);
	      var $_0 = $13;
	    } else {
	      var $7 = _ngram_fwdtree_search($1, $frame_idx);
	      var $_0 = $7;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_search_finish($search) {
	  var $17$s2;
	  var __label__;
	  var $1 = $search;
	  var $4 = $search + 464 | 0;
	  var $_c = HEAP32[$4 >> 2] + HEAP32[$search + 204 >> 2] | 0;
	  HEAP32[$4 >> 2] = $_c;
	  var $11 = HEAP8[$search + 64 | 0] << 24 >> 24 == 0;
	  $_$2 : do {
	    if ($11) {
	      if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	        __label__ = 12;
	        break;
	      }
	      _ngram_fwdflat_finish($1);
	      __label__ = 12;
	      break;
	    }
	    _ngram_fwdtree_finish($1);
	    if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	      __label__ = 12;
	      break;
	    }
	    var $17$s2 = ($search + 12 | 0) >> 2;
	    var $18 = HEAP32[$17$s2];
	    var $19 = _acmod_rewind($18);
	    if (($19 | 0) < 0) {
	      var $_0 = -1;
	      __label__ = 13;
	      break;
	    }
	    _ngram_fwdflat_start($1);
	    var $i_0 = 0;
	    while (1) {
	      var $i_0;
	      if (HEAP16[HEAP32[$17$s2] + 102 >> 1] << 16 >> 16 <= 0) {
	        break;
	      }
	      var $28 = _ngram_fwdflat_search($1, $i_0);
	      if (($28 | 0) < 0) {
	        var $_0 = $28;
	        __label__ = 13;
	        break $_$2;
	      }
	      var $31 = HEAP32[$17$s2];
	      _acmod_advance($31);
	      var $i_0 = $i_0 + 1 | 0;
	    }
	    _ngram_fwdflat_finish($1);
	    __label__ = 12;
	    break;
	  } while (0);
	  if (__label__ == 12) {
	    HEAP8[$1 + 67 | 0] = 1;
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_search_finish["X"] = 1;

	function _ngram_search_reinit($search, $dict, $d2p) {
	  var $2$s2;
	  var $1 = $search;
	  var $2$s2 = ($search + 40 | 0) >> 2;
	  var $5 = HEAP32[$dict + 20 >> 2];
	  if ((HEAP32[$2$s2] | 0) != ($5 | 0)) {
	    HEAP32[$2$s2] = $5;
	    var $8 = $search + 212 | 0;
	    var $11 = HEAP32[$8 >> 2];
	    _ckd_free($11);
	    var $12 = $search + 108 | 0;
	    var $15 = HEAP32[$12 >> 2];
	    _ckd_free($15);
	    var $16 = $search + 160 | 0;
	    var $19 = HEAP32[$16 >> 2];
	    _ckd_free($19);
	    var $20 = $search + 140 | 0;
	    var $22 = HEAP32[$20 >> 2];
	    _ckd_free_2d($22);
	    var $23 = HEAP32[$2$s2];
	    var $24 = ___ckd_calloc__($23, 4, STRING_TABLE.__str607 | 0, 270);
	    var $_c = $24;
	    HEAP32[$8 >> 2] = $_c;
	    var $27 = (HEAP32[$2$s2] + 31 | 0) / 32 & -1;
	    var $28 = ___ckd_calloc__($27, 4, STRING_TABLE.__str607 | 0, 271);
	    var $_c1 = $28;
	    HEAP32[$12 >> 2] = $_c1;
	    var $29 = HEAP32[$2$s2];
	    var $30 = ___ckd_calloc__($29, 12, STRING_TABLE.__str607 | 0, 272);
	    var $_c2 = $30;
	    HEAP32[$16 >> 2] = $_c2;
	    var $31 = HEAP32[$2$s2];
	    var $32 = ___ckd_calloc_2d__(2, $31, 4, STRING_TABLE.__str607 | 0, 275);
	    var $_c3 = $32;
	    HEAP32[$20 >> 2] = $_c3;
	  }
	  _ps_search_base_reinit($search, $dict, $d2p);
	  var $37 = (HEAP32[$search + 56 >> 2] | 0) == 0;
	  do {
	    if ($37) {
	      var $_0 = -1;
	    } else {
	      _ngram_search_calc_beams($1);
	      _ngram_search_update_widmap($1);
	      if (HEAP8[$search + 64 | 0] << 24 >> 24 != 0) {
	        _ngram_fwdtree_reinit($1);
	      }
	      if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	        var $_0 = 0;
	        break;
	      }
	      _ngram_fwdflat_reinit($1);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_search_reinit["X"] = 1;

	function _ngram_search_hyp($search, $out_score) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $search;
	  var $4 = HEAP8[$1 + 66 | 0] << 24 >> 24 == 0;
	  do {
	    if (!$4) {
	      if (HEAP8[$1 + 67 | 0] << 24 >> 24 == 0) {
	        __label__ = 7;
	        break;
	      }
	      var $10 = $search + 412 | 0;
	      var $11 = $10;
	      _ptmr_reset($11);
	      _ptmr_start($11);
	      var $12 = _ngram_search_lattice($search);
	      if (($12 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 9;
	        break;
	      }
	      var $15 = _ngram_search_bestpath($search, $out_score);
	      if (($15 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 9;
	        break;
	      }
	      var $18 = _ps_lattice_hyp($12, $15);
	      _ptmr_stop($11);
	      var $21 = HEAP16[$12 + 36 >> 1] << 16 >> 16;
	      var $_idx_val = HEAP32[HEAP32[$search + 8 >> 2] + 4 >> 2];
	      var $24 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	      var $26 = $21 / ($24 | 0);
	      __E__pr_info_header(STRING_TABLE.__str607 | 0, 875);
	      var $28 = $10 + 4 | 0;
	      var $29 = (tempDoubleI32[0] = HEAP32[$28 >> 2], tempDoubleI32[1] = HEAP32[$28 + 4 >> 2], tempDoubleF64[0]);
	      var $30 = $29 / $26;
	      __E__pr_info(STRING_TABLE.__str67674 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $29, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $30, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	      __E__pr_info_header(STRING_TABLE.__str607 | 0, 878);
	      var $32 = $10 + 12 | 0;
	      var $33 = (tempDoubleI32[0] = HEAP32[$32 >> 2], tempDoubleI32[1] = HEAP32[$32 + 4 >> 2], tempDoubleF64[0]);
	      var $34 = $33 / $26;
	      __E__pr_info(STRING_TABLE.__str68675 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $33, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $34, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	      var $_0 = $18;
	      __label__ = 9;
	      break;
	    }
	    __label__ = 7;
	  } while (0);
	  do {
	    if (__label__ == 7) {
	      var $36 = _ngram_search_find_exit($1, $out_score);
	      if (($36 | 0) == -1) {
	        var $_0 = 0;
	        break;
	      }
	      var $39 = _ngram_search_bp_hyp($1, $36);
	      var $_0 = $39;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_search_hyp["X"] = 1;

	function _ngram_search_prob($search) {
	  var $1 = $search;
	  var $4 = HEAP8[$1 + 66 | 0] << 24 >> 24 == 0;
	  do {
	    if ($4) {
	      var $_0 = 0;
	    } else {
	      if (HEAP8[$1 + 67 | 0] << 24 >> 24 == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $10 = _ngram_search_lattice($search);
	      if (($10 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $13 = _ngram_search_bestpath($search, 0);
	      if (($13 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_0 = HEAP32[$search + 36 >> 2];
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_search_seg_iter($search, $out_score) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $search;
	  var $4 = HEAP8[$1 + 66 | 0] << 24 >> 24 == 0;
	  var $_pre = $1 + 67 | 0;
	  do {
	    if (!$4) {
	      if (HEAP8[$_pre] << 24 >> 24 == 0) {
	        __label__ = 7;
	        break;
	      }
	      var $9 = $search + 412 | 0;
	      var $10 = $9;
	      _ptmr_reset($10);
	      _ptmr_start($10);
	      var $11 = _ngram_search_lattice($search);
	      if (($11 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 11;
	        break;
	      }
	      var $14 = _ngram_search_bestpath($search, $out_score);
	      if (($14 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 11;
	        break;
	      }
	      var $19 = HEAPF32[$search + 260 >> 2];
	      var $20 = _ps_lattice_seg_iter($11, $14, $19);
	      _ptmr_stop($10);
	      var $23 = HEAP16[$11 + 36 >> 1] << 16 >> 16;
	      var $_idx_val = HEAP32[HEAP32[$search + 8 >> 2] + 4 >> 2];
	      var $26 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	      var $28 = $23 / ($26 | 0);
	      __E__pr_info_header(STRING_TABLE.__str607 | 0, 1030);
	      var $30 = $9 + 4 | 0;
	      var $31 = (tempDoubleI32[0] = HEAP32[$30 >> 2], tempDoubleI32[1] = HEAP32[$30 + 4 >> 2], tempDoubleF64[0]);
	      var $32 = $31 / $28;
	      __E__pr_info(STRING_TABLE.__str67674 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $31, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $32, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	      __E__pr_info_header(STRING_TABLE.__str607 | 0, 1033);
	      var $34 = $9 + 12 | 0;
	      var $35 = (tempDoubleI32[0] = HEAP32[$34 >> 2], tempDoubleI32[1] = HEAP32[$34 + 4 >> 2], tempDoubleF64[0]);
	      var $36 = $35 / $28;
	      __E__pr_info(STRING_TABLE.__str68675 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $35, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $36, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	      var $_0 = $20;
	      __label__ = 11;
	      break;
	    }
	    __label__ = 7;
	  } while (0);
	  if (__label__ == 7) {
	    var $37 = _ngram_search_find_exit($1, $out_score);
	    var $39 = HEAP8[$_pre] << 24 >> 24 == 0;
	    do {
	      if ($39) {
	        var $49 = 1;
	      } else {
	        if (HEAP8[$1 + 65 | 0] << 24 >> 24 == 0) {
	          var $49 = 1;
	          break;
	        }
	        var $49 = HEAPF32[$search + 244 >> 2];
	      }
	    } while (0);
	    var $49;
	    var $50 = _ngram_search_bp_iter($1, $37, $49);
	    var $_0 = $50;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_search_seg_iter["X"] = 1;

	function _ngram_search_bestpath($search, $out_score) {
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($search + 32 | 0) >> 2;
	  var $3 = (HEAP32[$1$s2] | 0) == 0;
	  do {
	    if ($3) {
	      var $5 = $search + 28 | 0;
	      var $6 = HEAP32[$5 >> 2];
	      var $8 = $search + 56 | 0;
	      var $9 = HEAP32[$8 >> 2];
	      var $12 = HEAPF32[$search + 260 >> 2];
	      var $14 = $search + 264 | 0;
	      var $15 = HEAPF32[$14 >> 2];
	      var $16 = _ps_lattice_bestpath($6, $9, $12, $15);
	      HEAP32[$1$s2] = $16;
	      if (($16 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 9;
	        break;
	      }
	      var $19 = $search + 36 | 0;
	      if ((HEAP32[$19 >> 2] | 0) != 0) {
	        __label__ = 6;
	        break;
	      }
	      var $23 = HEAP32[$5 >> 2];
	      var $24 = HEAP32[$8 >> 2];
	      var $25 = HEAPF32[$14 >> 2];
	      var $26 = _ps_lattice_posterior($23, $24, $25);
	      HEAP32[$19 >> 2] = $26;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 6;
	  } while (0);
	  if (__label__ == 6) {
	    if (($out_score | 0) != 0) {
	      var $37 = HEAP32[HEAP32[$search + 28 >> 2] + 40 >> 2] + HEAP32[HEAP32[$1$s2] + 16 >> 2] | 0;
	      HEAP32[$out_score >> 2] = $37;
	    }
	    var $_0 = HEAP32[$1$s2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_search_bp_iter($ngs, $bpidx, $lwf) {
	  var $9$s1;
	  var $1$s2;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 44, STRING_TABLE.__str607 | 0, 976), $1$s2 = $1 >> 2;
	  HEAP32[$1$s2] = _ngram_bp_segfuncs;
	  HEAP32[$1$s2 + 1] = $ngs | 0;
	  HEAPF32[$1$s2 + 8] = $lwf;
	  var $9$s1 = ($1 + 40 | 0) >> 1;
	  HEAP16[$9$s1] = 0;
	  var $10 = ($bpidx | 0) == -1;
	  do {
	    if (!$10) {
	      var $11 = $ngs + 176 | 0;
	      var $storemerge4 = 0;
	      var $bp_05 = $bpidx;
	      while (1) {
	        var $bp_05;
	        var $storemerge4;
	        var $15 = HEAP32[HEAP32[$11 >> 2] + ($bp_05 << 5) + 8 >> 2];
	        var $16 = $storemerge4 + 1 & 65535;
	        HEAP16[$9$s1] = $16;
	        if (($15 | 0) == -1) {
	          break;
	        }
	        var $storemerge4 = $16;
	        var $bp_05 = $15;
	      }
	      if ($16 << 16 >> 16 == 0) {
	        __label__ = 6;
	        break;
	      }
	      var $20 = ___ckd_calloc__($16 << 16 >> 16, 4, STRING_TABLE.__str607 | 0, 991);
	      var $21 = $20;
	      var $23 = $1 + 36 | 0;
	      HEAP32[$23 >> 2] = $21;
	      var $bp_12 = $bpidx;
	      var $cur_03_in = HEAP16[$9$s1] << 16 >> 16;
	      var $26 = $21;
	      while (1) {
	        var $26;
	        var $cur_03_in;
	        var $bp_12;
	        var $cur_03 = $cur_03_in - 1 | 0;
	        var $27 = HEAP32[$11 >> 2];
	        HEAP32[$26 + ($cur_03 << 2) >> 2] = $bp_12;
	        var $30 = HEAP32[$27 + ($bp_12 << 5) + 8 >> 2];
	        var $_pre = HEAP32[$23 >> 2];
	        if (($30 | 0) == -1) {
	          break;
	        }
	        var $bp_12 = $30;
	        var $cur_03_in = $cur_03;
	        var $26 = $_pre;
	      }
	      var $32 = $1;
	      var $33 = HEAP32[$_pre >> 2];
	      _ngram_search_bp2itor($32, $33);
	      var $_0 = $32;
	      __label__ = 10;
	      break;
	    }
	    __label__ = 6;
	  } while (0);
	  if (__label__ == 6) {
	    _ckd_free($1);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_search_bp_iter["X"] = 1;

	function _ngram_search_bp2itor($seg, $bp) {
	  var $14$s2;
	  var $2$s2;
	  var $2 = HEAP32[$seg + 4 >> 2], $2$s2 = $2 >> 2;
	  var $3 = $2;
	  var $6 = HEAP32[$2$s2 + 44];
	  var $8 = HEAP32[$6 + ($bp << 5) + 8 >> 2];
	  if (($8 | 0) == -1) {
	    var $13 = 0;
	  } else {
	    var $13 = ($8 << 5) + $6 | 0;
	  }
	  var $13;
	  var $14$s2 = (($bp << 5) + $6 + 4 | 0) >> 2;
	  var $15 = HEAP32[$14$s2];
	  if (($15 | 0) < 0) {
	    var $25 = 0;
	  } else {
	    var $25 = HEAP32[(HEAP32[HEAP32[$2$s2 + 4] + 8 >> 2] >> 2) + ($15 * 5 | 0)];
	  }
	  var $25;
	  HEAP32[$seg + 8 >> 2] = $25;
	  var $28 = HEAP16[$6 + ($bp << 5) >> 1];
	  HEAP16[$seg + 14 >> 1] = $28;
	  if (($13 | 0) == 0) {
	    HEAP16[$seg + 12 >> 1] = 0;
	    HEAP32[$seg + 24 >> 2] = 0;
	    var $35 = HEAP32[$6 + ($bp << 5) + 12 >> 2];
	    HEAP32[$seg + 16 >> 2] = $35;
	    HEAP32[$seg + 20 >> 2] = 0;
	    HEAP32[$seg + 28 >> 2] = 0;
	  } else {
	    var $42 = HEAP16[$13 >> 1] + 1 & 65535;
	    HEAP16[$seg + 12 >> 1] = $42;
	    HEAP32[$seg + 24 >> 2] = 0;
	    var $45 = HEAP32[$14$s2];
	    var $46 = $2 + 16 | 0;
	    var $53 = HEAP16[HEAP32[(HEAP32[HEAP32[$46 >> 2] + 8 >> 2] + 4 >> 2) + ($45 * 5 | 0)] >> 1] << 16 >> 16;
	    var $54 = _ngram_search_exit_score($3, $13, $53);
	    if (($54 | 0) > -536870912) {
	      var $58 = $45;
	    } else {
	      ___assert_func(STRING_TABLE.__str607 | 0, 919, STRING_TABLE.___func___ngram_search_bp2itor | 0, STRING_TABLE.__str18730 | 0);
	      var $58 = HEAP32[$14$s2];
	    }
	    var $58;
	    if (($58 | 0) == (HEAP32[$2$s2 + 12] | 0)) {
	      var $65 = HEAP32[$2$s2 + 126];
	      HEAP32[$seg + 20 >> 2] = $65;
	      var $95 = $65;
	    } else {
	      var $68 = HEAP32[$46 >> 2];
	      var $69 = _dict_filler_word($68, $58);
	      if (($69 | 0) == 0) {
	        var $78 = HEAP32[$2$s2 + 14];
	        var $80 = HEAP32[$6 + ($bp << 5) + 20 >> 2];
	        var $82 = HEAP32[$13 + 20 >> 2];
	        var $84 = HEAP32[$13 + 24 >> 2];
	        var $85 = $seg + 28 | 0;
	        var $86 = _ngram_tg_score($78, $80, $82, $84, $85);
	        var $93 = ($86 >> 10) * HEAPF32[$seg + 32 >> 2] & -1;
	        HEAP32[$seg + 20 >> 2] = $93;
	        var $95 = $93;
	      } else {
	        var $73 = HEAP32[$2$s2 + 125];
	        HEAP32[$seg + 20 >> 2] = $73;
	        var $95 = $73;
	      }
	    }
	    var $95;
	    var $99 = HEAP32[$6 + ($bp << 5) + 12 >> 2] - $54 - $95 | 0;
	    HEAP32[$seg + 16 >> 2] = $99;
	  }
	  return;
	  return;
	}

	_ngram_search_bp2itor["X"] = 1;

	function _ngram_bp_seg_next($seg) {
	  var $2 = $seg + 42 | 0;
	  var $4 = HEAP16[$2 >> 1] + 1 & 65535;
	  HEAP16[$2 >> 1] = $4;
	  if ($4 << 16 >> 16 == HEAP16[$seg + 40 >> 1] << 16 >> 16) {
	    _ngram_bp_seg_free($seg);
	    var $_0 = 0;
	  } else {
	    var $16 = HEAP32[HEAP32[$seg + 36 >> 2] + ($4 << 16 >> 16 << 2) >> 2];
	    _ngram_search_bp2itor($seg, $16);
	    var $_0 = $seg;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_bp_seg_free($seg) {
	  var $4 = HEAP32[$seg + 36 >> 2];
	  _ckd_free($4);
	  var $5 = $seg;
	  _ckd_free($5);
	  return;
	  return;
	}

	function _ngram_fwdflat_init($ngs) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAP32[$ngs$s2 + 10];
	  var $3 = $2 + 1 | 0;
	  var $4 = ___ckd_calloc__($3, 4, STRING_TABLE.__str678 | 0, 150);
	  var $5 = $4;
	  HEAP32[$ngs$s2 + 55] = $5;
	  var $8 = ($2 + 31 | 0) / 32 & -1;
	  var $9 = ___ckd_calloc__($8, 4, STRING_TABLE.__str678 | 0, 151);
	  var $10 = $9;
	  HEAP32[$ngs$s2 + 56] = $10;
	  var $12 = ___ckd_calloc__($3, 4, STRING_TABLE.__str678 | 0, 152);
	  var $13 = $12;
	  HEAP32[$ngs$s2 + 57] = $13;
	  var $16 = HEAP32[$ngs$s2 + 50];
	  var $17 = ___ckd_calloc__($16, 4, STRING_TABLE.__str678 | 0, 153);
	  var $18 = $17;
	  HEAP32[$ngs$s2 + 54] = $18;
	  var $20 = $ngs + 8 | 0;
	  var $_idx1_val = HEAP32[HEAP32[$20 >> 2] + 4 >> 2];
	  var $22 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str2002769 | 0);
	  var $23 = $ngs + 236 | 0;
	  HEAP32[$23 >> 2] = $22;
	  var $_idx_val = HEAP32[HEAP32[$20 >> 2] + 4 >> 2];
	  var $25 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str2022771 | 0);
	  var $26 = $ngs + 240 | 0;
	  HEAP32[$26 >> 2] = $25;
	  __E__pr_info_header(STRING_TABLE.__str678 | 0, 156);
	  var $27 = HEAP32[$23 >> 2];
	  var $28 = HEAP32[$26 >> 2];
	  __E__pr_info(STRING_TABLE.__str4682 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $27, HEAP32[tempInt + 4 >> 2] = $28, tempInt));
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	    _ngram_fwdflat_expand_all($ngs);
	    _ngram_fwdflat_allocate_1ph($ngs);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ngram_fwdflat_expand_all($ngs) {
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($ngs + 232 | 0) >> 2;
	  HEAP32[$1$s2] = 0;
	  var $3 = HEAP32[$ngs + 40 >> 2];
	  var $4 = $ngs + 224 | 0;
	  var $6 = HEAP32[$4 >> 2];
	  var $9 = (($3 + 31 | 0) / 32 & -1) << 2;
	  _memset($6, 0, $9, 4);
	  var $10 = ($3 | 0) > 0;
	  $_$113 : do {
	    if ($10) {
	      var $11 = $ngs + 56 | 0;
	      var $12 = $ngs + 16 | 0;
	      var $13 = $ngs + 220 | 0;
	      var $14 = $ngs + 228 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $16 = HEAP32[$11 >> 2];
	        var $21 = HEAP32[(HEAP32[HEAP32[$12 >> 2] + 8 >> 2] + 16 >> 2) + ($i_01 * 5 | 0)];
	        var $22 = _ngram_model_set_known_wid($16, $21);
	        if (($22 | 0) != 0) {
	          var $27 = (HEAP32[$1$s2] << 2) + HEAP32[$13 >> 2] | 0;
	          HEAP32[$27 >> 2] = $i_01;
	          var $30 = (HEAP32[$1$s2] << 2) + HEAP32[$14 >> 2] | 0;
	          HEAP32[$30 >> 2] = $i_01;
	          var $35 = ((($i_01 | 0) / 32 & -1) << 2) + HEAP32[$4 >> 2] | 0;
	          var $37 = HEAP32[$35 >> 2] | 1 << ($i_01 & 31);
	          HEAP32[$35 >> 2] = $37;
	          var $39 = HEAP32[$1$s2] + 1 | 0;
	          HEAP32[$1$s2] = $39;
	        }
	        var $41 = $i_01 + 1 | 0;
	        if (($41 | 0) == ($3 | 0)) {
	          var $_pre_phi = $14;
	          var $_pre_phi4 = $13;
	          break $_$113;
	        }
	        var $i_01 = $41;
	      }
	    } else {
	      var $_pre_phi = $ngs + 228 | 0;
	      var $_pre_phi4 = $ngs + 220 | 0;
	    }
	  } while (0);
	  var $_pre_phi4;
	  var $_pre_phi;
	  __E__pr_info_header(STRING_TABLE.__str678 | 0, 85);
	  var $42 = HEAP32[$1$s2];
	  __E__pr_info(STRING_TABLE.__str21699 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $42, tempInt));
	  var $45 = (HEAP32[$1$s2] << 2) + HEAP32[$_pre_phi >> 2] | 0;
	  HEAP32[$45 >> 2] = -1;
	  var $48 = (HEAP32[$1$s2] << 2) + HEAP32[$_pre_phi4 >> 2] | 0;
	  HEAP32[$48 >> 2] = -1;
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_fwdflat_expand_all["X"] = 1;

	function _ngram_fwdflat_allocate_1ph($ngs) {
	  var $25$s2;
	  var $5$s2;
	  var $2 = HEAP32[$ngs + 16 >> 2];
	  var $4 = HEAP32[$ngs + 40 >> 2];
	  var $5$s2 = ($ngs + 120 | 0) >> 2;
	  HEAP32[$5$s2] = 0;
	  var $6 = ($4 | 0) > 0;
	  $_$123 : do {
	    if ($6) {
	      var $7 = $2 + 8 | 0;
	      var $w_03 = 0;
	      var $8 = 0;
	      while (1) {
	        var $8;
	        var $w_03;
	        if ((HEAP32[(HEAP32[$7 >> 2] + 8 >> 2) + ($w_03 * 5 | 0)] | 0) == 1) {
	          var $14 = $8 + 1 | 0;
	          HEAP32[$5$s2] = $14;
	          var $16 = $14;
	        } else {
	          var $16 = $8;
	        }
	        var $16;
	        var $17 = $w_03 + 1 | 0;
	        if (($17 | 0) == ($4 | 0)) {
	          var $18 = $16;
	          break $_$123;
	        }
	        var $w_03 = $17;
	        var $8 = $16;
	      }
	    } else {
	      var $18 = 0;
	    }
	  } while (0);
	  var $18;
	  var $19 = ___ckd_calloc__($18, 4, STRING_TABLE.__str678 | 0, 105);
	  var $21 = $ngs + 116 | 0;
	  HEAP32[$21 >> 2] = $19;
	  var $22 = HEAP32[$5$s2];
	  var $23 = ___ckd_calloc__($22, 92, STRING_TABLE.__str678 | 0, 106);
	  var $24 = $23;
	  var $25$s2 = ($ngs + 100 | 0) >> 2;
	  HEAP32[$25$s2] = $24;
	  $_$131 : do {
	    if ($6) {
	      var $26 = $2 + 8 | 0;
	      var $27 = $ngs + 12 | 0;
	      var $28 = $ngs + 60 | 0;
	      var $29 = $ngs + 104 | 0;
	      var $i_01 = 0;
	      var $w_12 = 0;
	      while (1) {
	        var $w_12;
	        var $i_01;
	        var $30 = HEAP32[$26 >> 2];
	        if ((HEAP32[($30 + 8 >> 2) + ($w_12 * 5 | 0)] | 0) == 1) {
	          var $37 = HEAP16[HEAP32[($30 + 4 >> 2) + ($w_12 * 5 | 0)] >> 1];
	          HEAP16[(HEAP32[$25$s2] + 88 >> 1) + ($i_01 * 46 | 0)] = $37;
	          var $44 = HEAP16[HEAP32[HEAP32[$27 >> 2] + 20 >> 2] + 40 >> 1];
	          HEAP16[(HEAP32[$25$s2] + 90 >> 1) + ($i_01 * 46 | 0)] = $44;
	          var $47 = HEAP32[$28 >> 2];
	          var $48 = HEAP32[$25$s2];
	          var $49 = $48 + $i_01 * 92 | 0;
	          var $52 = HEAP16[($48 + 88 >> 1) + ($i_01 * 46 | 0)] << 16 >> 16;
	          var $57 = HEAP32[HEAP32[HEAP32[$27 >> 2] + 20 >> 2] + 56 >> 2];
	          var $58 = $57 + $52 * 12 | 0;
	          var $59 = HEAPU8[$58] | HEAPU8[$58 + 1] << 8 | HEAPU8[$58 + 2] << 16 | HEAPU8[$58 + 3] << 24 | 0;
	          var $60 = $57 + $52 * 12 + 4 | 0;
	          var $61 = HEAPU8[$60] | HEAPU8[$60 + 1] << 8 | HEAPU8[$60 + 2] << 16 | HEAPU8[$60 + 3] << 24 | 0;
	          _hmm_init($47, $49, 1, $59, $61);
	          var $63 = HEAP32[$25$s2] + $i_01 * 92 + 76 | 0;
	          HEAP32[$63 >> 2] = 0;
	          var $66 = HEAP32[$25$s2] + $i_01 * 92 | 0;
	          var $68 = ($w_12 << 2) + HEAP32[$29 >> 2] | 0;
	          HEAP32[$68 >> 2] = $66;
	          var $70 = ($i_01 << 2) + HEAP32[$21 >> 2] | 0;
	          HEAP32[$70 >> 2] = $w_12;
	          var $i_1 = $i_01 + 1 | 0;
	        } else {
	          var $i_1 = $i_01;
	        }
	        var $i_1;
	        var $73 = $w_12 + 1 | 0;
	        if (($73 | 0) == ($4 | 0)) {
	          break $_$131;
	        }
	        var $i_01 = $i_1;
	        var $w_12 = $73;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ngram_fwdflat_allocate_1ph["X"] = 1;

	function _ngram_fwdflat_deinit($ngs) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  var $3 = HEAP32[$ngs$s2 + 116] | 0;
	  var $_idx_val = HEAP32[HEAP32[$ngs$s2 + 2] + 4 >> 2];
	  var $6 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	  var $8 = $3 / ($6 | 0);
	  __E__pr_info_header(STRING_TABLE.__str678 | 0, 174);
	  var $9 = $ngs + 380 | 0;
	  var $10 = (tempDoubleI32[0] = HEAP32[$9 >> 2], tempDoubleI32[1] = HEAP32[$9 + 4 >> 2], tempDoubleF64[0]);
	  var $11 = $10 / $8;
	  __E__pr_info(STRING_TABLE.__str6684 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $10, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $11, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  __E__pr_info_header(STRING_TABLE.__str678 | 0, 177);
	  var $12 = $ngs + 388 | 0;
	  var $13 = (tempDoubleI32[0] = HEAP32[$12 >> 2], tempDoubleI32[1] = HEAP32[$12 + 4 >> 2], tempDoubleF64[0]);
	  var $14 = $13 / $8;
	  __E__pr_info(STRING_TABLE.__str7685 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $14, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	    _ngram_fwdflat_free_1ph($ngs);
	  }
	  var $22 = HEAP32[$ngs$s2 + 55];
	  _ckd_free($22);
	  var $25 = HEAP32[$ngs$s2 + 56];
	  _ckd_free($25);
	  var $28 = HEAP32[$ngs$s2 + 57];
	  _ckd_free($28);
	  var $31 = HEAP32[$ngs$s2 + 54];
	  _ckd_free($31);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ngram_fwdflat_free_1ph($ngs) {
	  var $1 = $ngs + 100 | 0;
	  var $3 = HEAP32[$1 >> 2];
	  _ckd_free($3);
	  HEAP32[$1 >> 2] = 0;
	  var $6 = HEAP32[$ngs + 116 >> 2];
	  _ckd_free($6);
	  return;
	  return;
	}

	function _ngram_fwdflat_reinit($ngs) {
	  var $1 = $ngs + 220 | 0;
	  var $3 = HEAP32[$1 >> 2];
	  _ckd_free($3);
	  var $4 = $ngs + 228 | 0;
	  var $6 = HEAP32[$4 >> 2];
	  _ckd_free($6);
	  var $7 = $ngs + 224 | 0;
	  var $9 = HEAP32[$7 >> 2];
	  _ckd_free($9);
	  var $11 = HEAP32[$ngs + 40 >> 2];
	  var $12 = $11 + 1 | 0;
	  var $13 = ___ckd_calloc__($12, 4, STRING_TABLE.__str678 | 0, 201);
	  var $14 = $13;
	  HEAP32[$1 >> 2] = $14;
	  var $16 = ($11 + 31 | 0) / 32 & -1;
	  var $17 = ___ckd_calloc__($16, 4, STRING_TABLE.__str678 | 0, 202);
	  var $18 = $17;
	  HEAP32[$7 >> 2] = $18;
	  var $19 = ___ckd_calloc__($12, 4, STRING_TABLE.__str678 | 0, 203);
	  var $20 = $19;
	  HEAP32[$4 >> 2] = $20;
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	    _ngram_fwdflat_free_1ph($ngs);
	    var $25 = $ngs + 104 | 0;
	    var $27 = HEAP32[$25 >> 2];
	    _ckd_free($27);
	    var $31 = HEAP32[HEAP32[$ngs + 16 >> 2] + 20 >> 2];
	    var $32 = ___ckd_calloc__($31, 4, STRING_TABLE.__str678 | 0, 212);
	    var $33 = $32;
	    HEAP32[$25 >> 2] = $33;
	    _ngram_fwdflat_expand_all($ngs);
	    _ngram_fwdflat_allocate_1ph($ngs);
	  }
	  return;
	  return;
	}

	function _ngram_fwdflat_start($ngs) {
	  var $59$s2;
	  var $4$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var $1 = $ngs + 360 | 0;
	  _ptmr_reset($1);
	  _ptmr_start($1);
	  _build_fwdflat_wordlist($ngs);
	  _build_fwdflat_chan($ngs);
	  HEAP32[$ngs$s2 + 45] = 0;
	  HEAP32[$ngs$s2 + 48] = 0;
	  var $4$s2 = ($ngs + 40 | 0) >> 2;
	  var $6 = (HEAP32[$4$s2] | 0) > 0;
	  $_$6 : do {
	    if ($6) {
	      var $7 = $ngs + 212 | 0;
	      var $i_05 = 0;
	      while (1) {
	        var $i_05;
	        var $15 = ($i_05 << 2) + HEAP32[$7 >> 2] | 0;
	        HEAP32[$15 >> 2] = -1;
	        var $16 = $i_05 + 1 | 0;
	        if (($16 | 0) >= (HEAP32[$4$s2] | 0)) {
	          break $_$6;
	        }
	        var $i_05 = $16;
	      }
	    }
	  } while (0);
	  var $8 = $ngs + 120 | 0;
	  var $10 = (HEAP32[$8 >> 2] | 0) > 0;
	  $_$11 : do {
	    if ($10) {
	      var $11 = $ngs + 116 | 0;
	      var $12 = $ngs + 104 | 0;
	      var $i_12 = 0;
	      while (1) {
	        var $i_12;
	        var $26 = HEAP32[HEAP32[$12 >> 2] + (HEAP32[HEAP32[$11 >> 2] + ($i_12 << 2) >> 2] << 2) >> 2] | 0;
	        _hmm_clear($26);
	        var $27 = $i_12 + 1 | 0;
	        if (($27 | 0) >= (HEAP32[$8 >> 2] | 0)) {
	          var $_pre_phi = $12;
	          break $_$11;
	        }
	        var $i_12 = $27;
	      }
	    } else {
	      var $_pre_phi = $ngs + 104 | 0;
	    }
	  } while (0);
	  var $_pre_phi;
	  var $30 = $ngs + 44 | 0;
	  var $35 = HEAP32[HEAP32[$_pre_phi >> 2] + (HEAP32[$30 >> 2] << 2) >> 2] | 0;
	  _hmm_enter($35, 0, -1, 0);
	  var $36 = HEAP32[$30 >> 2];
	  var $39 = HEAP32[HEAP32[$ngs$s2 + 35] >> 2];
	  HEAP32[$39 >> 2] = $36;
	  HEAP32[$ngs$s2 + 36] = 1;
	  HEAP32[$ngs$s2 + 62] = 0;
	  HEAP32[$ngs$s2 + 64] = 0;
	  var $44 = (HEAP32[$4$s2] | 0) > 0;
	  $_$17 : do {
	    if ($44) {
	      var $45 = $ngs + 160 | 0;
	      var $i_21 = 0;
	      while (1) {
	        var $i_21;
	        var $48 = HEAP32[$45 >> 2] + $i_21 * 12 | 0;
	        HEAP32[$48 >> 2] = -1;
	        var $49 = $i_21 + 1 | 0;
	        if (($49 | 0) >= (HEAP32[$4$s2] | 0)) {
	          break $_$17;
	        }
	        var $i_21 = $49;
	      }
	    }
	  } while (0);
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	    HEAP32[$ngs$s2 + 51] = 0;
	  }
	  var $59$s2 = ($ngs + 292 | 0) >> 2;
	  HEAP32[$59$s2] = 0;
	  HEAP32[$59$s2 + 1] = 0;
	  HEAP32[$59$s2 + 2] = 0;
	  HEAP32[$59$s2 + 3] = 0;
	  return;
	  return;
	}

	_ngram_fwdflat_start["X"] = 1;

	function _build_fwdflat_wordlist($ngs) {
	  var $node_1$s2;
	  var $19$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 != 0) {
	    var $5 = $ngs + 16 | 0;
	    var $6$s2 = ($ngs + 216 | 0) >> 2;
	    var $8 = HEAP32[$6$s2];
	    var $11 = HEAP32[$ngs + 200 >> 2] << 2;
	    _memset($8, 0, $11, 4);
	    var $12 = $ngs + 176 | 0;
	    var $13 = $ngs + 180 | 0;
	    var $15 = (HEAP32[$13 >> 2] | 0) > 0;
	    $_$28 : do {
	      if ($15) {
	        var $17 = $ngs + 56 | 0;
	        var $18 = $ngs + 76 | 0;
	        var $bp_018 = HEAP32[$12 >> 2];
	        var $i_019 = 0;
	        while (1) {
	          var $i_019;
	          var $bp_018;
	          var $27 = HEAP32[$bp_018 + 8 >> 2];
	          if (($27 | 0) < 0) {
	            var $36 = 0;
	          } else {
	            var $36 = (HEAP16[HEAP32[$12 >> 2] + ($27 << 5) >> 1] << 16 >> 16) + 1 | 0;
	          }
	          var $36;
	          var $39 = HEAP16[$bp_018 >> 1] << 16 >> 16;
	          var $41 = HEAP32[$bp_018 + 4 >> 2];
	          var $42 = HEAP32[$17 >> 2];
	          var $47 = HEAP32[(HEAP32[HEAP32[$5 >> 2] + 8 >> 2] + 16 >> 2) + ($41 * 5 | 0)];
	          var $48 = _ngram_model_set_known_wid($42, $47);
	          var $49 = ($48 | 0) == 0;
	          $_$35 : do {
	            if (!$49) {
	              var $node_0_in = ($36 << 2) + HEAP32[$6$s2] | 0;
	              while (1) {
	                var $node_0_in;
	                var $node_0 = HEAP32[$node_0_in >> 2];
	                if (($node_0 | 0) == 0) {
	                  var $61 = HEAP32[$18 >> 2];
	                  var $62 = ___listelem_malloc__($61, STRING_TABLE.__str678 | 0, 264);
	                  var $63 = $62;
	                  var $65 = $62 + 4 | 0;
	                  HEAP32[$65 >> 2] = $41;
	                  var $67 = $62 + 16 | 0;
	                  HEAP32[$67 >> 2] = $39;
	                  var $69 = $62 + 12 | 0;
	                  HEAP32[$69 >> 2] = $39;
	                  var $72 = HEAP32[HEAP32[$6$s2] + ($36 << 2) >> 2];
	                  var $74 = $62 + 40 | 0;
	                  HEAP32[$74 >> 2] = $72;
	                  var $76 = ($36 << 2) + HEAP32[$6$s2] | 0;
	                  HEAP32[$76 >> 2] = $63;
	                  break $_$35;
	                }
	                if ((HEAP32[$node_0 + 4 >> 2] | 0) != ($41 | 0)) {
	                  var $node_0_in = $node_0 + 40 | 0;
	                  continue;
	                }
	                var $60 = $node_0 + 16 | 0;
	                HEAP32[$60 >> 2] = $39;
	                break $_$35;
	              }
	            }
	          } while (0);
	          var $78 = $i_019 + 1 | 0;
	          if (($78 | 0) >= (HEAP32[$13 >> 2] | 0)) {
	            break $_$28;
	          }
	          var $bp_018 = $bp_018 + 32 | 0;
	          var $i_019 = $78;
	        }
	      }
	    } while (0);
	    var $19$s2 = ($ngs + 204 | 0) >> 2;
	    var $21 = (HEAP32[$19$s2] | 0) > 0;
	    $_$45 : do {
	      if ($21) {
	        var $22 = $ngs + 236 | 0;
	        var $23 = $ngs + 76 | 0;
	        var $24 = $ngs + 52 | 0;
	        var $f_013 = 0;
	        while (1) {
	          var $f_013;
	          var $prevnode_0_ph = 0;
	          var $node_1_ph = HEAP32[HEAP32[$6$s2] + ($f_013 << 2) >> 2];
	          $_$49 : while (1) {
	            var $node_1_ph;
	            var $prevnode_0_ph;
	            var $85 = ($prevnode_0_ph | 0) == 0;
	            var $86 = $prevnode_0_ph + 40 | 0;
	            var $node_1 = $node_1_ph, $node_1$s2 = $node_1 >> 2;
	            while (1) {
	              var $node_1;
	              if (($node_1 | 0) == 0) {
	                break $_$49;
	              }
	              var $91 = HEAP32[$node_1$s2 + 10];
	              var $93 = HEAP32[$node_1$s2 + 4];
	              if (($93 - HEAP32[$node_1$s2 + 3] | 0) < (HEAP32[$22 >> 2] | 0)) {
	                __label__ = 22;
	              } else {
	                if ((HEAP32[$node_1$s2 + 1] | 0) != (HEAP32[$24 >> 2] | 0)) {
	                  var $prevnode_0_ph = $node_1;
	                  var $node_1_ph = $91;
	                  continue $_$49;
	                }
	                if (($93 | 0) >= (HEAP32[$19$s2] - 1 | 0)) {
	                  var $prevnode_0_ph = $node_1;
	                  var $node_1_ph = $91;
	                  continue $_$49;
	                }
	              }
	              if ($85) {
	                var $111 = ($f_013 << 2) + HEAP32[$6$s2] | 0;
	                HEAP32[$111 >> 2] = $91;
	              } else {
	                HEAP32[$86 >> 2] = $91;
	              }
	              var $114 = HEAP32[$23 >> 2];
	              ___listelem_free__($114, $node_1);
	              var $node_1 = $91, $node_1$s2 = $node_1 >> 2;
	            }
	          }
	          var $117 = $f_013 + 1 | 0;
	          if (($117 | 0) >= (HEAP32[$19$s2] | 0)) {
	            break $_$45;
	          }
	          var $f_013 = $117;
	        }
	      }
	    } while (0);
	    var $120 = $ngs + 108 | 0;
	    var $122 = HEAP32[$120 >> 2];
	    var $127 = ((HEAP32[$ngs + 40 >> 2] + 31 | 0) / 32 & -1) << 2;
	    _memset($122, 0, $127, 4);
	    var $128 = HEAP32[$19$s2];
	    var $129 = ($128 | 0) > 0;
	    var $130 = $ngs + 220 | 0;
	    $_$64 : do {
	      if ($129) {
	        var $nwd_05 = 0;
	        var $f_16 = 0;
	        var $131 = $128;
	        while (1) {
	          var $131;
	          var $f_16;
	          var $nwd_05;
	          var $node_22 = HEAP32[HEAP32[$6$s2] + ($f_16 << 2) >> 2];
	          if (($node_22 | 0) == 0) {
	            var $nwd_1_lcssa = $nwd_05;
	            var $154 = $131;
	          } else {
	            var $nwd_13 = $nwd_05;
	            var $node_24 = $node_22;
	            while (1) {
	              var $node_24;
	              var $nwd_13;
	              var $135 = $node_24 + 4 | 0;
	              var $136 = HEAP32[$135 >> 2];
	              var $139 = ((($136 | 0) / 32 & -1) << 2) + HEAP32[$120 >> 2] | 0;
	              var $140 = HEAP32[$139 >> 2];
	              var $142 = 1 << ($136 & 31);
	              if (($140 & $142 | 0) == 0) {
	                var $146 = $140 | $142;
	                HEAP32[$139 >> 2] = $146;
	                var $147 = HEAP32[$135 >> 2];
	                var $150 = ($nwd_13 << 2) + HEAP32[$130 >> 2] | 0;
	                HEAP32[$150 >> 2] = $147;
	                var $nwd_2 = $nwd_13 + 1 | 0;
	              } else {
	                var $nwd_2 = $nwd_13;
	              }
	              var $nwd_2;
	              var $node_2 = HEAP32[$node_24 + 40 >> 2];
	              if (($node_2 | 0) == 0) {
	                break;
	              }
	              var $nwd_13 = $nwd_2;
	              var $node_24 = $node_2;
	            }
	            var $nwd_1_lcssa = $nwd_2;
	            var $154 = HEAP32[$19$s2];
	          }
	          var $154;
	          var $nwd_1_lcssa;
	          var $155 = $f_16 + 1 | 0;
	          if (($155 | 0) >= ($154 | 0)) {
	            var $nwd_0_lcssa = $nwd_1_lcssa;
	            break $_$64;
	          }
	          var $nwd_05 = $nwd_1_lcssa;
	          var $f_16 = $155;
	          var $131 = $154;
	        }
	      } else {
	        var $nwd_0_lcssa = 0;
	      }
	    } while (0);
	    var $nwd_0_lcssa;
	    var $158 = ($nwd_0_lcssa << 2) + HEAP32[$130 >> 2] | 0;
	    HEAP32[$158 >> 2] = -1;
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 305);
	    __E__pr_info(STRING_TABLE.__str21699 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $nwd_0_lcssa, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_build_fwdflat_wordlist["X"] = 1;

	function _build_fwdflat_chan($ngs) {
	  var $45$s2;
	  var $10$s2;
	  var $9$s2;
	  var $2 = HEAP32[$ngs + 20 >> 2];
	  var $3 = $ngs + 220 | 0;
	  var $4 = HEAP32[$3 >> 2];
	  var $5 = HEAP32[$4 >> 2];
	  var $6 = ($5 | 0) > -1;
	  $_$78 : do {
	    if ($6) {
	      var $9$s2 = (HEAP32[$ngs + 16 >> 2] + 8 | 0) >> 2;
	      var $10$s2 = ($ngs + 104 | 0) >> 2;
	      var $11 = $ngs + 72 | 0;
	      var $12 = $ngs + 60 | 0;
	      var $13 = $ngs + 12 | 0;
	      var $14 = $ngs + 68 | 0;
	      var $i_03 = 1;
	      var $17 = $5;
	      var $16 = $4;
	      while (1) {
	        var $16;
	        var $17;
	        var $i_03;
	        if ((HEAP32[(HEAP32[$9$s2] + 8 >> 2) + ($17 * 5 | 0)] | 0) == 1) {
	          var $118 = $16;
	        } else {
	          if ((HEAP32[HEAP32[$10$s2] + ($17 << 2) >> 2] | 0) != 0) {
	            ___assert_func(STRING_TABLE.__str678 | 0, 331, STRING_TABLE.___func___build_fwdflat_chan | 0, STRING_TABLE.__str20698 | 0);
	          }
	          var $29 = HEAP32[$11 >> 2];
	          var $30 = ___listelem_malloc__($29, STRING_TABLE.__str678 | 0, 336);
	          var $35 = HEAP16[HEAP32[(HEAP32[$9$s2] + 4 >> 2) + ($17 * 5 | 0)] + 2 >> 1];
	          HEAP16[$30 + 90 >> 1] = $35;
	          var $41 = HEAP16[HEAP32[(HEAP32[$9$s2] + 4 >> 2) + ($17 * 5 | 0)] >> 1];
	          HEAP16[$30 + 88 >> 1] = $41;
	          var $45$s2 = ($30 + 76 | 0) >> 2;
	          HEAP32[$45$s2] = 0;
	          var $46 = HEAP32[$12 >> 2];
	          var $47 = $30;
	          var $48 = $41 << 16 >> 16;
	          var $53 = HEAP32[HEAP32[HEAP32[$13 >> 2] + 20 >> 2] + 56 >> 2];
	          var $54 = $53 + $48 * 12 | 0;
	          var $55 = HEAPU8[$54] | HEAPU8[$54 + 1] << 8 | HEAPU8[$54 + 2] << 16 | HEAPU8[$54 + 3] << 24 | 0;
	          var $56 = $53 + $48 * 12 + 4 | 0;
	          var $57 = HEAPU8[$56] | HEAPU8[$56 + 1] << 8 | HEAPU8[$56 + 2] << 16 | HEAPU8[$56 + 3] << 24 | 0;
	          _hmm_init($46, $47, 1, $55, $57);
	          var $62 = (HEAP32[(HEAP32[$9$s2] + 8 >> 2) + ($17 * 5 | 0)] - 1 | 0) > 1;
	          $_$87 : do {
	            if ($62) {
	              var $p_01 = 1;
	              var $prevhmm_02 = 0;
	              while (1) {
	                var $prevhmm_02;
	                var $p_01;
	                var $63 = HEAP32[$14 >> 2];
	                var $64 = ___listelem_malloc__($63, STRING_TABLE.__str678 | 0, 347);
	                var $65 = $64;
	                var $71 = HEAP16[HEAP32[(HEAP32[$9$s2] + 4 >> 2) + ($17 * 5 | 0)] + ($p_01 << 1) >> 1] << 16 >> 16;
	                var $73 = $64 + 84 | 0;
	                HEAP32[$73 >> 2] = $71;
	                var $78 = (($p_01 | 0) != (HEAP32[(HEAP32[$9$s2] + 8 >> 2) + ($17 * 5 | 0)] - 1 | 0)) << 31 >> 31;
	                var $80 = $64 + 88 | 0;
	                HEAP32[$80 >> 2] = $78;
	                var $82 = $64 + 76 | 0;
	                HEAP32[$82 >> 2] = 0;
	                var $83 = HEAP32[$12 >> 2];
	                var $84 = $64;
	                var $85 = _dict2pid_internal($2, $17, $p_01);
	                var $86 = $85 & 65535;
	                var $93 = HEAP32[HEAP32[HEAP32[$13 >> 2] + 20 >> 2] + 56 >> 2] + HEAP32[$73 >> 2] * 12 + 4 | 0;
	                var $94 = HEAPU8[$93] | HEAPU8[$93 + 1] << 8 | HEAPU8[$93 + 2] << 16 | HEAPU8[$93 + 3] << 24 | 0;
	                _hmm_init($83, $84, 0, $86, $94);
	                if (($prevhmm_02 | 0) == 0) {
	                  HEAP32[$45$s2] = $65;
	                } else {
	                  HEAP32[$prevhmm_02 + 76 >> 2] = $65;
	                }
	                var $100 = $p_01 + 1 | 0;
	                if (($100 | 0) >= (HEAP32[(HEAP32[$9$s2] + 8 >> 2) + ($17 * 5 | 0)] - 1 | 0)) {
	                  var $prevhmm_0_lcssa = $65;
	                  break $_$87;
	                }
	                var $p_01 = $100;
	                var $prevhmm_02 = $65;
	              }
	            } else {
	              var $prevhmm_0_lcssa = 0;
	            }
	          } while (0);
	          var $prevhmm_0_lcssa;
	          _ngram_search_alloc_all_rc($ngs, $17);
	          var $109 = HEAP32[HEAP32[$10$s2] + ($17 << 2) >> 2];
	          if (($prevhmm_0_lcssa | 0) == 0) {
	            HEAP32[$45$s2] = $109;
	          } else {
	            HEAP32[$prevhmm_0_lcssa + 76 >> 2] = $109;
	          }
	          var $114 = $30;
	          var $116 = ($17 << 2) + HEAP32[$10$s2] | 0;
	          HEAP32[$116 >> 2] = $114;
	          var $118 = HEAP32[$3 >> 2];
	        }
	        var $118;
	        var $120 = HEAPU32[$118 + ($i_03 << 2) >> 2];
	        if (($120 | 0) <= -1) {
	          break $_$78;
	        }
	        var $i_03 = $i_03 + 1 | 0;
	        var $17 = $120;
	        var $16 = $118;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_build_fwdflat_chan["X"] = 1;

	function _ngram_fwdflat_search($ngs, $frame_idx) {
	  var $18$s2;
	  var $2$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $1 = __stackBase__, $1$s2 = $1 >> 2;
	  HEAP32[$1$s2] = $frame_idx;
	  var $2$s2 = ($ngs + 12 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  if (HEAP8[$3 + 89 | 0] << 24 >> 24 == 0) {
	    _compute_fwdflat_sen_active($ngs, $frame_idx);
	    var $9 = HEAP32[$2$s2];
	  } else {
	    var $9 = $3;
	  }
	  var $9;
	  var $10 = _acmod_score($9, $1);
	  var $14 = $ngs + 304 | 0;
	  var $16 = HEAP32[$14 >> 2] + HEAP32[HEAP32[$2$s2] + 52 >> 2] | 0;
	  HEAP32[$14 >> 2] = $16;
	  var $17 = HEAP32[$1$s2];
	  _ngram_search_mark_bptable($ngs, $17);
	  var $18$s2 = ($ngs + 248 | 0) >> 2;
	  var $19 = HEAP32[$18$s2];
	  if (($19 | 0) < -536870911) {
	    var $_0 = 0;
	  } else {
	    if (((HEAP32[$ngs + 468 >> 2] << 1) + $19 | 0) < -536870912) {
	      __E__pr_info_header(STRING_TABLE.__str678 | 0, 834);
	      var $28 = HEAP32[$1$s2];
	      var $29 = HEAP32[$18$s2];
	      __E__pr_info(STRING_TABLE.__str61184 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $28, HEAP32[tempInt + 4 >> 2] = $29, tempInt));
	      var $30 = HEAP32[$1$s2];
	      var $31 = HEAP32[$18$s2];
	      _fwdflat_renormalize_scores($ngs, $30, $31);
	    }
	    HEAP32[$18$s2] = -536870912;
	    var $35 = HEAP32[$ngs + 60 >> 2] + 8 | 0;
	    HEAP32[$35 >> 2] = $10;
	    var $36 = HEAP32[$1$s2];
	    _fwdflat_eval_chan($ngs, $36);
	    var $37 = HEAP32[$1$s2];
	    _fwdflat_prune_chan($ngs, $37);
	    var $38 = HEAP32[$1$s2];
	    _fwdflat_word_transition($ngs, $38);
	    var $41 = HEAP32[$1$s2] & 1 ^ 1;
	    var $45 = HEAP32[HEAP32[$ngs + 140 >> 2] + ($41 << 2) >> 2];
	    var $46 = $ngs + 220 | 0;
	    var $47 = HEAP32[$46 >> 2];
	    var $48 = HEAP32[$47 >> 2];
	    var $49 = ($48 | 0) > -1;
	    $_$111 : do {
	      if ($49) {
	        var $50 = $ngs + 108 | 0;
	        var $i_04 = 1;
	        var $j_05 = 0;
	        var $nawl_06 = $45;
	        var $53 = $48;
	        var $52 = $47;
	        while (1) {
	          var $52;
	          var $53;
	          var $nawl_06;
	          var $j_05;
	          var $i_04;
	          if ((HEAP32[HEAP32[$50 >> 2] + ((($53 | 0) / 32 & -1) << 2) >> 2] & 1 << ($53 & 31) | 0) == 0) {
	            var $nawl_1 = $nawl_06;
	            var $j_1 = $j_05;
	            var $66 = $52;
	          } else {
	            HEAP32[$nawl_06 >> 2] = $53;
	            var $nawl_1 = $nawl_06 + 4 | 0;
	            var $j_1 = $j_05 + 1 | 0;
	            var $66 = HEAP32[$46 >> 2];
	          }
	          var $66;
	          var $j_1;
	          var $nawl_1;
	          var $68 = HEAP32[$66 + ($i_04 << 2) >> 2];
	          if (($68 | 0) <= -1) {
	            var $j_0_lcssa = $j_1;
	            var $nawl_0_lcssa = $nawl_1;
	            break $_$111;
	          }
	          var $i_04 = $i_04 + 1 | 0;
	          var $j_05 = $j_1;
	          var $nawl_06 = $nawl_1;
	          var $53 = $68;
	          var $52 = $66;
	        }
	      } else {
	        var $j_0_lcssa = 0;
	        var $nawl_0_lcssa = $45;
	      }
	    } while (0);
	    var $nawl_0_lcssa;
	    var $j_0_lcssa;
	    var $71 = HEAP32[$ngs + 44 >> 2];
	    var $72 = $ngs + 40 | 0;
	    var $73 = HEAP32[$72 >> 2];
	    var $74 = ($71 | 0) < ($73 | 0);
	    $_$120 : do {
	      if ($74) {
	        var $75 = $ngs + 108 | 0;
	        var $i_11 = $71;
	        var $j_22 = $j_0_lcssa;
	        var $nawl_23 = $nawl_0_lcssa;
	        var $76 = $73;
	        while (1) {
	          var $76;
	          var $nawl_23;
	          var $j_22;
	          var $i_11;
	          if ((HEAP32[HEAP32[$75 >> 2] + ((($i_11 | 0) / 32 & -1) << 2) >> 2] & 1 << ($i_11 & 31) | 0) == 0) {
	            var $nawl_3 = $nawl_23;
	            var $j_3 = $j_22;
	            var $89 = $76;
	          } else {
	            HEAP32[$nawl_23 >> 2] = $i_11;
	            var $nawl_3 = $nawl_23 + 4 | 0;
	            var $j_3 = $j_22 + 1 | 0;
	            var $89 = HEAP32[$72 >> 2];
	          }
	          var $89;
	          var $j_3;
	          var $nawl_3;
	          var $90 = $i_11 + 1 | 0;
	          if (($90 | 0) >= ($89 | 0)) {
	            var $j_2_lcssa = $j_3;
	            break $_$120;
	          }
	          var $i_11 = $90;
	          var $j_22 = $j_3;
	          var $nawl_23 = $nawl_3;
	          var $76 = $89;
	        }
	      } else {
	        var $j_2_lcssa = $j_0_lcssa;
	      }
	    } while (0);
	    var $j_2_lcssa;
	    if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	      var $96 = $ngs + 204 | 0;
	      var $98 = HEAP32[$96 >> 2] + 1 | 0;
	      HEAP32[$96 >> 2] = $98;
	    }
	    var $100 = ($41 << 2) + $ngs + 144 | 0;
	    HEAP32[$100 >> 2] = $j_2_lcssa;
	    var $_0 = 1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_fwdflat_search["X"] = 1;

	function _compute_fwdflat_sen_active($ngs, $frame_idx) {
	  var $1$s2;
	  var $1$s2 = ($ngs + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  _acmod_clear_active($2);
	  var $3 = $frame_idx & 1;
	  var $5 = HEAP32[$ngs + ($3 << 2) + 144 >> 2];
	  var $6 = ($5 | 0) > 0;
	  $_$133 : do {
	    if ($6) {
	      var $11 = $ngs + 104 | 0;
	      var $i_07 = $5;
	      var $_pn = HEAP32[HEAP32[$ngs + 140 >> 2] + ($3 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_07;
	        var $awl_08 = $_pn + 4 | 0;
	        var $14 = HEAP32[HEAP32[$11 >> 2] + (HEAP32[$_pn >> 2] << 2) >> 2];
	        if ((HEAP16[$14 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $20 = $14 | 0;
	          var $21 = HEAP32[$1$s2];
	          _acmod_activate_hmm($21, $20);
	        }
	        var $hmm_03 = HEAP32[$14 + 76 >> 2];
	        var $22 = ($hmm_03 | 0) == 0;
	        $_$140 : do {
	          if (!$22) {
	            var $hmm_04 = $hmm_03;
	            while (1) {
	              var $hmm_04;
	              if ((HEAP16[$hmm_04 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	                var $30 = HEAP32[$1$s2];
	                _acmod_activate_hmm($30, $hmm_04 | 0);
	              }
	              var $hmm_0 = HEAP32[$hmm_04 + 76 >> 2];
	              if (($hmm_0 | 0) == 0) {
	                break $_$140;
	              }
	              var $hmm_04 = $hmm_0;
	            }
	          }
	        } while (0);
	        var $31 = $i_07 - 1 | 0;
	        if (($31 | 0) <= 0) {
	          break $_$133;
	        }
	        var $i_07 = $31;
	        var $_pn = $awl_08;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_compute_fwdflat_sen_active["X"] = 1;

	function _fwdflat_renormalize_scores($ngs, $frame_idx, $norm) {
	  var $1 = $frame_idx & 1;
	  var $3 = HEAP32[$ngs + ($1 << 2) + 144 >> 2];
	  var $4 = ($3 | 0) > 0;
	  $_$149 : do {
	    if ($4) {
	      var $9 = $ngs + 104 | 0;
	      var $i_06 = $3;
	      var $_pn = HEAP32[HEAP32[$ngs + 140 >> 2] + ($1 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_06;
	        var $awl_08 = $_pn + 4 | 0;
	        var $12 = HEAP32[HEAP32[$9 >> 2] + (HEAP32[$_pn >> 2] << 2) >> 2];
	        if ((HEAP16[$12 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $18 = $12 | 0;
	          _hmm_normalize($18, $norm);
	        }
	        var $hmm_03 = HEAP32[$12 + 76 >> 2];
	        var $19 = ($hmm_03 | 0) == 0;
	        $_$156 : do {
	          if (!$19) {
	            var $hmm_04 = $hmm_03;
	            while (1) {
	              var $hmm_04;
	              if ((HEAP16[$hmm_04 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	                _hmm_normalize($hmm_04 | 0, $norm);
	              }
	              var $hmm_0 = HEAP32[$hmm_04 + 76 >> 2];
	              if (($hmm_0 | 0) == 0) {
	                break $_$156;
	              }
	              var $hmm_04 = $hmm_0;
	            }
	          }
	        } while (0);
	        var $27 = $i_06 - 1 | 0;
	        if (($27 | 0) <= 0) {
	          break $_$149;
	        }
	        var $i_06 = $27;
	        var $_pn = $awl_08;
	      }
	    }
	  } while (0);
	  HEAP32[$ngs + 256 >> 2] = 1;
	  return;
	  return;
	}

	function _fwdflat_eval_chan($ngs, $frame_idx) {
	  var $14$s2;
	  var __label__;
	  var $1 = $frame_idx & 1;
	  var $3 = HEAP32[$ngs + ($1 << 2) + 144 >> 2];
	  var $7 = HEAP32[HEAP32[$ngs + 140 >> 2] + ($1 << 2) >> 2];
	  var $8 = $ngs + 296 | 0;
	  var $10 = HEAP32[$8 >> 2] + $3 | 0;
	  HEAP32[$8 >> 2] = $10;
	  var $11 = ($3 | 0) > 0;
	  $_$2 : do {
	    if ($11) {
	      var $12 = $ngs + 104 | 0;
	      var $13 = $ngs + 52 | 0;
	      var $14$s2 = ($ngs + 292 | 0) >> 2;
	      var $bestscore_06 = -536870912;
	      var $i_07 = $3;
	      var $_pn = $7;
	      while (1) {
	        var $_pn;
	        var $i_07;
	        var $bestscore_06;
	        var $awl_08 = $_pn + 4 | 0;
	        var $w_09 = HEAP32[$_pn >> 2];
	        var $17 = HEAP32[HEAP32[$12 >> 2] + ($w_09 << 2) >> 2];
	        if ((HEAP16[$17 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $23 = $17 | 0;
	          var $24 = _hmm_vit_eval($23);
	          if (($24 | 0) > ($bestscore_06 | 0)) {
	            var $bestscore_0_ = ($w_09 | 0) == (HEAP32[$13 >> 2] | 0) ? $bestscore_06 : $24;
	            var $bestscore_1 = $bestscore_0_;
	          } else {
	            var $bestscore_1 = $bestscore_06;
	          }
	          var $bestscore_1;
	          var $31 = HEAP32[$14$s2] + 1 | 0;
	          HEAP32[$14$s2] = $31;
	          var $_pn1_ph = $17;
	          var $bestscore_3_ph2 = $bestscore_1;
	        } else {
	          var $_pn1_ph = $17;
	          var $bestscore_3_ph2 = $bestscore_06;
	          __label__ = 8;
	        }
	        $_$11 : while (1) {
	          var $bestscore_3_ph2;
	          var $_pn1_ph;
	          var $_pn1 = $_pn1_ph;
	          while (1) {
	            var $_pn1;
	            var $hmm_0 = HEAP32[$_pn1 + 76 >> 2];
	            if (($hmm_0 | 0) == 0) {
	              break $_$11;
	            }
	            if ((HEAP16[$hmm_0 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	              break;
	            }
	            var $_pn1 = $hmm_0;
	          }
	          var $40 = $hmm_0 | 0;
	          var $41 = _hmm_vit_eval($40);
	          var $_bestscore_3 = ($41 | 0) > ($bestscore_3_ph2 | 0) ? $41 : $bestscore_3_ph2;
	          var $44 = HEAP32[$14$s2] + 1 | 0;
	          HEAP32[$14$s2] = $44;
	          var $_pn1_ph = $hmm_0;
	          var $bestscore_3_ph2 = $_bestscore_3;
	        }
	        var $46 = $i_07 - 1 | 0;
	        if (($46 | 0) <= 0) {
	          var $bestscore_0_lcssa = $bestscore_3_ph2;
	          break $_$2;
	        }
	        var $bestscore_06 = $bestscore_3_ph2;
	        var $i_07 = $46;
	        var $_pn = $awl_08;
	      }
	    } else {
	      var $bestscore_0_lcssa = -536870912;
	    }
	  } while (0);
	  var $bestscore_0_lcssa;
	  HEAP32[$ngs + 248 >> 2] = $bestscore_0_lcssa;
	  return;
	  return;
	}

	_fwdflat_eval_chan["X"] = 1;

	function _fwdflat_prune_chan($ngs, $frame_idx) {
	  var $hmm_110$s2;
	  var $33$s2;
	  var $9$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var __label__;
	  var $1 = $frame_idx + 1 | 0;
	  var $2 = $frame_idx & 1;
	  var $4 = HEAP32[(($2 << 2) + 144 >> 2) + $ngs$s2];
	  var $8 = HEAP32[HEAP32[$ngs$s2 + 35] + ($2 << 2) >> 2];
	  var $9$s2 = ($ngs + 108 | 0) >> 2;
	  var $11 = HEAP32[$9$s2];
	  var $16 = ((HEAP32[$ngs$s2 + 10] + 31 | 0) / 32 & -1) << 2;
	  _memset($11, 0, $16, 4);
	  var $18 = HEAP32[$ngs$s2 + 62];
	  var $21 = HEAP32[$ngs$s2 + 123] + $18 | 0;
	  var $24 = HEAP32[$ngs$s2 + 124] + $18 | 0;
	  var $26 = HEAP32[$ngs$s2 + 129];
	  var $27 = ($4 | 0) > 0;
	  $_$20 : do {
	    if ($27) {
	      var $28 = $ngs + 104 | 0;
	      var $29 = $1 & 65535;
	      var $30 = $ngs + 16 | 0;
	      var $i_014 = $4;
	      var $_pn = $8;
	      while (1) {
	        var $_pn;
	        var $i_014;
	        var $awl_015 = $_pn + 4 | 0;
	        var $w_016 = HEAP32[$_pn >> 2];
	        var $33 = HEAP32[HEAP32[$28 >> 2] + ($w_016 << 2) >> 2], $33$s2 = $33 >> 2;
	        var $34 = $33 + 70 | 0;
	        var $37 = (HEAP16[$34 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0);
	        $_$24 : do {
	          if ($37) {
	            if ((HEAP32[$33$s2 + 16] | 0) <= ($21 | 0)) {
	              break;
	            }
	            HEAP16[$34 >> 1] = $29;
	            var $47 = ((($w_016 | 0) / 32 & -1) << 2) + HEAP32[$9$s2] | 0;
	            var $49 = HEAP32[$47 >> 2] | 1 << ($w_016 & 31);
	            HEAP32[$47 >> 2] = $49;
	            var $51 = HEAP32[$33$s2 + 11];
	            var $52 = $33 + 76 | 0;
	            var $60 = (HEAP32[(HEAP32[HEAP32[$30 >> 2] + 8 >> 2] + 8 >> 2) + ($w_016 * 5 | 0)] | 0) == 1;
	            if ((HEAP32[$52 >> 2] | 0) == 0) {
	              if (!$60) {
	                ___assert_func(STRING_TABLE.__str678 | 0, 543, STRING_TABLE.___func___fwdflat_prune_chan | 0, STRING_TABLE.__str19697 | 0);
	              }
	              if (($51 | 0) <= ($24 | 0)) {
	                break;
	              }
	              var $108 = HEAP32[$33$s2 + 12];
	              _ngram_search_save_bp($ngs, $frame_idx, $w_016, $51, $108, 0);
	            } else {
	              if ($60) {
	                ___assert_func(STRING_TABLE.__str678 | 0, 517, STRING_TABLE.___func___fwdflat_prune_chan | 0, STRING_TABLE.__str17729 | 0);
	              }
	              var $64 = $51 + $26 | 0;
	              if (($64 | 0) <= ($21 | 0)) {
	                break;
	              }
	              var $67 = HEAP32[$52 >> 2];
	              if ((HEAP32[$67 + 88 >> 2] | 0) > -1) {
	                if (($67 | 0) == 0) {
	                  break;
	                }
	                var $72 = $33 + 48 | 0;
	                var $hmm_02 = $67;
	                while (1) {
	                  var $hmm_02;
	                  var $74 = $hmm_02 | 0;
	                  var $78 = (HEAP16[$hmm_02 + 70 >> 1] << 16 >> 16 | 0) < ($frame_idx | 0);
	                  do {
	                    if ($78) {
	                      __label__ = 15;
	                    } else {
	                      if (($64 | 0) > (HEAP32[$hmm_02 + 4 >> 2] | 0)) {
	                        __label__ = 15;
	                        break;
	                      }
	                      __label__ = 16;
	                      break;
	                    }
	                  } while (0);
	                  if (__label__ == 15) {
	                    var $84 = HEAP32[$72 >> 2];
	                    _hmm_enter($74, $64, $84, $1);
	                  }
	                  var $87 = HEAP32[$hmm_02 + 76 >> 2];
	                  if (($87 | 0) == 0) {
	                    break $_$24;
	                  }
	                  var $hmm_02 = $87;
	                }
	              } else {
	                var $90 = $67 | 0;
	                if ((HEAP16[$67 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                  if (($64 | 0) <= (HEAP32[$67 + 4 >> 2] | 0)) {
	                    break;
	                  }
	                }
	                var $101 = HEAP32[$33$s2 + 12];
	                _hmm_enter($90, $64, $101, $1);
	              }
	            }
	          }
	        } while (0);
	        var $hmm_19 = HEAP32[$33$s2 + 19];
	        var $109 = ($hmm_19 | 0) == 0;
	        $_$53 : do {
	          if (!$109) {
	            var $111 = 1 << ($w_016 & 31);
	            var $112 = ($w_016 | 0) / 32 & -1;
	            var $hmm_110 = $hmm_19, $hmm_110$s2 = $hmm_110 >> 2;
	            while (1) {
	              var $hmm_110;
	              var $114 = $hmm_110 | 0;
	              var $115 = $hmm_110 + 70 | 0;
	              var $117 = HEAP16[$115 >> 1] << 16 >> 16;
	              var $118 = ($117 | 0) < ($frame_idx | 0);
	              $_$57 : do {
	                if (!$118) {
	                  if ((HEAP32[$hmm_110$s2 + 16] | 0) > ($21 | 0)) {
	                    HEAP16[$115 >> 1] = $29;
	                    var $125 = ($112 << 2) + HEAP32[$9$s2] | 0;
	                    var $127 = HEAP32[$125 >> 2] | $111;
	                    HEAP32[$125 >> 2] = $127;
	                    var $129 = HEAP32[$hmm_110$s2 + 11];
	                    var $131 = HEAP32[$hmm_110$s2 + 22];
	                    if (($131 | 0) < 0) {
	                      var $134 = $129 + $26 | 0;
	                      if (($134 | 0) <= ($21 | 0)) {
	                        break;
	                      }
	                      var $138 = HEAP32[$hmm_110$s2 + 19];
	                      if ((HEAP32[$138 + 88 >> 2] | 0) > -1) {
	                        if (($138 | 0) == 0) {
	                          break;
	                        }
	                        var $143 = $hmm_110 + 48 | 0;
	                        var $nexthmm_05 = $138;
	                        while (1) {
	                          var $nexthmm_05;
	                          var $145 = $nexthmm_05 | 0;
	                          var $149 = (HEAP16[$nexthmm_05 + 70 >> 1] << 16 >> 16 | 0) < ($frame_idx | 0);
	                          do {
	                            if ($149) {
	                              __label__ = 35;
	                            } else {
	                              if (($134 | 0) > (HEAP32[$nexthmm_05 + 4 >> 2] | 0)) {
	                                __label__ = 35;
	                                break;
	                              }
	                              __label__ = 36;
	                              break;
	                            }
	                          } while (0);
	                          if (__label__ == 35) {
	                            var $155 = HEAP32[$143 >> 2];
	                            _hmm_enter($145, $134, $155, $1);
	                          }
	                          var $158 = HEAP32[$nexthmm_05 + 76 >> 2];
	                          if (($158 | 0) == 0) {
	                            break $_$57;
	                          }
	                          var $nexthmm_05 = $158;
	                        }
	                      } else {
	                        var $161 = $138 | 0;
	                        if ((HEAP16[$138 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                          if (($134 | 0) <= (HEAP32[$138 + 4 >> 2] | 0)) {
	                            break;
	                          }
	                        }
	                        var $172 = HEAP32[$hmm_110$s2 + 12];
	                        _hmm_enter($161, $134, $172, $1);
	                      }
	                    } else {
	                      if (($129 | 0) <= ($24 | 0)) {
	                        break;
	                      }
	                      var $177 = HEAP32[$hmm_110$s2 + 12];
	                      _ngram_search_save_bp($ngs, $frame_idx, $w_016, $129, $177, $131);
	                    }
	                  } else {
	                    if (($117 | 0) == ($1 | 0)) {
	                      break;
	                    }
	                    _hmm_clear_scores($114);
	                  }
	                }
	              } while (0);
	              var $hmm_1 = HEAP32[$hmm_110$s2 + 19];
	              if (($hmm_1 | 0) == 0) {
	                break $_$53;
	              }
	              var $hmm_110 = $hmm_1, $hmm_110$s2 = $hmm_110 >> 2;
	            }
	          }
	        } while (0);
	        var $182 = $i_014 - 1 | 0;
	        if (($182 | 0) <= 0) {
	          break $_$20;
	        }
	        var $i_014 = $182;
	        var $_pn = $awl_015;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fwdflat_prune_chan["X"] = 1;

	function _fwdflat_word_transition($ngs, $frame_idx) {
	  var $38$s2;
	  var $31$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_used = __stackBase__;
	  var $2 = HEAP32[$ngs$s2 + 4];
	  var $4 = HEAP32[$ngs$s2 + 5];
	  var $5 = $frame_idx + 1 | 0;
	  var $10 = HEAP32[$ngs$s2 + 123] + HEAP32[$ngs$s2 + 62] | 0;
	  var $12 = HEAP32[$ngs$s2 + 129];
	  var $14 = HEAPF32[$ngs$s2 + 61];
	  var $16 = HEAP32[$ngs$s2 + 60];
	  _get_expand_wordlist($ngs, $frame_idx, $16);
	  var $20 = HEAP32[HEAP32[$ngs$s2 + 52] + ($frame_idx << 2) >> 2];
	  var $21 = $ngs + 180 | 0;
	  var $23 = ($20 | 0) < (HEAP32[$21 >> 2] | 0);
	  $_$86 : do {
	    if ($23) {
	      var $24 = $ngs + 176 | 0;
	      var $25 = $ngs + 212 | 0;
	      var $26 = $ngs + 52 | 0;
	      var $27 = $ngs + 188 | 0;
	      var $28 = $ngs + 228 | 0;
	      var $29 = $ngs + 12 | 0;
	      var $30 = $ngs + 56 | 0;
	      var $31$s2 = ($2 + 8 | 0) >> 2;
	      var $32 = $ngs + 104 | 0;
	      var $33 = $4 + 12 | 0;
	      var $34 = $ngs + 108 | 0;
	      var $35 = $4 + 16 | 0;
	      var $best_silrc_score_017 = -536870912;
	      var $best_silrc_bp_018 = 0;
	      var $b_019 = $20;
	      while (1) {
	        var $b_019;
	        var $best_silrc_bp_018;
	        var $best_silrc_score_017;
	        var $37 = HEAP32[$24 >> 2];
	        var $38$s2 = (($b_019 << 5) + $37 + 4 | 0) >> 2;
	        var $41 = (HEAP32[$38$s2] << 2) + HEAP32[$25 >> 2] | 0;
	        HEAP32[$41 >> 2] = -1;
	        if ((HEAP32[$38$s2] | 0) == (HEAP32[$26 >> 2] | 0)) {
	          var $best_silrc_bp_1 = $best_silrc_bp_018;
	          var $best_silrc_score_1 = $best_silrc_score_017;
	        } else {
	          var $46 = HEAP32[$27 >> 2];
	          var $48 = HEAP32[$37 + ($b_019 << 5) + 16 >> 2];
	          var $50 = HEAP16[$37 + ($b_019 << 5) + 30 >> 1];
	          if ($50 << 16 >> 16 == -1) {
	            var $rssid_0 = 0;
	          } else {
	            var $rssid_0 = HEAP32[HEAP32[$35 >> 2] + (HEAP16[$37 + ($b_019 << 5) + 28 >> 1] << 16 >> 16 << 2) >> 2] + ($50 << 16 >> 16) * 12 | 0;
	          }
	          var $rssid_0;
	          var $63 = HEAP32[HEAP32[$28 >> 2] >> 2];
	          var $64 = ($63 | 0) > -1;
	          var $65 = ($rssid_0 | 0) == 0;
	          $_$95 : do {
	            if ($64) {
	              var $66 = ($b_019 << 5) + $37 + 12 | 0;
	              var $67 = ($b_019 << 5) + $37 + 20 | 0;
	              var $68 = ($b_019 << 5) + $37 + 24 | 0;
	              var $69 = $rssid_0 + 4 | 0;
	              var $i_013 = 0;
	              var $71 = $63;
	              while (1) {
	                var $71;
	                var $i_013;
	                if ($65) {
	                  var $newscore_0_in = $66;
	                } else {
	                  var $newscore_0_in = ((HEAP16[HEAP32[$69 >> 2] + (HEAP16[HEAP32[(HEAP32[$31$s2] + 4 >> 2) + ($71 * 5 | 0)] >> 1] << 16 >> 16 << 1) >> 1] << 16 >> 16) + $48 << 2) + $46 | 0;
	                }
	                var $newscore_0_in;
	                var $newscore_0 = HEAP32[$newscore_0_in >> 2];
	                var $84 = ($newscore_0 | 0) == -536870912;
	                do {
	                  if (!$84) {
	                    var $86 = HEAP32[$30 >> 2];
	                    var $89 = HEAP32[(HEAP32[$31$s2] + 16 >> 2) + ($71 * 5 | 0)];
	                    var $90 = HEAP32[$67 >> 2];
	                    var $91 = HEAP32[$68 >> 2];
	                    var $92 = _ngram_tg_score($86, $89, $90, $91, $n_used);
	                    var $99 = ($newscore_0 + $14 * ($92 >> 10) & -1) + $12 | 0;
	                    if (($99 | 0) <= ($10 | 0)) {
	                      break;
	                    }
	                    var $104 = HEAP32[HEAP32[$32 >> 2] + ($71 << 2) >> 2];
	                    var $105 = $104;
	                    var $106 = $104 | 0;
	                    if ((HEAP16[$104 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                      if (($99 | 0) <= (HEAP32[$104 + 4 >> 2] | 0)) {
	                        break;
	                      }
	                    }
	                    _hmm_enter($106, $99, $b_019, $5);
	                    var $116 = HEAP32[$38$s2];
	                    var $117 = HEAP32[$31$s2];
	                    var $139 = HEAP16[HEAP32[HEAP32[HEAP32[$33 >> 2] + (HEAP16[$104 + 88 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP16[$105 + 90 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP16[HEAP32[($117 + 4 >> 2) + ($116 * 5 | 0)] + (HEAP32[($117 + 8 >> 2) + ($116 * 5 | 0)] - 1 << 1) >> 1] << 16 >> 16 << 1) >> 1];
	                    HEAP16[$104 + 54 >> 1] = $139;
	                    if ($139 << 16 >> 16 == -1) {
	                      ___assert_func(STRING_TABLE.__str678 | 0, 723, STRING_TABLE.___func___fwdflat_word_transition | 0, STRING_TABLE.__str17695 | 0);
	                    }
	                    var $148 = ((($71 | 0) / 32 & -1) << 2) + HEAP32[$34 >> 2] | 0;
	                    var $150 = HEAP32[$148 >> 2] | 1 << ($71 & 31);
	                    HEAP32[$148 >> 2] = $150;
	                  }
	                } while (0);
	                var $151 = $i_013 + 1 | 0;
	                var $154 = HEAP32[HEAP32[$28 >> 2] + ($151 << 2) >> 2];
	                if (($154 | 0) <= -1) {
	                  break $_$95;
	                }
	                var $i_013 = $151;
	                var $71 = $154;
	              }
	            } else {
	              __label__ = 19;
	            }
	          } while (0);
	          if ($65) {
	            var $silscore_0_in = ($b_019 << 5) + $37 + 12 | 0;
	          } else {
	            var $silscore_0_in = ((HEAP16[HEAP32[$rssid_0 + 4 >> 2] + (HEAP16[HEAP32[HEAP32[$29 >> 2] + 20 >> 2] + 40 >> 1] << 16 >> 16 << 1) >> 1] << 16 >> 16) + $48 << 2) + $46 | 0;
	          }
	          var $silscore_0_in;
	          var $silscore_0 = HEAP32[$silscore_0_in >> 2];
	          var $172 = ($silscore_0 | 0) > ($best_silrc_score_017 | 0);
	          var $silscore_0_best_silrc_score_0 = $172 ? $silscore_0 : $best_silrc_score_017;
	          var $b_0_best_silrc_bp_0 = $172 ? $b_019 : $best_silrc_bp_018;
	          var $best_silrc_bp_1 = $b_0_best_silrc_bp_0;
	          var $best_silrc_score_1 = $silscore_0_best_silrc_score_0;
	        }
	        var $best_silrc_score_1;
	        var $best_silrc_bp_1;
	        var $174 = $b_019 + 1 | 0;
	        if (($174 | 0) >= (HEAP32[$21 >> 2] | 0)) {
	          var $best_silrc_score_0_lcssa = $best_silrc_score_1;
	          var $best_silrc_bp_0_lcssa = $best_silrc_bp_1;
	          break $_$86;
	        }
	        var $best_silrc_score_017 = $best_silrc_score_1;
	        var $best_silrc_bp_018 = $best_silrc_bp_1;
	        var $b_019 = $174;
	      }
	    } else {
	      var $best_silrc_score_0_lcssa = -536870912;
	      var $best_silrc_bp_0_lcssa = 0;
	    }
	  } while (0);
	  var $best_silrc_bp_0_lcssa;
	  var $best_silrc_score_0_lcssa;
	  var $179 = $best_silrc_score_0_lcssa + $12 | 0;
	  var $180 = $179 + HEAP32[$ngs$s2 + 126] | 0;
	  var $or_cond = ($180 | 0) > ($10 | 0) & ($180 | 0) > -536870912;
	  do {
	    if ($or_cond) {
	      var $185 = HEAP32[$ngs$s2 + 12];
	      var $189 = HEAP32[HEAP32[$ngs$s2 + 26] + ($185 << 2) >> 2];
	      var $190 = $189 | 0;
	      if ((HEAP16[$189 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	        if (($180 | 0) <= (HEAP32[$189 + 4 >> 2] | 0)) {
	          break;
	        }
	      }
	      _hmm_enter($190, $180, $best_silrc_bp_0_lcssa, $5);
	      var $205 = ((($185 | 0) / 32 & -1) << 2) + HEAP32[$ngs$s2 + 27] | 0;
	      var $207 = HEAP32[$205 >> 2] | 1 << ($185 & 31);
	      HEAP32[$205 >> 2] = $207;
	    }
	  } while (0);
	  var $211 = $179 + HEAP32[$ngs$s2 + 125] | 0;
	  var $or_cond3 = ($211 | 0) > ($10 | 0) & ($211 | 0) > -536870912;
	  $_$125 : do {
	    if ($or_cond3) {
	      var $w_09 = HEAP32[$ngs$s2 + 12] + 1 | 0;
	      var $217 = $ngs + 40 | 0;
	      var $218 = HEAP32[$217 >> 2];
	      if (($w_09 | 0) >= ($218 | 0)) {
	        break;
	      }
	      var $220 = $ngs + 104 | 0;
	      var $221 = $ngs + 108 | 0;
	      var $w_010 = $w_09;
	      var $222 = $218;
	      while (1) {
	        var $222;
	        var $w_010;
	        var $225 = HEAP32[HEAP32[$220 >> 2] + ($w_010 << 2) >> 2];
	        var $226 = ($225 | 0) == 0;
	        do {
	          if ($226) {
	            var $237 = $222;
	          } else {
	            var $228 = $225 | 0;
	            if ((HEAP16[$225 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	              if (($211 | 0) <= (HEAP32[$225 + 4 >> 2] | 0)) {
	                var $237 = $222;
	                break;
	              }
	            }
	            _hmm_enter($228, $211, $best_silrc_bp_0_lcssa, $5);
	            var $244 = ((($w_010 | 0) / 32 & -1) << 2) + HEAP32[$221 >> 2] | 0;
	            var $246 = HEAP32[$244 >> 2] | 1 << ($w_010 & 31);
	            HEAP32[$244 >> 2] = $246;
	            var $237 = HEAP32[$217 >> 2];
	          }
	        } while (0);
	        var $237;
	        var $w_0 = $w_010 + 1 | 0;
	        if (($w_0 | 0) >= ($237 | 0)) {
	          break $_$125;
	        }
	        var $w_010 = $w_0;
	        var $222 = $237;
	      }
	    }
	  } while (0);
	  var $247 = $frame_idx & 1;
	  var $249 = HEAP32[(($247 << 2) + 144 >> 2) + $ngs$s2];
	  var $250 = ($249 | 0) > 0;
	  $_$137 : do {
	    if ($250) {
	      var $255 = $ngs + 104 | 0;
	      var $i_17 = $249;
	      var $_pn = HEAP32[HEAP32[$ngs$s2 + 35] + ($247 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_17;
	        var $awl_08 = $_pn + 4 | 0;
	        var $258 = HEAP32[HEAP32[$255 >> 2] + (HEAP32[$_pn >> 2] << 2) >> 2];
	        if ((HEAP16[$258 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $264 = $258 | 0;
	          _hmm_clear_scores($264);
	        }
	        var $266 = $i_17 - 1 | 0;
	        if (($266 | 0) <= 0) {
	          break $_$137;
	        }
	        var $i_17 = $266;
	        var $_pn = $awl_08;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fwdflat_word_transition["X"] = 1;

	function _ngram_fwdflat_finish($ngs) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  _destroy_fwdflat_chan($ngs);
	  _destroy_fwdflat_wordlist($ngs);
	  var $3 = HEAP32[$ngs$s2 + 27];
	  var $8 = ((HEAP32[$ngs$s2 + 10] + 31 | 0) / 32 & -1) << 2;
	  _memset($3, 0, $8, 4);
	  var $12 = HEAP16[HEAP32[$ngs$s2 + 3] + 92 >> 1];
	  var $13 = $12 << 16 >> 16;
	  _ngram_search_mark_bptable($ngs, $13);
	  var $14 = $ngs + 360 | 0;
	  _ptmr_stop($14);
	  if ($12 << 16 >> 16 > 0) {
	    var $17 = $13 + 1 | 0;
	    var $18 = $17 | 0;
	    var $_idx_val = HEAP32[HEAP32[$ngs$s2 + 2] + 4 >> 2];
	    var $21 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	    var $23 = $18 / ($21 | 0);
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 940);
	    var $25 = HEAP32[$ngs$s2 + 45];
	    var $26 = $13 >> 1;
	    var $28 = ($25 + $26 | 0) / ($17 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str6718 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $25, HEAP32[tempInt + 4 >> 2] = $28, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 942);
	    var $30 = HEAP32[$ngs$s2 + 76];
	    var $32 = ($30 + $26 | 0) / ($17 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str7719 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $30, HEAP32[tempInt + 4 >> 2] = $32, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 944);
	    var $34 = HEAP32[$ngs$s2 + 73];
	    var $35 = ($34 | 0) / ($17 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str11689 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $34, HEAP32[tempInt + 4 >> 2] = $35, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 946);
	    var $37 = HEAP32[$ngs$s2 + 74];
	    var $38 = ($37 | 0) / ($17 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str12690 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $37, HEAP32[tempInt + 4 >> 2] = $38, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 948);
	    var $40 = HEAP32[$ngs$s2 + 75];
	    var $41 = ($40 | 0) / ($17 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str13691 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $40, HEAP32[tempInt + 4 >> 2] = $41, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 951);
	    var $42 = $ngs + 364 | 0;
	    var $43 = (tempDoubleI32[0] = HEAP32[$42 >> 2], tempDoubleI32[1] = HEAP32[$42 + 4 >> 2], tempDoubleF64[0]);
	    var $44 = $43 / $23;
	    __E__pr_info(STRING_TABLE.__str14692 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $43, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $44, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	    __E__pr_info_header(STRING_TABLE.__str678 | 0, 954);
	    var $45 = $ngs + 372 | 0;
	    var $46 = (tempDoubleI32[0] = HEAP32[$45 >> 2], tempDoubleI32[1] = HEAP32[$45 + 4 >> 2], tempDoubleF64[0]);
	    var $47 = $46 / $23;
	    __E__pr_info(STRING_TABLE.__str15693 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $46, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $47, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_fwdflat_finish["X"] = 1;

	function _destroy_fwdflat_chan($ngs) {
	  var $6$s2;
	  var $1 = $ngs + 220 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = HEAP32[$2 >> 2];
	  var $4 = ($3 | 0) > -1;
	  $_$150 : do {
	    if ($4) {
	      var $5 = $ngs + 16 | 0;
	      var $6$s2 = ($ngs + 104 | 0) >> 2;
	      var $7 = $ngs + 72 | 0;
	      var $i_01 = 1;
	      var $10 = $3;
	      var $9 = $2;
	      while (1) {
	        var $9;
	        var $10;
	        var $i_01;
	        if ((HEAP32[(HEAP32[HEAP32[$5 >> 2] + 8 >> 2] + 8 >> 2) + ($10 * 5 | 0)] | 0) == 1) {
	          var $32 = $9;
	        } else {
	          var $20 = HEAP32[HEAP32[$6$s2] + ($10 << 2) >> 2];
	          if (($20 | 0) == 0) {
	            ___assert_func(STRING_TABLE.__str678 | 0, 906, STRING_TABLE.___func___destroy_fwdflat_chan | 0, STRING_TABLE.__str16694 | 0);
	            var $24 = HEAP32[HEAP32[$6$s2] + ($10 << 2) >> 2];
	          } else {
	            var $24 = $20;
	          }
	          var $24;
	          var $26 = HEAP32[$24 + 76 >> 2];
	          var $27 = HEAP32[$7 >> 2];
	          ___listelem_free__($27, $24);
	          var $30 = ($10 << 2) + HEAP32[$6$s2] | 0;
	          HEAP32[$30 >> 2] = $26;
	          _ngram_search_free_all_rc($ngs, $10);
	          var $32 = HEAP32[$1 >> 2];
	        }
	        var $32;
	        var $34 = HEAP32[$32 + ($i_01 << 2) >> 2];
	        if (($34 | 0) <= -1) {
	          break $_$150;
	        }
	        var $i_01 = $i_01 + 1 | 0;
	        var $10 = $34;
	        var $9 = $32;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _destroy_fwdflat_wordlist($ngs) {
	  var $3 = HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0;
	  $_$163 : do {
	    if (!$3) {
	      var $4 = $ngs + 204 | 0;
	      var $5 = HEAP32[$4 >> 2];
	      if (($5 | 0) <= 0) {
	        break;
	      }
	      var $7 = $ngs + 216 | 0;
	      var $8 = $ngs + 76 | 0;
	      var $f_02 = 0;
	      var $9 = $5;
	      while (1) {
	        var $9;
	        var $f_02;
	        var $12 = HEAP32[HEAP32[$7 >> 2] + ($f_02 << 2) >> 2];
	        if (($12 | 0) == 0) {
	          var $20 = $9;
	        } else {
	          var $node_01 = $12;
	          while (1) {
	            var $node_01;
	            var $15 = HEAP32[$node_01 + 40 >> 2];
	            var $16 = HEAP32[$8 >> 2];
	            ___listelem_free__($16, $node_01);
	            if (($15 | 0) == 0) {
	              break;
	            }
	            var $node_01 = $15;
	          }
	          var $20 = HEAP32[$4 >> 2];
	        }
	        var $20;
	        var $21 = $f_02 + 1 | 0;
	        if (($21 | 0) >= ($20 | 0)) {
	          break $_$163;
	        }
	        var $f_02 = $21;
	        var $9 = $20;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _get_expand_wordlist($ngs, $frm, $win) {
	  var $25$s2;
	  var $17$s2;
	  if (HEAP8[$ngs + 64 | 0] << 24 >> 24 == 0) {
	    var $7 = $ngs + 300 | 0;
	    var $9 = HEAP32[$7 >> 2] + HEAP32[$ngs + 232 >> 2] | 0;
	    HEAP32[$7 >> 2] = $9;
	  } else {
	    var $11 = $frm - $win | 0;
	    var $_ = ($11 | 0) < 0 ? 0 : $11;
	    var $13 = $win + $frm | 0;
	    var $15 = HEAP32[$ngs + 204 >> 2];
	    var $ef_0 = ($13 | 0) > ($15 | 0) ? $15 : $13;
	    var $17$s2 = ($ngs + 224 | 0) >> 2;
	    var $19 = HEAP32[$17$s2];
	    var $24 = ((HEAP32[$ngs + 40 >> 2] + 31 | 0) / 32 & -1) << 2;
	    _memset($19, 0, $24, 4);
	    var $25$s2 = ($ngs + 232 | 0) >> 2;
	    HEAP32[$25$s2] = 0;
	    if (($_ | 0) < ($ef_0 | 0)) {
	      var $27 = $ngs + 216 | 0;
	      var $28 = $ngs + 228 | 0;
	      var $29 = $15 ^ -1;
	      var $30 = $13 ^ -1;
	      var $smax = ($29 | 0) > ($30 | 0) ? $29 : $30;
	      var $32 = $smax ^ -1;
	      var $f_03 = $_;
	      while (1) {
	        var $f_03;
	        var $node_01 = HEAP32[HEAP32[$27 >> 2] + ($f_03 << 2) >> 2];
	        var $35 = ($node_01 | 0) == 0;
	        $_$10 : do {
	          if (!$35) {
	            var $node_02 = $node_01;
	            while (1) {
	              var $node_02;
	              var $36 = $node_02 + 4 | 0;
	              var $37 = HEAP32[$36 >> 2];
	              if ((HEAP32[HEAP32[$17$s2] + ((($37 | 0) / 32 & -1) << 2) >> 2] & 1 << ($37 & 31) | 0) == 0) {
	                var $47 = HEAP32[$25$s2];
	                var $48 = $47 + 1 | 0;
	                HEAP32[$25$s2] = $48;
	                var $50 = ($47 << 2) + HEAP32[$28 >> 2] | 0;
	                HEAP32[$50 >> 2] = $37;
	                var $51 = HEAP32[$36 >> 2];
	                var $56 = ((($51 | 0) / 32 & -1) << 2) + HEAP32[$17$s2] | 0;
	                var $58 = HEAP32[$56 >> 2] | 1 << ($51 & 31);
	                HEAP32[$56 >> 2] = $58;
	              }
	              var $node_0 = HEAP32[$node_02 + 40 >> 2];
	              if (($node_0 | 0) == 0) {
	                break $_$10;
	              }
	              var $node_02 = $node_0;
	            }
	          }
	        } while (0);
	        var $62 = $f_03 + 1 | 0;
	        if (($62 | 0) == ($32 | 0)) {
	          break;
	        }
	        var $f_03 = $62;
	      }
	      var $64 = HEAP32[$25$s2];
	      var $_pre_phi = $28;
	    } else {
	      var $64 = 0;
	      var $_pre_phi = $ngs + 228 | 0;
	    }
	    var $_pre_phi;
	    var $64;
	    var $66 = ($64 << 2) + HEAP32[$_pre_phi >> 2] | 0;
	    HEAP32[$66 >> 2] = -1;
	    var $68 = $ngs + 300 | 0;
	    var $70 = HEAP32[$68 >> 2] + HEAP32[$25$s2] | 0;
	    HEAP32[$68 >> 2] = $70;
	  }
	  return;
	  return;
	}

	_get_expand_wordlist["X"] = 1;

	function _ngram_fwdtree_init($ngs) {
	  var $6 = HEAP32[HEAP32[HEAP32[$ngs + 12 >> 2] + 20 >> 2] + 4 >> 2];
	  var $7 = ___ckd_calloc__($6, 12, STRING_TABLE.__str712 | 0, 388);
	  var $8 = $7;
	  HEAP32[$ngs + 172 >> 2] = $8;
	  var $11 = HEAP32[$ngs + 40 >> 2];
	  var $12 = ___ckd_calloc__($11, 16, STRING_TABLE.__str712 | 0, 390);
	  var $13 = $12;
	  HEAP32[$ngs + 152 >> 2] = $13;
	  _init_search_tree($ngs);
	  _create_search_tree($ngs);
	  return;
	  return;
	}

	function _init_search_tree($ngs) {
	  var $104$s2;
	  var $86$s2;
	  var $64$s2;
	  var $9$s2;
	  var $8$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAP32[$ngs$s2 + 4];
	  var $4 = HEAPU32[$ngs$s2 + 10];
	  var $5 = ___ckd_calloc__($4, 4, STRING_TABLE.__str712 | 0, 75);
	  HEAP32[$ngs$s2 + 28] = $5;
	  var $8$s2 = ($ngs + 120 | 0) >> 2;
	  HEAP32[$8$s2] = 0;
	  var $9$s2 = ($ngs + 12 | 0) >> 2;
	  var $14 = HEAPU32[HEAP32[HEAP32[$9$s2] + 20 >> 2] + 4 >> 2];
	  var $17 = ($14 * $14 + 31 | 0) >>> 5;
	  var $18 = ___ckd_calloc__($17, 4, STRING_TABLE.__str712 | 0, 82);
	  var $19 = $18;
	  var $20 = ($4 | 0) > 0;
	  $_$22 : do {
	    if ($20) {
	      var $21 = $2 + 8 | 0;
	      var $ndiph_011 = 0;
	      var $w_012 = 0;
	      while (1) {
	        var $w_012;
	        var $ndiph_011;
	        var $23 = _dict_real_word($2, $w_012);
	        var $24 = ($23 | 0) == 0;
	        do {
	          if ($24) {
	            var $ndiph_1 = $ndiph_011;
	          } else {
	            var $26 = HEAP32[$21 >> 2];
	            if ((HEAP32[($26 + 8 >> 2) + ($w_012 * 5 | 0)] | 0) == 1) {
	              var $32 = HEAP32[$8$s2] + 1 | 0;
	              HEAP32[$8$s2] = $32;
	              var $ndiph_1 = $ndiph_011;
	            } else {
	              var $35 = HEAP32[($26 + 4 >> 2) + ($w_012 * 5 | 0)];
	              var $42 = (HEAP16[$35 + 2 >> 1] << 16 >> 16) + (HEAP16[$35 >> 1] << 16 >> 16) * $14 | 0;
	              var $44 = ((($42 | 0) / 32 & -1) << 2) + $19 | 0;
	              var $45 = HEAP32[$44 >> 2];
	              var $47 = 1 << ($42 & 31);
	              if (($47 & $45 | 0) != 0) {
	                var $ndiph_1 = $ndiph_011;
	                break;
	              }
	              var $51 = $47 | $45;
	              HEAP32[$44 >> 2] = $51;
	              var $ndiph_1 = $ndiph_011 + 1 | 0;
	            }
	          }
	        } while (0);
	        var $ndiph_1;
	        var $54 = $w_012 + 1 | 0;
	        if (($54 | 0) == ($4 | 0)) {
	          var $ndiph_0_lcssa = $ndiph_1;
	          break $_$22;
	        }
	        var $ndiph_011 = $ndiph_1;
	        var $w_012 = $54;
	      }
	    } else {
	      var $ndiph_0_lcssa = 0;
	    }
	  } while (0);
	  var $ndiph_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 99);
	  __E__pr_info(STRING_TABLE.__str32744 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $ndiph_0_lcssa, tempInt));
	  _ckd_free($18);
	  var $62 = HEAP32[$2 + 28 >> 2] + 2 - HEAP32[$2 + 24 >> 2] + HEAP32[$8$s2] | 0;
	  HEAP32[$8$s2] = $62;
	  var $63 = $ndiph_0_lcssa + 1 | 0;
	  var $64$s2 = ($ngs + 84 | 0) >> 2;
	  HEAP32[$64$s2] = $63;
	  if ($20) {
	    var $65 = $2 + 8 | 0;
	    var $w_17 = 0;
	    while (1) {
	      var $w_17;
	      var $67 = _dict_real_word($2, $w_17);
	      var $68 = ($67 | 0) == 0;
	      do {
	        if ($68) {
	          if ((HEAP32[(HEAP32[$65 >> 2] + 8 >> 2) + ($w_17 * 5 | 0)] | 0) == 1) {
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str712 | 0, 111, STRING_TABLE.__str212436 | 0);
	          var $77 = HEAP32[(HEAP32[$65 >> 2] >> 2) + ($w_17 * 5 | 0)];
	          __E__pr_warn(STRING_TABLE.__str34746 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $w_17, HEAP32[tempInt + 4 >> 2] = $77, tempInt));
	          var $79 = HEAP32[$8$s2] - 1 | 0;
	          HEAP32[$8$s2] = $79;
	        }
	      } while (0);
	      var $81 = $w_17 + 1 | 0;
	      if (($81 | 0) == ($4 | 0)) {
	        break;
	      }
	      var $w_17 = $81;
	    }
	    var $83 = HEAP32[$64$s2];
	  } else {
	    var $83 = $63;
	  }
	  var $83;
	  var $84 = ___ckd_calloc__($83, 92, STRING_TABLE.__str712 | 0, 119);
	  var $85 = $84;
	  var $86$s2 = ($ngs + 80 | 0) >> 2;
	  HEAP32[$86$s2] = $85;
	  var $88 = (HEAP32[$64$s2] | 0) > 0;
	  $_$44 : do {
	    if ($88) {
	      var $89 = $ngs + 60 | 0;
	      var $i_03 = 0;
	      var $91 = $85;
	      while (1) {
	        var $91;
	        var $i_03;
	        var $92 = HEAP32[$89 >> 2];
	        _hmm_init($92, $91 + $i_03 * 92 | 0, 1, -1, -1);
	        var $95 = HEAP32[$86$s2] + $i_03 * 92 + 80 | 0;
	        HEAP32[$95 >> 2] = -1;
	        var $97 = HEAP32[$86$s2] + $i_03 * 92 + 76 | 0;
	        HEAP32[$97 >> 2] = 0;
	        var $98 = $i_03 + 1 | 0;
	        if (($98 | 0) >= (HEAP32[$64$s2] | 0)) {
	          break $_$44;
	        }
	        var $i_03 = $98;
	        var $91 = HEAP32[$86$s2];
	      }
	    }
	  } while (0);
	  var $101 = HEAP32[$8$s2];
	  var $102 = ___ckd_calloc__($101, 92, STRING_TABLE.__str712 | 0, 128);
	  var $103 = $102;
	  var $104$s2 = ($ngs + 100 | 0) >> 2;
	  HEAP32[$104$s2] = $103;
	  $_$50 : do {
	    if ($20) {
	      var $105 = $2 + 8 | 0;
	      var $106 = $ngs + 60 | 0;
	      var $107 = $ngs + 104 | 0;
	      var $w_21 = 0;
	      var $i_12 = 0;
	      while (1) {
	        var $i_12;
	        var $w_21;
	        if ((HEAP32[(HEAP32[$105 >> 2] + 8 >> 2) + ($w_21 * 5 | 0)] | 0) == 1) {
	          var $117 = HEAP16[HEAP32[HEAP32[$9$s2] + 20 >> 2] + 40 >> 1];
	          HEAP16[(HEAP32[$104$s2] + 90 >> 1) + ($i_12 * 46 | 0)] = $117;
	          var $123 = HEAP16[HEAP32[(HEAP32[$105 >> 2] + 4 >> 2) + ($w_21 * 5 | 0)] >> 1];
	          HEAP16[(HEAP32[$104$s2] + 88 >> 1) + ($i_12 * 46 | 0)] = $123;
	          var $126 = HEAP32[$106 >> 2];
	          var $127 = HEAP32[$104$s2];
	          var $128 = $127 + $i_12 * 92 | 0;
	          var $131 = HEAP16[($127 + 88 >> 1) + ($i_12 * 46 | 0)] << 16 >> 16;
	          var $136 = HEAP32[HEAP32[HEAP32[$9$s2] + 20 >> 2] + 56 >> 2];
	          var $137 = $136 + $131 * 12 | 0;
	          var $138 = HEAPU8[$137] | HEAPU8[$137 + 1] << 8 | HEAPU8[$137 + 2] << 16 | HEAPU8[$137 + 3] << 24 | 0;
	          var $139 = $136 + $131 * 12 + 4 | 0;
	          var $140 = HEAPU8[$139] | HEAPU8[$139 + 1] << 8 | HEAPU8[$139 + 2] << 16 | HEAPU8[$139 + 3] << 24 | 0;
	          _hmm_init($126, $128, 1, $138, $140);
	          var $142 = HEAP32[$104$s2] + $i_12 * 92 + 76 | 0;
	          HEAP32[$142 >> 2] = 0;
	          var $145 = HEAP32[$104$s2] + $i_12 * 92 | 0;
	          var $147 = ($w_21 << 2) + HEAP32[$107 >> 2] | 0;
	          HEAP32[$147 >> 2] = $145;
	          var $i_2 = $i_12 + 1 | 0;
	        } else {
	          var $i_2 = $i_12;
	        }
	        var $i_2;
	        var $150 = $w_21 + 1 | 0;
	        if (($150 | 0) == ($4 | 0)) {
	          break $_$50;
	        }
	        var $w_21 = $150;
	        var $i_12 = $i_2;
	      }
	    }
	  } while (0);
	  var $151 = HEAP32[$8$s2];
	  var $152 = ___ckd_calloc__($151, 4, STRING_TABLE.__str712 | 0, 146);
	  var $153 = $152;
	  HEAP32[$ngs$s2 + 29] = $153;
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 147);
	  var $156 = HEAP32[$ngs$s2 + 22];
	  var $158 = HEAP32[$ngs$s2 + 23];
	  var $159 = HEAP32[$8$s2];
	  __E__pr_info(STRING_TABLE.__str35747 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $156, HEAP32[tempInt + 4 >> 2] = $158, HEAP32[tempInt + 8 >> 2] = $159, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_init_search_tree["X"] = 1;

	function _create_search_tree($ngs) {
	  var $249$s2;
	  var $52$s1;
	  var $26$s2;
	  var $24$s2;
	  var $21$s2;
	  var $19$s2;
	  var $17$s2;
	  var $15$s2;
	  var $13$s2;
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPU32[$ngs + 16 >> 2];
	  var $4 = HEAPU32[$ngs + 20 >> 2];
	  var $6 = HEAPU32[$ngs + 40 >> 2];
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 186);
	  __E__pr_info(STRING_TABLE.__str26738 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  var $7 = ($6 | 0) > 0;
	  $_$59 : do {
	    if ($7) {
	      var $8 = $ngs + 112 | 0;
	      var $w_021 = 0;
	      while (1) {
	        var $w_021;
	        var $11 = ($w_021 << 2) + HEAP32[$8 >> 2] | 0;
	        HEAP32[$11 >> 2] = -1;
	        var $12 = $w_021 + 1 | 0;
	        if (($12 | 0) == ($6 | 0)) {
	          break $_$59;
	        }
	        var $w_021 = $12;
	      }
	    }
	  } while (0);
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 191);
	  var $13$s2 = ($ngs + 88 | 0) >> 2;
	  var $14 = HEAP32[$13$s2];
	  var $15$s2 = ($ngs + 92 | 0) >> 2;
	  var $16 = HEAP32[$15$s2];
	  var $17$s2 = ($ngs + 120 | 0) >> 2;
	  var $18 = HEAP32[$17$s2];
	  __E__pr_info(STRING_TABLE.__str27739 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = $16, HEAP32[tempInt + 8 >> 2] = $18, tempInt));
	  var $19$s2 = ($ngs + 124 | 0) >> 2;
	  HEAP32[$19$s2] = 0;
	  HEAP32[$13$s2] = 0;
	  HEAP32[$15$s2] = 0;
	  $_$64 : do {
	    if ($7) {
	      var $20 = $ngs + 56 | 0;
	      var $21$s2 = ($2 + 8 | 0) >> 2;
	      var $22 = $ngs + 116 | 0;
	      var $23 = $ngs + 80 | 0;
	      var $24$s2 = ($ngs + 12 | 0) >> 2;
	      var $25 = $ngs + 112 | 0;
	      var $26$s2 = ($ngs + 68 | 0) >> 2;
	      var $w_116 = 0;
	      while (1) {
	        var $w_116;
	        var $28 = HEAP32[$20 >> 2];
	        var $31 = HEAP32[(HEAP32[$21$s2] + 16 >> 2) + ($w_116 * 5 | 0)];
	        var $32 = _ngram_model_set_known_wid($28, $31);
	        if (($32 | 0) != 0) {
	          var $35 = HEAP32[$21$s2];
	          var $37 = HEAP32[($35 + 8 >> 2) + ($w_116 * 5 | 0)];
	          if (($37 | 0) == 1) {
	            var $40 = HEAP32[$19$s2];
	            var $41 = $40 + 1 | 0;
	            HEAP32[$19$s2] = $41;
	            var $43 = ($40 << 2) + HEAP32[$22 >> 2] | 0;
	            HEAP32[$43 >> 2] = $w_116;
	          } else {
	            var $46 = HEAP32[($35 + 4 >> 2) + ($w_116 * 5 | 0)];
	            var $47 = HEAP16[$46 >> 1];
	            var $48 = $47 << 16 >> 16;
	            var $50 = HEAP16[$46 + 2 >> 1];
	            var $51 = HEAP32[$13$s2];
	            var $52 = HEAPU32[$23 >> 2], $52$s1 = $52 >> 1;
	            var $i_0 = 0;
	            while (1) {
	              var $i_0;
	              if (($i_0 | 0) >= ($51 | 0)) {
	                break;
	              }
	              if (HEAP16[$52$s1 + ($i_0 * 46 | 0) + 44] << 16 >> 16 == $47 << 16 >> 16) {
	                if (HEAP16[$52$s1 + ($i_0 * 46 | 0) + 45] << 16 >> 16 == $50 << 16 >> 16) {
	                  break;
	                }
	              }
	              var $i_0 = $i_0 + 1 | 0;
	            }
	            if (($i_0 | 0) == ($51 | 0)) {
	              var $72 = HEAP32[HEAP32[HEAP32[$24$s2] + 20 >> 2] + 56 >> 2] + $48 * 12 + 4 | 0;
	              var $74 = (HEAPU8[$72] | HEAPU8[$72 + 1] << 8 | HEAPU8[$72 + 2] << 16 | HEAPU8[$72 + 3] << 24) & 65535;
	              HEAP16[$52$s1 + ($51 * 46 | 0) + 34] = $74;
	              var $81 = HEAP32[HEAP32[HEAP32[$24$s2] + 20 >> 2] + 56 >> 2] + $48 * 12 | 0;
	              var $83 = (HEAPU8[$81] | HEAPU8[$81 + 1] << 8 | HEAPU8[$81 + 2] << 16 | HEAPU8[$81 + 3] << 24) & 65535;
	              HEAP16[$52$s1 + ($51 * 46 | 0) + 27] = $83;
	              HEAP16[$52$s1 + ($51 * 46 | 0) + 44] = $47;
	              HEAP16[$52$s1 + ($51 * 46 | 0) + 45] = $50;
	              var $88 = HEAP32[$13$s2] + 1 | 0;
	              HEAP32[$13$s2] = $88;
	              var $_pn = $51;
	              var $90 = HEAP32[(HEAP32[$21$s2] + 8 >> 2) + ($w_116 * 5 | 0)];
	            } else {
	              var $_pn = $i_0;
	              var $90 = $37;
	            }
	            var $90;
	            var $_pn;
	            if (($90 | 0) == 2) {
	              var $93 = $52 + $_pn * 92 + 80 | 0;
	              var $94 = HEAP32[$93 >> 2];
	              if (($94 | 0) < 0) {
	                HEAP32[$93 >> 2] = $w_116;
	              } else {
	                var $96 = HEAP32[$25 >> 2];
	                var $j_0 = $94;
	                while (1) {
	                  var $j_0;
	                  var $99 = ($j_0 << 2) + $96 | 0;
	                  var $100 = HEAP32[$99 >> 2];
	                  if (($100 | 0) <= -1) {
	                    break;
	                  }
	                  var $j_0 = $100;
	                }
	                HEAP32[$99 >> 2] = $w_116;
	              }
	            } else {
	              var $104 = _dict2pid_internal($4, $w_116, 1);
	              var $105 = $104 & 65535;
	              var $117 = HEAP32[HEAP32[HEAP32[$24$s2] + 20 >> 2] + 56 >> 2] + (HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + 2 >> 1] << 16 >> 16) * 12 + 4 | 0;
	              var $118 = HEAPU8[$117] | HEAPU8[$117 + 1] << 8 | HEAPU8[$117 + 2] << 16 | HEAPU8[$117 + 3] << 24 | 0;
	              var $119 = $52 + $_pn * 92 + 76 | 0;
	              var $120 = HEAPU32[$119 >> 2];
	              var $121 = ($120 | 0) == 0;
	              $_$93 : do {
	                if ($121) {
	                  var $123 = HEAP32[$26$s2];
	                  var $124 = ___listelem_malloc__($123, STRING_TABLE.__str712 | 0, 252);
	                  var $125 = $124;
	                  HEAP32[$119 >> 2] = $125;
	                  var $131 = HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + 2 >> 1] << 16 >> 16;
	                  _init_nonroot_chan($ngs, $125, $105, $131, $118);
	                  var $133 = HEAP32[$15$s2] + 1 | 0;
	                  HEAP32[$15$s2] = $133;
	                  var $hmm_2_ph = $125;
	                } else {
	                  var $hmm_0 = $120;
	                  var $prev_hmm_0 = 0;
	                  while (1) {
	                    var $prev_hmm_0;
	                    var $hmm_0;
	                    if (($hmm_0 | 0) == 0) {
	                      break;
	                    }
	                    if (HEAP16[$hmm_0 + 52 >> 1] << 16 >> 16 == $104 << 16 >> 16) {
	                      var $hmm_2_ph = $hmm_0;
	                      break $_$93;
	                    }
	                    var $prev_hmm_0 = $hmm_0;
	                    var $hmm_0 = HEAP32[$hmm_0 + 80 >> 2];
	                  }
	                  var $142 = HEAP32[$26$s2];
	                  var $143 = ___listelem_malloc__($142, STRING_TABLE.__str712 | 0, 262);
	                  var $144 = $143;
	                  HEAP32[$prev_hmm_0 + 80 >> 2] = $144;
	                  var $151 = HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + 2 >> 1] << 16 >> 16;
	                  _init_nonroot_chan($ngs, $144, $105, $151, $118);
	                  var $153 = HEAP32[$15$s2] + 1 | 0;
	                  HEAP32[$15$s2] = $153;
	                  var $hmm_2_ph = $144;
	                }
	              } while (0);
	              var $hmm_2_ph;
	              var $158 = (HEAP32[(HEAP32[$21$s2] + 8 >> 2) + ($w_116 * 5 | 0)] - 1 | 0) > 2;
	              $_$101 : do {
	                if ($158) {
	                  var $p_013 = 2;
	                  var $hmm_214 = $hmm_2_ph;
	                  while (1) {
	                    var $hmm_214;
	                    var $p_013;
	                    var $159 = _dict2pid_internal($4, $w_116, $p_013);
	                    var $160 = $159 & 65535;
	                    var $172 = HEAP32[HEAP32[HEAP32[$24$s2] + 20 >> 2] + 56 >> 2] + (HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + ($p_013 << 1) >> 1] << 16 >> 16) * 12 + 4 | 0;
	                    var $173 = HEAPU8[$172] | HEAPU8[$172 + 1] << 8 | HEAPU8[$172 + 2] << 16 | HEAPU8[$172 + 3] << 24 | 0;
	                    var $174 = $hmm_214 + 76 | 0;
	                    var $175 = HEAPU32[$174 >> 2];
	                    var $176 = ($175 | 0) == 0;
	                    $_$104 : do {
	                      if ($176) {
	                        var $178 = HEAP32[$26$s2];
	                        var $179 = ___listelem_malloc__($178, STRING_TABLE.__str712 | 0, 274);
	                        var $180 = $179;
	                        HEAP32[$174 >> 2] = $180;
	                        var $186 = HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + ($p_013 << 1) >> 1] << 16 >> 16;
	                        _init_nonroot_chan($ngs, $180, $160, $186, $173);
	                        var $188 = HEAP32[$15$s2] + 1 | 0;
	                        HEAP32[$15$s2] = $188;
	                        var $hmm_4 = $180;
	                      } else {
	                        var $prev_hmm1_0 = 0;
	                        var $hmm_3 = $175;
	                        while (1) {
	                          var $hmm_3;
	                          var $prev_hmm1_0;
	                          if (($hmm_3 | 0) == 0) {
	                            break;
	                          }
	                          if (HEAP16[$hmm_3 + 52 >> 1] << 16 >> 16 == $159 << 16 >> 16) {
	                            var $hmm_4 = $hmm_3;
	                            break $_$104;
	                          }
	                          var $prev_hmm1_0 = $hmm_3;
	                          var $hmm_3 = HEAP32[$hmm_3 + 80 >> 2];
	                        }
	                        var $197 = HEAP32[$26$s2];
	                        var $198 = ___listelem_malloc__($197, STRING_TABLE.__str712 | 0, 286);
	                        var $199 = $198;
	                        HEAP32[$prev_hmm1_0 + 80 >> 2] = $199;
	                        var $206 = HEAP16[HEAP32[(HEAP32[$21$s2] + 4 >> 2) + ($w_116 * 5 | 0)] + ($p_013 << 1) >> 1] << 16 >> 16;
	                        _init_nonroot_chan($ngs, $199, $160, $206, $173);
	                        var $208 = HEAP32[$15$s2] + 1 | 0;
	                        HEAP32[$15$s2] = $208;
	                        var $hmm_4 = $199;
	                      }
	                    } while (0);
	                    var $hmm_4;
	                    var $209 = $p_013 + 1 | 0;
	                    if (($209 | 0) >= (HEAP32[(HEAP32[$21$s2] + 8 >> 2) + ($w_116 * 5 | 0)] - 1 | 0)) {
	                      var $hmm_2_lcssa = $hmm_4;
	                      break $_$101;
	                    }
	                    var $p_013 = $209;
	                    var $hmm_214 = $hmm_4;
	                  }
	                } else {
	                  var $hmm_2_lcssa = $hmm_2_ph;
	                }
	              } while (0);
	              var $hmm_2_lcssa;
	              var $215 = $hmm_2_lcssa + 88 | 0;
	              var $216 = HEAP32[$215 >> 2];
	              if (($216 | 0) < 0) {
	                HEAP32[$215 >> 2] = $w_116;
	              } else {
	                var $218 = HEAP32[$25 >> 2];
	                var $j_1 = $216;
	                while (1) {
	                  var $j_1;
	                  var $221 = ($j_1 << 2) + $218 | 0;
	                  var $222 = HEAP32[$221 >> 2];
	                  if (($222 | 0) <= -1) {
	                    break;
	                  }
	                  var $j_1 = $222;
	                }
	                HEAP32[$221 >> 2] = $w_116;
	              }
	            }
	          }
	        }
	        var $226 = $w_116 + 1 | 0;
	        if (($226 | 0) == ($6 | 0)) {
	          break;
	        }
	        var $w_116 = $226;
	      }
	      var $_pre = HEAP32[$19$s2];
	      HEAP32[$17$s2] = $_pre;
	      var $w_24 = 0;
	      while (1) {
	        var $w_24;
	        var $230 = (HEAP32[(HEAP32[$21$s2] + 8 >> 2) + ($w_24 * 5 | 0)] | 0) == 1;
	        do {
	          if ($230) {
	            var $232 = _dict_real_word($2, $w_24);
	            if (($232 | 0) != 0) {
	              break;
	            }
	            var $235 = HEAP32[$20 >> 2];
	            var $238 = HEAP32[(HEAP32[$21$s2] + 16 >> 2) + ($w_24 * 5 | 0)];
	            var $239 = _ngram_model_set_known_wid($235, $238);
	            if (($239 | 0) != 0) {
	              break;
	            }
	            var $242 = HEAP32[$17$s2];
	            var $243 = $242 + 1 | 0;
	            HEAP32[$17$s2] = $243;
	            var $245 = ($242 << 2) + HEAP32[$22 >> 2] | 0;
	            HEAP32[$245 >> 2] = $w_24;
	          }
	        } while (0);
	        var $247 = $w_24 + 1 | 0;
	        if (($247 | 0) == ($6 | 0)) {
	          break $_$64;
	        }
	        var $w_24 = $247;
	      }
	    } else {
	      HEAP32[$17$s2] = 0;
	    }
	  } while (0);
	  var $248 = HEAP32[$15$s2];
	  var $249$s2 = ($ngs + 96 | 0) >> 2;
	  if (($248 | 0) >= (HEAP32[$249$s2] | 0)) {
	    var $253 = $248 + 128 | 0;
	    HEAP32[$249$s2] = $253;
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 326);
	    var $254 = HEAP32[$249$s2];
	    __E__pr_info(STRING_TABLE.__str28740 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $254, tempInt));
	    var $255 = $ngs + 128 | 0;
	    var $256 = HEAP32[$255 >> 2];
	    if (($256 | 0) != 0) {
	      var $259 = $256;
	      _ckd_free_2d($259);
	    }
	    var $261 = HEAP32[$249$s2];
	    var $262 = ___ckd_calloc_2d__(2, $261, 4, STRING_TABLE.__str712 | 0, 332);
	    var $263 = $262;
	    HEAP32[$255 >> 2] = $263;
	  }
	  if ((HEAP32[$13$s2] | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str712 | 0, 336, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str30742 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 338);
	  var $268 = HEAP32[$13$s2];
	  var $269 = HEAP32[$15$s2];
	  var $270 = HEAP32[$17$s2];
	  __E__pr_info(STRING_TABLE.__str31743 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $268, HEAP32[tempInt + 4 >> 2] = $269, HEAP32[tempInt + 8 >> 2] = $270, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_create_search_tree["X"] = 1;

	function _ngram_fwdtree_deinit($ngs) {
	  var __stackBase__ = STACKTOP;
	  var $3 = HEAP32[$ngs + 464 >> 2] | 0;
	  var $_idx_val = HEAP32[HEAP32[$ngs + 8 >> 2] + 4 >> 2];
	  var $6 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	  var $8 = $3 / ($6 | 0);
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 430);
	  var $9 = $ngs + 328 | 0;
	  var $10 = (tempDoubleI32[0] = HEAP32[$9 >> 2], tempDoubleI32[1] = HEAP32[$9 + 4 >> 2], tempDoubleF64[0]);
	  var $11 = $10 / $8;
	  __E__pr_info(STRING_TABLE.__str3715 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $10, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $11, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  __E__pr_info_header(STRING_TABLE.__str712 | 0, 433);
	  var $12 = $ngs + 336 | 0;
	  var $13 = (tempDoubleI32[0] = HEAP32[$12 >> 2], tempDoubleI32[1] = HEAP32[$12 + 4 >> 2], tempDoubleF64[0]);
	  var $14 = $13 / $8;
	  __E__pr_info(STRING_TABLE.__str4716 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $14, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  _reinit_search_tree($ngs);
	  _deinit_search_tree($ngs);
	  HEAP32[$ngs + 96 >> 2] = 0;
	  var $16 = $ngs + 128 | 0;
	  var $18 = HEAP32[$16 >> 2];
	  _ckd_free_2d($18);
	  HEAP32[$16 >> 2] = 0;
	  var $19 = $ngs + 168 | 0;
	  var $21 = HEAP32[$19 >> 2];
	  _ckd_free($21);
	  HEAP32[$19 >> 2] = 0;
	  var $22 = $ngs + 172 | 0;
	  var $24 = HEAP32[$22 >> 2];
	  _ckd_free($24);
	  HEAP32[$22 >> 2] = 0;
	  var $25 = $ngs + 152 | 0;
	  var $27 = HEAP32[$25 >> 2];
	  _ckd_free($27);
	  HEAP32[$25 >> 2] = 0;
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _reinit_search_tree($ngs) {
	  var $4$s2;
	  var $1 = $ngs + 88 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  $_$140 : do {
	    if ($3) {
	      var $4$s2 = ($ngs + 80 | 0) >> 2;
	      var $i_02 = 0;
	      while (1) {
	        var $i_02;
	        var $6 = HEAP32[$4$s2];
	        var $8 = HEAP32[($6 + 76 >> 2) + ($i_02 * 23 | 0)];
	        if (($8 | 0) == 0) {
	          var $14 = $6;
	        } else {
	          var $hmm_01 = $8;
	          while (1) {
	            var $hmm_01;
	            var $11 = HEAP32[$hmm_01 + 80 >> 2];
	            _reinit_search_subtree($ngs, $hmm_01);
	            if (($11 | 0) == 0) {
	              break;
	            }
	            var $hmm_01 = $11;
	          }
	          var $14 = HEAP32[$4$s2];
	        }
	        var $14;
	        HEAP32[($14 + 80 >> 2) + ($i_02 * 23 | 0)] = -1;
	        var $17 = HEAP32[$4$s2] + $i_02 * 92 + 76 | 0;
	        HEAP32[$17 >> 2] = 0;
	        var $18 = $i_02 + 1 | 0;
	        if (($18 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          break $_$140;
	        }
	        var $i_02 = $18;
	      }
	    }
	  } while (0);
	  HEAP32[$ngs + 92 >> 2] = 0;
	  return;
	  return;
	}

	function _deinit_search_tree($ngs) {
	  var $1 = $ngs + 84 | 0;
	  var $2 = $ngs + 100 | 0;
	  var $3 = HEAP32[$2 >> 2];
	  if (($3 | 0) != 0) {
	    var $5 = $3;
	    _ckd_free($5);
	    HEAP32[$2 >> 2] = 0;
	  }
	  HEAP32[$ngs + 88 >> 2] = 0;
	  HEAP32[$1 >> 2] = 0;
	  var $8 = $ngs + 80 | 0;
	  var $10 = HEAP32[$8 >> 2];
	  _ckd_free($10);
	  HEAP32[$8 >> 2] = 0;
	  var $11 = $ngs + 116 | 0;
	  var $13 = HEAP32[$11 >> 2];
	  _ckd_free($13);
	  HEAP32[$11 >> 2] = 0;
	  var $14 = $ngs + 112 | 0;
	  var $16 = HEAP32[$14 >> 2];
	  _ckd_free($16);
	  HEAP32[$14 >> 2] = 0;
	  return;
	  return;
	}

	function _ngram_fwdtree_reinit($ngs) {
	  _reinit_search_tree($ngs);
	  _deinit_search_tree($ngs);
	  var $1 = $ngs + 152 | 0;
	  var $3 = HEAP32[$1 >> 2];
	  _ckd_free($3);
	  var $4 = $ngs + 40 | 0;
	  var $5 = HEAP32[$4 >> 2];
	  var $6 = ___ckd_calloc__($5, 16, STRING_TABLE.__str712 | 0, 463);
	  var $7 = $6;
	  HEAP32[$1 >> 2] = $7;
	  var $8 = $ngs + 104 | 0;
	  var $10 = HEAP32[$8 >> 2];
	  _ckd_free($10);
	  var $11 = HEAP32[$4 >> 2];
	  var $12 = ___ckd_calloc__($11, 4, STRING_TABLE.__str712 | 0, 466);
	  var $13 = $12;
	  HEAP32[$8 >> 2] = $13;
	  _init_search_tree($ngs);
	  _create_search_tree($ngs);
	  return;
	  return;
	}

	function _ngram_fwdtree_start($ngs) {
	  var $ngs$s2 = $ngs >> 2;
	  var $2 = HEAP32[$ngs$s2 + 10];
	  var $4 = $ngs + 268 | 0;
	  for (var $$dest = $4 >> 2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
	    HEAP32[$$dest] = 0;
	  }
	  var $5 = $ngs + 308 | 0;
	  _ptmr_reset($5);
	  _ptmr_start($5);
	  HEAP32[$ngs$s2 + 45] = 0;
	  HEAP32[$ngs$s2 + 48] = 0;
	  var $8 = ($2 | 0) > 0;
	  $_$3 : do {
	    if ($8) {
	      var $9 = $ngs + 212 | 0;
	      var $i_06 = 0;
	      while (1) {
	        var $i_06;
	        var $12 = ($i_06 << 2) + HEAP32[$9 >> 2] | 0;
	        HEAP32[$12 >> 2] = -1;
	        var $13 = $i_06 + 1 | 0;
	        if (($13 | 0) == ($2 | 0)) {
	          break $_$3;
	        }
	        var $i_06 = $13;
	      }
	    }
	  } while (0);
	  HEAP32[$ngs$s2 + 34] = 0;
	  HEAP32[$ngs$s2 + 33] = 0;
	  HEAP32[$ngs$s2 + 37] = 0;
	  HEAP32[$ngs$s2 + 36] = 0;
	  HEAP32[$ngs$s2 + 62] = 0;
	  HEAP32[$ngs$s2 + 64] = 0;
	  $_$8 : do {
	    if ($8) {
	      var $20 = $ngs + 160 | 0;
	      var $i_12 = 0;
	      while (1) {
	        var $i_12;
	        var $23 = HEAP32[$20 >> 2] + $i_12 * 12 | 0;
	        HEAP32[$23 >> 2] = -1;
	        var $24 = $i_12 + 1 | 0;
	        if (($24 | 0) == ($2 | 0)) {
	          break $_$8;
	        }
	        var $i_12 = $24;
	      }
	    }
	  } while (0);
	  HEAP32[$ngs$s2 + 51] = 0;
	  var $26 = $ngs + 24 | 0;
	  var $27 = HEAP32[$26 >> 2];
	  _ckd_free($27);
	  HEAP32[$26 >> 2] = 0;
	  var $28 = $ngs + 120 | 0;
	  var $30 = (HEAP32[$28 >> 2] | 0) > 0;
	  $_$13 : do {
	    if ($30) {
	      var $31 = $ngs + 116 | 0;
	      var $32 = $ngs + 104 | 0;
	      var $i_21 = 0;
	      while (1) {
	        var $i_21;
	        var $40 = HEAP32[HEAP32[$32 >> 2] + (HEAP32[HEAP32[$31 >> 2] + ($i_21 << 2) >> 2] << 2) >> 2] | 0;
	        _hmm_clear($40);
	        var $41 = $i_21 + 1 | 0;
	        if (($41 | 0) >= (HEAP32[$28 >> 2] | 0)) {
	          var $_pre_phi = $32;
	          break $_$13;
	        }
	        var $i_21 = $41;
	      }
	    } else {
	      var $_pre_phi = $ngs + 104 | 0;
	    }
	  } while (0);
	  var $_pre_phi;
	  var $51 = HEAP32[HEAP32[$_pre_phi >> 2] + (HEAP32[HEAP32[$ngs$s2 + 4] + 32 >> 2] << 2) >> 2] | 0;
	  _hmm_clear($51);
	  _hmm_enter($51, 0, -1, 0);
	  return;
	  return;
	}

	_ngram_fwdtree_start["X"] = 1;

	function _ngram_fwdtree_search($ngs, $frame_idx) {
	  var $20$s2;
	  var $2$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $1 = __stackBase__, $1$s2 = $1 >> 2;
	  HEAP32[$1$s2] = $frame_idx;
	  var $2$s2 = ($ngs + 12 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  if (HEAP8[$3 + 89 | 0] << 24 >> 24 == 0) {
	    _compute_sen_active($ngs, $frame_idx);
	    var $9 = HEAP32[$2$s2];
	  } else {
	    var $9 = $3;
	  }
	  var $9;
	  var $10 = _acmod_score($9, $1);
	  var $11 = ($10 | 0) == 0;
	  do {
	    if ($11) {
	      var $_0 = 0;
	    } else {
	      var $16 = $ngs + 304 | 0;
	      var $18 = HEAP32[$16 >> 2] + HEAP32[HEAP32[$2$s2] + 52 >> 2] | 0;
	      HEAP32[$16 >> 2] = $18;
	      var $19 = HEAP32[$1$s2];
	      _ngram_search_mark_bptable($ngs, $19);
	      var $20$s2 = ($ngs + 248 | 0) >> 2;
	      var $21 = HEAP32[$20$s2];
	      if (($21 | 0) < -536870911) {
	        var $_0 = 0;
	        break;
	      }
	      if (((HEAP32[$ngs + 468 >> 2] << 1) + $21 | 0) < -536870912) {
	        __E__pr_info_header(STRING_TABLE.__str712 | 0, 1477);
	        var $30 = HEAP32[$1$s2];
	        var $31 = HEAP32[$20$s2];
	        __E__pr_info(STRING_TABLE.__str61184 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $30, HEAP32[tempInt + 4 >> 2] = $31, tempInt));
	        var $32 = HEAP32[$1$s2];
	        var $33 = HEAP32[$20$s2];
	        _renormalize_scores($ngs, $32, $33);
	      }
	      var $35 = HEAP32[$1$s2];
	      _evaluate_channels($ngs, $10, $35);
	      var $36 = HEAP32[$1$s2];
	      _prune_channels($ngs, $36);
	      var $37 = HEAP32[$1$s2];
	      _bptable_maxwpf($ngs, $37);
	      var $38 = HEAP32[$1$s2];
	      _word_transition($ngs, $38);
	      var $39 = HEAP32[$1$s2];
	      _deactivate_channels($ngs, $39);
	      var $40 = $ngs + 204 | 0;
	      var $42 = HEAP32[$40 >> 2] + 1 | 0;
	      HEAP32[$40 >> 2] = $42;
	      var $_0 = 1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_fwdtree_search["X"] = 1;

	function _compute_sen_active($ngs, $frame_idx) {
	  var $1$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var $1$s2 = ($ngs + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  _acmod_clear_active($2);
	  var $4 = HEAP32[$ngs$s2 + 22];
	  var $5 = ($4 | 0) > 0;
	  $_$31 : do {
	    if ($5) {
	      var $i_019 = $4;
	      var $rhmm_020 = HEAP32[$ngs$s2 + 20];
	      while (1) {
	        var $rhmm_020;
	        var $i_019;
	        if ((HEAP16[$rhmm_020 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $15 = HEAP32[$1$s2];
	          _acmod_activate_hmm($15, $rhmm_020 | 0);
	        }
	        var $17 = $i_019 - 1 | 0;
	        if (($17 | 0) <= 0) {
	          break $_$31;
	        }
	        var $i_019 = $17;
	        var $rhmm_020 = $rhmm_020 + 92 | 0;
	      }
	    }
	  } while (0);
	  var $20 = $frame_idx & 1;
	  var $22 = HEAP32[(($20 << 2) + 132 >> 2) + $ngs$s2];
	  var $23 = ($22 | 0) > 0;
	  $_$39 : do {
	    if ($23) {
	      var $i_114 = $22;
	      var $_pn15 = HEAP32[HEAP32[$ngs$s2 + 32] + ($20 << 2) >> 2];
	      while (1) {
	        var $_pn15;
	        var $i_114;
	        var $acl_0 = $_pn15 + 4 | 0;
	        var $29 = HEAP32[$1$s2];
	        var $30 = HEAP32[$_pn15 >> 2] | 0;
	        _acmod_activate_hmm($29, $30);
	        var $31 = $i_114 - 1 | 0;
	        if (($31 | 0) <= 0) {
	          break $_$39;
	        }
	        var $i_114 = $31;
	        var $_pn15 = $acl_0;
	      }
	    }
	  } while (0);
	  var $34 = HEAP32[(($20 << 2) + 144 >> 2) + $ngs$s2];
	  var $35 = ($34 | 0) > 0;
	  $_$44 : do {
	    if ($35) {
	      var $40 = $ngs + 104 | 0;
	      var $i_29 = $34;
	      var $_pn = HEAP32[HEAP32[$ngs$s2 + 35] + ($20 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_29;
	        var $awl_011 = $_pn + 4 | 0;
	        var $hmm_13 = HEAP32[HEAP32[$40 >> 2] + (HEAP32[$_pn >> 2] << 2) >> 2];
	        var $48 = ($hmm_13 | 0) == 0;
	        $_$48 : do {
	          if (!$48) {
	            var $hmm_14 = $hmm_13;
	            while (1) {
	              var $hmm_14;
	              var $49 = HEAP32[$1$s2];
	              _acmod_activate_hmm($49, $hmm_14 | 0);
	              var $hmm_1 = HEAP32[$hmm_14 + 76 >> 2];
	              if (($hmm_1 | 0) == 0) {
	                break $_$48;
	              }
	              var $hmm_14 = $hmm_1;
	            }
	          }
	        } while (0);
	        var $53 = $i_29 - 1 | 0;
	        if (($53 | 0) <= 0) {
	          break $_$44;
	        }
	        var $i_29 = $53;
	        var $_pn = $awl_011;
	      }
	    }
	  } while (0);
	  var $41 = $ngs + 120 | 0;
	  var $42 = HEAP32[$41 >> 2];
	  var $43 = ($42 | 0) > 0;
	  $_$53 : do {
	    if ($43) {
	      var $44 = $ngs + 116 | 0;
	      var $45 = $ngs + 104 | 0;
	      var $i_32 = 0;
	      var $55 = $42;
	      while (1) {
	        var $55;
	        var $i_32;
	        var $61 = HEAP32[HEAP32[$45 >> 2] + (HEAP32[HEAP32[$44 >> 2] + ($i_32 << 2) >> 2] << 2) >> 2];
	        if ((HEAP16[$61 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $67 = $61 | 0;
	          var $68 = HEAP32[$1$s2];
	          _acmod_activate_hmm($68, $67);
	          var $70 = HEAP32[$41 >> 2];
	        } else {
	          var $70 = $55;
	        }
	        var $70;
	        var $71 = $i_32 + 1 | 0;
	        if (($71 | 0) >= ($70 | 0)) {
	          break $_$53;
	        }
	        var $i_32 = $71;
	        var $55 = $70;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_compute_sen_active["X"] = 1;

	function _renormalize_scores($ngs, $frame_idx, $norm) {
	  var $ngs$s2 = $ngs >> 2;
	  var $2 = HEAP32[$ngs$s2 + 22];
	  var $3 = ($2 | 0) > 0;
	  $_$62 : do {
	    if ($3) {
	      var $rhmm_019 = HEAP32[$ngs$s2 + 20];
	      var $i_020 = $2;
	      while (1) {
	        var $i_020;
	        var $rhmm_019;
	        if ((HEAP16[$rhmm_019 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          _hmm_normalize($rhmm_019 | 0, $norm);
	        }
	        var $14 = $i_020 - 1 | 0;
	        if (($14 | 0) <= 0) {
	          break $_$62;
	        }
	        var $rhmm_019 = $rhmm_019 + 92 | 0;
	        var $i_020 = $14;
	      }
	    }
	  } while (0);
	  var $17 = $frame_idx & 1;
	  var $19 = HEAP32[(($17 << 2) + 132 >> 2) + $ngs$s2];
	  var $20 = ($19 | 0) > 0;
	  $_$70 : do {
	    if ($20) {
	      var $_pn14 = HEAP32[HEAP32[$ngs$s2 + 32] + ($17 << 2) >> 2];
	      var $i_115 = $19;
	      while (1) {
	        var $i_115;
	        var $_pn14;
	        var $acl_0 = $_pn14 + 4 | 0;
	        var $26 = HEAP32[$_pn14 >> 2] | 0;
	        _hmm_normalize($26, $norm);
	        var $27 = $i_115 - 1 | 0;
	        if (($27 | 0) <= 0) {
	          break $_$70;
	        }
	        var $_pn14 = $acl_0;
	        var $i_115 = $27;
	      }
	    }
	  } while (0);
	  var $30 = HEAP32[(($17 << 2) + 144 >> 2) + $ngs$s2];
	  var $31 = ($30 | 0) > 0;
	  $_$75 : do {
	    if ($31) {
	      var $36 = $ngs + 104 | 0;
	      var $i_29 = $30;
	      var $_pn = HEAP32[HEAP32[$ngs$s2 + 35] + ($17 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_29;
	        var $awl_011 = $_pn + 4 | 0;
	        var $hmm_13 = HEAP32[HEAP32[$36 >> 2] + (HEAP32[$_pn >> 2] << 2) >> 2];
	        var $44 = ($hmm_13 | 0) == 0;
	        $_$79 : do {
	          if (!$44) {
	            var $hmm_14 = $hmm_13;
	            while (1) {
	              var $hmm_14;
	              _hmm_normalize($hmm_14 | 0, $norm);
	              var $hmm_1 = HEAP32[$hmm_14 + 76 >> 2];
	              if (($hmm_1 | 0) == 0) {
	                break $_$79;
	              }
	              var $hmm_14 = $hmm_1;
	            }
	          }
	        } while (0);
	        var $48 = $i_29 - 1 | 0;
	        if (($48 | 0) <= 0) {
	          break $_$75;
	        }
	        var $i_29 = $48;
	        var $_pn = $awl_011;
	      }
	    }
	  } while (0);
	  var $37 = $ngs + 120 | 0;
	  var $38 = HEAP32[$37 >> 2];
	  var $39 = ($38 | 0) > 0;
	  $_$84 : do {
	    if ($39) {
	      var $40 = $ngs + 116 | 0;
	      var $41 = $ngs + 104 | 0;
	      var $i_32 = 0;
	      var $50 = $38;
	      while (1) {
	        var $50;
	        var $i_32;
	        var $56 = HEAP32[HEAP32[$41 >> 2] + (HEAP32[HEAP32[$40 >> 2] + ($i_32 << 2) >> 2] << 2) >> 2];
	        if ((HEAP16[$56 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $62 = $56 | 0;
	          _hmm_normalize($62, $norm);
	          var $64 = HEAP32[$37 >> 2];
	        } else {
	          var $64 = $50;
	        }
	        var $64;
	        var $65 = $i_32 + 1 | 0;
	        if (($65 | 0) >= ($64 | 0)) {
	          break $_$84;
	        }
	        var $i_32 = $65;
	        var $50 = $64;
	      }
	    }
	  } while (0);
	  HEAP32[$ngs$s2 + 64] = 1;
	  return;
	  return;
	}

	_renormalize_scores["X"] = 1;

	function _evaluate_channels($ngs, $senone_scores, $frame_idx) {
	  var $5$s2;
	  var $3 = HEAP32[$ngs + 60 >> 2] + 8 | 0;
	  HEAP32[$3 >> 2] = $senone_scores;
	  var $4 = _eval_root_chan($ngs, $frame_idx);
	  var $5$s2 = ($ngs + 248 | 0) >> 2;
	  HEAP32[$5$s2] = $4;
	  var $6 = _eval_nonroot_chan($ngs, $frame_idx);
	  if (($6 | 0) > (HEAP32[$5$s2] | 0)) {
	    HEAP32[$5$s2] = $6;
	  }
	  var $11 = _eval_word_chan($ngs, $frame_idx);
	  if (($11 | 0) > (HEAP32[$5$s2] | 0)) {
	    HEAP32[$5$s2] = $11;
	  }
	  HEAP32[$ngs + 252 >> 2] = $11;
	  return;
	  return;
	}

	function _prune_channels($ngs, $frame_idx) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1024;
	  var __label__;
	  var $bins = __stackBase__;
	  HEAP32[$ngs$s2 + 39] = 0;
	  var $3 = HEAP32[$ngs$s2 + 117];
	  var $4 = $ngs + 472 | 0;
	  HEAP32[$4 >> 2] = $3;
	  var $6 = HEAP32[$ngs$s2 + 131];
	  var $7 = ($6 | 0) == -1;
	  do {
	    if (!$7) {
	      if ((HEAP32[$ngs$s2 + 69] + HEAP32[$ngs$s2 + 68] | 0) <= ($6 | 0)) {
	        break;
	      }
	      var $16 = ($3 | 0) / -256 & -1;
	      var $17 = $bins;
	      for (var $$dest = $17 >> 2, $$stop = $$dest + 256; $$dest < $$stop; $$dest++) {
	        HEAP32[$$dest] = 0;
	      }
	      var $19 = HEAP32[$ngs$s2 + 22];
	      var $20 = ($19 | 0) > 0;
	      $_$103 : do {
	        if ($20) {
	          var $_pre7 = HEAP32[$ngs$s2 + 62];
	          var $rhmm_04 = HEAP32[$ngs$s2 + 20];
	          var $i_05 = 0;
	          while (1) {
	            var $i_05;
	            var $rhmm_04;
	            var $28 = ($_pre7 - HEAP32[$rhmm_04 + 64 >> 2] | 0) / ($16 | 0) & -1;
	            var $_ = ($28 | 0) > 255 ? 255 : $28;
	            var $30 = ($_ << 2) + $bins | 0;
	            var $32 = HEAP32[$30 >> 2] + 1 | 0;
	            HEAP32[$30 >> 2] = $32;
	            var $33 = $i_05 + 1 | 0;
	            if (($33 | 0) >= ($19 | 0)) {
	              break $_$103;
	            }
	            var $rhmm_04 = $rhmm_04 + 92 | 0;
	            var $i_05 = $33;
	          }
	        }
	      } while (0);
	      var $36 = $frame_idx & 1;
	      var $38 = HEAP32[(($36 << 2) + 132 >> 2) + $ngs$s2];
	      var $39 = ($38 | 0) > 0;
	      $_$108 : do {
	        if ($39) {
	          var $_pre = HEAP32[$ngs$s2 + 62];
	          var $_pn2 = HEAP32[HEAP32[$ngs$s2 + 32] + ($36 << 2) >> 2];
	          var $i_13 = $38;
	          while (1) {
	            var $i_13;
	            var $_pn2;
	            var $49 = ($_pre - HEAP32[HEAP32[$_pn2 >> 2] + 64 >> 2] | 0) / ($16 | 0) & -1;
	            var $_1 = ($49 | 0) > 255 ? 255 : $49;
	            var $51 = ($_1 << 2) + $bins | 0;
	            var $53 = HEAP32[$51 >> 2] + 1 | 0;
	            HEAP32[$51 >> 2] = $53;
	            var $54 = $i_13 - 1 | 0;
	            if (($54 | 0) <= 0) {
	              var $nhmms_0 = 0;
	              var $i_2 = 0;
	              break $_$108;
	            }
	            var $_pn2 = $_pn2 + 4 | 0;
	            var $i_13 = $54;
	          }
	        } else {
	          var $nhmms_0 = 0;
	          var $i_2 = 0;
	          __label__ = 10;
	        }
	      } while (0);
	      while (1) {
	        var $i_2;
	        var $nhmms_0;
	        if (($i_2 | 0) >= 256) {
	          break;
	        }
	        var $60 = HEAP32[$bins + ($i_2 << 2) >> 2] + $nhmms_0 | 0;
	        if (($60 | 0) > ($6 | 0)) {
	          break;
	        }
	        var $nhmms_0 = $60;
	        var $i_2 = $i_2 + 1 | 0;
	      }
	      var $65 = $i_2 * -$16 | 0;
	      HEAP32[$4 >> 2] = $65;
	    }
	  } while (0);
	  _prune_root_chan($ngs, $frame_idx);
	  _prune_nonroot_chan($ngs, $frame_idx);
	  _last_phone_transition($ngs, $frame_idx);
	  _prune_word_chan($ngs, $frame_idx);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_prune_channels["X"] = 1;

	function _bptable_maxwpf($ngs, $frame_idx) {
	  var $13$s2;
	  var $9$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $ngs + 520 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = ($2 | 0) == -1;
	  $_$118 : do {
	    if (!$3) {
	      if (($2 | 0) == (HEAP32[$ngs + 40 >> 2] | 0)) {
	        break;
	      }
	      var $9$s2 = ($ngs + 208 | 0) >> 2;
	      var $12 = HEAP32[HEAP32[$9$s2] + ($frame_idx << 2) >> 2];
	      var $13$s2 = ($ngs + 180 | 0) >> 2;
	      var $14 = HEAP32[$13$s2];
	      var $15 = ($12 | 0) < ($14 | 0);
	      var $16 = $ngs + 176 | 0;
	      do {
	        if ($15) {
	          var $17 = $ngs + 16 | 0;
	          var $bestscr_04 = -2147483648;
	          var $n_05 = 0;
	          var $bp_06 = $12;
	          var $bestbpe_07 = 0;
	          while (1) {
	            var $bestbpe_07;
	            var $bp_06;
	            var $n_05;
	            var $bestscr_04;
	            var $19 = HEAP32[$16 >> 2];
	            var $20 = HEAP32[$17 >> 2];
	            var $22 = HEAP32[$19 + ($bp_06 << 5) + 4 >> 2];
	            var $23 = _dict_filler_word($20, $22);
	            if (($23 | 0) == 0) {
	              var $bestbpe_2 = $bestbpe_07;
	              var $n_1 = $n_05;
	              var $bestscr_2 = $bestscr_04;
	            } else {
	              var $28 = HEAP32[$19 + ($bp_06 << 5) + 12 >> 2];
	              var $29 = ($28 | 0) > ($bestscr_04 | 0);
	              var $_bestscr_0 = $29 ? $28 : $bestscr_04;
	              var $_bestbpe_0 = $29 ? ($bp_06 << 5) + $19 | 0 : $bestbpe_07;
	              HEAP8[($bp_06 << 5) + $19 + 2 | 0] = 0;
	              var $bestbpe_2 = $_bestbpe_0;
	              var $n_1 = $n_05 + 1 | 0;
	              var $bestscr_2 = $_bestscr_0;
	            }
	            var $bestscr_2;
	            var $n_1;
	            var $bestbpe_2;
	            var $33 = $bp_06 + 1 | 0;
	            var $34 = HEAP32[$13$s2];
	            if (($33 | 0) >= ($34 | 0)) {
	              break;
	            }
	            var $bestscr_04 = $bestscr_2;
	            var $n_05 = $n_1;
	            var $bp_06 = $33;
	            var $bestbpe_07 = $bestbpe_2;
	          }
	          if (($bestbpe_2 | 0) == 0) {
	            var $n_2 = $n_1;
	            var $40 = $34;
	            var $_pre_phi = $16;
	            break;
	          }
	          HEAP8[$bestbpe_2 + 2 | 0] = 1;
	          var $n_2 = $n_1 - 1 | 0;
	          var $40 = HEAP32[$13$s2];
	          var $_pre_phi = $16;
	        } else {
	          var $n_2 = 0;
	          var $40 = $14;
	          var $_pre_phi = $16;
	        }
	      } while (0);
	      var $_pre_phi;
	      var $40;
	      var $n_2;
	      var $n_3 = $40 - $n_2 - HEAP32[HEAP32[$9$s2] + ($frame_idx << 2) >> 2] | 0;
	      while (1) {
	        var $n_3;
	        if (($n_3 | 0) <= (HEAP32[$1 >> 2] | 0)) {
	          break $_$118;
	        }
	        var $52 = HEAP32[HEAP32[$9$s2] + ($frame_idx << 2) >> 2];
	        var $53 = HEAP32[$13$s2];
	        if (($52 | 0) >= ($53 | 0)) {
	          break;
	        }
	        var $55 = HEAP32[$_pre_phi >> 2];
	        var $worstscr_01 = 2147483647;
	        var $bp_12 = $52;
	        var $worstbpe_03 = 0;
	        while (1) {
	          var $worstbpe_03;
	          var $bp_12;
	          var $worstscr_01;
	          if (HEAP8[($bp_12 << 5) + $55 + 2 | 0] << 24 >> 24 == 0) {
	            var $worstbpe_1 = $worstbpe_03;
	            var $worstscr_1 = $worstscr_01;
	          } else {
	            var $63 = HEAP32[$55 + ($bp_12 << 5) + 12 >> 2];
	            var $64 = ($63 | 0) < ($worstscr_01 | 0);
	            var $_worstscr_0 = $64 ? $63 : $worstscr_01;
	            var $_worstbpe_0 = $64 ? ($bp_12 << 5) + $55 | 0 : $worstbpe_03;
	            var $worstbpe_1 = $_worstbpe_0;
	            var $worstscr_1 = $_worstscr_0;
	          }
	          var $worstscr_1;
	          var $worstbpe_1;
	          var $66 = $bp_12 + 1 | 0;
	          if (($66 | 0) >= ($53 | 0)) {
	            break;
	          }
	          var $worstscr_01 = $worstscr_1;
	          var $bp_12 = $66;
	          var $worstbpe_03 = $worstbpe_1;
	        }
	        if (($worstbpe_1 | 0) == 0) {
	          break;
	        }
	        HEAP8[$worstbpe_1 + 2 | 0] = 0;
	        var $n_3 = $n_3 - 1 | 0;
	      }
	      __E__pr_header(STRING_TABLE.__str712 | 0, 1239, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str15727 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_bptable_maxwpf["X"] = 1;

	function _word_transition($ngs, $frame_idx) {
	  var $142$s2;
	  var $151$s2;
	  var $31$s2;
	  var $26$s2;
	  var $23$s2;
	  var $5$s2;
	  var $1$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $1$s2 = ($ngs + 16 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $4 = HEAP32[$ngs$s2 + 5];
	  var $5$s2 = ($ngs + 12 | 0) >> 2;
	  var $10 = HEAP32[HEAP32[HEAP32[$5$s2] + 20 >> 2] + 4 >> 2];
	  var $11 = ($10 | 0) > 0;
	  $_$2 : do {
	    if ($11) {
	      var $12 = $ngs + 172 | 0;
	      var $i_037_in = $10;
	      while (1) {
	        var $i_037_in;
	        var $i_037 = $i_037_in - 1 | 0;
	        var $15 = HEAP32[$12 >> 2] + $i_037 * 12 | 0;
	        HEAP32[$15 >> 2] = -536870912;
	        if (($i_037 | 0) <= 0) {
	          break $_$2;
	        }
	        var $i_037_in = $i_037;
	      }
	    }
	  } while (0);
	  var $18 = HEAP32[$ngs$s2 + 1];
	  var $19 = $ngs + 208 | 0;
	  var $22 = HEAP32[HEAP32[$19 >> 2] + ($frame_idx << 2) >> 2];
	  var $23$s2 = ($ngs + 180 | 0) >> 2;
	  var $25 = ($22 | 0) < (HEAP32[$23$s2] | 0);
	  $_$7 : do {
	    if ($25) {
	      var $26$s2 = ($ngs + 176 | 0) >> 2;
	      var $27 = $ngs + 212 | 0;
	      var $28 = $ngs + 52 | 0;
	      var $29 = $4 + 16 | 0;
	      var $30 = $ngs + 188 | 0;
	      var $31$s2 = ($ngs + 172 | 0) >> 2;
	      var $bp_029 = $22;
	      var $k_030 = 0;
	      while (1) {
	        var $k_030;
	        var $bp_029;
	        var $33 = HEAP32[$26$s2];
	        var $34 = ($bp_029 << 5) + $33 + 4 | 0;
	        var $37 = (HEAP32[$34 >> 2] << 2) + HEAP32[$27 >> 2] | 0;
	        HEAP32[$37 >> 2] = -1;
	        var $40 = (HEAP32[$34 >> 2] | 0) == (HEAP32[$28 >> 2] | 0);
	        $_$11 : do {
	          if ($40) {
	            var $k_1 = $k_030;
	          } else {
	            var $42 = $k_030 + 1 | 0;
	            var $44 = HEAP16[$33 + ($bp_029 << 5) + 30 >> 1];
	            if ($44 << 16 >> 16 == -1) {
	              var $46 = HEAP32[$5$s2];
	              if ((HEAP32[HEAP32[$46 + 20 >> 2] + 4 >> 2] | 0) <= 0) {
	                var $k_1 = $42;
	                break;
	              }
	              var $52 = ($bp_029 << 5) + $33 + 12 | 0;
	              var $53 = ($bp_029 << 5) + $33 + 28 | 0;
	              var $rc_022 = 0;
	              var $54 = $46;
	              while (1) {
	                var $54;
	                var $rc_022;
	                var $55 = HEAP32[$52 >> 2];
	                var $57 = HEAP32[$31$s2] + $rc_022 * 12 | 0;
	                if (($55 | 0) > (HEAP32[$57 >> 2] | 0)) {
	                  HEAP32[$57 >> 2] = $55;
	                  var $62 = HEAP32[$31$s2] + $rc_022 * 12 + 4 | 0;
	                  HEAP32[$62 >> 2] = $bp_029;
	                  var $64 = HEAP16[$53 >> 1] << 16 >> 16;
	                  var $66 = HEAP32[$31$s2] + $rc_022 * 12 + 8 | 0;
	                  HEAP32[$66 >> 2] = $64;
	                  var $68 = HEAP32[$5$s2];
	                } else {
	                  var $68 = $54;
	                }
	                var $68;
	                var $69 = $rc_022 + 1 | 0;
	                if (($69 | 0) >= (HEAP32[HEAP32[$68 + 20 >> 2] + 4 >> 2] | 0)) {
	                  var $k_1 = $42;
	                  break $_$11;
	                }
	                var $rc_022 = $69;
	                var $54 = $68;
	              }
	            } else {
	              var $76 = ($bp_029 << 5) + $33 + 28 | 0;
	              var $78 = HEAP32[$33 + ($bp_029 << 5) + 16 >> 2];
	              var $79 = HEAP32[$30 >> 2];
	              var $80 = HEAP32[$5$s2];
	              if ((HEAP32[HEAP32[$80 + 20 >> 2] + 4 >> 2] | 0) <= 0) {
	                var $k_1 = $42;
	                break;
	              }
	              var $92 = HEAP32[HEAP32[$29 >> 2] + (HEAP16[$76 >> 1] << 16 >> 16 << 2) >> 2] + ($44 << 16 >> 16) * 12 + 4 | 0;
	              var $rc_125 = 0;
	              var $93 = $80;
	              while (1) {
	                var $93;
	                var $rc_125;
	                var $99 = HEAP32[$79 + ((HEAP16[HEAP32[$92 >> 2] + ($rc_125 << 1) >> 1] << 16 >> 16) + $78 << 2) >> 2];
	                var $101 = HEAP32[$31$s2] + $rc_125 * 12 | 0;
	                if (($99 | 0) > (HEAP32[$101 >> 2] | 0)) {
	                  HEAP32[$101 >> 2] = $99;
	                  var $106 = HEAP32[$31$s2] + $rc_125 * 12 + 4 | 0;
	                  HEAP32[$106 >> 2] = $bp_029;
	                  var $108 = HEAP16[$76 >> 1] << 16 >> 16;
	                  var $110 = HEAP32[$31$s2] + $rc_125 * 12 + 8 | 0;
	                  HEAP32[$110 >> 2] = $108;
	                  var $112 = HEAP32[$5$s2];
	                } else {
	                  var $112 = $93;
	                }
	                var $112;
	                var $113 = $rc_125 + 1 | 0;
	                if (($113 | 0) >= (HEAP32[HEAP32[$112 + 20 >> 2] + 4 >> 2] | 0)) {
	                  var $k_1 = $42;
	                  break $_$11;
	                }
	                var $rc_125 = $113;
	                var $93 = $112;
	              }
	            }
	          }
	        } while (0);
	        var $k_1;
	        var $119 = $bp_029 + 1 | 0;
	        if (($119 | 0) >= (HEAP32[$23$s2] | 0)) {
	          break;
	        }
	        var $bp_029 = $119;
	        var $k_030 = $k_1;
	      }
	      if (($k_1 | 0) == 0) {
	        break;
	      }
	      var $124 = $frame_idx + 1 | 0;
	      var $129 = HEAP32[$ngs$s2 + 118] + HEAP32[$ngs$s2 + 62] | 0;
	      var $131 = HEAP32[$ngs$s2 + 22];
	      var $132 = ($131 | 0) > 0;
	      $_$31 : do {
	        if ($132) {
	          var $135 = $ngs + 512 | 0;
	          var $136 = $ngs + 516 | 0;
	          var $137 = ($18 | 0) == 0;
	          var $138 = $4 + 12 | 0;
	          var $139 = $18 + 64 | 0;
	          var $141 = $18 + 68 | 0;
	          var $i_115 = $131;
	          var $rhmm_016 = HEAP32[$ngs$s2 + 20];
	          while (1) {
	            var $rhmm_016;
	            var $i_115;
	            var $148 = $rhmm_016 + 88 | 0;
	            var $150 = HEAP16[$148 >> 1] << 16 >> 16;
	            var $151$s2 = HEAP32[$31$s2] >> 2;
	            if ($137) {
	              var $164 = 0;
	            } else {
	              var $164 = HEAP32[(HEAP32[$139 >> 2] + 64 >> 2) + ($150 * 20 | 0)] - HEAP32[$141 >> 2] | 0;
	            }
	            var $164;
	            var $167 = HEAP32[$135 >> 2] + HEAP32[$151$s2 + ($150 * 3 | 0)] + HEAP32[$136 >> 2] + $164 | 0;
	            var $168 = ($167 | 0) > ($129 | 0);
	            do {
	              if ($168) {
	                if ((HEAP16[$rhmm_016 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                  if (($167 | 0) <= (HEAP32[$rhmm_016 + 4 >> 2] | 0)) {
	                    break;
	                  }
	                }
	                var $181 = HEAP32[$151$s2 + ($150 * 3 | 0) + 1];
	                _hmm_enter($rhmm_016 | 0, $167, $181, $124);
	                var $195 = HEAP16[HEAP32[HEAP32[HEAP32[$138 >> 2] + (HEAP16[$148 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP16[$rhmm_016 + 90 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP32[$151$s2 + ($150 * 3 | 0) + 2] << 1) >> 1];
	                HEAP16[$rhmm_016 + 54 >> 1] = $195;
	                if ($195 << 16 >> 16 != -1) {
	                  break;
	                }
	                ___assert_func(STRING_TABLE.__str712 | 0, 1329, STRING_TABLE.___func___word_transition | 0, STRING_TABLE.__str13725 | 0);
	              }
	            } while (0);
	            var $200 = $i_115 - 1 | 0;
	            if (($200 | 0) <= 0) {
	              break $_$31;
	            }
	            var $i_115 = $200;
	            var $rhmm_016 = $rhmm_016 + 92 | 0;
	          }
	        }
	      } while (0);
	      var $142$s2 = ($ngs + 124 | 0) >> 2;
	      var $143 = HEAP32[$142$s2];
	      var $144 = ($143 | 0) > 0;
	      $_$47 : do {
	        if ($144) {
	          var $145 = $ngs + 116 | 0;
	          var $146 = $ngs + 160 | 0;
	          var $i_212 = 0;
	          while (1) {
	            var $i_212;
	            var $208 = HEAP32[$146 >> 2] + HEAP32[HEAP32[$145 >> 2] + ($i_212 << 2) >> 2] * 12 + 4 | 0;
	            HEAP32[$208 >> 2] = -2147483648;
	            var $209 = $i_212 + 1 | 0;
	            var $210 = HEAP32[$142$s2];
	            if (($209 | 0) >= ($210 | 0)) {
	              var $212 = $210;
	              break $_$47;
	            }
	            var $i_212 = $209;
	          }
	        } else {
	          var $212 = $143;
	        }
	      } while (0);
	      var $212;
	      var $215 = HEAP32[HEAP32[$19 >> 2] + ($frame_idx << 2) >> 2];
	      var $216 = HEAP32[$23$s2];
	      var $217 = ($215 | 0) < ($216 | 0);
	      $_$52 : do {
	        if ($217) {
	          var $218 = $ngs + 116 | 0;
	          var $219 = $2 + 8 | 0;
	          var $220 = $ngs + 160 | 0;
	          var $221 = $ngs + 56 | 0;
	          var $bp_18 = $215;
	          var $235 = $212;
	          var $234 = $216;
	          while (1) {
	            var $234;
	            var $235;
	            var $bp_18;
	            var $236 = HEAP32[$26$s2];
	            var $237 = ($bp_18 << 5) + $236 | 0;
	            if (HEAP8[($bp_18 << 5) + $236 + 2 | 0] << 24 >> 24 != 0 & ($235 | 0) > 0) {
	              var $242 = ($bp_18 << 5) + $236 + 20 | 0;
	              var $243 = ($bp_18 << 5) + $236 + 24 | 0;
	              var $i_36 = 0;
	              while (1) {
	                var $i_36;
	                var $246 = HEAP32[HEAP32[$218 >> 2] + ($i_36 << 2) >> 2];
	                var $247 = HEAP32[$219 >> 2];
	                var $251 = HEAP16[HEAP32[($247 + 4 >> 2) + ($246 * 5 | 0)] >> 1] << 16 >> 16;
	                var $252 = _ngram_search_exit_score($ngs, $237, $251);
	                if (($252 | 0) == -536870912) {
	                  var $newscore_0 = -536870912;
	                } else {
	                  var $255 = HEAP32[$221 >> 2];
	                  var $257 = HEAP32[($247 + 16 >> 2) + ($246 * 5 | 0)];
	                  var $258 = HEAP32[$242 >> 2];
	                  var $259 = HEAP32[$243 >> 2];
	                  var $260 = _ngram_tg_score($255, $257, $258, $259, $n_used);
	                  var $newscore_0 = ($260 >> 10) + $252 | 0;
	                }
	                var $newscore_0;
	                var $264 = HEAP32[$220 >> 2] + $246 * 12 + 4 | 0;
	                if (($newscore_0 | 0) > (HEAP32[$264 >> 2] | 0)) {
	                  HEAP32[$264 >> 2] = $newscore_0;
	                  var $269 = HEAP32[$220 >> 2] + $246 * 12 + 8 | 0;
	                  HEAP32[$269 >> 2] = $bp_18;
	                }
	                var $270 = $i_36 + 1 | 0;
	                var $271 = HEAP32[$142$s2];
	                if (($270 | 0) >= ($271 | 0)) {
	                  break;
	                }
	                var $i_36 = $270;
	              }
	              var $274 = $271;
	              var $273 = HEAP32[$23$s2];
	            } else {
	              var $274 = $235;
	              var $273 = $234;
	            }
	            var $273;
	            var $274;
	            var $275 = $bp_18 + 1 | 0;
	            if (($275 | 0) >= ($273 | 0)) {
	              var $222 = $274;
	              break $_$52;
	            }
	            var $bp_18 = $275;
	            var $235 = $274;
	            var $234 = $273;
	          }
	        } else {
	          var $222 = $212;
	        }
	      } while (0);
	      var $222;
	      var $223 = ($222 | 0) > 0;
	      $_$69 : do {
	        if ($223) {
	          var $224 = $ngs + 116 | 0;
	          var $225 = $ngs + 104 | 0;
	          var $226 = $ngs + 160 | 0;
	          var $227 = $ngs + 516 | 0;
	          var $228 = ($18 | 0) == 0;
	          var $229 = $2 + 8 | 0;
	          var $230 = $4 + 12 | 0;
	          var $231 = $18 + 64 | 0;
	          var $233 = $18 + 68 | 0;
	          var $i_42 = 0;
	          while (1) {
	            var $i_42;
	            var $279 = HEAP32[HEAP32[$224 >> 2] + ($i_42 << 2) >> 2];
	            var $283 = ($279 | 0) == (HEAP32[HEAP32[$1$s2] + 32 >> 2] | 0);
	            do {
	              if (!$283) {
	                var $287 = HEAP32[HEAP32[$225 >> 2] + ($279 << 2) >> 2];
	                var $288 = $287;
	                var $289 = HEAP32[$226 >> 2];
	                if ($228) {
	                  var $305 = 0;
	                } else {
	                  var $305 = HEAP32[(HEAP32[$231 >> 2] + 64 >> 2) + ((HEAP16[$287 + 88 >> 1] << 16 >> 16) * 20 | 0)] - HEAP32[$233 >> 2] | 0;
	                }
	                var $305;
	                var $307 = HEAP32[$227 >> 2] + HEAP32[($289 + 4 >> 2) + ($279 * 3 | 0)] + $305 | 0;
	                if (($307 | 0) <= ($129 | 0)) {
	                  break;
	                }
	                var $310 = HEAP32[$26$s2];
	                var $312 = HEAP32[($289 + 8 >> 2) + ($279 * 3 | 0)];
	                var $313 = $287 | 0;
	                if ((HEAP16[$287 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                  if (($307 | 0) <= (HEAP32[$287 + 4 >> 2] | 0)) {
	                    break;
	                  }
	                }
	                _hmm_enter($313, $307, $312, $124);
	                var $324 = HEAP32[$310 + ($312 << 5) + 4 >> 2];
	                var $325 = HEAP32[$229 >> 2];
	                var $347 = HEAP16[HEAP32[HEAP32[HEAP32[$230 >> 2] + (HEAP16[$287 + 88 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP16[$288 + 90 >> 1] << 16 >> 16 << 2) >> 2] + (HEAP16[HEAP32[($325 + 4 >> 2) + ($324 * 5 | 0)] + (HEAP32[($325 + 8 >> 2) + ($324 * 5 | 0)] - 1 << 1) >> 1] << 16 >> 16 << 1) >> 1];
	                HEAP16[$287 + 54 >> 1] = $347;
	                if ($347 << 16 >> 16 != -1) {
	                  break;
	                }
	                ___assert_func(STRING_TABLE.__str712 | 0, 1391, STRING_TABLE.___func___word_transition | 0, STRING_TABLE.__str13725 | 0);
	              }
	            } while (0);
	            var $351 = $i_42 + 1 | 0;
	            if (($351 | 0) >= (HEAP32[$142$s2] | 0)) {
	              var $_pre_phi = $225;
	              var $_pre_phi58 = $227;
	              break $_$69;
	            }
	            var $i_42 = $351;
	          }
	        } else {
	          var $_pre_phi = $ngs + 104 | 0;
	          var $_pre_phi58 = $ngs + 516 | 0;
	        }
	      } while (0);
	      var $_pre_phi58;
	      var $_pre_phi;
	      var $354 = $ngs + 48 | 0;
	      var $358 = HEAP32[HEAP32[$_pre_phi >> 2] + (HEAP32[$354 >> 2] << 2) >> 2];
	      var $364 = HEAP16[HEAP32[HEAP32[$5$s2] + 20 >> 2] + 40 >> 1] << 16 >> 16;
	      var $365 = HEAP32[$31$s2];
	      var $366 = $365 + $364 * 12 | 0;
	      var $371 = ($18 | 0) == 0;
	      if ($371) {
	        var $387 = 0;
	      } else {
	        var $387 = HEAP32[(HEAP32[$18 + 64 >> 2] + 64 >> 2) + ((HEAP16[$358 + 88 >> 1] << 16 >> 16) * 20 | 0)] - HEAP32[$18 + 68 >> 2] | 0;
	      }
	      var $387;
	      var $390 = HEAP32[$ngs$s2 + 126] + HEAP32[$366 >> 2] + HEAP32[$_pre_phi58 >> 2] + $387 | 0;
	      var $391 = ($390 | 0) > ($129 | 0);
	      do {
	        if ($391) {
	          var $393 = $358 | 0;
	          if ((HEAP16[$358 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	            if (($390 | 0) <= (HEAP32[$358 + 4 >> 2] | 0)) {
	              break;
	            }
	          }
	          var $404 = HEAP32[($365 + 4 >> 2) + ($364 * 3 | 0)];
	          _hmm_enter($393, $390, $404, $124);
	        }
	      } while (0);
	      var $407 = HEAP32[$2 + 24 >> 2];
	      var $408 = $2 + 28 | 0;
	      var $409 = HEAP32[$408 >> 2];
	      if (($407 | 0) > ($409 | 0)) {
	        break;
	      }
	      var $411 = $ngs + 500 | 0;
	      var $412 = $365 + $364 * 12 + 4 | 0;
	      var $413 = $18 + 64 | 0;
	      var $415 = $18 + 68 | 0;
	      var $w_01 = $407;
	      var $416 = $409;
	      while (1) {
	        var $416;
	        var $w_01;
	        var $418 = ($w_01 | 0) == (HEAP32[$354 >> 2] | 0);
	        do {
	          if ($418) {
	            var $463 = $416;
	          } else {
	            if (($w_01 | 0) == (HEAP32[HEAP32[$1$s2] + 32 >> 2] | 0)) {
	              var $463 = $416;
	              break;
	            }
	            var $427 = HEAP32[HEAP32[$_pre_phi >> 2] + ($w_01 << 2) >> 2];
	            if (($427 | 0) == 0) {
	              var $463 = $416;
	              break;
	            }
	            if ($371) {
	              var $445 = 0;
	            } else {
	              var $445 = HEAP32[(HEAP32[$413 >> 2] + 64 >> 2) + ((HEAP16[$427 + 88 >> 1] << 16 >> 16) * 20 | 0)] - HEAP32[$415 >> 2] | 0;
	            }
	            var $445;
	            var $448 = HEAP32[$411 >> 2] + HEAP32[$366 >> 2] + HEAP32[$_pre_phi58 >> 2] + $445 | 0;
	            if (($448 | 0) <= ($129 | 0)) {
	              var $463 = $416;
	              break;
	            }
	            var $451 = $427 | 0;
	            if ((HEAP16[$427 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	              if (($448 | 0) <= (HEAP32[$427 + 4 >> 2] | 0)) {
	                var $463 = $416;
	                break;
	              }
	            }
	            var $461 = HEAP32[$412 >> 2];
	            _hmm_enter($451, $448, $461, $124);
	            var $463 = HEAP32[$408 >> 2];
	          }
	        } while (0);
	        var $463;
	        var $464 = $w_01 + 1 | 0;
	        if (($464 | 0) > ($463 | 0)) {
	          break $_$7;
	        }
	        var $w_01 = $464;
	        var $416 = $463;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_word_transition["X"] = 1;

	function _deactivate_channels($ngs, $frame_idx) {
	  var $2 = HEAP32[$ngs + 88 >> 2];
	  var $3 = ($2 | 0) > 0;
	  $_$112 : do {
	    if ($3) {
	      var $rhmm_02 = HEAP32[$ngs + 80 >> 2];
	      var $i_03 = $2;
	      while (1) {
	        var $i_03;
	        var $rhmm_02;
	        if ((HEAP16[$rhmm_02 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          _hmm_clear($rhmm_02 | 0);
	        }
	        var $19 = $i_03 - 1 | 0;
	        if (($19 | 0) <= 0) {
	          break $_$112;
	        }
	        var $rhmm_02 = $rhmm_02 + 92 | 0;
	        var $i_03 = $19;
	      }
	    }
	  } while (0);
	  var $6 = $ngs + 120 | 0;
	  var $7 = HEAP32[$6 >> 2];
	  var $8 = ($7 | 0) > 0;
	  $_$120 : do {
	    if ($8) {
	      var $9 = $ngs + 116 | 0;
	      var $10 = $ngs + 104 | 0;
	      var $i_11 = 0;
	      var $22 = $7;
	      while (1) {
	        var $22;
	        var $i_11;
	        var $28 = HEAP32[HEAP32[$10 >> 2] + (HEAP32[HEAP32[$9 >> 2] + ($i_11 << 2) >> 2] << 2) >> 2];
	        if ((HEAP16[$28 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $34 = $28 | 0;
	          _hmm_clear($34);
	          var $36 = HEAP32[$6 >> 2];
	        } else {
	          var $36 = $22;
	        }
	        var $36;
	        var $37 = $i_11 + 1 | 0;
	        if (($37 | 0) >= ($36 | 0)) {
	          break $_$120;
	        }
	        var $i_11 = $37;
	        var $22 = $36;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_deactivate_channels["X"] = 1;

	function _ngram_fwdtree_finish($ngs) {
	  var $ngs$s2 = $ngs >> 2;
	  var __stackBase__ = STACKTOP;
	  var $4 = HEAP16[HEAP32[$ngs$s2 + 3] + 92 >> 1];
	  var $5 = $4 << 16 >> 16;
	  _ngram_search_mark_bptable($ngs, $5);
	  var $7 = HEAP32[$ngs$s2 + 22];
	  var $8 = ($7 | 0) > 0;
	  $_$129 : do {
	    if ($8) {
	      var $rhmm_012 = HEAP32[$ngs$s2 + 20];
	      var $i_013 = $7;
	      while (1) {
	        var $i_013;
	        var $rhmm_012;
	        _hmm_clear($rhmm_012 | 0);
	        var $13 = $i_013 - 1 | 0;
	        if (($13 | 0) <= 0) {
	          break $_$129;
	        }
	        var $rhmm_012 = $rhmm_012 + 92 | 0;
	        var $i_013 = $13;
	      }
	    }
	  } while (0);
	  var $16 = $5 & 1;
	  var $18 = HEAP32[(($16 << 2) + 132 >> 2) + $ngs$s2];
	  var $19 = ($18 | 0) > 0;
	  $_$134 : do {
	    if ($19) {
	      var $hmm_0_in7 = HEAP32[HEAP32[$ngs$s2 + 32] + ($16 << 2) >> 2];
	      var $i_18 = $18;
	      while (1) {
	        var $i_18;
	        var $hmm_0_in7;
	        var $acl_0 = $hmm_0_in7 + 4 | 0;
	        var $25 = HEAP32[$hmm_0_in7 >> 2] | 0;
	        _hmm_clear($25);
	        var $26 = $i_18 - 1 | 0;
	        if (($26 | 0) <= 0) {
	          break $_$134;
	        }
	        var $hmm_0_in7 = $acl_0;
	        var $i_18 = $26;
	      }
	    }
	  } while (0);
	  var $29 = HEAP32[(($16 << 2) + 144 >> 2) + $ngs$s2];
	  var $30 = ($29 | 0) > 0;
	  $_$139 : do {
	    if ($30) {
	      var $35 = $ngs + 16 | 0;
	      var $36 = $ngs + 108 | 0;
	      var $37 = $ngs + 104 | 0;
	      var $i_24 = $29;
	      var $_pn = HEAP32[HEAP32[$ngs$s2 + 35] + ($16 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $i_24;
	        var $w_05 = HEAP32[$_pn >> 2];
	        var $awl_06 = $_pn + 4 | 0;
	        var $43 = (HEAP32[(HEAP32[HEAP32[$35 >> 2] + 8 >> 2] + 8 >> 2) + ($w_05 * 5 | 0)] | 0) == 1;
	        do {
	          if (!$43) {
	            var $50 = ((($w_05 | 0) / 32 & -1) << 2) + HEAP32[$36 >> 2] | 0;
	            var $52 = HEAP32[$50 >> 2] & (1 << ($w_05 & 31) ^ -1);
	            HEAP32[$50 >> 2] = $52;
	            if ((HEAP32[HEAP32[$37 >> 2] + ($w_05 << 2) >> 2] | 0) == 0) {
	              break;
	            }
	            _ngram_search_free_all_rc($ngs, $w_05);
	          }
	        } while (0);
	        var $59 = $i_24 - 1 | 0;
	        if (($59 | 0) <= 0) {
	          break $_$139;
	        }
	        var $i_24 = $59;
	        var $_pn = $awl_06;
	      }
	    }
	  } while (0);
	  var $61 = $ngs + 308 | 0;
	  _ptmr_stop($61);
	  if ($4 << 16 >> 16 > 0) {
	    var $64 = $5 + 1 | 0;
	    var $65 = $64 | 0;
	    var $_idx_val = HEAP32[HEAP32[$ngs$s2 + 2] + 4 >> 2];
	    var $68 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	    var $70 = $65 / ($68 | 0);
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1549);
	    var $72 = HEAP32[$ngs$s2 + 45];
	    var $73 = $5 >> 1;
	    var $75 = ($72 + $73 | 0) / ($64 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str6718 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $72, HEAP32[tempInt + 4 >> 2] = $75, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1551);
	    var $77 = HEAP32[$ngs$s2 + 76];
	    var $79 = ($77 + $73 | 0) / ($64 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str7719 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $77, HEAP32[tempInt + 4 >> 2] = $79, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1553);
	    var $81 = HEAP32[$ngs$s2 + 68];
	    var $84 = HEAP32[$ngs$s2 + 69] + $81 | 0;
	    var $85 = ($84 | 0) / ($64 | 0) & -1;
	    var $87 = HEAP32[$ngs$s2 + 70];
	    __E__pr_info(STRING_TABLE.__str8720 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $84, HEAP32[tempInt + 4 >> 2] = $85, HEAP32[tempInt + 8 >> 2] = $81, HEAP32[tempInt + 12 >> 2] = $87, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1557);
	    var $89 = HEAP32[$ngs$s2 + 71];
	    var $90 = ($89 | 0) / ($64 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str9721 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $89, HEAP32[tempInt + 4 >> 2] = $90, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1560);
	    var $92 = HEAP32[$ngs$s2 + 72];
	    var $93 = ($92 | 0) / ($64 | 0) & -1;
	    __E__pr_info(STRING_TABLE.__str10722 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $92, HEAP32[tempInt + 4 >> 2] = $93, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1562);
	    var $94 = $ngs + 312 | 0;
	    var $95 = (tempDoubleI32[0] = HEAP32[$94 >> 2], tempDoubleI32[1] = HEAP32[$94 + 4 >> 2], tempDoubleF64[0]);
	    var $96 = $95 / $70;
	    __E__pr_info(STRING_TABLE.__str11723 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $95, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $96, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	    __E__pr_info_header(STRING_TABLE.__str712 | 0, 1565);
	    var $97 = $ngs + 320 | 0;
	    var $98 = (tempDoubleI32[0] = HEAP32[$97 >> 2], tempDoubleI32[1] = HEAP32[$97 + 4 >> 2], tempDoubleF64[0]);
	    var $99 = $98 / $70;
	    __E__pr_info(STRING_TABLE.__str12724 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $98, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $99, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ngram_fwdtree_finish["X"] = 1;

	function _prune_root_chan($ngs, $frame_idx) {
	  var $rhmm_011$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var $1 = $frame_idx + 1 | 0;
	  var $3 = HEAP32[$ngs$s2 + 62];
	  var $6 = HEAP32[$ngs$s2 + 118] + $3 | 0;
	  var $9 = HEAP32[$ngs$s2 + 119] + $3 | 0;
	  var $12 = HEAP32[$ngs$s2 + 121] + $3 | 0;
	  var $13 = $1 & 1;
	  var $14 = $ngs + 128 | 0;
	  var $17 = HEAP32[HEAP32[$14 >> 2] + ($13 << 2) >> 2];
	  var $19 = HEAP32[$ngs$s2 + 1];
	  var $20 = $ngs + 88 | 0;
	  if ((HEAP32[$20 >> 2] | 0) > 0) {
	    var $25 = $1 & 65535;
	    var $26 = $ngs + 516 | 0;
	    var $27 = ($19 | 0) != 0;
	    var $28 = ($19 | 0) == 0;
	    var $29 = $19 + 64 | 0;
	    var $31 = $19 + 68 | 0;
	    var $32 = $ngs + 152 | 0;
	    var $33 = $ngs + 156 | 0;
	    var $34 = $ngs + 512 | 0;
	    var $35 = $ngs + 112 | 0;
	    var $36 = $ngs + 16 | 0;
	    var $i_010 = 0;
	    var $rhmm_011 = HEAP32[$ngs$s2 + 20], $rhmm_011$s2 = $rhmm_011 >> 2;
	    var $nacl_013 = $17;
	    while (1) {
	      var $nacl_013;
	      var $rhmm_011;
	      var $i_010;
	      var $38 = $rhmm_011 + 70 | 0;
	      var $41 = (HEAP16[$38 >> 1] << 16 >> 16 | 0) < ($frame_idx | 0);
	      $_$6 : do {
	        if ($41) {
	          var $nacl_4 = $nacl_013;
	        } else {
	          if ((HEAP32[$rhmm_011$s2 + 16] | 0) <= ($6 | 0)) {
	            var $nacl_4 = $nacl_013;
	            break;
	          }
	          HEAP16[$38 >> 1] = $25;
	          var $50 = HEAP32[$26 >> 2] + HEAP32[$rhmm_011$s2 + 11] | 0;
	          var $or_cond = $27 | ($50 | 0) > ($9 | 0);
	          $_$9 : do {
	            if ($or_cond) {
	              var $hmm_02 = HEAP32[$rhmm_011$s2 + 19];
	              if (($hmm_02 | 0) == 0) {
	                var $nacl_3 = $nacl_013;
	                break;
	              }
	              var $55 = $rhmm_011 + 48 | 0;
	              var $nacl_13 = $nacl_013;
	              var $hmm_04 = $hmm_02;
	              while (1) {
	                var $hmm_04;
	                var $nacl_13;
	                if ($28) {
	                  var $67 = 0;
	                } else {
	                  var $67 = HEAP32[(HEAP32[$29 >> 2] + 64 >> 2) + (HEAP32[$hmm_04 + 84 >> 2] * 20 | 0)] - HEAP32[$31 >> 2] | 0;
	                }
	                var $67;
	                var $68 = $67 + $50 | 0;
	                var $69 = ($68 | 0) > ($9 | 0);
	                do {
	                  if ($69) {
	                    if ((HEAP16[$hmm_04 + 70 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	                      if (($68 | 0) <= (HEAP32[$hmm_04 + 4 >> 2] | 0)) {
	                        var $nacl_2 = $nacl_13;
	                        break;
	                      }
	                    }
	                    var $81 = HEAP32[$55 >> 2];
	                    _hmm_enter($hmm_04 | 0, $68, $81, $1);
	                    HEAP32[$nacl_13 >> 2] = $hmm_04;
	                    var $nacl_2 = $nacl_13 + 4 | 0;
	                  } else {
	                    var $nacl_2 = $nacl_13;
	                  }
	                } while (0);
	                var $nacl_2;
	                var $hmm_0 = HEAP32[$hmm_04 + 80 >> 2];
	                if (($hmm_0 | 0) == 0) {
	                  var $nacl_3 = $nacl_2;
	                  break $_$9;
	                }
	                var $nacl_13 = $nacl_2;
	                var $hmm_04 = $hmm_0;
	              }
	            } else {
	              var $nacl_3 = $nacl_013;
	            }
	          } while (0);
	          var $nacl_3;
	          if (!($27 | ($50 | 0) > ($12 | 0))) {
	            var $nacl_4 = $nacl_3;
	            break;
	          }
	          var $w_07 = HEAP32[$rhmm_011$s2 + 20];
	          if (($w_07 | 0) <= -1) {
	            var $nacl_4 = $nacl_3;
	            break;
	          }
	          var $90 = $rhmm_011 + 48 | 0;
	          var $w_08 = $w_07;
	          while (1) {
	            var $w_08;
	            if ($28) {
	              var $111 = 0;
	            } else {
	              var $95 = HEAP32[HEAP32[$36 >> 2] + 8 >> 2];
	              var $111 = HEAP32[(HEAP32[$29 >> 2] + 64 >> 2) + ((HEAP16[HEAP32[($95 + 4 >> 2) + ($w_08 * 5 | 0)] + (HEAP32[($95 + 8 >> 2) + ($w_08 * 5 | 0)] - 1 << 1) >> 1] << 16 >> 16) * 20 | 0)] - HEAP32[$31 >> 2] | 0;
	            }
	            var $111;
	            var $112 = $111 + $50 | 0;
	            if (($112 | 0) > ($12 | 0)) {
	              var $115 = HEAP32[$32 >> 2];
	              var $116 = HEAP32[$33 >> 2];
	              var $117 = $116 + 1 | 0;
	              HEAP32[$33 >> 2] = $117;
	              var $118 = ($116 << 4) + $115 | 0;
	              HEAP32[$118 >> 2] = $w_08;
	              var $120 = $112 - HEAP32[$34 >> 2] | 0;
	              var $121 = ($116 << 4) + $115 + 4 | 0;
	              HEAP32[$121 >> 2] = $120;
	              var $122 = HEAP32[$90 >> 2];
	              var $123 = ($116 << 4) + $115 + 8 | 0;
	              HEAP32[$123 >> 2] = $122;
	            }
	            var $w_0 = HEAP32[HEAP32[$35 >> 2] + ($w_08 << 2) >> 2];
	            if (($w_0 | 0) <= -1) {
	              var $nacl_4 = $nacl_3;
	              break $_$6;
	            }
	            var $w_08 = $w_0;
	          }
	        }
	      } while (0);
	      var $nacl_4;
	      var $127 = $i_010 + 1 | 0;
	      if (($127 | 0) >= (HEAP32[$20 >> 2] | 0)) {
	        break;
	      }
	      var $i_010 = $127;
	      var $rhmm_011 = $rhmm_011 + 92 | 0, $rhmm_011$s2 = $rhmm_011 >> 2;
	      var $nacl_013 = $nacl_4;
	    }
	    var $nacl_0_lcssa = $nacl_4;
	    var $132 = HEAP32[HEAP32[$14 >> 2] + ($13 << 2) >> 2];
	  } else {
	    var $nacl_0_lcssa = $17;
	    var $132 = $17;
	  }
	  var $132;
	  var $nacl_0_lcssa;
	  HEAP32[(($13 << 2) + 132 >> 2) + $ngs$s2] = $nacl_0_lcssa - $132 >> 2;
	  return;
	  return;
	}

	_prune_root_chan["X"] = 1;

	function _prune_nonroot_chan($ngs, $frame_idx) {
	  var $43$s1;
	  var $hmm_015$s2;
	  var $ngs$s2 = $ngs >> 2;
	  var $1 = $frame_idx + 1 | 0;
	  var $3 = HEAP32[$ngs$s2 + 62];
	  var $6 = HEAP32[$ngs$s2 + 118] + $3 | 0;
	  var $9 = HEAP32[$ngs$s2 + 119] + $3 | 0;
	  var $12 = HEAP32[$ngs$s2 + 121] + $3 | 0;
	  var $14 = HEAP32[$ngs$s2 + 1];
	  var $15 = $frame_idx & 1;
	  var $16 = $ngs + 128 | 0;
	  var $17 = HEAP32[$16 >> 2];
	  var $18 = $1 & 1;
	  var $20 = HEAP32[$17 + ($18 << 2) >> 2];
	  var $21 = ($18 << 2) + $ngs + 132 | 0;
	  var $23 = (HEAP32[$21 >> 2] << 2) + $20 | 0;
	  var $25 = HEAP32[(($15 << 2) + 132 >> 2) + $ngs$s2];
	  if (($25 | 0) > 0) {
	    var $29 = $1 & 65535;
	    var $30 = $ngs + 516 | 0;
	    var $31 = ($14 | 0) != 0;
	    var $32 = ($14 | 0) == 0;
	    var $33 = $14 + 64 | 0;
	    var $35 = $14 + 68 | 0;
	    var $36 = $ngs + 152 | 0;
	    var $37 = $ngs + 156 | 0;
	    var $38 = $ngs + 512 | 0;
	    var $39 = $ngs + 112 | 0;
	    var $40 = $ngs + 16 | 0;
	    var $i_012 = $25;
	    var $nacl_013 = $23;
	    var $_pn = HEAP32[$17 + ($15 << 2) >> 2];
	    while (1) {
	      var $_pn;
	      var $nacl_013;
	      var $i_012;
	      var $acl_014 = $_pn + 4 | 0;
	      var $hmm_015 = HEAP32[$_pn >> 2], $hmm_015$s2 = $hmm_015 >> 2;
	      var $42 = $hmm_015 | 0;
	      var $43$s1 = ($hmm_015 + 70 | 0) >> 1;
	      var $44 = HEAP16[$43$s1];
	      if (($44 << 16 >> 16 | 0) < ($frame_idx | 0)) {
	        ___assert_func(STRING_TABLE.__str712 | 0, 825, STRING_TABLE.___func___prune_nonroot_chan | 0, STRING_TABLE.__str16728 | 0);
	        var $49 = HEAP16[$43$s1];
	      } else {
	        var $49 = $44;
	      }
	      var $49;
	      var $52 = (HEAP32[$hmm_015$s2 + 16] | 0) > ($6 | 0);
	      var $54 = ($49 << 16 >> 16 | 0) != ($1 | 0);
	      $_$45 : do {
	        if ($52) {
	          if ($54) {
	            HEAP16[$43$s1] = $29;
	            HEAP32[$nacl_013 >> 2] = $hmm_015;
	            var $nacl_1 = $nacl_013 + 4 | 0;
	          } else {
	            var $nacl_1 = $nacl_013;
	          }
	          var $nacl_1;
	          var $61 = HEAP32[$30 >> 2] + HEAP32[$hmm_015$s2 + 11] | 0;
	          var $or_cond = $31 | ($61 | 0) > ($9 | 0);
	          $_$50 : do {
	            if ($or_cond) {
	              var $nexthmm_02 = HEAP32[$hmm_015$s2 + 19];
	              if (($nexthmm_02 | 0) == 0) {
	                var $nacl_5 = $nacl_1;
	                break;
	              }
	              var $66 = $hmm_015 + 48 | 0;
	              var $nacl_23 = $nacl_1;
	              var $nexthmm_04 = $nexthmm_02;
	              while (1) {
	                var $nexthmm_04;
	                var $nacl_23;
	                if ($32) {
	                  var $78 = 0;
	                } else {
	                  var $78 = HEAP32[(HEAP32[$33 >> 2] + 64 >> 2) + (HEAP32[$nexthmm_04 + 84 >> 2] * 20 | 0)] - HEAP32[$35 >> 2] | 0;
	                }
	                var $78;
	                var $79 = $78 + $61 | 0;
	                var $80 = ($79 | 0) > ($9 | 0);
	                do {
	                  if ($80) {
	                    var $85 = HEAP16[$nexthmm_04 + 70 >> 1] << 16 >> 16;
	                    if (($85 | 0) >= ($frame_idx | 0)) {
	                      if (($79 | 0) <= (HEAP32[$nexthmm_04 + 4 >> 2] | 0)) {
	                        var $nacl_4 = $nacl_23;
	                        break;
	                      }
	                    }
	                    if (($85 | 0) == ($1 | 0)) {
	                      var $nacl_3 = $nacl_23;
	                    } else {
	                      HEAP32[$nacl_23 >> 2] = $nexthmm_04;
	                      var $nacl_3 = $nacl_23 + 4 | 0;
	                    }
	                    var $nacl_3;
	                    var $96 = HEAP32[$66 >> 2];
	                    _hmm_enter($nexthmm_04 | 0, $79, $96, $1);
	                    var $nacl_4 = $nacl_3;
	                  } else {
	                    var $nacl_4 = $nacl_23;
	                  }
	                } while (0);
	                var $nacl_4;
	                var $nexthmm_0 = HEAP32[$nexthmm_04 + 80 >> 2];
	                if (($nexthmm_0 | 0) == 0) {
	                  var $nacl_5 = $nacl_4;
	                  break $_$50;
	                }
	                var $nacl_23 = $nacl_4;
	                var $nexthmm_04 = $nexthmm_0;
	              }
	            } else {
	              var $nacl_5 = $nacl_1;
	            }
	          } while (0);
	          var $nacl_5;
	          if (!($31 | ($61 | 0) > ($12 | 0))) {
	            var $nacl_6 = $nacl_5;
	            break;
	          }
	          var $w_07 = HEAP32[$hmm_015$s2 + 22];
	          if (($w_07 | 0) <= -1) {
	            var $nacl_6 = $nacl_5;
	            break;
	          }
	          var $104 = $hmm_015 + 48 | 0;
	          var $w_08 = $w_07;
	          while (1) {
	            var $w_08;
	            if ($32) {
	              var $125 = 0;
	            } else {
	              var $109 = HEAP32[HEAP32[$40 >> 2] + 8 >> 2];
	              var $125 = HEAP32[(HEAP32[$33 >> 2] + 64 >> 2) + ((HEAP16[HEAP32[($109 + 4 >> 2) + ($w_08 * 5 | 0)] + (HEAP32[($109 + 8 >> 2) + ($w_08 * 5 | 0)] - 1 << 1) >> 1] << 16 >> 16) * 20 | 0)] - HEAP32[$35 >> 2] | 0;
	            }
	            var $125;
	            var $126 = $125 + $61 | 0;
	            if (($126 | 0) > ($12 | 0)) {
	              var $129 = HEAP32[$36 >> 2];
	              var $130 = HEAP32[$37 >> 2];
	              var $131 = $130 + 1 | 0;
	              HEAP32[$37 >> 2] = $131;
	              var $132 = ($130 << 4) + $129 | 0;
	              HEAP32[$132 >> 2] = $w_08;
	              var $134 = $126 - HEAP32[$38 >> 2] | 0;
	              var $135 = ($130 << 4) + $129 + 4 | 0;
	              HEAP32[$135 >> 2] = $134;
	              var $136 = HEAP32[$104 >> 2];
	              var $137 = ($130 << 4) + $129 + 8 | 0;
	              HEAP32[$137 >> 2] = $136;
	            }
	            var $w_0 = HEAP32[HEAP32[$39 >> 2] + ($w_08 << 2) >> 2];
	            if (($w_0 | 0) <= -1) {
	              var $nacl_6 = $nacl_5;
	              break $_$45;
	            }
	            var $w_08 = $w_0;
	          }
	        } else {
	          if (!$54) {
	            var $nacl_6 = $nacl_013;
	            break;
	          }
	          _hmm_clear($42);
	          var $nacl_6 = $nacl_013;
	        }
	      } while (0);
	      var $nacl_6;
	      var $143 = $i_012 - 1 | 0;
	      if (($143 | 0) <= 0) {
	        break;
	      }
	      var $i_012 = $143;
	      var $nacl_013 = $nacl_6;
	      var $_pn = $acl_014;
	    }
	    var $nacl_0_lcssa = $nacl_6;
	    var $146 = HEAP32[HEAP32[$16 >> 2] + ($18 << 2) >> 2];
	  } else {
	    var $nacl_0_lcssa = $23;
	    var $146 = $20;
	  }
	  var $146;
	  var $nacl_0_lcssa;
	  HEAP32[$21 >> 2] = $nacl_0_lcssa - $146 >> 2;
	  return;
	  return;
	}

	_prune_nonroot_chan["X"] = 1;

	function _last_phone_transition($ngs, $frame_idx) {
	  var $203$s2;
	  var $129$s2;
	  var $52$s1;
	  var $32$s2;
	  var $candp_032$s2;
	  var $21$s2;
	  var $20$s2;
	  var $19$s2;
	  var $18$s2;
	  var $12$s2;
	  var $7$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_used = __stackBase__;
	  var $1 = $frame_idx + 1 | 0;
	  var $2 = $1 & 1;
	  var $3 = $ngs + 140 | 0;
	  var $6 = HEAP32[HEAP32[$3 >> 2] + ($2 << 2) >> 2];
	  var $7$s2 = ($ngs + 156 | 0) >> 2;
	  var $8 = HEAP32[$7$s2];
	  var $9 = $ngs + 288 | 0;
	  var $11 = HEAP32[$9 >> 2] + $8 | 0;
	  HEAP32[$9 >> 2] = $11;
	  var $12$s2 = ($ngs + 152 | 0) >> 2;
	  var $13 = ($8 | 0) > 0;
	  $_$84 : do {
	    if (!$13) {
	      var $14 = $ngs + 252 | 0;
	      var $bestscore_0_lcssa_ph = HEAP32[$14 >> 2];
	      var $_ph = $14;
	      __label__ = 40;
	      break;
	    }
	    var $17 = $ngs + 176 | 0;
	    var $18$s2 = ($ngs + 16 | 0) >> 2;
	    var $19$s2 = ($ngs + 160 | 0) >> 2;
	    var $20$s2 = ($ngs + 168 | 0) >> 2;
	    var $21$s2 = ($ngs + 164 | 0) >> 2;
	    var $candp_032 = HEAP32[$12$s2], $candp_032$s2 = $candp_032 >> 2;
	    var $i_035 = 0;
	    var $n_cand_sf_036 = 0;
	    while (1) {
	      var $n_cand_sf_036;
	      var $i_035;
	      var $candp_032;
	      var $27 = HEAP32[$candp_032$s2 + 2];
	      var $28 = ($27 | 0) == -1;
	      do {
	        if ($28) {
	          var $n_cand_sf_2 = $n_cand_sf_036;
	        } else {
	          var $31 = ($27 << 5) + HEAP32[$17 >> 2] | 0;
	          var $32$s2 = ($candp_032 | 0) >> 2;
	          var $33 = HEAP32[$32$s2];
	          var $40 = HEAP16[HEAP32[(HEAP32[HEAP32[$18$s2] + 8 >> 2] + 4 >> 2) + ($33 * 5 | 0)] >> 1] << 16 >> 16;
	          var $41 = _ngram_search_exit_score($ngs, $31, $40);
	          if (($41 | 0) > -536870912) {
	            var $45 = $33;
	          } else {
	            ___assert_func(STRING_TABLE.__str712 | 0, 918, STRING_TABLE.___func___last_phone_transition | 0, STRING_TABLE.__str18730 | 0);
	            var $45 = HEAP32[$32$s2];
	          }
	          var $45;
	          var $46 = $candp_032 + 4 | 0;
	          var $48 = HEAP32[$46 >> 2] - $41 | 0;
	          HEAP32[$46 >> 2] = $48;
	          var $52$s1 = ($31 | 0) >> 1;
	          var $54 = HEAP16[$52$s1] << 16 >> 16;
	          if ((HEAP32[(HEAP32[$19$s2] >> 2) + ($45 * 3 | 0)] | 0) == ($54 + 1 | 0)) {
	            var $n_cand_sf_2 = $n_cand_sf_036;
	            break;
	          }
	          var $j_0 = 0;
	          while (1) {
	            var $j_0;
	            if (($j_0 | 0) < ($n_cand_sf_036 | 0)) {
	              var $59 = HEAP32[$20$s2];
	              if ((HEAP32[$59 + ($j_0 << 3) >> 2] | 0) != ($54 | 0)) {
	                var $j_0 = $j_0 + 1 | 0;
	                continue;
	              }
	              var $66 = HEAP32[$59 + ($j_0 << 3) + 4 >> 2];
	              HEAP32[$candp_032$s2 + 3] = $66;
	              var $n_cand_sf_1 = $n_cand_sf_036;
	              var $j_1 = $j_0;
	              break;
	            }
	            var $68 = HEAP32[$21$s2];
	            if (($n_cand_sf_036 | 0) >= ($68 | 0)) {
	              if (($68 | 0) == 0) {
	                var $73 = ___ckd_calloc__(32, 8, STRING_TABLE.__str712 | 0, 943);
	                HEAP32[$20$s2] = $73;
	                HEAP32[$21$s2] = 32;
	              } else {
	                var $76 = $68 + 32 | 0;
	                HEAP32[$21$s2] = $76;
	                var $78 = HEAP32[$20$s2];
	                var $79 = $76 << 3;
	                var $80 = ___ckd_realloc__($78, $79, STRING_TABLE.__str712 | 0, 950);
	                var $81 = $80;
	                HEAP32[$20$s2] = $81;
	                __E__pr_info_header(STRING_TABLE.__str712 | 0, 951);
	                var $82 = HEAP32[$21$s2];
	                __E__pr_info(STRING_TABLE.__str19731 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $82, tempInt));
	              }
	            }
	            HEAP32[$candp_032$s2 + 3] = -1;
	            var $89 = ($n_cand_sf_036 << 3) + HEAP32[$20$s2] | 0;
	            HEAP32[$89 >> 2] = HEAP16[$52$s1] << 16 >> 16;
	            var $n_cand_sf_1 = $n_cand_sf_036 + 1 | 0;
	            var $j_1 = $n_cand_sf_036;
	            break;
	          }
	          var $j_1;
	          var $n_cand_sf_1;
	          var $92 = ($j_1 << 3) + HEAP32[$20$s2] + 4 | 0;
	          HEAP32[$92 >> 2] = $i_035;
	          var $95 = HEAP32[$19$s2] + HEAP32[$32$s2] * 12 + 4 | 0;
	          HEAP32[$95 >> 2] = -536870912;
	          var $101 = HEAP32[$19$s2] + HEAP32[$32$s2] * 12 | 0;
	          HEAP32[$101 >> 2] = (HEAP16[$52$s1] << 16 >> 16) + 1 | 0;
	          var $n_cand_sf_2 = $n_cand_sf_1;
	        }
	      } while (0);
	      var $n_cand_sf_2;
	      var $102 = $i_035 + 1 | 0;
	      var $104 = HEAP32[$7$s2];
	      if (($102 | 0) >= ($104 | 0)) {
	        break;
	      }
	      var $candp_032 = $candp_032 + 16 | 0, $candp_032$s2 = $candp_032 >> 2;
	      var $i_035 = $102;
	      var $n_cand_sf_036 = $n_cand_sf_2;
	    }
	    if (($n_cand_sf_2 | 0) > 0) {
	      var $23 = $ngs + 208 | 0;
	      var $24 = $ngs + 56 | 0;
	      var $i_127 = 0;
	      while (1) {
	        var $i_127;
	        var $108 = HEAP32[HEAP32[$20$s2] + ($i_127 << 3) >> 2];
	        var $109 = HEAP32[$23 >> 2];
	        var $111 = HEAP32[$109 + ($108 << 2) >> 2];
	        var $114 = HEAP32[$109 + ($108 + 1 << 2) >> 2];
	        var $115 = ($111 | 0) < ($114 | 0);
	        $_$113 : do {
	          if ($115) {
	            var $bp_022 = $111;
	            var $bpe_023 = ($111 << 5) + HEAP32[$17 >> 2] | 0;
	            while (1) {
	              var $bpe_023;
	              var $bp_022;
	              var $121 = HEAP8[$bpe_023 + 2 | 0] << 24 >> 24 == 0;
	              $_$117 : do {
	                if (!$121) {
	                  var $j_218 = HEAP32[HEAP32[$20$s2] + ($i_127 << 3) + 4 >> 2];
	                  if (($j_218 | 0) <= -1) {
	                    break;
	                  }
	                  var $126 = $bpe_023 + 20 | 0;
	                  var $127 = $bpe_023 + 24 | 0;
	                  var $j_219 = $j_218;
	                  while (1) {
	                    var $j_219;
	                    var $128 = HEAP32[$12$s2];
	                    var $129$s2 = (($j_219 << 4) + $128 | 0) >> 2;
	                    var $130 = HEAP32[$129$s2];
	                    var $131 = HEAP32[$18$s2];
	                    var $137 = HEAP16[HEAP32[(HEAP32[$131 + 8 >> 2] + 4 >> 2) + ($130 * 5 | 0)] >> 1] << 16 >> 16;
	                    var $138 = _ngram_search_exit_score($ngs, $bpe_023, $137);
	                    if (($138 | 0) > -536870912) {
	                      var $141 = _dict_filler_word($131, $130);
	                      if (($141 | 0) != 0) {
	                        ___assert_func(STRING_TABLE.__str712 | 0, 985, STRING_TABLE.___func___last_phone_transition | 0, STRING_TABLE.__str20732 | 0);
	                      }
	                      var $145 = HEAP32[$24 >> 2];
	                      var $151 = HEAP32[(HEAP32[HEAP32[$18$s2] + 8 >> 2] + 16 >> 2) + (HEAP32[$129$s2] * 5 | 0)];
	                      var $152 = HEAP32[$126 >> 2];
	                      var $153 = HEAP32[$127 >> 2];
	                      var $154 = _ngram_tg_score($145, $151, $152, $153, $n_used);
	                      var $dscr_0 = ($154 >> 10) + $138 | 0;
	                      var $157 = HEAP32[$129$s2];
	                    } else {
	                      var $dscr_0 = $138;
	                      var $157 = $130;
	                    }
	                    var $157;
	                    var $dscr_0;
	                    var $159 = HEAP32[$19$s2] + $157 * 12 + 4 | 0;
	                    if (($dscr_0 | 0) > (HEAP32[$159 >> 2] | 0)) {
	                      HEAP32[$159 >> 2] = $dscr_0;
	                      var $165 = HEAP32[$19$s2] + HEAP32[$129$s2] * 12 + 8 | 0;
	                      HEAP32[$165 >> 2] = $bp_022;
	                    }
	                    var $j_2 = HEAP32[$128 + ($j_219 << 4) + 12 >> 2];
	                    if (($j_2 | 0) <= -1) {
	                      break $_$117;
	                    }
	                    var $j_219 = $j_2;
	                  }
	                }
	              } while (0);
	              var $169 = $bp_022 + 1 | 0;
	              if (($169 | 0) == ($114 | 0)) {
	                break $_$113;
	              }
	              var $bp_022 = $169;
	              var $bpe_023 = $bpe_023 + 32 | 0;
	            }
	          }
	        } while (0);
	        var $171 = $i_127 + 1 | 0;
	        if (($171 | 0) == ($n_cand_sf_2 | 0)) {
	          break;
	        }
	        var $i_127 = $171;
	      }
	      var $173 = HEAP32[$7$s2];
	    } else {
	      var $173 = $104;
	    }
	    var $173;
	    var $174 = $ngs + 252 | 0;
	    var $175 = HEAP32[$174 >> 2];
	    if (($173 | 0) <= 0) {
	      var $bestscore_0_lcssa_ph = $175;
	      var $_ph = $174;
	      __label__ = 40;
	      break;
	    }
	    var $candp_111 = HEAP32[$12$s2];
	    var $bestscore_012 = $175;
	    var $i_213 = 1;
	    while (1) {
	      var $i_213;
	      var $bestscore_012;
	      var $candp_111;
	      var $180 = HEAP32[$candp_111 >> 2];
	      var $184 = $candp_111 + 4 | 0;
	      var $186 = HEAP32[$184 >> 2] + HEAP32[(HEAP32[$19$s2] + 4 >> 2) + ($180 * 3 | 0)] | 0;
	      HEAP32[$184 >> 2] = $186;
	      var $189 = HEAP32[(HEAP32[$19$s2] + 8 >> 2) + ($180 * 3 | 0)];
	      HEAP32[$candp_111 + 8 >> 2] = $189;
	      var $_bestscore_0 = ($186 | 0) > ($bestscore_012 | 0) ? $186 : $bestscore_012;
	      var $192 = HEAP32[$7$s2];
	      if (($i_213 | 0) >= ($192 | 0)) {
	        break;
	      }
	      var $candp_111 = $candp_111 + 16 | 0;
	      var $bestscore_012 = $_bestscore_0;
	      var $i_213 = $i_213 + 1 | 0;
	    }
	    HEAP32[$174 >> 2] = $_bestscore_0;
	    var $197 = HEAP32[$ngs + 488 >> 2] + $_bestscore_0 | 0;
	    if (($192 | 0) <= 0) {
	      var $nawl_0_lcssa = $6;
	      __label__ = 59;
	      break;
	    }
	    var $200 = $ngs + 104 | 0;
	    var $201 = $ngs + 108 | 0;
	    var $nawl_04 = $6;
	    var $candp_25 = HEAP32[$12$s2];
	    var $i_36 = $192;
	    while (1) {
	      var $i_36;
	      var $candp_25;
	      var $nawl_04;
	      var $203$s2 = ($candp_25 + 4 | 0) >> 2;
	      var $205 = (HEAP32[$203$s2] | 0) > ($197 | 0);
	      do {
	        if ($205) {
	          var $208 = HEAP32[$candp_25 >> 2];
	          _ngram_search_alloc_all_rc($ngs, $208);
	          var $hmm_01 = HEAP32[HEAP32[$200 >> 2] + ($208 << 2) >> 2];
	          if (($hmm_01 | 0) == 0) {
	            var $nawl_1 = $nawl_04;
	            break;
	          }
	          var $212 = $candp_25 + 8 | 0;
	          var $k_02 = 0;
	          var $hmm_03 = $hmm_01;
	          while (1) {
	            var $hmm_03;
	            var $k_02;
	            var $214 = $hmm_03 | 0;
	            var $217 = HEAP16[$hmm_03 + 70 >> 1] << 16 >> 16;
	            var $218 = ($217 | 0) < ($frame_idx | 0);
	            do {
	              if ($218) {
	                __label__ = 48;
	              } else {
	                if ((HEAP32[$203$s2] | 0) > (HEAP32[$hmm_03 + 4 >> 2] | 0)) {
	                  __label__ = 48;
	                  break;
	                }
	                var $k_1 = $k_02;
	                __label__ = 51;
	                break;
	              }
	            } while (0);
	            if (__label__ == 48) {
	              if (($217 | 0) == ($1 | 0)) {
	                ___assert_func(STRING_TABLE.__str712 | 0, 1024, STRING_TABLE.___func___last_phone_transition | 0, STRING_TABLE.__str21733 | 0);
	              }
	              var $227 = HEAP32[$203$s2];
	              var $228 = HEAP32[$212 >> 2];
	              _hmm_enter($214, $227, $228, $1);
	              var $k_1 = $k_02 + 1 | 0;
	            }
	            var $k_1;
	            var $hmm_0 = HEAP32[$hmm_03 + 76 >> 2];
	            if (($hmm_0 | 0) == 0) {
	              break;
	            }
	            var $k_02 = $k_1;
	            var $hmm_03 = $hmm_0;
	          }
	          if (($k_1 | 0) <= 0) {
	            var $nawl_1 = $nawl_04;
	            break;
	          }
	          var $235 = ($208 | 0) / 32 & -1;
	          var $240 = 1 << ($208 & 31);
	          if ((HEAP32[HEAP32[$201 >> 2] + ($235 << 2) >> 2] & $240 | 0) != 0) {
	            ___assert_func(STRING_TABLE.__str712 | 0, 1031, STRING_TABLE.___func___last_phone_transition | 0, STRING_TABLE.__str22734 | 0);
	          }
	          if ((HEAP32[(HEAP32[HEAP32[$18$s2] + 8 >> 2] + 8 >> 2) + ($208 * 5 | 0)] | 0) == 1) {
	            ___assert_func(STRING_TABLE.__str712 | 0, 1032, STRING_TABLE.___func___last_phone_transition | 0, STRING_TABLE.__str17729 | 0);
	          }
	          HEAP32[$nawl_04 >> 2] = $208;
	          var $255 = ($235 << 2) + HEAP32[$201 >> 2] | 0;
	          var $257 = HEAP32[$255 >> 2] | $240;
	          HEAP32[$255 >> 2] = $257;
	          var $nawl_1 = $nawl_04 + 4 | 0;
	        } else {
	          var $nawl_1 = $nawl_04;
	        }
	      } while (0);
	      var $nawl_1;
	      var $258 = $i_36 - 1 | 0;
	      if (($258 | 0) <= 0) {
	        var $nawl_0_lcssa = $nawl_1;
	        __label__ = 59;
	        break $_$84;
	      }
	      var $nawl_04 = $nawl_1;
	      var $candp_25 = $candp_25 + 16 | 0;
	      var $i_36 = $258;
	    }
	  } while (0);
	  if (__label__ == 40) {
	    var $_ph;
	    var $bestscore_0_lcssa_ph;
	    HEAP32[$_ph >> 2] = $bestscore_0_lcssa_ph;
	    var $nawl_0_lcssa = $6;
	  }
	  var $nawl_0_lcssa;
	  var $267 = $nawl_0_lcssa - HEAP32[HEAP32[$3 >> 2] + ($2 << 2) >> 2] >> 2;
	  HEAP32[$ngs + ($2 << 2) + 144 >> 2] = $267;
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_last_phone_transition["X"] = 1;

	function _phone_loop_search_finish($search) {
	  return 0;
	  return null;
	}

	function _prune_word_chan($ngs, $frame_idx) {
	  var $108$s2;
	  var $35$s1;
	  var $hmm_0$s2;
	  var $1 = $frame_idx + 1 | 0;
	  var $3 = HEAP32[$ngs + 252 >> 2];
	  var $6 = HEAP32[$ngs + 480 >> 2] + $3 | 0;
	  var $9 = HEAP32[$ngs + 488 >> 2] + $3 | 0;
	  var $10 = $frame_idx & 1;
	  var $11 = $ngs + 140 | 0;
	  var $12 = HEAP32[$11 >> 2];
	  var $13 = $1 & 1;
	  var $15 = HEAP32[$12 + ($13 << 2) >> 2];
	  var $16 = ($13 << 2) + $ngs + 144 | 0;
	  var $18 = (HEAP32[$16 >> 2] << 2) + $15 | 0;
	  var $20 = HEAP32[$ngs + ($10 << 2) + 144 >> 2];
	  if (($20 | 0) > 0) {
	    var $24 = $ngs + 104 | 0;
	    var $25 = $ngs + 68 | 0;
	    var $26 = $1 & 65535;
	    var $27 = $ngs + 108 | 0;
	    var $28 = $ngs + 16 | 0;
	    var $i_011 = $20;
	    var $nawl_012 = $18;
	    var $_pn = HEAP32[$12 + ($10 << 2) >> 2];
	    while (1) {
	      var $_pn;
	      var $nawl_012;
	      var $i_011;
	      var $w_014 = HEAP32[$_pn >> 2];
	      var $30 = ($w_014 << 2) + HEAP32[$24 >> 2] | 0;
	      var $k_0_ph_ph = 0;
	      var $hmm_0_ph_ph = HEAP32[$30 >> 2];
	      var $phmmp_0_ph_ph = $30;
	      $_$6 : while (1) {
	        var $phmmp_0_ph_ph;
	        var $hmm_0_ph_ph;
	        var $k_0_ph_ph;
	        var $hmm_0_ph = $hmm_0_ph_ph;
	        var $phmmp_0_ph = $phmmp_0_ph_ph;
	        $_$8 : while (1) {
	          var $phmmp_0_ph;
	          var $hmm_0_ph;
	          var $hmm_0 = $hmm_0_ph, $hmm_0$s2 = $hmm_0 >> 2;
	          while (1) {
	            var $hmm_0;
	            if (($hmm_0 | 0) == 0) {
	              break $_$6;
	            }
	            var $35$s1 = ($hmm_0 + 70 | 0) >> 1;
	            if ((HEAP16[$35$s1] << 16 >> 16 | 0) < ($frame_idx | 0)) {
	              ___assert_func(STRING_TABLE.__str712 | 0, 1068, STRING_TABLE.___func___prune_word_chan | 0, STRING_TABLE.__str16728 | 0);
	            }
	            var $41 = $hmm_0 + 76 | 0;
	            var $42 = HEAP32[$41 >> 2];
	            if ((HEAP32[$hmm_0$s2 + 16] | 0) > ($9 | 0)) {
	              break $_$8;
	            }
	            if ((HEAP16[$35$s1] << 16 >> 16 | 0) == ($1 | 0)) {
	              var $hmm_0_ph = $42;
	              var $phmmp_0_ph = $41;
	              continue $_$8;
	            }
	            var $61 = HEAP32[$25 >> 2];
	            ___listelem_free__($61, $hmm_0);
	            HEAP32[$phmmp_0_ph >> 2] = $42;
	            var $hmm_0 = $42, $hmm_0$s2 = $hmm_0 >> 2;
	          }
	        }
	        HEAP16[$35$s1] = $26;
	        var $47 = $k_0_ph_ph + 1 | 0;
	        var $49 = HEAP32[$hmm_0$s2 + 11];
	        if (($49 | 0) <= ($6 | 0)) {
	          var $k_0_ph_ph = $47;
	          var $hmm_0_ph_ph = $42;
	          var $phmmp_0_ph_ph = $41;
	          continue;
	        }
	        var $53 = HEAP32[$hmm_0$s2 + 12];
	        var $55 = HEAP32[$hmm_0$s2 + 22];
	        _ngram_search_save_bp($ngs, $frame_idx, $w_014, $49, $53, $55);
	        var $k_0_ph_ph = $47;
	        var $hmm_0_ph_ph = $42;
	        var $phmmp_0_ph_ph = $41;
	      }
	      var $awl_013 = $_pn + 4 | 0;
	      var $64 = ($k_0_ph_ph | 0) > 0;
	      do {
	        if ($64) {
	          var $66 = ($w_014 | 0) / 32 & -1;
	          var $71 = 1 << ($w_014 & 31);
	          if ((HEAP32[HEAP32[$27 >> 2] + ($66 << 2) >> 2] & $71 | 0) != 0) {
	            var $nawl_1 = $nawl_012;
	            break;
	          }
	          if ((HEAP32[(HEAP32[HEAP32[$28 >> 2] + 8 >> 2] + 8 >> 2) + ($w_014 * 5 | 0)] | 0) == 1) {
	            ___assert_func(STRING_TABLE.__str712 | 0, 1096, STRING_TABLE.___func___prune_word_chan | 0, STRING_TABLE.__str17729 | 0);
	          }
	          HEAP32[$nawl_012 >> 2] = $w_014;
	          var $85 = ($66 << 2) + HEAP32[$27 >> 2] | 0;
	          var $87 = HEAP32[$85 >> 2] | $71;
	          HEAP32[$85 >> 2] = $87;
	          var $nawl_1 = $nawl_012 + 4 | 0;
	        } else {
	          var $nawl_1 = $nawl_012;
	        }
	      } while (0);
	      var $nawl_1;
	      var $89 = $i_011 - 1 | 0;
	      if (($89 | 0) <= 0) {
	        break;
	      }
	      var $i_011 = $89;
	      var $nawl_012 = $nawl_1;
	      var $_pn = $awl_013;
	    }
	    var $nawl_0_lcssa = $nawl_1;
	    var $92 = HEAP32[HEAP32[$11 >> 2] + ($13 << 2) >> 2];
	  } else {
	    var $nawl_0_lcssa = $18;
	    var $92 = $15;
	  }
	  var $92;
	  var $nawl_0_lcssa;
	  HEAP32[$16 >> 2] = $nawl_0_lcssa - $92 >> 2;
	  var $97 = $ngs + 120 | 0;
	  var $99 = (HEAP32[$97 >> 2] | 0) > 0;
	  $_$30 : do {
	    if ($99) {
	      var $100 = $ngs + 116 | 0;
	      var $101 = $ngs + 104 | 0;
	      var $102 = $1 & 65535;
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $105 = HEAP32[HEAP32[$100 >> 2] + ($i_11 << 2) >> 2];
	        var $108 = HEAP32[HEAP32[$101 >> 2] + ($105 << 2) >> 2], $108$s2 = $108 >> 2;
	        var $109 = $108 + 70 | 0;
	        var $112 = (HEAP16[$109 >> 1] << 16 >> 16 | 0) < ($frame_idx | 0);
	        do {
	          if (!$112) {
	            if ((HEAP32[$108$s2 + 16] | 0) <= ($9 | 0)) {
	              break;
	            }
	            HEAP16[$109 >> 1] = $102;
	            var $119 = HEAP32[$108$s2 + 11];
	            if (($119 | 0) <= ($6 | 0)) {
	              break;
	            }
	            var $123 = HEAP32[$108$s2 + 12];
	            _ngram_search_save_bp($ngs, $frame_idx, $105, $119, $123, 0);
	          }
	        } while (0);
	        var $124 = $i_11 + 1 | 0;
	        if (($124 | 0) >= (HEAP32[$97 >> 2] | 0)) {
	          break $_$30;
	        }
	        var $i_11 = $124;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_prune_word_chan["X"] = 1;

	function _eval_root_chan($ngs, $frame_idx) {
	  var $2 = HEAP32[$ngs + 88 >> 2];
	  var $3 = ($2 | 0) > 0;
	  $_$41 : do {
	    if ($3) {
	      var $6 = $ngs + 272 | 0;
	      var $rhmm_01 = HEAP32[$ngs + 80 >> 2];
	      var $i_02 = $2;
	      var $bestscore_03 = -536870912;
	      while (1) {
	        var $bestscore_03;
	        var $i_02;
	        var $rhmm_01;
	        if ((HEAP16[$rhmm_01 + 70 >> 1] << 16 >> 16 | 0) == ($frame_idx | 0)) {
	          var $14 = _hmm_vit_eval($rhmm_01 | 0);
	          var $_bestscore_0 = ($14 | 0) > ($bestscore_03 | 0) ? $14 : $bestscore_03;
	          var $17 = HEAP32[$6 >> 2] + 1 | 0;
	          HEAP32[$6 >> 2] = $17;
	          var $bestscore_2 = $_bestscore_0;
	        } else {
	          var $bestscore_2 = $bestscore_03;
	        }
	        var $bestscore_2;
	        var $19 = $i_02 - 1 | 0;
	        if (($19 | 0) <= 0) {
	          var $bestscore_0_lcssa = $bestscore_2;
	          break $_$41;
	        }
	        var $rhmm_01 = $rhmm_01 + 92 | 0;
	        var $i_02 = $19;
	        var $bestscore_03 = $bestscore_2;
	      }
	    } else {
	      var $bestscore_0_lcssa = -536870912;
	    }
	  } while (0);
	  var $bestscore_0_lcssa;
	  return $bestscore_0_lcssa;
	  return null;
	}

	function _eval_nonroot_chan($ngs, $frame_idx) {
	  var $1 = $frame_idx & 1;
	  var $3 = HEAP32[$ngs + ($1 << 2) + 132 >> 2];
	  var $7 = HEAP32[HEAP32[$ngs + 128 >> 2] + ($1 << 2) >> 2];
	  var $8 = $ngs + 276 | 0;
	  var $10 = HEAP32[$8 >> 2] + $3 | 0;
	  HEAP32[$8 >> 2] = $10;
	  var $11 = ($3 | 0) > 0;
	  $_$50 : do {
	    if ($11) {
	      var $i_03 = $3;
	      var $bestscore_04 = -536870912;
	      var $_pn = $7;
	      while (1) {
	        var $_pn;
	        var $bestscore_04;
	        var $i_03;
	        var $acl_05 = $_pn + 4 | 0;
	        var $hmm_0 = HEAP32[$_pn >> 2];
	        var $12 = $hmm_0 | 0;
	        var $13 = _hmm_vit_eval($12);
	        if ((HEAP16[$hmm_0 + 70 >> 1] << 16 >> 16 | 0) != ($frame_idx | 0)) {
	          ___assert_func(STRING_TABLE.__str712 | 0, 640, STRING_TABLE.___func___eval_nonroot_chan | 0, STRING_TABLE.__str25737 | 0);
	        }
	        var $_bestscore_0 = ($13 | 0) > ($bestscore_04 | 0) ? $13 : $bestscore_04;
	        var $21 = $i_03 - 1 | 0;
	        if (($21 | 0) <= 0) {
	          var $bestscore_0_lcssa = $_bestscore_0;
	          break $_$50;
	        }
	        var $i_03 = $21;
	        var $bestscore_04 = $_bestscore_0;
	        var $_pn = $acl_05;
	      }
	    } else {
	      var $bestscore_0_lcssa = -536870912;
	    }
	  } while (0);
	  var $bestscore_0_lcssa;
	  return $bestscore_0_lcssa;
	  return null;
	}

	function _eval_word_chan($ngs, $frame_idx) {
	  var __label__;
	  var $1 = $frame_idx & 1;
	  var $2 = ($1 << 2) + $ngs + 144 | 0;
	  var $3 = HEAP32[$2 >> 2];
	  var $4 = ($3 | 0) > 0;
	  $_$58 : do {
	    if ($4) {
	      var $9 = $ngs + 108 | 0;
	      var $10 = $ngs + 104 | 0;
	      var $bestscore_016 = -536870912;
	      var $i_017 = $3;
	      var $k_018 = 0;
	      var $_pn = HEAP32[HEAP32[$ngs + 140 >> 2] + ($1 << 2) >> 2];
	      while (1) {
	        var $_pn;
	        var $k_018;
	        var $i_017;
	        var $bestscore_016;
	        var $awl_019 = $_pn + 4 | 0;
	        var $w_020 = HEAP32[$_pn >> 2];
	        var $18 = ($w_020 | 0) / 32 & -1;
	        var $19 = HEAP32[$9 >> 2];
	        var $21 = HEAP32[$19 + ($18 << 2) >> 2];
	        var $23 = 1 << ($w_020 & 31);
	        if (($21 & $23 | 0) == 0) {
	          ___assert_func(STRING_TABLE.__str712 | 0, 661, STRING_TABLE.___func___eval_word_chan | 0, STRING_TABLE.__str23735 | 0);
	          var $_pre25 = HEAP32[$9 >> 2];
	          var $29 = $_pre25;
	          var $28 = HEAP32[$_pre25 + ($18 << 2) >> 2];
	        } else {
	          var $29 = $19;
	          var $28 = $21;
	        }
	        var $28;
	        var $29;
	        var $31 = ($18 << 2) + $29 | 0;
	        var $32 = $28 & ($23 ^ -1);
	        HEAP32[$31 >> 2] = $32;
	        var $35 = HEAP32[HEAP32[$10 >> 2] + ($w_020 << 2) >> 2];
	        var $36 = ($35 | 0) == 0;
	        do {
	          if ($36) {
	            ___assert_func(STRING_TABLE.__str712 | 0, 663, STRING_TABLE.___func___eval_word_chan | 0, STRING_TABLE.__str24736 | 0);
	            var $hmm_05_pre = HEAP32[HEAP32[$10 >> 2] + ($w_020 << 2) >> 2];
	            if (($hmm_05_pre | 0) == 0) {
	              var $bestscore_1_lcssa = $bestscore_016;
	              var $k_1_lcssa = $k_018;
	              __label__ = 13;
	              break;
	            }
	            var $bestscore_16 = $bestscore_016;
	            var $k_17 = $k_018;
	            var $hmm_08 = $hmm_05_pre;
	            __label__ = 10;
	            break;
	          } else {
	            var $bestscore_16 = $bestscore_016;
	            var $k_17 = $k_018;
	            var $hmm_08 = $35;
	            __label__ = 10;
	          }
	        } while (0);
	        $_$67 : do {
	          if (__label__ == 10) {
	            while (1) {
	              var $hmm_08;
	              var $k_17;
	              var $bestscore_16;
	              var $39 = $hmm_08 | 0;
	              if ((HEAP16[$hmm_08 + 70 >> 1] << 16 >> 16 | 0) != ($frame_idx | 0)) {
	                ___assert_func(STRING_TABLE.__str712 | 0, 668, STRING_TABLE.___func___eval_word_chan | 0, STRING_TABLE.__str25737 | 0);
	              }
	              var $46 = _hmm_vit_eval($39);
	              var $_bestscore_1 = ($46 | 0) > ($bestscore_16 | 0) ? $46 : $bestscore_16;
	              var $48 = $k_17 + 1 | 0;
	              var $hmm_0 = HEAP32[$hmm_08 + 76 >> 2];
	              if (($hmm_0 | 0) == 0) {
	                var $bestscore_1_lcssa = $_bestscore_1;
	                var $k_1_lcssa = $48;
	                break $_$67;
	              }
	              var $bestscore_16 = $_bestscore_1;
	              var $k_17 = $48;
	              var $hmm_08 = $hmm_0;
	            }
	          }
	        } while (0);
	        var $k_1_lcssa;
	        var $bestscore_1_lcssa;
	        var $51 = $i_017 - 1 | 0;
	        if (($51 | 0) <= 0) {
	          var $bestscore_0_lcssa = $bestscore_1_lcssa;
	          var $k_0_lcssa = $k_1_lcssa;
	          break $_$58;
	        }
	        var $bestscore_016 = $bestscore_1_lcssa;
	        var $i_017 = $51;
	        var $k_018 = $k_1_lcssa;
	        var $_pn = $awl_019;
	      }
	    } else {
	      var $bestscore_0_lcssa = -536870912;
	      var $k_0_lcssa = 0;
	    }
	  } while (0);
	  var $k_0_lcssa;
	  var $bestscore_0_lcssa;
	  var $11 = $ngs + 120 | 0;
	  var $12 = HEAP32[$11 >> 2];
	  var $13 = ($12 | 0) > 0;
	  $_$75 : do {
	    if ($13) {
	      var $14 = $ngs + 116 | 0;
	      var $15 = $ngs + 104 | 0;
	      var $16 = $ngs + 52 | 0;
	      var $bestscore_31 = $bestscore_0_lcssa;
	      var $i_12 = 0;
	      var $j_03 = 0;
	      var $53 = $12;
	      while (1) {
	        var $53;
	        var $j_03;
	        var $i_12;
	        var $bestscore_31;
	        var $56 = HEAP32[HEAP32[$14 >> 2] + ($i_12 << 2) >> 2];
	        var $59 = HEAP32[HEAP32[$15 >> 2] + ($56 << 2) >> 2];
	        if ((HEAP16[$59 + 70 >> 1] << 16 >> 16 | 0) < ($frame_idx | 0)) {
	          var $j_1 = $j_03;
	          var $bestscore_5 = $bestscore_31;
	          var $74 = $53;
	        } else {
	          var $65 = $59 | 0;
	          var $66 = _hmm_vit_eval($65);
	          if (($66 | 0) > ($bestscore_31 | 0)) {
	            var $bestscore_3_ = ($56 | 0) == (HEAP32[$16 >> 2] | 0) ? $bestscore_31 : $66;
	            var $bestscore_4 = $bestscore_3_;
	          } else {
	            var $bestscore_4 = $bestscore_31;
	          }
	          var $bestscore_4;
	          var $j_1 = $j_03 + 1 | 0;
	          var $bestscore_5 = $bestscore_4;
	          var $74 = HEAP32[$11 >> 2];
	        }
	        var $74;
	        var $bestscore_5;
	        var $j_1;
	        var $75 = $i_12 + 1 | 0;
	        if (($75 | 0) >= ($74 | 0)) {
	          var $bestscore_3_lcssa = $bestscore_5;
	          var $j_0_lcssa = $j_1;
	          break $_$75;
	        }
	        var $bestscore_31 = $bestscore_5;
	        var $i_12 = $75;
	        var $j_03 = $j_1;
	        var $53 = $74;
	      }
	    } else {
	      var $bestscore_3_lcssa = $bestscore_0_lcssa;
	      var $j_0_lcssa = 0;
	    }
	  } while (0);
	  var $j_0_lcssa;
	  var $bestscore_3_lcssa;
	  var $77 = $j_0_lcssa + $k_0_lcssa | 0;
	  var $78 = $ngs + 280 | 0;
	  var $80 = HEAP32[$78 >> 2] + $77 | 0;
	  HEAP32[$78 >> 2] = $80;
	  var $81 = $ngs + 276 | 0;
	  var $83 = HEAP32[$81 >> 2] + $77 | 0;
	  HEAP32[$81 >> 2] = $83;
	  var $85 = $ngs + 284 | 0;
	  var $88 = HEAP32[$2 >> 2] + $j_0_lcssa + HEAP32[$85 >> 2] | 0;
	  HEAP32[$85 >> 2] = $88;
	  return $bestscore_3_lcssa;
	  return null;
	}

	_eval_word_chan["X"] = 1;

	function _reinit_search_subtree($ngs, $hmm) {
	  var $2 = HEAP32[$hmm + 76 >> 2];
	  var $3 = ($2 | 0) == 0;
	  $_$87 : do {
	    if (!$3) {
	      var $child_01 = $2;
	      while (1) {
	        var $child_01;
	        var $5 = HEAP32[$child_01 + 80 >> 2];
	        _reinit_search_subtree($ngs, $child_01);
	        if (($5 | 0) == 0) {
	          break $_$87;
	        }
	        var $child_01 = $5;
	      }
	    }
	  } while (0);
	  var $8 = HEAP32[$ngs + 68 >> 2];
	  var $9 = $hmm;
	  ___listelem_free__($8, $9);
	  return;
	  return;
	}

	function _init_nonroot_chan($ngs, $hmm, $ph, $ci, $tmatid) {
	  HEAP32[$hmm + 76 >> 2] = 0;
	  HEAP32[$hmm + 80 >> 2] = 0;
	  HEAP32[$hmm + 88 >> 2] = -1;
	  HEAP32[$hmm + 84 >> 2] = $ci;
	  var $6 = HEAP32[$ngs + 60 >> 2];
	  var $7 = $hmm | 0;
	  _hmm_init($6, $7, 0, $ph, $tmatid);
	  return;
	  return;
	}

	function _phone_loop_search_init($config, $acmod, $dict) {
	  var $1 = ___ckd_calloc__(1, 88, STRING_TABLE.__str760 | 0, 119);
	  var $2 = $1;
	  _ps_search_init($2, _phone_loop_search_funcs, $config, $acmod, $dict, 0);
	  var $5 = HEAP32[$1 + 16 >> 2];
	  var $8 = HEAP32[$1 + 20 >> 2];
	  var $9 = _phone_loop_search_reinit($2, $5, $8);
	  return $2;
	  return null;
	}

	function _phone_loop_search_reinit($search, $dict, $d2p) {
	  var $_idx2$s2;
	  var $57$s2;
	  var $_pre_phi$s1;
	  var $26$s2;
	  var $12$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $search;
	  var $3 = HEAP32[$search + 8 >> 2];
	  var $5 = HEAP32[$search + 12 >> 2];
	  _ps_search_base_reinit($search, $dict, $d2p);
	  var $6 = $search + 56 | 0;
	  var $7 = $6;
	  var $8 = HEAP32[$7 >> 2];
	  if (($8 | 0) != 0) {
	    _hmm_context_free($8);
	  }
	  var $12$s2 = ($5 + 20 | 0) >> 2;
	  var $13 = HEAP32[$12$s2];
	  var $15 = HEAP32[$13 + 12 >> 2];
	  var $19 = HEAP32[HEAP32[$5 + 24 >> 2] >> 2];
	  var $21 = HEAP32[$13 + 60 >> 2];
	  var $22 = _hmm_context_init($15, $19, $21);
	  var $_c = $22;
	  HEAP32[$6 >> 2] = $_c;
	  if (($22 | 0) == 0) {
	    var $_0 = -1;
	  } else {
	    var $26$s2 = ($search + 64 | 0) >> 2;
	    var $27 = HEAP32[$26$s2];
	    if (($27 | 0) != 0) {
	      var $29 = $27;
	      _ckd_free($29);
	    }
	    var $_pre_phi$s1 = ($1 + 62 | 0) >> 1;
	    var $33 = HEAP32[HEAP32[$12$s2] + 4 >> 2] & 65535;
	    HEAP16[$_pre_phi$s1] = $33;
	    var $34 = $33 << 16 >> 16;
	    var $35 = ___ckd_calloc__($34, 80, STRING_TABLE.__str760 | 0, 94);
	    var $_c1 = $35;
	    HEAP32[$26$s2] = $_c1;
	    var $37 = HEAP16[$_pre_phi$s1] << 16 >> 16 > 0;
	    $_$102 : do {
	      if ($37) {
	        var $i_15 = 0;
	        var $38 = $_c1;
	        while (1) {
	          var $38;
	          var $i_15;
	          HEAP16[($38 + 76 >> 1) + ($i_15 * 40 | 0)] = $i_15 & 65535;
	          var $42 = HEAP32[$7 >> 2];
	          var $45 = HEAP32[$26$s2] + $i_15 * 80 | 0;
	          var $48 = HEAP32[HEAP32[$12$s2] + 56 >> 2];
	          var $49 = $48 + $i_15 * 12 | 0;
	          var $50 = HEAPU8[$49] | HEAPU8[$49 + 1] << 8 | HEAPU8[$49 + 2] << 16 | HEAPU8[$49 + 3] << 24 | 0;
	          var $51 = $48 + $i_15 * 12 + 4 | 0;
	          var $52 = HEAPU8[$51] | HEAPU8[$51 + 1] << 8 | HEAPU8[$51 + 2] << 16 | HEAPU8[$51 + 3] << 24 | 0;
	          _hmm_init($42, $45, 0, $50, $52);
	          var $53 = $i_15 + 1 | 0;
	          if (($53 | 0) >= (HEAP16[$_pre_phi$s1] << 16 >> 16 | 0)) {
	            break $_$102;
	          }
	          var $i_15 = $53;
	          var $38 = HEAP32[$26$s2];
	        }
	      }
	    } while (0);
	    var $57$s2 = ($5 + 4 | 0) >> 2;
	    var $58 = HEAP32[$57$s2];
	    var $_idx2$s2 = ($3 + 4 | 0) >> 2;
	    var $_idx2_val = HEAP32[$_idx2$s2];
	    var $59 = _cmd_ln_float_r($_idx2_val, STRING_TABLE.__str1752744 | 0);
	    var $60 = _logmath_log($58, $59);
	    var $61 = $search + 72 | 0;
	    var $62 = $61;
	    var $_c2 = $60;
	    HEAP32[$61 >> 2] = $_c2;
	    var $63 = HEAP32[$57$s2];
	    var $_idx1_val = HEAP32[$_idx2$s2];
	    var $64 = _cmd_ln_float_r($_idx1_val, STRING_TABLE.__str1782747 | 0);
	    var $65 = _logmath_log($63, $64);
	    var $66 = $search + 76 | 0;
	    var $67 = $66;
	    var $_c3 = $65;
	    HEAP32[$66 >> 2] = $_c3;
	    var $68 = HEAP32[$57$s2];
	    var $_idx_val = HEAP32[$_idx2$s2];
	    var $69 = _cmd_ln_float_r($_idx_val, STRING_TABLE.__str2412810 | 0);
	    var $70 = _logmath_log($68, $69);
	    var $71 = $search + 80 | 0;
	    var $72 = $71;
	    var $_c4 = $70;
	    HEAP32[$71 >> 2] = $_c4;
	    __E__pr_info_header(STRING_TABLE.__str760 | 0, 105);
	    var $73 = HEAP32[$62 >> 2];
	    var $74 = HEAP32[$67 >> 2];
	    var $75 = HEAP32[$72 >> 2];
	    __E__pr_info(STRING_TABLE.__str5765 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $73, HEAP32[tempInt + 4 >> 2] = $74, HEAP32[tempInt + 8 >> 2] = $75, tempInt));
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_phone_loop_search_reinit["X"] = 1;

	function _phone_loop_search_start($search) {
	  var $1 = $search;
	  var $2 = $1 + 62 | 0;
	  var $4 = HEAP16[$2 >> 1] << 16 >> 16 > 0;
	  $_$109 : do {
	    if ($4) {
	      var $5 = $search + 64 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $9 = HEAP32[$5 >> 2] + $i_01 * 80 | 0;
	        _hmm_clear($9);
	        _hmm_enter($9, 0, -1, 0);
	        var $10 = $i_01 + 1 | 0;
	        if (($10 | 0) >= (HEAP16[$2 >> 1] << 16 >> 16 | 0)) {
	          break $_$109;
	        }
	        var $i_01 = $10;
	      }
	    }
	  } while (0);
	  _phone_loop_search_free_renorm($1);
	  HEAP32[$search + 68 >> 2] = 0;
	  return 0;
	  return null;
	}

	function _phone_loop_search_step($search, $frame_idx) {
	  var $22$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $1 = __stackBase__, $1$s2 = $1 >> 2;
	  HEAP32[$1$s2] = $frame_idx;
	  var $2 = $search;
	  var $4 = HEAP32[$search + 12 >> 2];
	  var $7 = HEAP8[$4 + 89 | 0] << 24 >> 24 == 0;
	  $_$115 : do {
	    if ($7) {
	      var $8 = $2 + 62 | 0;
	      if (HEAP16[$8 >> 1] << 16 >> 16 <= 0) {
	        break;
	      }
	      var $11 = $search + 64 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $15 = HEAP32[$11 >> 2] + $i_01 * 80 | 0;
	        _acmod_activate_hmm($4, $15);
	        var $16 = $i_01 + 1 | 0;
	        if (($16 | 0) >= (HEAP16[$8 >> 1] << 16 >> 16 | 0)) {
	          break $_$115;
	        }
	        var $i_01 = $16;
	      }
	    }
	  } while (0);
	  var $20 = _acmod_score($4, $1);
	  var $21 = $search + 68 | 0;
	  var $22$s2 = $21 >> 2;
	  if (((HEAP32[$search + 72 >> 2] << 1) + HEAP32[$22$s2] | 0) < -536870912) {
	    __E__pr_info_header(STRING_TABLE.__str760 | 0, 283);
	    var $31 = HEAP32[$1$s2];
	    var $32 = HEAP32[$22$s2];
	    __E__pr_info(STRING_TABLE.__str61184 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $31, HEAP32[tempInt + 4 >> 2] = $32, tempInt));
	    var $33 = HEAP32[$1$s2];
	    var $34 = HEAP32[$22$s2];
	    _renormalize_hmms($2, $33, $34);
	  }
	  var $36 = HEAP32[$1$s2];
	  var $37 = _evaluate_hmms($2, $20, $36);
	  var $_c = $37;
	  HEAP32[$21 >> 2] = $_c;
	  var $38 = HEAP32[$1$s2];
	  _prune_hmms($2, $38);
	  var $39 = HEAP32[$1$s2];
	  _phone_transition($2, $39);
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	_phone_loop_search_step["X"] = 1;

	function _phone_loop_search_free($search) {
	  var $1 = $search;
	  _ps_search_deinit($search);
	  _phone_loop_search_free_renorm($1);
	  var $4 = HEAP32[$search + 64 >> 2];
	  _ckd_free($4);
	  var $7 = HEAP32[$search + 56 >> 2];
	  _hmm_context_free($7);
	  var $8 = $search;
	  _ckd_free($8);
	  return;
	  return;
	}

	function _phone_loop_search_hyp($search, $out_score) {
	  var __stackBase__ = STACKTOP;
	  __E__pr_header(STRING_TABLE.__str760 | 0, 310, STRING_TABLE.__str212436 | 0);
	  __E__pr_warn(STRING_TABLE.__str8768 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	function _phone_loop_search_prob($search) {
	  var __stackBase__ = STACKTOP;
	  __E__pr_header(STRING_TABLE.__str760 | 0, 318, STRING_TABLE.__str212436 | 0);
	  __E__pr_warn(STRING_TABLE.__str9769 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	function _phone_loop_search_seg_iter($search, $out_score) {
	  var __stackBase__ = STACKTOP;
	  __E__pr_header(STRING_TABLE.__str760 | 0, 325, STRING_TABLE.__str212436 | 0);
	  __E__pr_warn(STRING_TABLE.__str8768 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  STACKTOP = __stackBase__;
	  return 0;
	  return null;
	}

	function _phone_loop_search_free_renorm($pls) {
	  var $1$s2;
	  var $1$s2 = ($pls + 84 | 0) >> 2;
	  var $gn_01 = HEAP32[$1$s2];
	  if (($gn_01 | 0) == 0) {
	    var $8 = 0;
	  } else {
	    var $gn_02 = $gn_01;
	    while (1) {
	      var $gn_02;
	      var $4 = HEAP32[$gn_02 >> 2];
	      _ckd_free($4);
	      var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	      if (($gn_0 | 0) == 0) {
	        break;
	      }
	      var $gn_02 = $gn_0;
	    }
	    var $8 = HEAP32[$1$s2];
	  }
	  var $8;
	  _glist_free($8);
	  HEAP32[$1$s2] = 0;
	  return;
	  return;
	}

	function _renormalize_hmms($pls, $frame_idx, $norm) {
	  var $1 = ___ckd_calloc__(1, 8, STRING_TABLE.__str760 | 0, 174);
	  var $2 = $pls + 84 | 0;
	  var $3 = HEAP32[$2 >> 2];
	  var $4 = _glist_add_ptr($3, $1);
	  HEAP32[$2 >> 2] = $4;
	  HEAP32[$1 >> 2] = $frame_idx;
	  HEAP32[$1 + 4 >> 2] = $norm;
	  var $8 = $pls + 62 | 0;
	  var $10 = HEAP16[$8 >> 1] << 16 >> 16 > 0;
	  $_$136 : do {
	    if ($10) {
	      var $11 = $pls + 64 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $14 = HEAP32[$11 >> 2] + $i_01 * 80 | 0;
	        _hmm_normalize($14, $norm);
	        var $15 = $i_01 + 1 | 0;
	        if (($15 | 0) >= (HEAP16[$8 >> 1] << 16 >> 16 | 0)) {
	          break $_$136;
	        }
	        var $i_01 = $15;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _evaluate_hmms($pls, $senscr, $frame_idx) {
	  var $3 = HEAP32[$pls + 56 >> 2] + 8 | 0;
	  HEAP32[$3 >> 2] = $senscr;
	  var $4 = $pls + 62 | 0;
	  var $5 = HEAP16[$4 >> 1];
	  var $6 = $5 << 16 >> 16 > 0;
	  $_$142 : do {
	    if ($6) {
	      var $7 = $pls + 64 | 0;
	      var $bs_01 = -536870912;
	      var $i_02 = 0;
	      var $8 = $5;
	      while (1) {
	        var $8;
	        var $i_02;
	        var $bs_01;
	        var $9 = HEAP32[$7 >> 2];
	        if ((HEAP16[($9 + 70 >> 1) + ($i_02 * 40 | 0)] << 16 >> 16 | 0) < ($frame_idx | 0)) {
	          var $bs_1 = $bs_01;
	          var $19 = $8;
	        } else {
	          var $15 = $9 + $i_02 * 80 | 0;
	          var $16 = _hmm_vit_eval($15);
	          var $_bs_0 = ($16 | 0) > ($bs_01 | 0) ? $16 : $bs_01;
	          var $bs_1 = $_bs_0;
	          var $19 = HEAP16[$4 >> 1];
	        }
	        var $19;
	        var $bs_1;
	        var $20 = $i_02 + 1 | 0;
	        if (($20 | 0) >= ($19 << 16 >> 16 | 0)) {
	          var $bs_0_lcssa = $bs_1;
	          break $_$142;
	        }
	        var $bs_01 = $bs_1;
	        var $i_02 = $20;
	        var $8 = $19;
	      }
	    } else {
	      var $bs_0_lcssa = -536870912;
	    }
	  } while (0);
	  var $bs_0_lcssa;
	  HEAP32[$pls + 68 >> 2] = $bs_0_lcssa;
	  return $bs_0_lcssa;
	  return null;
	}

	function _prune_hmms($pls, $frame_idx) {
	  var $5 = HEAP32[$pls + 72 >> 2] + HEAP32[$pls + 68 >> 2] | 0;
	  var $6 = $pls + 62 | 0;
	  var $8 = HEAP16[$6 >> 1] << 16 >> 16 > 0;
	  $_$151 : do {
	    if ($8) {
	      var $10 = $pls + 64 | 0;
	      var $11 = $frame_idx + 1 & 65535;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $12 = HEAP32[$10 >> 2];
	        var $13 = $12 + $i_01 * 80 | 0;
	        var $14 = $12 + $i_01 * 80 + 70 | 0;
	        if ((HEAP16[$14 >> 1] << 16 >> 16 | 0) >= ($frame_idx | 0)) {
	          if ((HEAP32[($12 + 64 >> 2) + ($i_01 * 20 | 0)] | 0) > ($5 | 0)) {
	            HEAP16[$14 >> 1] = $11;
	          } else {
	            _hmm_clear_scores($13);
	          }
	        }
	        var $25 = $i_01 + 1 | 0;
	        if (($25 | 0) >= (HEAP16[$6 >> 1] << 16 >> 16 | 0)) {
	          break $_$151;
	        }
	        var $i_01 = $25;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _ps_get_logmath($ps_0_5_val) {
	  return $ps_0_5_val;
	  return null;
	}

	function _phone_transition($pls, $frame_idx) {
	  var __label__;
	  var $5 = HEAP32[$pls + 76 >> 2] + HEAP32[$pls + 68 >> 2] | 0;
	  var $6 = $frame_idx + 1 | 0;
	  var $7 = $pls + 62 | 0;
	  var $8 = HEAP16[$7 >> 1];
	  var $9 = $8 << 16 >> 16 > 0;
	  $_$2 : do {
	    if ($9) {
	      var $10 = $pls + 64 | 0;
	      var $11 = $pls + 80 | 0;
	      var $i_02 = 0;
	      var $12 = $8;
	      while (1) {
	        var $12;
	        var $i_02;
	        var $13 = HEAP32[$10 >> 2];
	        var $17 = (HEAP16[($13 + 70 >> 1) + ($i_02 * 40 | 0)] << 16 >> 16 | 0) == ($6 | 0);
	        $_$6 : do {
	          if ($17) {
	            var $22 = HEAP32[$11 >> 2] + HEAP32[($13 + 44 >> 2) + ($i_02 * 20 | 0)] | 0;
	            if (!(($22 | 0) > ($5 | 0) & $12 << 16 >> 16 > 0)) {
	              var $45 = $12;
	              break;
	            }
	            var $25 = $13 + $i_02 * 80 + 48 | 0;
	            var $j_01 = 0;
	            var $28 = $12;
	            var $27 = $13;
	            while (1) {
	              var $27;
	              var $28;
	              var $j_01;
	              var $29 = $27 + $j_01 * 80 | 0;
	              var $33 = (HEAP16[($27 + 70 >> 1) + ($j_01 * 40 | 0)] << 16 >> 16 | 0) < ($frame_idx | 0);
	              do {
	                if ($33) {
	                  __label__ = 9;
	                } else {
	                  if (($22 | 0) > (HEAP32[($27 + 4 >> 2) + ($j_01 * 20 | 0)] | 0)) {
	                    __label__ = 9;
	                    break;
	                  }
	                  var $41 = $28;
	                  __label__ = 10;
	                  break;
	                }
	              } while (0);
	              if (__label__ == 9) {
	                var $39 = HEAP32[$25 >> 2];
	                _hmm_enter($29, $22, $39, $6);
	                var $41 = HEAP16[$7 >> 1];
	              }
	              var $41;
	              var $42 = $j_01 + 1 | 0;
	              if (($42 | 0) >= ($41 << 16 >> 16 | 0)) {
	                var $45 = $41;
	                break $_$6;
	              }
	              var $j_01 = $42;
	              var $28 = $41;
	              var $27 = HEAP32[$10 >> 2];
	            }
	          } else {
	            var $45 = $12;
	          }
	        } while (0);
	        var $45;
	        var $46 = $i_02 + 1 | 0;
	        if (($46 | 0) >= ($45 << 16 >> 16 | 0)) {
	          break $_$2;
	        }
	        var $i_02 = $46;
	        var $12 = $45;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_phone_transition["X"] = 1;

	function _ps_reinit($ps, $config) {
	  var $26$s2;
	  var $24$s2;
	  var $22$s2;
	  var $_phi_trans_insert$s2;
	  var $ps$s2 = $ps >> 2;
	  var __label__;
	  var $_phi_trans_insert$s2 = ($ps | 0) >> 2;
	  var $_pre = HEAP32[$_phi_trans_insert$s2];
	  if (($config | 0) == 0 | ($_pre | 0) == ($config | 0)) {
	    var $4 = $_pre;
	  } else {
	    _cmd_ln_free_r($_pre);
	    HEAP32[$_phi_trans_insert$s2] = $config;
	    var $4 = $config;
	  }
	  var $4;
	  var $_idx15_val = HEAP32[$4 + 4 >> 2];
	  var $5 = _cmd_ln_str_r($_idx15_val, STRING_TABLE.__str2652834 | 0);
	  if (($5 | 0) != 0) {
	    var $_idx14_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	    var $9 = _cmd_ln_str_r($_idx14_val, STRING_TABLE.__str2652834 | 0);
	    _err_set_logfile($9);
	  }
	  var $_idx4_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	  var $12 = _cmd_ln_int_r($_idx4_val, STRING_TABLE.__str2672836 | 0);
	  var $_idx13_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	  var $14 = _cmd_ln_str_r($_idx13_val, STRING_TABLE.__str2692838 | 0);
	  HEAP32[$ps$s2 + 26] = $14;
	  var $_idx12_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	  var $17 = _cmd_ln_str_r($_idx12_val, STRING_TABLE.__str2712840 | 0);
	  HEAP32[$ps$s2 + 27] = $17;
	  var $_idx11_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	  var $20 = _cmd_ln_str_r($_idx11_val, STRING_TABLE.__str2732842 | 0);
	  HEAP32[$ps$s2 + 28] = $20;
	  _ps_init_defaults($ps);
	  _ps_free_searches($ps);
	  var $22$s2 = ($ps + 8 | 0) >> 2;
	  var $23 = HEAP32[$22$s2];
	  _acmod_free($23);
	  HEAP32[$22$s2] = 0;
	  var $24$s2 = ($ps + 12 | 0) >> 2;
	  var $25 = HEAP32[$24$s2];
	  _dict_free($25);
	  HEAP32[$24$s2] = 0;
	  var $26$s2 = ($ps + 20 | 0) >> 2;
	  var $27 = HEAP32[$26$s2];
	  var $28 = ($27 | 0) == 0;
	  do {
	    if (!$28) {
	      var $_idx16 = $27 + 20 | 0;
	      var $_idx16_val = (tempDoubleI32[0] = HEAP32[$_idx16 >> 2], tempDoubleI32[1] = HEAP32[$_idx16 + 4 >> 2], tempDoubleF64[0]);
	      var $30 = _logmath_get_base($_idx16_val);
	      var $_idx6_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	      var $32 = _cmd_ln_float_r($_idx6_val, STRING_TABLE.__str1522721 | 0);
	      var $_pr = HEAPU32[$26$s2];
	      if ($30 == $32) {
	        var $48 = $_pr;
	        __label__ = 11;
	        break;
	      }
	      if (($_pr | 0) == 0) {
	        __label__ = 10;
	        break;
	      }
	      _logmath_free($_pr);
	      __label__ = 10;
	      break;
	    }
	    __label__ = 10;
	  } while (0);
	  if (__label__ == 10) {
	    var $_idx5_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	    var $40 = _cmd_ln_float_r($_idx5_val, STRING_TABLE.__str1522721 | 0);
	    var $42 = $40;
	    var $_idx3_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	    var $44 = _cmd_ln_int_r($_idx3_val, STRING_TABLE.__str1872756 | 0);
	    var $46 = ($44 | 0) != 0 & 1;
	    var $47 = _logmath_init($42, 0, $46);
	    HEAP32[$26$s2] = $47;
	    var $48 = $47;
	  }
	  var $48;
	  var $49 = HEAP32[$_phi_trans_insert$s2];
	  var $50 = _acmod_init($49, $48);
	  HEAP32[$22$s2] = $50;
	  var $51 = ($50 | 0) == 0;
	  $_$33 : do {
	    if ($51) {
	      var $_0 = -1;
	    } else {
	      var $_idx2_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	      var $54 = _cmd_ln_int_r($_idx2_val, STRING_TABLE.__str1852754 | 0);
	      var $55 = ($54 | 0) == 0;
	      do {
	        if (!$55) {
	          var $_idx1_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	          var $58 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str1832752 | 0);
	          if (($58 | 0) == 0) {
	            break;
	          }
	          var $61 = HEAP32[$22$s2];
	          _acmod_set_grow($61);
	        }
	      } while (0);
	      var $_idx_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	      var $64 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1732742 | 0);
	      HEAP32[$ps$s2 + 9] = $64;
	      if (($64 | 0) != 0) {
	        var $68 = HEAP32[$_phi_trans_insert$s2];
	        var $69 = HEAP32[$22$s2];
	        var $70 = HEAP32[$24$s2];
	        var $71 = _phone_loop_search_init($68, $69, $70);
	        HEAP32[$ps$s2 + 8] = $71;
	        if (($71 | 0) == 0) {
	          var $_0 = -1;
	          break;
	        }
	        var $75 = $ps + 24 | 0;
	        var $76 = HEAP32[$75 >> 2];
	        var $77 = $71;
	        var $78 = _glist_add_ptr($76, $77);
	        HEAP32[$75 >> 2] = $78;
	      }
	      var $80 = HEAP32[$_phi_trans_insert$s2];
	      var $83 = HEAP32[HEAP32[$22$s2] + 20 >> 2];
	      var $84 = _dict_init($80, $83);
	      HEAP32[$24$s2] = $84;
	      if (($84 | 0) == 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $_idx10_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	      var $88 = _cmd_ln_str_r($_idx10_val, STRING_TABLE.__str2552824 | 0);
	      var $89 = ($88 | 0) == 0;
	      $_$44 : do {
	        if ($89) {
	          var $_idx9_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	          var $92 = _cmd_ln_str_r($_idx9_val, STRING_TABLE.__str2572826 | 0);
	          if (($92 | 0) != 0) {
	            __label__ = 21;
	            break;
	          }
	          var $_idx8_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	          var $119 = _cmd_ln_str_r($_idx8_val, STRING_TABLE.__str2162785 | 0);
	          var $120 = ($119 | 0) == 0;
	          do {
	            if ($120) {
	              var $_idx7_val = HEAP32[HEAP32[$_phi_trans_insert$s2] + 4 >> 2];
	              var $123 = _cmd_ln_str_r($_idx7_val, STRING_TABLE.__str2182787 | 0);
	              if (($123 | 0) != 0) {
	                break;
	              }
	              var $151 = HEAP32[HEAP32[$22$s2] + 20 >> 2];
	              var $152 = HEAP32[$24$s2];
	              var $153 = _dict2pid_build($151, $152);
	              HEAP32[$ps$s2 + 4] = $153;
	              if (($153 | 0) == 0) {
	                var $_0 = -1;
	                break $_$33;
	              }
	              __label__ = 30;
	              break $_$44;
	            }
	          } while (0);
	          var $128 = HEAP32[HEAP32[$22$s2] + 20 >> 2];
	          var $129 = HEAP32[$24$s2];
	          var $130 = _dict2pid_build($128, $129);
	          HEAP32[$ps$s2 + 4] = $130;
	          if (($130 | 0) == 0) {
	            var $_0 = -1;
	            break $_$33;
	          }
	          var $134 = HEAP32[$_phi_trans_insert$s2];
	          var $135 = HEAP32[$22$s2];
	          var $136 = HEAP32[$24$s2];
	          var $137 = _ngram_search_init($134, $135, $136, $130);
	          if (($137 | 0) == 0) {
	            var $_0 = -1;
	            break $_$33;
	          }
	          var $141 = HEAP32[$ps$s2 + 8];
	          var $142 = $137 + 4 | 0;
	          HEAP32[$142 >> 2] = $141;
	          var $143 = $ps + 24 | 0;
	          var $144 = HEAP32[$143 >> 2];
	          var $145 = $137;
	          var $146 = _glist_add_ptr($144, $145);
	          HEAP32[$143 >> 2] = $146;
	          HEAP32[$ps$s2 + 7] = $137;
	          __label__ = 30;
	          break;
	        }
	        __label__ = 21;
	      } while (0);
	      if (__label__ == 21) {
	        var $97 = HEAP32[HEAP32[$22$s2] + 20 >> 2];
	        var $98 = HEAP32[$24$s2];
	        var $99 = _dict2pid_build($97, $98);
	        HEAP32[$ps$s2 + 4] = $99;
	        if (($99 | 0) == 0) {
	          var $_0 = -1;
	          break;
	        }
	        var $103 = HEAP32[$_phi_trans_insert$s2];
	        var $104 = HEAP32[$22$s2];
	        var $105 = HEAP32[$24$s2];
	        var $106 = _fsg_search_init($103, $104, $105, $99);
	        if (($106 | 0) == 0) {
	          var $_0 = -1;
	          break;
	        }
	        var $110 = HEAP32[$ps$s2 + 8];
	        var $111 = $106 + 4 | 0;
	        HEAP32[$111 >> 2] = $110;
	        var $112 = $ps + 24 | 0;
	        var $113 = HEAP32[$112 >> 2];
	        var $114 = $106;
	        var $115 = _glist_add_ptr($113, $114);
	        HEAP32[$112 >> 2] = $115;
	        HEAP32[$ps$s2 + 7] = $106;
	      }
	      var $157 = $ps + 48 | 0;
	      HEAP32[$157 >> 2] = STRING_TABLE.__str14785 | 0;
	      _ptmr_init($157);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ps_reinit["X"] = 1;

	function _ps_init_defaults($ps) {
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($ps | 0) >> 2;
	  var $_idx5_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $3 = _cmd_ln_str_r($_idx5_val, STRING_TABLE.__str1062675 | 0);
	  var $_idx4_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $5 = _cmd_ln_str_r($_idx4_val, STRING_TABLE.__str2162785 | 0);
	  var $_idx3_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $7 = _cmd_ln_str_r($_idx3_val, STRING_TABLE.__str2052774 | 0);
	  var $8 = ($3 | 0) == 0;
	  do {
	    if ($8) {
	      var $10 = _hmmdir_exists(STRING_TABLE.__str287 | 0);
	      if (($10 | 0) == 0) {
	        var $hmmdir_0 = 0;
	        break;
	      }
	      var $_idx11_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx11_val, STRING_TABLE.__str1062675 | 0, STRING_TABLE.__str287 | 0);
	      var $hmmdir_0 = STRING_TABLE.__str287 | 0;
	    } else {
	      var $hmmdir_0 = $3;
	    }
	  } while (0);
	  var $hmmdir_0;
	  var $15 = ($5 | 0) == 0;
	  do {
	    if ($15) {
	      var $_idx2_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $18 = _cmd_ln_str_r($_idx2_val, STRING_TABLE.__str2552824 | 0);
	      if (($18 | 0) != 0) {
	        var $lmfile_0 = 0;
	        break;
	      }
	      var $_idx1_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $22 = _cmd_ln_str_r($_idx1_val, STRING_TABLE.__str2572826 | 0);
	      if (($22 | 0) != 0) {
	        var $lmfile_0 = 0;
	        break;
	      }
	      var $25 = _file_exists(STRING_TABLE.__str288 | 0);
	      if (($25 | 0) == 0) {
	        var $lmfile_0 = 0;
	        break;
	      }
	      var $_idx10_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx10_val, STRING_TABLE.__str2162785 | 0, STRING_TABLE.__str288 | 0);
	      var $lmfile_0 = STRING_TABLE.__str288 | 0;
	    } else {
	      var $lmfile_0 = $5;
	    }
	  } while (0);
	  var $lmfile_0;
	  var $30 = ($7 | 0) == 0;
	  do {
	    if ($30) {
	      var $32 = _file_exists(STRING_TABLE.__str289 | 0);
	      if (($32 | 0) == 0) {
	        var $dictfile_0 = 0;
	        break;
	      }
	      var $_idx9_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx9_val, STRING_TABLE.__str2052774 | 0, STRING_TABLE.__str289 | 0);
	      var $dictfile_0 = STRING_TABLE.__str289 | 0;
	    } else {
	      var $dictfile_0 = $7;
	    }
	  } while (0);
	  var $dictfile_0;
	  var $37 = ($hmmdir_0 | 0) == 0;
	  do {
	    if (!$37) {
	      var $hmmdir_0_val = HEAP8[$hmmdir_0];
	      var $39 = _path_is_absolute($hmmdir_0_val);
	      if (($39 | 0) != 0) {
	        break;
	      }
	      var $42 = _hmmdir_exists($hmmdir_0);
	      if (($42 | 0) != 0) {
	        break;
	      }
	      var $45 = _string_join(STRING_TABLE.__str290 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $hmmdir_0, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	      var $46 = _hmmdir_exists($45);
	      if (($46 | 0) == 0) {
	        __E__pr_header(STRING_TABLE.__str15786 | 0, 136, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str291 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $hmmdir_0, tempInt));
	      } else {
	        var $_idx8_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	        _cmd_ln_set_str_r($_idx8_val, STRING_TABLE.__str1062675 | 0, $45);
	      }
	      _ckd_free($45);
	    }
	  } while (0);
	  var $53 = ($lmfile_0 | 0) == 0;
	  do {
	    if (!$53) {
	      var $lmfile_0_val = HEAP8[$lmfile_0];
	      var $55 = _path_is_absolute($lmfile_0_val);
	      if (($55 | 0) != 0) {
	        break;
	      }
	      var $58 = _file_exists($lmfile_0);
	      if (($58 | 0) != 0) {
	        break;
	      }
	      var $61 = _string_join(STRING_TABLE.__str292 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $lmfile_0, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	      var $_idx7_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx7_val, STRING_TABLE.__str2162785 | 0, $61);
	      _ckd_free($61);
	    }
	  } while (0);
	  var $64 = ($dictfile_0 | 0) == 0;
	  do {
	    if (!$64) {
	      var $dictfile_0_val = HEAP8[$dictfile_0];
	      var $66 = _path_is_absolute($dictfile_0_val);
	      if (($66 | 0) != 0) {
	        break;
	      }
	      var $69 = _file_exists($dictfile_0);
	      if (($69 | 0) != 0) {
	        break;
	      }
	      var $72 = _string_join(STRING_TABLE.__str292 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $dictfile_0, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	      var $_idx6_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx6_val, STRING_TABLE.__str2052774 | 0, $72);
	      _ckd_free($72);
	    }
	  } while (0);
	  var $_idx_val = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	  var $76 = _cmd_ln_str_r($_idx_val, STRING_TABLE.__str1062675 | 0);
	  if (($76 | 0) != 0) {
	    _ps_add_file($ps, STRING_TABLE.__str1102679 | 0, $76, STRING_TABLE.__str293 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1192688 | 0, $76, STRING_TABLE.__str294 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1212690 | 0, $76, STRING_TABLE.__str295 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1142683 | 0, $76, STRING_TABLE.__str296 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1252694 | 0, $76, STRING_TABLE.__str297 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1332702 | 0, $76, STRING_TABLE.__str298 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str2072776 | 0, $76, STRING_TABLE.__str299 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1002669 | 0, $76, STRING_TABLE.__str300 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1082677 | 0, $76, STRING_TABLE.__str301 | 0);
	    _ps_add_file($ps, STRING_TABLE.__str1122681 | 0, $76, STRING_TABLE.__str302 | 0);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ps_init_defaults["X"] = 1;

	function _ps_free_searches($ps) {
	  var $1$s2;
	  var $1$s2 = ($ps + 24 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if (($2 | 0) != 0) {
	    var $gn_01 = $2;
	    while (1) {
	      var $gn_01;
	      var $5 = HEAP32[$gn_01 >> 2];
	      var $6 = $5;
	      var $10 = HEAP32[HEAP32[$5 >> 2] + 20 >> 2];
	      FUNCTION_TABLE[$10]($6);
	      var $12 = HEAP32[$gn_01 + 8 >> 2];
	      if (($12 | 0) == 0) {
	        break;
	      }
	      var $gn_01 = $12;
	    }
	    var $_pre = HEAP32[$1$s2];
	    _glist_free($_pre);
	    HEAP32[$1$s2] = 0;
	    HEAP32[$ps + 28 >> 2] = 0;
	  }
	  return;
	  return;
	}

	function _ps_init($config) {
	  var $1 = ___ckd_calloc__(1, 116, STRING_TABLE.__str15786 | 0, 305);
	  var $2 = $1;
	  HEAP32[$1 + 4 >> 2] = 1;
	  var $5 = _ps_reinit($2, $config);
	  if (($5 | 0) < 0) {
	    _ps_free($2);
	    var $_0 = 0;
	  } else {
	    var $_0 = $2;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_free($ps) {
	  var $ps$s2 = $ps >> 2;
	  var $1 = ($ps | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $ps + 4 | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $8 = $ps + 24 | 0;
	      var $gn_01 = HEAP32[$8 >> 2];
	      if (($gn_01 | 0) == 0) {
	        var $20 = 0;
	      } else {
	        var $gn_02 = $gn_01;
	        while (1) {
	          var $gn_02;
	          var $11 = HEAP32[$gn_02 >> 2];
	          var $12 = $11;
	          var $16 = HEAP32[HEAP32[$11 >> 2] + 20 >> 2];
	          FUNCTION_TABLE[$16]($12);
	          var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	          if (($gn_0 | 0) == 0) {
	            break;
	          }
	          var $gn_02 = $gn_0;
	        }
	        var $20 = HEAP32[$8 >> 2];
	      }
	      var $20;
	      _glist_free($20);
	      var $22 = HEAP32[$ps$s2 + 3];
	      _dict_free($22);
	      var $24 = HEAP32[$ps$s2 + 4];
	      _dict2pid_free($24);
	      var $26 = HEAP32[$ps$s2 + 2];
	      _acmod_free($26);
	      var $28 = HEAP32[$ps$s2 + 5];
	      _logmath_free($28);
	      var $30 = HEAP32[$ps$s2];
	      _cmd_ln_free_r($30);
	      var $32 = HEAP32[$ps$s2 + 11];
	      _ckd_free($32);
	      var $33 = $ps;
	      _ckd_free($33);
	    }
	  } while (0);
	  return;
	  return;
	}

	_ps_free["X"] = 1;

	function _ps_decode_raw($ps, $rawfh) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 512;
	  var $data1 = __stackBase__;
	  _ps_start_utt($ps);
	  var $1 = _ftell($rawfh);
	  var $2 = ($1 | 0) > -1;
	  $_$118 : do {
	    if ($2) {
	      var $8 = _fseek($rawfh, 0, 2);
	      var $9 = _ftell($rawfh);
	      var $10 = _fseek($rawfh, $1, 0);
	      var $11 = $9 - $1 | 0;
	      var $12 = ___ckd_calloc__($11, 2, STRING_TABLE.__str15786 | 0, 599);
	      var $13 = $12;
	      var $14 = _fread($12, 2, $11, $rawfh);
	      _ps_process_raw($ps, $13, $14, 1);
	      _ckd_free($12);
	    } else {
	      var $3 = _feof($rawfh);
	      if (($3 | 0) != 0) {
	        break;
	      }
	      var $5 = $data1 | 0;
	      var $6 = $data1;
	      while (1) {
	        var $16 = _fread($6, 2, 256, $rawfh);
	        _ps_process_raw($ps, $5, $16, 0);
	        var $17 = _feof($rawfh);
	        if (($17 | 0) != 0) {
	          break $_$118;
	        }
	      }
	    }
	  } while (0);
	  _ps_end_utt($ps);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ps_start_utt($ps) {
	  var $24$s2;
	  var $7$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($ps + 28 | 0) >> 2;
	  var $3 = (HEAP32[$1$s2] | 0) == 0;
	  do {
	    if ($3) {
	      __E__pr_header(STRING_TABLE.__str15786 | 0, 626, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str23794 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    } else {
	      var $6 = $ps + 48 | 0;
	      _ptmr_reset($6);
	      _ptmr_start($6);
	      var $7$s2 = ($ps + 44 | 0) >> 2;
	      var $8 = HEAP32[$7$s2];
	      _ckd_free($8);
	      var $9 = ___ckd_salloc__(STRING_TABLE.__str132582 | 0, STRING_TABLE.__str15786 | 0, 636);
	      HEAP32[$7$s2] = $9;
	      var $12 = HEAP32[HEAP32[$1$s2] + 28 >> 2];
	      _ps_lattice_free($12);
	      var $14 = HEAP32[$1$s2] + 28 | 0;
	      HEAP32[$14 >> 2] = 0;
	      var $16 = HEAP32[$1$s2] + 32 | 0;
	      HEAP32[$16 >> 2] = 0;
	      var $18 = HEAP32[$1$s2] + 36 | 0;
	      HEAP32[$18 >> 2] = 0;
	      var $21 = HEAP32[HEAP32[$1$s2] + 24 >> 2];
	      _ckd_free($21);
	      var $23 = HEAP32[$1$s2] + 24 | 0;
	      HEAP32[$23 >> 2] = 0;
	      var $24$s2 = ($ps + 8 | 0) >> 2;
	      var $25 = HEAP32[$24$s2];
	      _acmod_start_utt($25);
	      var $27 = HEAP32[$ps + 104 >> 2];
	      if (($27 | 0) != 0) {
	        var $30 = HEAP32[$7$s2];
	        var $31 = _string_join($27, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = STRING_TABLE.__str241736 | 0, HEAP32[tempInt + 4 >> 2] = $30, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str26797 | 0, HEAP32[tempInt + 12 >> 2] = 0, tempInt));
	        __E__pr_info_header(STRING_TABLE.__str15786 | 0, 661);
	        __E__pr_info(STRING_TABLE.__str28799 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $31, tempInt));
	        var $32 = _fopen($31, STRING_TABLE.__str52477 | 0);
	        if (($32 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str15786 | 0, 663, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str31802 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $31, tempInt));
	          _ckd_free($31);
	          break;
	        }
	        _ckd_free($31);
	        var $36 = HEAP32[$24$s2];
	        _acmod_set_mfcfh($36, $32);
	      }
	      var $39 = HEAP32[$ps + 108 >> 2];
	      if (($39 | 0) != 0) {
	        var $42 = HEAP32[$7$s2];
	        var $43 = _string_join($39, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = STRING_TABLE.__str241736 | 0, HEAP32[tempInt + 4 >> 2] = $42, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str32803 | 0, HEAP32[tempInt + 12 >> 2] = 0, tempInt));
	        __E__pr_info_header(STRING_TABLE.__str15786 | 0, 674);
	        __E__pr_info(STRING_TABLE.__str33804 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $43, tempInt));
	        var $44 = _fopen($43, STRING_TABLE.__str52477 | 0);
	        if (($44 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str15786 | 0, 676, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str34805 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $43, tempInt));
	          _ckd_free($43);
	          break;
	        }
	        _ckd_free($43);
	        var $48 = HEAP32[$24$s2];
	        _acmod_set_rawfh($48, $44);
	      }
	      var $51 = HEAP32[$ps + 112 >> 2];
	      if (($51 | 0) != 0) {
	        var $54 = HEAP32[$7$s2];
	        var $55 = _string_join($51, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = STRING_TABLE.__str241736 | 0, HEAP32[tempInt + 4 >> 2] = $54, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str35806 | 0, HEAP32[tempInt + 12 >> 2] = 0, tempInt));
	        __E__pr_info_header(STRING_TABLE.__str15786 | 0, 687);
	        __E__pr_info(STRING_TABLE.__str36807 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $55, tempInt));
	        var $56 = _fopen($55, STRING_TABLE.__str52477 | 0);
	        if (($56 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str15786 | 0, 689, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str37808 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $55, tempInt));
	          _ckd_free($55);
	          break;
	        }
	        _ckd_free($55);
	        var $60 = HEAP32[$24$s2];
	        _acmod_set_senfh($60, $56);
	      }
	      var $63 = HEAP32[$ps + 32 >> 2];
	      if (($63 | 0) != 0) {
	        var $69 = HEAP32[HEAP32[$63 >> 2] + 4 >> 2];
	        var $70 = FUNCTION_TABLE[$69]($63);
	      }
	      var $72 = HEAP32[$1$s2];
	      var $76 = HEAP32[HEAP32[$72 >> 2] + 4 >> 2];
	      var $77 = FUNCTION_TABLE[$76]($72);
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ps_start_utt["X"] = 1;

	function _ps_process_raw($ps, $data, $n_samples, $full_utt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $1 = __stackBase__;
	  var $2 = __stackBase__ + 4;
	  HEAP32[$1 >> 2] = $data;
	  HEAP32[$2 >> 2] = $n_samples;
	  var $3 = $ps + 8 | 0;
	  var $5 = $n_samples;
	  while (1) {
	    var $5;
	    if (($5 | 0) == 0) {
	      break;
	    }
	    var $8 = HEAP32[$3 >> 2];
	    var $9 = _acmod_process_raw($8, $1, $2, $full_utt);
	    if (($9 | 0) < 0) {
	      break;
	    }
	    var $12 = _ps_search_forward($ps);
	    if (($12 | 0) < 0) {
	      break;
	    }
	    var $5 = HEAP32[$2 >> 2];
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ps_seg_word($seg_0_2_val) {
	  return $seg_0_2_val;
	  return null;
	}

	function _ps_seg_frames($seg, $out_sf, $out_ef) {
	  if (($out_sf | 0) != 0) {
	    HEAP32[$out_sf >> 2] = HEAP16[$seg + 12 >> 1] << 16 >> 16;
	  }
	  if (($out_ef | 0) != 0) {
	    HEAP32[$out_ef >> 2] = HEAP16[$seg + 14 >> 1] << 16 >> 16;
	  }
	  return;
	  return;
	}

	function _ps_seg_prob($seg, $out_ascr, $out_lscr, $out_lback) {
	  if (($out_ascr | 0) != 0) {
	    var $4 = HEAP32[$seg + 16 >> 2];
	    HEAP32[$out_ascr >> 2] = $4;
	  }
	  if (($out_lscr | 0) != 0) {
	    var $9 = HEAP32[$seg + 20 >> 2];
	    HEAP32[$out_lscr >> 2] = $9;
	  }
	  if (($out_lback | 0) != 0) {
	    var $14 = HEAP32[$seg + 28 >> 2];
	    HEAP32[$out_lback >> 2] = $14;
	  }
	  return HEAP32[$seg + 24 >> 2];
	  return null;
	}

	function _ps_end_utt($ps) {
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 28;
	  var $uttid = __stackBase__;
	  var $score = __stackBase__ + 4;
	  var $sf = __stackBase__ + 8;
	  var $ef = __stackBase__ + 12;
	  var $lscr = __stackBase__ + 16;
	  var $ascr = __stackBase__ + 20;
	  var $lback = __stackBase__ + 24;
	  var $1$s2 = ($ps + 8 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  _acmod_end_utt($2);
	  var $3 = _ps_search_forward($ps);
	  var $4 = ($3 | 0) < 0;
	  $_$2 : do {
	    if ($4) {
	      var $6 = $ps + 48 | 0;
	      _ptmr_stop($6);
	    } else {
	      var $9 = HEAP32[$ps + 32 >> 2];
	      var $10 = ($9 | 0) == 0;
	      do {
	        if (!$10) {
	          var $15 = HEAP32[HEAP32[$9 >> 2] + 12 >> 2];
	          var $16 = FUNCTION_TABLE[$15]($9);
	          if (($16 | 0) >= 0) {
	            break;
	          }
	          var $19 = $ps + 48 | 0;
	          _ptmr_stop($19);
	          break $_$2;
	        }
	      } while (0);
	      var $22 = HEAP32[$ps + 36 >> 2];
	      var $23 = ($22 | 0) > 0;
	      var $24 = $ps + 28 | 0;
	      var $25 = HEAP32[$24 >> 2];
	      var $27 = HEAP32[$25 >> 2];
	      $_$9 : do {
	        if ($23) {
	          var $i_03 = (HEAP16[HEAP32[$1$s2] + 92 >> 1] << 16 >> 16) - $22 | 0;
	          var $35 = $25;
	          var $34 = $27;
	          while (1) {
	            var $34;
	            var $35;
	            var $i_03;
	            var $37 = HEAP32[$34 + 8 >> 2];
	            var $38 = FUNCTION_TABLE[$37]($35, $i_03);
	            var $39 = $i_03 + 1 | 0;
	            var $45 = HEAP32[$24 >> 2];
	            var $47 = HEAP32[$45 >> 2];
	            if (($39 | 0) >= (HEAP16[HEAP32[$1$s2] + 92 >> 1] << 16 >> 16 | 0)) {
	              var $_lcssa = $45;
	              var $_lcssa2 = $47;
	              break $_$9;
	            }
	            var $i_03 = $39;
	            var $35 = $45;
	            var $34 = $47;
	          }
	        } else {
	          var $_lcssa = $25;
	          var $_lcssa2 = $27;
	        }
	      } while (0);
	      var $_lcssa2;
	      var $_lcssa;
	      var $49 = HEAP32[$_lcssa2 + 12 >> 2];
	      var $50 = FUNCTION_TABLE[$49]($_lcssa);
	      var $51 = ($50 | 0) < 0;
	      var $52 = $ps + 48 | 0;
	      _ptmr_stop($52);
	      if ($51) {
	        break;
	      }
	      var $_idx_val = HEAP32[HEAP32[$ps >> 2] + 4 >> 2];
	      var $56 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1892758 | 0);
	      if (($56 | 0) == 0) {
	        break;
	      }
	      var $59 = _ps_get_hyp($ps, $score, $uttid);
	      __E__pr_info_header(STRING_TABLE.__str15786 | 0, 853);
	      var $60 = HEAP32[$uttid >> 2];
	      var $61 = HEAP32[$score >> 2];
	      __E__pr_info(STRING_TABLE.__str39810 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $60, HEAP32[tempInt + 4 >> 2] = $59, HEAP32[tempInt + 8 >> 2] = $61, tempInt));
	      __E__pr_info_header_wofn();
	      __E__pr_info(STRING_TABLE.__str40811 | 0, (tempInt = STACKTOP, STACKTOP += 28, HEAP32[tempInt >> 2] = STRING_TABLE.__str41812 | 0, HEAP32[tempInt + 4 >> 2] = STRING_TABLE.__str42813 | 0, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str43814 | 0, HEAP32[tempInt + 12 >> 2] = STRING_TABLE.__str44815 | 0, HEAP32[tempInt + 16 >> 2] = STRING_TABLE.__str45816 | 0, HEAP32[tempInt + 20 >> 2] = STRING_TABLE.__str46817 | 0, HEAP32[tempInt + 24 >> 2] = STRING_TABLE.__str47818 | 0, tempInt));
	      var $62 = _ps_seg_iter($ps, $score);
	      if (($62 | 0) == 0) {
	        break;
	      }
	      var $ps_idx = $ps + 20 | 0;
	      var $seg_01 = $62;
	      while (1) {
	        var $seg_01;
	        var $seg_01_idx_val = HEAP32[$seg_01 + 8 >> 2];
	        var $64 = _ps_seg_word($seg_01_idx_val);
	        _ps_seg_frames($seg_01, $sf, $ef);
	        var $65 = _ps_seg_prob($seg_01, $ascr, $lscr, $lback);
	        __E__pr_info_header_wofn();
	        var $66 = HEAP32[$sf >> 2];
	        var $67 = HEAP32[$ef >> 2];
	        var $ps_idx_val = HEAP32[$ps_idx >> 2];
	        var $68 = _ps_get_logmath($ps_idx_val);
	        var $_idx1_val = HEAP8[$68 + 9 | 0];
	        var $_idx2 = $68 + 20 | 0;
	        var $_idx2_val = (tempDoubleI32[0] = HEAP32[$_idx2 >> 2], tempDoubleI32[1] = HEAP32[$_idx2 + 4 >> 2], tempDoubleF64[0]);
	        var $69 = _logmath_exp($_idx1_val, $_idx2_val, $65);
	        var $70 = HEAP32[$ascr >> 2];
	        var $71 = HEAP32[$lscr >> 2];
	        var $72 = HEAP32[$lback >> 2];
	        __E__pr_info(STRING_TABLE.__str48819 | 0, (tempInt = STACKTOP, STACKTOP += 32, HEAP32[tempInt >> 2] = $64, HEAP32[tempInt + 4 >> 2] = $66, HEAP32[tempInt + 8 >> 2] = $67, tempDoubleF64[0] = $69, HEAP32[tempInt + 12 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 16 >> 2] = tempDoubleI32[1], HEAP32[tempInt + 20 >> 2] = $70, HEAP32[tempInt + 24 >> 2] = $71, HEAP32[tempInt + 28 >> 2] = $72, tempInt));
	        var $73 = _ps_seg_next($seg_01);
	        if (($73 | 0) == 0) {
	          break $_$2;
	        }
	        var $seg_01 = $73;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_ps_end_utt["X"] = 1;

	function _ps_search_forward($ps) {
	  var $2$s2;
	  var $1 = $ps + 28 | 0;
	  var $2$s2 = ($ps + 8 | 0) >> 2;
	  var $3 = $ps + 32 | 0;
	  var $4 = $ps + 36 | 0;
	  var $5 = $ps + 100 | 0;
	  var $nfr_0 = 0;
	  while (1) {
	    var $nfr_0;
	    var $7 = HEAP32[$2$s2];
	    if (HEAP16[$7 + 102 >> 1] << 16 >> 16 <= 0) {
	      var $_0 = $nfr_0;
	      break;
	    }
	    var $12 = HEAP32[$3 >> 2];
	    if (($12 | 0) == 0) {
	      var $25 = $7;
	    } else {
	      var $18 = HEAP32[HEAP32[$12 >> 2] + 8 >> 2];
	      var $21 = HEAP16[$7 + 92 >> 1] << 16 >> 16;
	      var $22 = FUNCTION_TABLE[$18]($12, $21);
	      if (($22 | 0) < 0) {
	        var $_0 = $22;
	        break;
	      }
	      var $25 = HEAP32[$2$s2];
	    }
	    var $25;
	    var $28 = HEAP16[$25 + 92 >> 1] << 16 >> 16;
	    var $29 = HEAP32[$4 >> 2];
	    if (($28 | 0) < ($29 | 0)) {
	      var $41 = $25;
	    } else {
	      var $32 = HEAP32[$1 >> 2];
	      var $36 = HEAP32[HEAP32[$32 >> 2] + 8 >> 2];
	      var $37 = $28 - $29 | 0;
	      var $38 = FUNCTION_TABLE[$36]($32, $37);
	      if (($38 | 0) < 0) {
	        var $_0 = $38;
	        break;
	      }
	      var $41 = HEAP32[$2$s2];
	    }
	    var $41;
	    _acmod_advance($41);
	    var $43 = HEAP32[$5 >> 2] + 1 | 0;
	    HEAP32[$5 >> 2] = $43;
	    var $nfr_0 = $nfr_0 + 1 | 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_ps_search_forward["X"] = 1;

	function _ps_get_hyp($ps, $out_best_score, $out_uttid) {
	  var $1 = $ps + 48 | 0;
	  _ptmr_start($1);
	  var $3 = HEAP32[$ps + 28 >> 2];
	  var $7 = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
	  var $8 = FUNCTION_TABLE[$7]($3, $out_best_score);
	  if (($out_uttid | 0) != 0) {
	    var $12 = HEAP32[$ps + 44 >> 2];
	    HEAP32[$out_uttid >> 2] = $12;
	  }
	  _ptmr_stop($1);
	  return $8;
	  return null;
	}

	function _ps_seg_iter($ps, $out_best_score) {
	  var $1 = $ps + 48 | 0;
	  _ptmr_start($1);
	  var $3 = HEAP32[$ps + 28 >> 2];
	  var $7 = HEAP32[HEAP32[$3 >> 2] + 36 >> 2];
	  var $8 = FUNCTION_TABLE[$7]($3, $out_best_score);
	  _ptmr_stop($1);
	  return $8;
	  return null;
	}

	function _ps_seg_next($seg) {
	  var $4 = HEAP32[HEAP32[$seg >> 2] >> 2];
	  var $5 = FUNCTION_TABLE[$4]($seg);
	  return $5;
	  return null;
	}

	function _ps_get_lattice($ps_0_7_val) {
	  var $4 = HEAP32[HEAP32[$ps_0_7_val >> 2] + 24 >> 2];
	  var $5 = FUNCTION_TABLE[$4]($ps_0_7_val);
	  return $5;
	  return null;
	}

	function _ps_nbest($ps) {
	  var $8$s2;
	  var $1 = $ps + 28 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $_0 = 0;
	    } else {
	      var $5 = _ps_get_lattice($2);
	      if (($5 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $8$s2 = HEAP32[$1 >> 2] >> 2;
	      var $12 = HEAP32[HEAP32[$8$s2] >> 2];
	      var $13 = _strcmp($12, STRING_TABLE.__str71990 | 0);
	      if (($13 | 0) == 0) {
	        var $lwf_0 = HEAPF32[$8$s2 + 65];
	        var $lmset_0 = HEAP32[$8$s2 + 14];
	      } else {
	        var $lwf_0 = 1;
	        var $lmset_0 = 0;
	      }
	      var $lmset_0;
	      var $lwf_0;
	      var $23 = _ps_astar_start($5, $lmset_0, $lwf_0);
	      var $_0 = $23;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_nbest_free($nbest) {
	  _ps_astar_finish($nbest);
	  return;
	  return;
	}

	function _ps_nbest_next($nbest) {
	  var $1 = _ps_astar_next($nbest);
	  if (($1 | 0) == 0) {
	    _ps_nbest_free($nbest);
	  }
	  return;
	  return;
	}

	function _ps_nbest_hyp($nbest, $out_score) {
	  var $1 = $nbest + 52 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  if (($2 | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    if (($out_score | 0) == 0) {
	      var $10 = $2;
	    } else {
	      var $8 = HEAP32[$2 + 12 >> 2];
	      HEAP32[$out_score >> 2] = $8;
	      var $10 = HEAP32[$1 >> 2];
	    }
	    var $10;
	    var $11 = _ps_astar_hyp($nbest, $10);
	    var $_0 = $11;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_get_utt_time($ps, $out_nspeech, $out_ncpu, $out_nwall) {
	  var $_idx_val = HEAP32[HEAP32[$ps >> 2] + 4 >> 2];
	  var $3 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	  tempDoubleF64[0] = (HEAP16[HEAP32[$ps + 8 >> 2] + 92 >> 1] << 16 >> 16) / ($3 | 0), HEAP32[$out_nspeech >> 2] = tempDoubleI32[0], HEAP32[$out_nspeech + 4 >> 2] = tempDoubleI32[1];
	  var $11 = $ps + 52 | 0;
	  var $12 = (tempDoubleI32[0] = HEAP32[$11 >> 2], tempDoubleI32[1] = HEAP32[$11 + 4 >> 2], tempDoubleF64[0]);
	  tempDoubleF64[0] = $12, HEAP32[$out_ncpu >> 2] = tempDoubleI32[0], HEAP32[$out_ncpu + 4 >> 2] = tempDoubleI32[1];
	  var $13 = $ps + 60 | 0;
	  var $14 = (tempDoubleI32[0] = HEAP32[$13 >> 2], tempDoubleI32[1] = HEAP32[$13 + 4 >> 2], tempDoubleF64[0]);
	  tempDoubleF64[0] = $14, HEAP32[$out_nwall >> 2] = tempDoubleI32[0], HEAP32[$out_nwall + 4 >> 2] = tempDoubleI32[1];
	  return;
	  return;
	}

	function _ps_search_init($search, $vt, $config, $acmod, $dict, $d2p) {
	  var $search$s2 = $search >> 2;
	  HEAP32[$search$s2] = $vt;
	  HEAP32[$search$s2 + 2] = $config;
	  HEAP32[$search$s2 + 3] = $acmod;
	  if (($d2p | 0) == 0) {
	    HEAP32[$search$s2 + 5] = 0;
	  } else {
	    var $6 = _dict2pid_retain($d2p);
	    HEAP32[$search$s2 + 5] = $6;
	  }
	  if (($dict | 0) == 0) {
	    HEAP32[$search$s2 + 4] = 0;
	    HEAP32[$search$s2 + 12] = -1;
	    HEAP32[$search$s2 + 13] = -1;
	    HEAP32[$search$s2 + 11] = -1;
	    HEAP32[$search$s2 + 10] = 0;
	  } else {
	    var $13 = _dict_retain($dict);
	    HEAP32[$search$s2 + 4] = $13;
	    var $16 = HEAP32[$dict + 32 >> 2];
	    HEAP32[$search$s2 + 11] = $16;
	    var $19 = HEAP32[$dict + 36 >> 2];
	    HEAP32[$search$s2 + 13] = $19;
	    var $22 = HEAP32[$dict + 40 >> 2];
	    HEAP32[$search$s2 + 12] = $22;
	    var $25 = HEAP32[$dict + 20 >> 2];
	    HEAP32[$search$s2 + 10] = $25;
	  }
	  return;
	  return;
	}

	function _ps_search_base_reinit($search, $dict, $d2p) {
	  var $1$s2;
	  var $search$s2 = $search >> 2;
	  var $1$s2 = ($search + 16 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  _dict_free($2);
	  var $3 = $search + 20 | 0;
	  var $4 = HEAP32[$3 >> 2];
	  _dict2pid_free($4);
	  if (($dict | 0) == 0) {
	    HEAP32[$1$s2] = 0;
	    HEAP32[$search$s2 + 12] = -1;
	    HEAP32[$search$s2 + 13] = -1;
	    HEAP32[$search$s2 + 11] = -1;
	    HEAP32[$search$s2 + 10] = 0;
	  } else {
	    var $7 = _dict_retain($dict);
	    HEAP32[$1$s2] = $7;
	    var $9 = HEAP32[$dict + 32 >> 2];
	    HEAP32[$search$s2 + 11] = $9;
	    var $12 = HEAP32[$dict + 36 >> 2];
	    HEAP32[$search$s2 + 13] = $12;
	    var $15 = HEAP32[$dict + 40 >> 2];
	    HEAP32[$search$s2 + 12] = $15;
	    var $18 = HEAP32[$dict + 20 >> 2];
	    HEAP32[$search$s2 + 10] = $18;
	  }
	  if (($d2p | 0) == 0) {
	    var $storemerge = 0;
	  } else {
	    var $28 = _dict2pid_retain($d2p);
	    var $storemerge = $28;
	  }
	  var $storemerge;
	  HEAP32[$3 >> 2] = $storemerge;
	  return;
	  return;
	}

	function _ps_search_deinit($search) {
	  var $2 = HEAP32[$search + 16 >> 2];
	  _dict_free($2);
	  var $4 = HEAP32[$search + 20 >> 2];
	  _dict2pid_free($4);
	  var $6 = HEAP32[$search + 24 >> 2];
	  _ckd_free($6);
	  var $8 = HEAP32[$search + 28 >> 2];
	  _ps_lattice_free($8);
	  return;
	  return;
	}

	function _hmmdir_exists($path) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _string_join($path, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = STRING_TABLE.__str304 | 0, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	  var $2 = _fopen($1, STRING_TABLE.__str92578 | 0);
	  var $3 = ($2 | 0) != 0;
	  if ($3) {
	    var $5 = _fclose($2);
	  }
	  _ckd_free($1);
	  var $7 = $3 & 1;
	  STACKTOP = __stackBase__;
	  return $7;
	  return null;
	}

	function _file_exists($path) {
	  var $1 = _fopen($path, STRING_TABLE.__str92578 | 0);
	  var $2 = ($1 | 0) != 0;
	  if ($2) {
	    var $4 = _fclose($1);
	  }
	  return $2 & 1;
	  return null;
	}

	function _ps_add_file($ps, $arg, $hmmdir, $file) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _string_join($hmmdir, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str241736 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	  var $2 = $ps | 0;
	  var $_idx_val = HEAP32[HEAP32[$2 >> 2] + 4 >> 2];
	  var $4 = _cmd_ln_str_r($_idx_val, $arg);
	  var $5 = ($4 | 0) == 0;
	  do {
	    if ($5) {
	      var $7 = _file_exists($1);
	      if (($7 | 0) == 0) {
	        break;
	      }
	      var $_idx1_val = HEAP32[HEAP32[$2 >> 2] + 4 >> 2];
	      _cmd_ln_set_str_r($_idx1_val, $arg, $1);
	    }
	  } while (0);
	  _ckd_free($1);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ps_lattice_link($dag, $from, $to, $score, $ef) {
	  var $1 = $from + 28 | 0;
	  var $fwdlink_0_in = $1;
	  while (1) {
	    var $fwdlink_0_in;
	    var $fwdlink_0 = HEAP32[$fwdlink_0_in >> 2];
	    if (($fwdlink_0 | 0) == 0) {
	      var $11 = HEAP32[$dag + 56 >> 2];
	      var $12 = ___listelem_malloc__($11, STRING_TABLE.__str919 | 0, 80);
	      var $13 = $12;
	      var $14 = $dag + 60 | 0;
	      var $15 = HEAP32[$14 >> 2];
	      var $16 = ___listelem_malloc__($15, STRING_TABLE.__str919 | 0, 81);
	      var $17 = $16;
	      var $18 = HEAP32[$14 >> 2];
	      var $19 = ___listelem_malloc__($18, STRING_TABLE.__str919 | 0, 82);
	      var $20 = $19;
	      var $21 = $12;
	      HEAP32[$21 >> 2] = $from;
	      var $23 = $12 + 4 | 0;
	      HEAP32[$23 >> 2] = $to;
	      var $25 = $12 + 12 | 0;
	      HEAP32[$25 >> 2] = $score;
	      var $27 = $12 + 20 | 0;
	      HEAP32[$27 >> 2] = $ef;
	      var $29 = $12 + 8 | 0;
	      HEAP32[$29 >> 2] = 0;
	      var $30 = $19;
	      HEAP32[$30 >> 2] = $13;
	      var $31 = $16;
	      HEAP32[$31 >> 2] = $13;
	      var $32 = HEAP32[$1 >> 2];
	      var $34 = $16 + 4 | 0;
	      HEAP32[$34 >> 2] = $32;
	      HEAP32[$1 >> 2] = $17;
	      var $35 = $to + 32 | 0;
	      var $36 = HEAP32[$35 >> 2];
	      var $38 = $19 + 4 | 0;
	      HEAP32[$38 >> 2] = $36;
	      HEAP32[$35 >> 2] = $20;
	      break;
	    }
	    var $4 = $fwdlink_0 | 0;
	    var $5 = HEAP32[$4 >> 2];
	    if ((HEAP32[$5 + 4 >> 2] | 0) != ($to | 0)) {
	      var $fwdlink_0_in = $fwdlink_0 + 4 | 0;
	      continue;
	    }
	    var $40 = $5 + 12 | 0;
	    if ((HEAP32[$40 >> 2] | 0) >= ($score | 0)) {
	      break;
	    }
	    HEAP32[$40 >> 2] = $score;
	    var $45 = HEAP32[$4 >> 2] + 20 | 0;
	    HEAP32[$45 >> 2] = $ef;
	    break;
	  }
	  return;
	  return;
	}

	_ps_lattice_link["X"] = 1;

	function _ps_lattice_bypass_fillers($dag, $silpen, $fillpen) {
	  var $node_08 = HEAP32[$dag + 24 >> 2];
	  var $2 = ($node_08 | 0) == 0;
	  $_$120 : do {
	    if (!$2) {
	      var $3 = $dag + 32 | 0;
	      var $4 = $dag + 12 | 0;
	      var $5 = $dag + 16 | 0;
	      var $node_09 = $node_08;
	      while (1) {
	        var $node_09;
	        var $7 = ($node_09 | 0) == (HEAP32[$3 >> 2] | 0);
	        do {
	          if (!$7) {
	            var $9 = HEAP32[$4 >> 2];
	            var $10 = $node_09 + 8 | 0;
	            var $11 = HEAP32[$10 >> 2];
	            var $12 = _dict_filler_word($9, $11);
	            if (($12 | 0) == 0) {
	              break;
	            }
	            var $revlink_03 = HEAP32[$node_09 + 32 >> 2];
	            var $16 = ($revlink_03 | 0) == 0;
	            $_$127 : do {
	              if (!$16) {
	                var $17 = $node_09 + 28 | 0;
	                var $revlink_04 = $revlink_03;
	                while (1) {
	                  var $revlink_04;
	                  var $19 = HEAP32[$revlink_04 >> 2];
	                  var $forlink_01 = HEAP32[$17 >> 2];
	                  var $20 = ($forlink_01 | 0) == 0;
	                  $_$131 : do {
	                    if (!$20) {
	                      var $26 = (HEAP32[$10 >> 2] | 0) == (HEAP32[$5 >> 2] | 0) ? $silpen : $fillpen;
	                      var $27 = $19 | 0;
	                      var $28 = $26 + HEAP32[$19 + 12 >> 2] | 0;
	                      var $forlink_02 = $forlink_01;
	                      while (1) {
	                        var $forlink_02;
	                        var $31 = HEAP32[$forlink_02 >> 2];
	                        var $32 = $31 + 4 | 0;
	                        var $33 = HEAP32[$32 >> 2];
	                        var $34 = ($33 | 0) == 0;
	                        do {
	                          if (!$34) {
	                            if ((HEAP32[$27 >> 2] | 0) == 0) {
	                              break;
	                            }
	                            var $39 = HEAP32[$4 >> 2];
	                            var $41 = HEAP32[$33 + 8 >> 2];
	                            var $42 = _dict_filler_word($39, $41);
	                            if (($42 | 0) != 0) {
	                              break;
	                            }
	                            var $45 = HEAP32[$27 >> 2];
	                            var $46 = HEAP32[$32 >> 2];
	                            var $49 = $28 + HEAP32[$31 + 12 >> 2] | 0;
	                            var $51 = HEAP32[$31 + 20 >> 2];
	                            _ps_lattice_link($dag, $45, $46, $49, $51);
	                          }
	                        } while (0);
	                        var $forlink_0 = HEAP32[$forlink_02 + 4 >> 2];
	                        if (($forlink_0 | 0) == 0) {
	                          break $_$131;
	                        }
	                        var $forlink_02 = $forlink_0;
	                      }
	                    }
	                  } while (0);
	                  var $revlink_0 = HEAP32[$revlink_04 + 4 >> 2];
	                  if (($revlink_0 | 0) == 0) {
	                    break $_$127;
	                  }
	                  var $revlink_04 = $revlink_0;
	                }
	              }
	            } while (0);
	            HEAP16[$node_09 + 22 >> 1] = 0;
	          }
	        } while (0);
	        var $node_0 = HEAP32[$node_09 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break $_$120;
	        }
	        var $node_09 = $node_0;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ps_lattice_bypass_fillers["X"] = 1;

	function _ps_lattice_delete_unreachable($dag) {
	  var $1$s2;
	  var $1$s2 = ($dag + 24 | 0) >> 2;
	  var $node_0_ph = HEAP32[$1$s2];
	  var $prev_node_0_ph = 0;
	  $_$145 : while (1) {
	    var $prev_node_0_ph;
	    var $node_0_ph;
	    var $3 = ($prev_node_0_ph | 0) == 0;
	    var $4 = $prev_node_0_ph + 40 | 0;
	    var $node_0 = $node_0_ph;
	    while (1) {
	      var $node_0;
	      if (($node_0 | 0) == 0) {
	        break $_$145;
	      }
	      var $10 = HEAP32[$node_0 + 40 >> 2];
	      if (HEAP16[$node_0 + 22 >> 1] << 16 >> 16 != 0) {
	        var $node_0_ph = $10;
	        var $prev_node_0_ph = $node_0;
	        continue $_$145;
	      }
	      if ($3) {
	        HEAP32[$1$s2] = $10;
	      } else {
	        HEAP32[$4 >> 2] = $10;
	      }
	      _delete_node($dag, $node_0);
	      var $node_0 = $10;
	    }
	  }
	  var $node_11 = HEAP32[$1$s2];
	  var $7 = ($node_11 | 0) == 0;
	  $_$156 : do {
	    if (!$7) {
	      var $i_02 = 0;
	      var $node_13 = $node_11;
	      while (1) {
	        var $node_13;
	        var $i_02;
	        var $18 = $i_02 + 1 | 0;
	        HEAP32[$node_13 >> 2] = $i_02;
	        if (HEAP16[$node_13 + 22 >> 1] << 16 >> 16 == 0) {
	          ___assert_func(STRING_TABLE.__str919 | 0, 225, STRING_TABLE.___func___ps_lattice_delete_unreachable | 0, STRING_TABLE.__str1920 | 0);
	        }
	        _remove_dangling_links($dag, $node_13);
	        var $node_1 = HEAP32[$node_13 + 40 >> 2];
	        if (($node_1 | 0) == 0) {
	          break $_$156;
	        }
	        var $i_02 = $18;
	        var $node_13 = $node_1;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _delete_node($dag, $node) {
	  var $2 = HEAP32[$node + 28 >> 2];
	  var $3 = ($2 | 0) == 0;
	  $_$164 : do {
	    if (!$3) {
	      var $4 = $dag + 60 | 0;
	      var $x_02 = $2;
	      while (1) {
	        var $x_02;
	        var $7 = HEAP32[$x_02 + 4 >> 2];
	        var $10 = HEAP32[$x_02 >> 2] | 0;
	        HEAP32[$10 >> 2] = 0;
	        var $11 = HEAP32[$4 >> 2];
	        ___listelem_free__($11, $x_02);
	        if (($7 | 0) == 0) {
	          break $_$164;
	        }
	        var $x_02 = $7;
	      }
	    }
	  } while (0);
	  var $15 = HEAP32[$node + 32 >> 2];
	  var $16 = ($15 | 0) == 0;
	  $_$169 : do {
	    if (!$16) {
	      var $17 = $dag + 60 | 0;
	      var $x_11 = $15;
	      while (1) {
	        var $x_11;
	        var $20 = HEAP32[$x_11 + 4 >> 2];
	        var $23 = HEAP32[$x_11 >> 2] + 4 | 0;
	        HEAP32[$23 >> 2] = 0;
	        var $24 = HEAP32[$17 >> 2];
	        ___listelem_free__($24, $x_11);
	        if (($20 | 0) == 0) {
	          break $_$169;
	        }
	        var $x_11 = $20;
	      }
	    }
	  } while (0);
	  var $28 = HEAP32[$dag + 52 >> 2];
	  var $29 = $node;
	  ___listelem_free__($28, $29);
	  return;
	  return;
	}

	function _remove_dangling_links($dag, $node) {
	  var $1 = $node + 28 | 0;
	  var $3 = $dag + 56 | 0;
	  var $4 = $dag + 60 | 0;
	  var $prev_x_0_ph = 0;
	  var $x_0_ph = HEAP32[$1 >> 2];
	  $_$2 : while (1) {
	    var $x_0_ph;
	    var $prev_x_0_ph;
	    var $5 = ($prev_x_0_ph | 0) == 0;
	    var $6 = $prev_x_0_ph + 4 | 0;
	    var $x_0 = $x_0_ph;
	    while (1) {
	      var $x_0;
	      if (($x_0 | 0) == 0) {
	        break $_$2;
	      }
	      var $11 = HEAP32[$x_0 + 4 >> 2];
	      var $12 = $x_0 | 0;
	      if ((HEAP32[HEAP32[$12 >> 2] + 4 >> 2] | 0) != 0) {
	        var $prev_x_0_ph = $x_0;
	        var $x_0_ph = $11;
	        continue $_$2;
	      }
	      if ($5) {
	        HEAP32[$1 >> 2] = $11;
	      } else {
	        HEAP32[$6 >> 2] = $11;
	      }
	      var $21 = HEAP32[$3 >> 2];
	      var $23 = HEAP32[$12 >> 2];
	      ___listelem_free__($21, $23);
	      var $24 = HEAP32[$4 >> 2];
	      ___listelem_free__($24, $x_0);
	      var $x_0 = $11;
	    }
	  }
	  var $27 = $node + 32 | 0;
	  var $prev_x_2_ph = 0;
	  var $x_1_ph = HEAP32[$27 >> 2];
	  $_$13 : while (1) {
	    var $x_1_ph;
	    var $prev_x_2_ph;
	    var $29 = ($prev_x_2_ph | 0) == 0;
	    var $30 = $prev_x_2_ph + 4 | 0;
	    var $x_1 = $x_1_ph;
	    while (1) {
	      var $x_1;
	      if (($x_1 | 0) == 0) {
	        break $_$13;
	      }
	      var $35 = HEAP32[$x_1 + 4 >> 2];
	      var $36 = $x_1 | 0;
	      if ((HEAP32[HEAP32[$36 >> 2] >> 2] | 0) != 0) {
	        var $prev_x_2_ph = $x_1;
	        var $x_1_ph = $35;
	        continue $_$13;
	      }
	      if ($29) {
	        HEAP32[$27 >> 2] = $35;
	      } else {
	        HEAP32[$30 >> 2] = $35;
	      }
	      var $45 = HEAP32[$3 >> 2];
	      var $47 = HEAP32[$36 >> 2];
	      ___listelem_free__($45, $47);
	      var $48 = HEAP32[$4 >> 2];
	      ___listelem_free__($48, $x_1);
	      var $x_1 = $35;
	    }
	  }
	  return;
	  return;
	}

	_remove_dangling_links["X"] = 1;

	function _ps_lattice_init_search($search, $n_frame) {
	  var $1 = ___ckd_calloc__(1, 72, STRING_TABLE.__str919 | 0, 666);
	  var $2 = $1;
	  var $4 = $1 + 8 | 0;
	  HEAP32[$4 >> 2] = $search;
	  var $6 = HEAP32[$search + 16 >> 2];
	  var $7 = _dict_retain($6);
	  var $9 = $1 + 12 | 0;
	  HEAP32[$9 >> 2] = $7;
	  var $13 = HEAP32[HEAP32[$search + 12 >> 2] + 4 >> 2];
	  var $14 = _logmath_retain($13);
	  HEAP32[$1 + 4 >> 2] = $14;
	  var $_idx_val = HEAP32[HEAP32[HEAP32[$4 >> 2] + 8 >> 2] + 4 >> 2];
	  var $20 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str332602 | 0);
	  HEAP32[$1 + 20 >> 2] = $20;
	  var $25 = HEAP32[HEAP32[$9 >> 2] + 40 >> 2];
	  HEAP32[$1 + 16 >> 2] = $25;
	  HEAP16[$1 + 36 >> 1] = $n_frame & 65535;
	  var $31 = _listelem_alloc_init(44);
	  HEAP32[$1 + 52 >> 2] = $31;
	  var $34 = _listelem_alloc_init(32);
	  HEAP32[$1 + 56 >> 2] = $34;
	  var $37 = _listelem_alloc_init(8);
	  HEAP32[$1 + 60 >> 2] = $37;
	  HEAP32[$1 >> 2] = 1;
	  return $2;
	  return null;
	}

	_ps_lattice_init_search["X"] = 1;

	function _ps_lattice_free($dag) {
	  var $dag$s2 = $dag >> 2;
	  var $1 = ($dag | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $dag | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$dag$s2 + 1];
	      _logmath_free($9);
	      var $11 = HEAP32[$dag$s2 + 13];
	      _listelem_alloc_free($11);
	      var $13 = HEAP32[$dag$s2 + 14];
	      _listelem_alloc_free($13);
	      var $15 = HEAP32[$dag$s2 + 15];
	      _listelem_alloc_free($15);
	      var $17 = HEAP32[$dag$s2 + 12];
	      _ckd_free($17);
	      var $18 = $dag;
	      _ckd_free($18);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _ps_lattice_hyp($dag, $link) {
	  var $50$s2;
	  var $3$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($dag + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3$s2 = ($link + 4 | 0) >> 2;
	  var $6 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	  var $7 = _dict_real_word($2, $6);
	  if (($7 | 0) == 0) {
	    var $l_07 = $link;
	    var $len_18 = 0;
	    __label__ = 6;
	  } else {
	    var $12 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	    if (($12 | 0) < 0) {
	      var $14 = _strlen(0);
	      var $l_07 = $link;
	      var $len_18 = $14 + 1 | 0;
	    } else {
	      var $20 = HEAP32[(HEAP32[HEAP32[$1$s2] + 8 >> 2] >> 2) + ($12 * 5 | 0)];
	      var $21 = _strlen($20);
	      var $l_07 = $link;
	      var $len_18 = $21 + 1 | 0;
	    }
	  }
	  while (1) {
	    var $len_18;
	    var $l_07;
	    var $23 = HEAP32[$1$s2];
	    var $24 = $l_07 | 0;
	    var $27 = HEAP32[HEAP32[$24 >> 2] + 8 >> 2];
	    var $28 = _dict_real_word($23, $27);
	    if (($28 | 0) == 0) {
	      var $len_2 = $len_18;
	    } else {
	      var $33 = HEAP32[HEAP32[$24 >> 2] + 8 >> 2];
	      if (($33 | 0) < 0) {
	        var $42 = 0;
	      } else {
	        var $42 = HEAP32[(HEAP32[HEAP32[$1$s2] + 8 >> 2] >> 2) + ($33 * 5 | 0)];
	      }
	      var $42;
	      var $43 = _strlen($42);
	      var $len_2 = $43 + ($len_18 + 1) | 0;
	    }
	    var $len_2;
	    var $48 = HEAP32[$l_07 + 8 >> 2];
	    if (($48 | 0) == 0) {
	      break;
	    }
	    var $l_07 = $48;
	    var $len_18 = $len_2;
	  }
	  var $50$s2 = ($dag + 48 | 0) >> 2;
	  var $51 = HEAP32[$50$s2];
	  _ckd_free($51);
	  var $53 = ___ckd_calloc__(1, $len_2 + 1 | 0, STRING_TABLE.__str919 | 0, 870);
	  HEAP32[$50$s2] = $53;
	  var $_sum = $len_2 - 1 | 0;
	  var $54 = $53 + $_sum | 0;
	  var $55 = HEAP32[$1$s2];
	  var $58 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	  var $59 = _dict_real_word($55, $58);
	  var $60 = ($59 | 0) == 0;
	  do {
	    if ($60) {
	      var $l_14 = $link;
	      var $c_15 = $54;
	      __label__ = 17;
	    } else {
	      var $64 = HEAP32[HEAP32[$3$s2] + 8 >> 2];
	      if (($64 | 0) < 0) {
	        var $66 = _strlen(0);
	        var $76 = 0;
	        var $75 = $66;
	        var $_sum2_pn = $_sum - $66 | 0;
	      } else {
	        var $72 = HEAP32[(HEAP32[HEAP32[$1$s2] + 8 >> 2] >> 2) + ($64 * 5 | 0)];
	        var $73 = _strlen($72);
	        var $76 = $72;
	        var $75 = $73;
	        var $_sum2_pn = $_sum - $73 | 0;
	      }
	      var $_sum2_pn;
	      var $75;
	      var $76;
	      var $77 = $53 + $_sum2_pn | 0;
	      _memcpy($77, $76, $75, 1);
	      if ($77 >>> 0 <= HEAPU32[$50$s2] >>> 0) {
	        var $l_14 = $link;
	        var $c_15 = $77;
	        break;
	      }
	      var $81 = $53 + ($_sum2_pn - 1) | 0;
	      HEAP8[$81] = 32;
	      var $l_14 = $link;
	      var $c_15 = $81;
	    }
	  } while (0);
	  while (1) {
	    var $c_15;
	    var $l_14;
	    var $82 = HEAP32[$1$s2];
	    var $83 = $l_14 | 0;
	    var $86 = HEAP32[HEAP32[$83 >> 2] + 8 >> 2];
	    var $87 = _dict_real_word($82, $86);
	    var $88 = ($87 | 0) == 0;
	    do {
	      if ($88) {
	        var $c_2 = $c_15;
	      } else {
	        var $92 = HEAP32[HEAP32[$83 >> 2] + 8 >> 2];
	        if (($92 | 0) < 0) {
	          var $94 = _strlen(0);
	          var $103 = 0;
	          var $_pn17 = $94;
	        } else {
	          var $100 = HEAP32[(HEAP32[HEAP32[$1$s2] + 8 >> 2] >> 2) + ($92 * 5 | 0)];
	          var $101 = _strlen($100);
	          var $103 = $100;
	          var $_pn17 = $101;
	        }
	        var $_pn17;
	        var $103;
	        var $104 = $c_15 + -$_pn17 | 0;
	        _memcpy($104, $103, $_pn17, 1);
	        if ($104 >>> 0 <= HEAPU32[$50$s2] >>> 0) {
	          var $c_2 = $104;
	          break;
	        }
	        var $108 = $c_15 + ($_pn17 ^ -1) | 0;
	        HEAP8[$108] = 32;
	        var $c_2 = $108;
	      }
	    } while (0);
	    var $c_2;
	    var $111 = HEAPU32[$l_14 + 8 >> 2];
	    if (($111 | 0) == 0) {
	      break;
	    }
	    var $l_14 = $111;
	    var $c_15 = $c_2;
	  }
	  return HEAP32[$50$s2];
	  return null;
	}

	_ps_lattice_hyp["X"] = 1;

	function _ps_lattice_seg_iter($dag, $link, $lwf) {
	  var $10$s1;
	  var $1$s2;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 48, STRING_TABLE.__str919 | 0, 1025), $1$s2 = $1 >> 2;
	  HEAP32[$1$s2] = _ps_lattice_segfuncs;
	  var $4 = HEAP32[$dag + 8 >> 2];
	  HEAP32[$1$s2 + 1] = $4;
	  HEAPF32[$1$s2 + 8] = $lwf;
	  var $10$s1 = ($1 + 44 | 0) >> 1;
	  HEAP16[$10$s1] = 0;
	  var $12 = HEAP32[$dag + 44 >> 2];
	  HEAP32[$1$s2 + 10] = $12;
	  var $15 = ($link | 0) == 0;
	  do {
	    if (!$15) {
	      var $16 = 0;
	      var $l_04 = $link;
	      while (1) {
	        var $l_04;
	        var $16;
	        var $17 = $16 + 1 & 65535;
	        HEAP16[$10$s1] = $17;
	        var $19 = HEAP32[$l_04 + 8 >> 2];
	        if (($19 | 0) == 0) {
	          break;
	        }
	        var $16 = $17;
	        var $l_04 = $19;
	      }
	      if ($17 << 16 >> 16 == 0) {
	        __label__ = 5;
	        break;
	      }
	      var $23 = ___ckd_calloc__($17 << 16 >> 16, 4, STRING_TABLE.__str919 | 0, 1040);
	      var $24 = $23;
	      var $26 = $1 + 36 | 0;
	      HEAP32[$26 >> 2] = $24;
	      var $l_12 = $link;
	      var $cur_03_in = HEAP16[$10$s1] << 16 >> 16;
	      var $29 = $24;
	      while (1) {
	        var $29;
	        var $cur_03_in;
	        var $l_12;
	        var $cur_03 = $cur_03_in - 1 | 0;
	        HEAP32[$29 + ($cur_03 << 2) >> 2] = $l_12;
	        var $32 = HEAP32[$l_12 + 8 >> 2];
	        var $_pre = HEAP32[$26 >> 2];
	        if (($32 | 0) == 0) {
	          break;
	        }
	        var $l_12 = $32;
	        var $cur_03_in = $cur_03;
	        var $29 = $_pre;
	      }
	      var $34 = $1;
	      var $35 = HEAP32[$_pre >> 2];
	      _ps_lattice_link2itor($34, $35, 0);
	      var $_0 = $34;
	      __label__ = 9;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  if (__label__ == 5) {
	    _ckd_free($1);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_ps_lattice_seg_iter["X"] = 1;

	function _ps_lattice_link2itor($seg, $link, $to) {
	  var $link$s2 = $link >> 2;
	  var $1 = ($to | 0) == 0;
	  $_$76 : do {
	    if ($1) {
	      var $16 = HEAP32[HEAP32[HEAP32[$seg + 4 >> 2] + 12 >> 2] + 4 >> 2];
	      var $18 = HEAP32[$link$s2];
	      HEAP16[$seg + 14 >> 1] = HEAP32[$link$s2 + 5] & 65535;
	      var $28 = $seg + 40 | 0;
	      var $31 = HEAP32[$link$s2 + 7] + HEAP32[$link$s2 + 6] - HEAP32[$28 >> 2] | 0;
	      var $32 = $seg + 24 | 0;
	      HEAP32[$32 >> 2] = $31;
	      if (($18 | 0) == 0) {
	        var $node_0 = 0;
	        break;
	      }
	      var $n_04 = $18;
	      var $34 = $31;
	      while (1) {
	        var $34;
	        var $n_04;
	        var $x_02 = HEAP32[$n_04 + 28 >> 2];
	        var $36 = ($x_02 | 0) == 0;
	        $_$81 : do {
	          if ($36) {
	            var $54 = $34;
	          } else {
	            var $x_03 = $x_02;
	            var $37 = $34;
	            while (1) {
	              var $37;
	              var $x_03;
	              var $39 = HEAP32[$x_03 >> 2];
	              if (($39 | 0) == ($link | 0)) {
	                var $51 = $37;
	              } else {
	                var $48 = HEAP32[$39 + 28 >> 2] + HEAP32[$39 + 24 >> 2] - HEAP32[$28 >> 2] | 0;
	                var $49 = _logmath_add($16, $37, $48);
	                HEAP32[$32 >> 2] = $49;
	                var $51 = $49;
	              }
	              var $51;
	              var $x_0 = HEAP32[$x_03 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                var $54 = $51;
	                break $_$81;
	              }
	              var $x_03 = $x_0;
	              var $37 = $51;
	            }
	          }
	        } while (0);
	        var $54;
	        var $56 = HEAP32[$n_04 + 36 >> 2];
	        if (($56 | 0) == 0) {
	          var $node_0 = $18;
	          break $_$76;
	        }
	        var $n_04 = $56;
	        var $34 = $54;
	      }
	    } else {
	      var $4 = HEAP32[$link$s2 + 1];
	      HEAP16[$seg + 14 >> 1] = HEAP32[$4 + 16 >> 2] & 65535;
	      HEAP32[$seg + 24 >> 2] = 0;
	      var $node_0 = $4;
	    }
	  } while (0);
	  var $node_0;
	  var $59 = HEAP32[$node_0 + 4 >> 2];
	  if (($59 | 0) < 0) {
	    var $71 = 0;
	  } else {
	    var $71 = HEAP32[(HEAP32[HEAP32[HEAP32[$seg + 4 >> 2] + 16 >> 2] + 8 >> 2] >> 2) + ($59 * 5 | 0)];
	  }
	  var $71;
	  HEAP32[$seg + 8 >> 2] = $71;
	  var $74 = HEAP16[$node_0 + 20 >> 1];
	  HEAP16[$seg + 12 >> 1] = $74;
	  var $78 = HEAP32[$link$s2 + 3] << 10;
	  HEAP32[$seg + 16 >> 2] = $78;
	  _ps_lattice_compute_lscr($seg, $link, $to);
	  return;
	  return;
	}

	_ps_lattice_link2itor["X"] = 1;

	function _latlink_list_new($dag_0_16_val, $link) {
	  var $1 = ___listelem_malloc__($dag_0_16_val, STRING_TABLE.__str919 | 0, 1056);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $link;
	  HEAP32[$1 + 4 >> 2] = 0;
	  return $2;
	  return null;
	}

	function _ps_lattice_pushq($dag, $link) {
	  var $5$s2;
	  var $1 = $dag + 64 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) == 0;
	  var $dag_idx_val = HEAP32[$dag + 60 >> 2];
	  var $4 = _latlink_list_new($dag_idx_val, $link);
	  var $5$s2 = ($dag + 68 | 0) >> 2;
	  if ($3) {
	    HEAP32[$5$s2] = $4;
	    HEAP32[$1 >> 2] = $4;
	  } else {
	    var $9 = HEAP32[$5$s2] + 4 | 0;
	    HEAP32[$9 >> 2] = $4;
	    var $12 = HEAP32[HEAP32[$5$s2] + 4 >> 2];
	    HEAP32[$5$s2] = $12;
	  }
	  return;
	  return;
	}

	function _ps_lattice_popq($dag) {
	  var $1 = $dag + 64 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $_0 = 0;
	    } else {
	      var $6 = HEAP32[$2 >> 2];
	      var $8 = HEAP32[$2 + 4 >> 2];
	      var $10 = HEAP32[$dag + 60 >> 2];
	      var $11 = $2;
	      ___listelem_free__($10, $11);
	      HEAP32[$1 >> 2] = $8;
	      if (($8 | 0) != 0) {
	        var $_0 = $6;
	        break;
	      }
	      HEAP32[$dag + 68 >> 2] = 0;
	      var $_0 = $6;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_lattice_delq($dag) {
	  while (1) {
	    var $2 = _ps_lattice_popq($dag);
	    if (($2 | 0) == 0) {
	      break;
	    }
	  }
	  return;
	  return;
	}

	function _ps_lattice_traverse_edges($dag) {
	  _ps_lattice_delq($dag);
	  var $1 = $dag + 24 | 0;
	  var $node_012 = HEAP32[$1 >> 2];
	  var $2 = ($node_012 | 0) == 0;
	  $_$108 : do {
	    if (!$2) {
	      var $node_013 = $node_012;
	      while (1) {
	        var $node_013;
	        HEAP32[$node_013 + 24 >> 2] = 0;
	        var $node_0 = HEAP32[$node_013 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break;
	        }
	        var $node_013 = $node_0;
	      }
	      var $node_18_pre = HEAP32[$1 >> 2];
	      if (($node_18_pre | 0) == 0) {
	        break;
	      }
	      var $node_19 = $node_18_pre;
	      while (1) {
	        var $node_19;
	        var $x_03 = HEAP32[$node_19 + 28 >> 2];
	        var $8 = ($x_03 | 0) == 0;
	        $_$114 : do {
	          if (!$8) {
	            var $x_04 = $x_03;
	            while (1) {
	              var $x_04;
	              var $13 = HEAP32[HEAP32[$x_04 >> 2] + 4 >> 2] + 24 | 0;
	              var $17 = $13 | 0;
	              var $_c = HEAP32[$13 >> 2] + 1 | 0;
	              HEAP32[$17 >> 2] = $_c;
	              var $x_0 = HEAP32[$x_04 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                break $_$114;
	              }
	              var $x_04 = $x_0;
	            }
	          }
	        } while (0);
	        var $node_1 = HEAP32[$node_19 + 40 >> 2];
	        if (($node_1 | 0) == 0) {
	          break $_$108;
	        }
	        var $node_19 = $node_1;
	      }
	    }
	  } while (0);
	  var $x_11 = HEAP32[HEAP32[$dag + 28 >> 2] + 28 >> 2];
	  var $25 = ($x_11 | 0) == 0;
	  $_$119 : do {
	    if (!$25) {
	      var $x_12 = $x_11;
	      while (1) {
	        var $x_12;
	        var $27 = HEAP32[$x_12 >> 2];
	        _ps_lattice_pushq($dag, $27);
	        var $x_1 = HEAP32[$x_12 + 4 >> 2];
	        if (($x_1 | 0) == 0) {
	          break $_$119;
	        }
	        var $x_12 = $x_1;
	      }
	    }
	  } while (0);
	  var $30 = _ps_lattice_traverse_next($dag);
	  return $30;
	  return null;
	}

	_ps_lattice_traverse_edges["X"] = 1;

	function _ps_lattice_traverse_next($dag) {
	  var $1 = _ps_lattice_popq($dag);
	  var $2 = ($1 | 0) == 0;
	  $_$124 : do {
	    if ($2) {
	      var $_0 = 0;
	    } else {
	      var $4 = $1 + 4 | 0;
	      var $6 = HEAP32[$4 >> 2] + 24 | 0;
	      var $10 = $6 | 0;
	      var $_c = HEAP32[$6 >> 2] - 1 | 0;
	      HEAP32[$10 >> 2] = $_c;
	      var $11 = HEAP32[$4 >> 2];
	      if ((HEAP32[$11 + 24 >> 2] | 0) != 0) {
	        var $_0 = $1;
	        break;
	      }
	      if (($11 | 0) == (HEAP32[$dag + 32 >> 2] | 0)) {
	        _ps_lattice_delq($dag);
	        var $_0 = $1;
	      } else {
	        var $x_02 = HEAP32[$11 + 28 >> 2];
	        if (($x_02 | 0) == 0) {
	          var $_0 = $1;
	          break;
	        }
	        var $x_03 = $x_02;
	        while (1) {
	          var $x_03;
	          var $25 = HEAP32[$x_03 >> 2];
	          _ps_lattice_pushq($dag, $25);
	          var $x_0 = HEAP32[$x_03 + 4 >> 2];
	          if (($x_0 | 0) == 0) {
	            var $_0 = $1;
	            break $_$124;
	          }
	          var $x_03 = $x_0;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_lattice_reverse_edges($dag) {
	  _ps_lattice_delq($dag);
	  var $node_08 = HEAP32[$dag + 24 >> 2];
	  var $2 = ($node_08 | 0) == 0;
	  $_$134 : do {
	    if (!$2) {
	      var $node_09 = $node_08;
	      while (1) {
	        var $node_09;
	        var $3 = $node_09 + 24 | 0;
	        HEAP32[$3 >> 2] = 0;
	        var $x_03 = HEAP32[$node_09 + 28 >> 2];
	        var $5 = ($x_03 | 0) == 0;
	        $_$137 : do {
	          if (!$5) {
	            var $x_04 = $x_03;
	            var $6 = 0;
	            while (1) {
	              var $6;
	              var $x_04;
	              var $7 = $6 + 1 | 0;
	              HEAP32[$3 >> 2] = $7;
	              var $x_0 = HEAP32[$x_04 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                break $_$137;
	              }
	              var $x_04 = $x_0;
	              var $6 = $7;
	            }
	          }
	        } while (0);
	        var $node_0 = HEAP32[$node_09 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break $_$134;
	        }
	        var $node_09 = $node_0;
	      }
	    }
	  } while (0);
	  var $x_11 = HEAP32[HEAP32[$dag + 32 >> 2] + 32 >> 2];
	  var $15 = ($x_11 | 0) == 0;
	  $_$142 : do {
	    if (!$15) {
	      var $x_12 = $x_11;
	      while (1) {
	        var $x_12;
	        var $17 = HEAP32[$x_12 >> 2];
	        _ps_lattice_pushq($dag, $17);
	        var $x_1 = HEAP32[$x_12 + 4 >> 2];
	        if (($x_1 | 0) == 0) {
	          break $_$142;
	        }
	        var $x_12 = $x_1;
	      }
	    }
	  } while (0);
	  var $20 = _ps_lattice_reverse_next($dag);
	  return $20;
	  return null;
	}

	function _ps_lattice_reverse_next($dag) {
	  var $1 = _ps_lattice_popq($dag);
	  var $2 = ($1 | 0) == 0;
	  $_$147 : do {
	    if ($2) {
	      var $_0 = 0;
	    } else {
	      var $4 = $1 | 0;
	      var $6 = HEAP32[$4 >> 2] + 24 | 0;
	      var $10 = $6 | 0;
	      var $_c = HEAP32[$6 >> 2] - 1 | 0;
	      HEAP32[$10 >> 2] = $_c;
	      var $11 = HEAP32[$4 >> 2];
	      if ((HEAP32[$11 + 24 >> 2] | 0) != 0) {
	        var $_0 = $1;
	        break;
	      }
	      if (($11 | 0) == (HEAP32[$dag + 28 >> 2] | 0)) {
	        _ps_lattice_delq($dag);
	        var $_0 = $1;
	      } else {
	        var $x_02 = HEAP32[$11 + 32 >> 2];
	        if (($x_02 | 0) == 0) {
	          var $_0 = $1;
	          break;
	        }
	        var $x_03 = $x_02;
	        while (1) {
	          var $x_03;
	          var $25 = HEAP32[$x_03 >> 2];
	          _ps_lattice_pushq($dag, $25);
	          var $x_0 = HEAP32[$x_03 + 4 >> 2];
	          if (($x_0 | 0) == 0) {
	            var $_0 = $1;
	            break $_$147;
	          }
	          var $x_03 = $x_0;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_lattice_bestpath($dag, $lmset, $lwf, $ascale) {
	  var $189$s2;
	  var $181$s2;
	  var $125$s2;
	  var $116$s2;
	  var $88$s2;
	  var $76$s2;
	  var $71$s2;
	  var $_pre32$s2;
	  var $29$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var __label__;
	  var $n_used = __stackBase__;
	  var $n_used1 = __stackBase__ + 4;
	  var $n_used3 = __stackBase__ + 8;
	  var $1 = $dag + 8 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $4 = HEAP32[$dag + 4 >> 2];
	  var $node_023 = HEAP32[$dag + 24 >> 2];
	  var $6 = ($node_023 | 0) == 0;
	  $_$2 : do {
	    if (!$6) {
	      var $_idx1 = $4 + 60 | 0;
	      var $node_024 = $node_023;
	      while (1) {
	        var $node_024;
	        var $x_018 = HEAP32[$node_024 + 28 >> 2];
	        var $8 = ($x_018 | 0) == 0;
	        $_$6 : do {
	          if (!$8) {
	            var $x_019 = $x_018;
	            while (1) {
	              var $x_019;
	              var $9 = $x_019 | 0;
	              var $11 = HEAP32[$9 >> 2] + 16 | 0;
	              HEAP32[$11 >> 2] = -2147483648;
	              var $_idx1_val = HEAP32[$_idx1 >> 2];
	              var $12 = _logmath_get_zero($_idx1_val);
	              var $14 = HEAP32[$9 >> 2] + 24 | 0;
	              HEAP32[$14 >> 2] = $12;
	              var $x_0 = HEAP32[$x_019 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                break $_$6;
	              }
	              var $x_019 = $x_0;
	            }
	          }
	        } while (0);
	        var $node_0 = HEAP32[$node_024 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break $_$2;
	        }
	        var $node_024 = $node_0;
	      }
	    }
	  } while (0);
	  var $19 = $dag + 28 | 0;
	  var $x_113 = HEAP32[HEAP32[$19 >> 2] + 28 >> 2];
	  var $22 = ($x_113 | 0) == 0;
	  $_$11 : do {
	    if (!$22) {
	      var $23 = $2 + 16 | 0;
	      var $24 = ($lmset | 0) == 0;
	      var $25 = $2 + 44 | 0;
	      var $26 = $dag + 32 | 0;
	      var $x_114 = $x_113;
	      while (1) {
	        var $x_114;
	        var $28 = HEAP32[$23 >> 2];
	        var $29$s2 = ($x_114 | 0) >> 2;
	        var $34 = HEAP32[HEAP32[HEAP32[$29$s2] + 4 >> 2] + 8 >> 2];
	        var $35 = _dict_filler_word($28, $34);
	        var $36 = ($35 | 0) == 0;
	        var $_pre32 = HEAP32[$29$s2], $_pre32$s2 = $_pre32 >> 2;
	        do {
	          if ($36) {
	            __label__ = 11;
	          } else {
	            if ((HEAP32[$_pre32$s2 + 1] | 0) == (HEAP32[$26 >> 2] | 0)) {
	              __label__ = 11;
	              break;
	            }
	            __label__ = 15;
	            break;
	          }
	        } while (0);
	        if (__label__ == 11) {
	          var $43 = HEAP32[$_pre32$s2 + 3];
	          if ($24) {
	            var $60 = $_pre32 + 16 | 0;
	            HEAP32[$60 >> 2] = $43;
	          } else {
	            var $45 = $43 | 0;
	            var $49 = HEAP32[HEAP32[$_pre32$s2 + 1] + 8 >> 2];
	            var $50 = HEAP32[$25 >> 2];
	            var $51 = _ngram_bg_score($lmset, $49, $50, $n_used);
	            var $56 = $45 + ($51 >> 10) * $lwf & -1;
	            var $58 = HEAP32[$29$s2] + 16 | 0;
	            HEAP32[$58 >> 2] = $56;
	          }
	          var $63 = HEAP32[$29$s2] + 8 | 0;
	          HEAP32[$63 >> 2] = 0;
	          var $65 = HEAP32[$29$s2] + 24 | 0;
	          HEAP32[$65 >> 2] = 0;
	        }
	        var $x_1 = HEAP32[$x_114 + 4 >> 2];
	        if (($x_1 | 0) == 0) {
	          break $_$11;
	        }
	        var $x_114 = $x_1;
	      }
	    }
	  } while (0);
	  var $69 = _ps_lattice_traverse_edges($dag);
	  var $70 = ($69 | 0) == 0;
	  $_$25 : do {
	    if ($70) {
	      var $_pre_phi = $dag + 32 | 0;
	    } else {
	      var $71$s2 = ($2 + 16 | 0) >> 2;
	      var $72 = ($lmset | 0) != 0;
	      var $73 = $dag + 32 | 0;
	      var $link_09 = $69;
	      while (1) {
	        var $link_09;
	        var $75 = HEAP32[$71$s2];
	        var $76$s2 = ($link_09 | 0) >> 2;
	        var $79 = HEAP32[HEAP32[$76$s2] + 8 >> 2];
	        var $80 = _dict_filler_word($75, $79);
	        var $81 = ($80 | 0) == 0;
	        do {
	          if ($81) {
	            __label__ = 21;
	          } else {
	            if ((HEAP32[$76$s2] | 0) == (HEAP32[$19 >> 2] | 0)) {
	              __label__ = 21;
	              break;
	            }
	            __label__ = 35;
	            break;
	          }
	        } while (0);
	        $_$32 : do {
	          if (__label__ == 21) {
	            var $87 = HEAP32[$71$s2];
	            var $88$s2 = ($link_09 + 4 | 0) >> 2;
	            var $91 = HEAP32[HEAP32[$88$s2] + 8 >> 2];
	            var $92 = _dict_filler_word($87, $91);
	            if (($92 | 0) != 0) {
	              if ((HEAP32[$88$s2] | 0) != (HEAP32[$73 >> 2] | 0)) {
	                break;
	              }
	            }
	            var $99 = $link_09 + 16 | 0;
	            if ((HEAP32[$99 >> 2] | 0) == -2147483648) {
	              ___assert_func(STRING_TABLE.__str919 | 0, 1283, STRING_TABLE.___func___ps_lattice_bestpath | 0, STRING_TABLE.__str68987 | 0);
	            } else {
	              __label__ = 25;
	            }
	            if ($72) {
	              var $107 = HEAP32[HEAP32[$88$s2] + 8 >> 2];
	              var $109 = HEAP32[$76$s2] + 8 | 0;
	              var $110 = _ngram_ng_prob($lmset, $107, $109, 1, $n_used1);
	              var $bprob_0 = $110;
	            } else {
	              var $bprob_0 = 0;
	            }
	            var $bprob_0;
	            var $116$s2 = ($link_09 + 24 | 0) >> 2;
	            var $120 = HEAP32[$116$s2] + (HEAP32[$link_09 + 12 >> 2] << 10) * $ascale & -1;
	            HEAP32[$116$s2] = $120;
	            var $x_25 = HEAP32[HEAP32[$88$s2] + 28 >> 2];
	            if (($x_25 | 0) == 0) {
	              break;
	            }
	            var $x_26 = $x_25;
	            while (1) {
	              var $x_26;
	              var $124 = HEAP32[$71$s2];
	              var $125$s2 = ($x_26 | 0) >> 2;
	              var $130 = HEAP32[HEAP32[HEAP32[$125$s2] + 4 >> 2] + 8 >> 2];
	              var $131 = _dict_filler_word($124, $130);
	              var $132 = ($131 | 0) == 0;
	              var $_pre31 = HEAP32[$125$s2];
	              do {
	                if ($132) {
	                  __label__ = 30;
	                } else {
	                  if ((HEAP32[$_pre31 + 4 >> 2] | 0) == (HEAP32[$73 >> 2] | 0)) {
	                    __label__ = 30;
	                    break;
	                  }
	                  __label__ = 34;
	                  break;
	                }
	              } while (0);
	              do {
	                if (__label__ == 30) {
	                  var $139 = HEAP32[$_pre31 + 24 >> 2];
	                  var $141 = HEAP32[$116$s2] + $bprob_0 | 0;
	                  var $142 = _logmath_add($4, $139, $141);
	                  var $144 = HEAP32[$125$s2] + 24 | 0;
	                  HEAP32[$144 >> 2] = $142;
	                  if ($72) {
	                    var $150 = HEAP32[HEAP32[HEAP32[$125$s2] + 4 >> 2] + 8 >> 2];
	                    var $153 = HEAP32[HEAP32[$88$s2] + 8 >> 2];
	                    var $156 = HEAP32[HEAP32[$76$s2] + 8 >> 2];
	                    var $157 = _ngram_tg_score($lmset, $150, $153, $156, $n_used1);
	                    var $tscore_0 = ($157 >> 10) * $lwf & -1;
	                  } else {
	                    var $tscore_0 = 0;
	                  }
	                  var $tscore_0;
	                  var $164 = HEAP32[$125$s2];
	                  var $168 = HEAP32[$99 >> 2] + $tscore_0 + HEAP32[$164 + 12 >> 2] | 0;
	                  var $169 = $164 + 16 | 0;
	                  if (($168 | 0) <= (HEAP32[$169 >> 2] | 0)) {
	                    break;
	                  }
	                  HEAP32[$169 >> 2] = $168;
	                  var $174 = HEAP32[$125$s2] + 8 | 0;
	                  HEAP32[$174 >> 2] = $link_09;
	                }
	              } while (0);
	              var $x_2 = HEAP32[$x_26 + 4 >> 2];
	              if (($x_2 | 0) == 0) {
	                break $_$32;
	              }
	              var $x_26 = $x_2;
	            }
	          }
	        } while (0);
	        var $178 = _ps_lattice_traverse_next($dag);
	        if (($178 | 0) == 0) {
	          var $_pre_phi = $73;
	          break $_$25;
	        }
	        var $link_09 = $178;
	      }
	    }
	  } while (0);
	  var $_pre_phi;
	  var $_idx_val = HEAP32[$4 + 60 >> 2];
	  var $180 = _logmath_get_zero($_idx_val);
	  var $181$s2 = ($dag + 44 | 0) >> 2;
	  HEAP32[$181$s2] = $180;
	  var $x_31 = HEAP32[HEAP32[$_pre_phi >> 2] + 32 >> 2];
	  if (($x_31 | 0) == 0) {
	    var $bestend_0_lcssa = 0;
	    var $223 = $180;
	  } else {
	    var $185 = $2 + 16 | 0;
	    var $186 = ($lmset | 0) == 0;
	    var $bestend_02 = 0;
	    var $bestescr_03 = -2147483648;
	    var $x_34 = $x_31;
	    while (1) {
	      var $x_34;
	      var $bestescr_03;
	      var $bestend_02;
	      var $188 = HEAP32[$185 >> 2];
	      var $189$s2 = ($x_34 | 0) >> 2;
	      var $194 = HEAP32[HEAP32[HEAP32[$189$s2] >> 2] + 8 >> 2];
	      var $195 = _dict_filler_word($188, $194);
	      if (($195 | 0) == 0) {
	        if ($186) {
	          var $bprob2_0 = 0;
	        } else {
	          var $199 = HEAP32[$189$s2];
	          var $203 = HEAP32[HEAP32[$199 + 4 >> 2] + 8 >> 2];
	          var $206 = HEAP32[$199 >> 2] + 8 | 0;
	          var $207 = _ngram_ng_prob($lmset, $203, $206, 1, $n_used3);
	          var $bprob2_0 = $207;
	        }
	        var $bprob2_0;
	        var $209 = HEAP32[$181$s2];
	        var $213 = HEAP32[HEAP32[$189$s2] + 24 >> 2] + $bprob2_0 | 0;
	        var $214 = _logmath_add($4, $209, $213);
	        HEAP32[$181$s2] = $214;
	        var $215 = HEAP32[$189$s2];
	        var $217 = HEAP32[$215 + 16 >> 2];
	        var $218 = ($217 | 0) > ($bestescr_03 | 0);
	        var $_bestend_0 = $218 ? $215 : $bestend_02;
	        var $_bestescr_0 = $218 ? $217 : $bestescr_03;
	        var $bestescr_1 = $_bestescr_0;
	        var $bestend_1 = $_bestend_0;
	      } else {
	        var $bestescr_1 = $bestescr_03;
	        var $bestend_1 = $bestend_02;
	      }
	      var $bestend_1;
	      var $bestescr_1;
	      var $x_3 = HEAP32[$x_34 + 4 >> 2];
	      if (($x_3 | 0) == 0) {
	        break;
	      }
	      var $bestend_02 = $bestend_1;
	      var $bestescr_03 = $bestescr_1;
	      var $x_34 = $x_3;
	    }
	    var $bestend_0_lcssa = $bestend_1;
	    var $223 = HEAP32[$181$s2];
	  }
	  var $223;
	  var $bestend_0_lcssa;
	  var $231 = $223 + (HEAP32[$dag + 40 >> 2] << 10) * $ascale & -1;
	  HEAP32[$181$s2] = $231;
	  __E__pr_info_header(STRING_TABLE.__str919 | 0, 1352);
	  var $232 = HEAP32[$_pre_phi >> 2];
	  var $234 = HEAP32[$232 + 4 >> 2];
	  if (($234 | 0) < 0) {
	    var $245 = 0;
	  } else {
	    var $245 = HEAP32[(HEAP32[HEAP32[HEAP32[$1 >> 2] + 16 >> 2] + 8 >> 2] >> 2) + ($234 * 5 | 0)];
	  }
	  var $245;
	  var $248 = HEAP16[$232 + 20 >> 1] << 16 >> 16;
	  var $250 = HEAP32[$232 + 16 >> 2];
	  var $251 = HEAP32[$181$s2];
	  __E__pr_info(STRING_TABLE.__str69988 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $245, HEAP32[tempInt + 4 >> 2] = $248, HEAP32[tempInt + 8 >> 2] = $250, HEAP32[tempInt + 12 >> 2] = $251, tempInt));
	  STACKTOP = __stackBase__;
	  return $bestend_0_lcssa;
	  return null;
	}

	_ps_lattice_bestpath["X"] = 1;

	function _ps_lattice_posterior($dag, $lmset, $ascale) {
	  var $_pre$s2;
	  var $38$s2;
	  var $26$s2;
	  var $21$s2;
	  var $19$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_used = __stackBase__;
	  var $2 = HEAP32[$dag + 8 >> 2];
	  var $4 = HEAP32[$dag + 4 >> 2];
	  var $node_012 = HEAP32[$dag + 24 >> 2];
	  var $6 = ($node_012 | 0) == 0;
	  $_$72 : do {
	    if (!$6) {
	      var $_idx = $4 + 60 | 0;
	      var $node_013 = $node_012;
	      while (1) {
	        var $node_013;
	        var $x_07 = HEAP32[$node_013 + 28 >> 2];
	        var $8 = ($x_07 | 0) == 0;
	        $_$76 : do {
	          if (!$8) {
	            var $x_08 = $x_07;
	            while (1) {
	              var $x_08;
	              var $_idx_val = HEAP32[$_idx >> 2];
	              var $9 = _logmath_get_zero($_idx_val);
	              var $12 = HEAP32[$x_08 >> 2] + 28 | 0;
	              HEAP32[$12 >> 2] = $9;
	              var $x_0 = HEAP32[$x_08 + 4 >> 2];
	              if (($x_0 | 0) == 0) {
	                break $_$76;
	              }
	              var $x_08 = $x_0;
	            }
	          }
	        } while (0);
	        var $node_0 = HEAP32[$node_013 + 40 >> 2];
	        if (($node_0 | 0) == 0) {
	          break $_$72;
	        }
	        var $node_013 = $node_0;
	      }
	    }
	  } while (0);
	  var $17 = _ps_lattice_reverse_edges($dag);
	  var $18 = ($17 | 0) == 0;
	  $_$81 : do {
	    if ($18) {
	      var $bestend_0_lcssa = 0;
	    } else {
	      var $19$s2 = ($2 + 16 | 0) >> 2;
	      var $20 = ($lmset | 0) == 0;
	      var $21$s2 = ($dag + 32 | 0) >> 2;
	      var $22 = $dag + 40 | 0;
	      var $23 = $dag + 28 | 0;
	      var $link_03 = $17;
	      var $bestend_04 = 0;
	      var $bestescr_05 = -2147483648;
	      while (1) {
	        var $bestescr_05;
	        var $bestend_04;
	        var $link_03;
	        var $25 = HEAP32[$19$s2];
	        var $26$s2 = ($link_03 | 0) >> 2;
	        var $29 = HEAP32[HEAP32[$26$s2] + 8 >> 2];
	        var $30 = _dict_filler_word($25, $29);
	        var $31 = ($30 | 0) == 0;
	        do {
	          if ($31) {
	            __label__ = 11;
	          } else {
	            if ((HEAP32[$26$s2] | 0) == (HEAP32[$23 >> 2] | 0)) {
	              __label__ = 11;
	              break;
	            }
	            var $bestescr_2 = $bestescr_05;
	            var $bestend_2 = $bestend_04;
	            __label__ = 23;
	            break;
	          }
	        } while (0);
	        $_$87 : do {
	          if (__label__ == 11) {
	            var $37 = HEAP32[$19$s2];
	            var $38$s2 = ($link_03 + 4 | 0) >> 2;
	            var $41 = HEAP32[HEAP32[$38$s2] + 8 >> 2];
	            var $42 = _dict_filler_word($37, $41);
	            if (($42 | 0) == 0) {
	              __label__ = 13;
	            } else {
	              if ((HEAP32[$38$s2] | 0) != (HEAP32[$21$s2] | 0)) {
	                var $bestescr_2 = $bestescr_05;
	                var $bestend_2 = $bestend_04;
	                break;
	              }
	            }
	            if ($20) {
	              var $bprob_0 = 0;
	            } else {
	              var $52 = HEAP32[HEAP32[$38$s2] + 8 >> 2];
	              var $54 = HEAP32[$26$s2] + 8 | 0;
	              var $55 = _ngram_ng_prob($lmset, $52, $54, 1, $n_used);
	              var $bprob_0 = $55;
	            }
	            var $bprob_0;
	            var $56 = HEAP32[$38$s2];
	            if (($56 | 0) == (HEAP32[$21$s2] | 0)) {
	              var $61 = HEAP32[$link_03 + 16 >> 2];
	              var $62 = ($61 | 0) > ($bestescr_05 | 0);
	              var $link_0_bestend_0 = $62 ? $link_03 : $bestend_04;
	              var $_bestescr_0 = $62 ? $61 : $bestescr_05;
	              var $69 = $bprob_0 + (HEAP32[$22 >> 2] << 10) * $ascale & -1;
	              HEAP32[$link_03 + 28 >> 2] = $69;
	              var $bestescr_2 = $_bestescr_0;
	              var $bestend_2 = $link_0_bestend_0;
	            } else {
	              var $x_11 = HEAP32[$56 + 28 >> 2];
	              if (($x_11 | 0) == 0) {
	                var $bestescr_2 = $bestescr_05;
	                var $bestend_2 = $bestend_04;
	                break;
	              }
	              var $74 = $link_03 + 28 | 0;
	              var $x_12 = $x_11;
	              while (1) {
	                var $x_12;
	                var $76 = HEAP32[$19$s2];
	                var $77 = $x_12 | 0;
	                var $82 = HEAP32[HEAP32[HEAP32[$77 >> 2] + 4 >> 2] + 8 >> 2];
	                var $83 = _dict_filler_word($76, $82);
	                var $84 = ($83 | 0) == 0;
	                var $_pre$s2 = HEAP32[$77 >> 2] >> 2;
	                do {
	                  if ($84) {
	                    __label__ = 21;
	                  } else {
	                    if ((HEAP32[$_pre$s2 + 1] | 0) == (HEAP32[$21$s2] | 0)) {
	                      __label__ = 21;
	                      break;
	                    }
	                    __label__ = 22;
	                    break;
	                  }
	                } while (0);
	                if (__label__ == 21) {
	                  var $90 = HEAP32[$74 >> 2];
	                  var $101 = HEAP32[$_pre$s2 + 7] + $bprob_0 + (HEAP32[$_pre$s2 + 3] << 10) * $ascale & -1;
	                  var $102 = _logmath_add($4, $90, $101);
	                  HEAP32[$74 >> 2] = $102;
	                }
	                var $x_1 = HEAP32[$x_12 + 4 >> 2];
	                if (($x_1 | 0) == 0) {
	                  var $bestescr_2 = $bestescr_05;
	                  var $bestend_2 = $bestend_04;
	                  break $_$87;
	                }
	                var $x_12 = $x_1;
	              }
	            }
	          }
	        } while (0);
	        var $bestend_2;
	        var $bestescr_2;
	        var $106 = _ps_lattice_reverse_next($dag);
	        if (($106 | 0) == 0) {
	          var $bestend_0_lcssa = $bestend_2;
	          break $_$81;
	        }
	        var $link_03 = $106;
	        var $bestend_04 = $bestend_2;
	        var $bestescr_05 = $bestescr_2;
	      }
	    }
	  } while (0);
	  var $bestend_0_lcssa;
	  var $108 = _ps_lattice_joint($dag, $bestend_0_lcssa, $ascale);
	  var $111 = $108 - HEAP32[$dag + 44 >> 2] | 0;
	  STACKTOP = __stackBase__;
	  return $111;
	  return null;
	}

	_ps_lattice_posterior["X"] = 1;

	function _ps_lattice_joint($dag, $link, $ascale) {
	  var $_02$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $lback = __stackBase__;
	  var $2 = HEAP32[$dag + 8 >> 2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $lmset_0 = 0;
	    } else {
	      var $8 = HEAP32[HEAP32[$2 >> 2] >> 2];
	      var $9 = _strcmp($8, STRING_TABLE.__str71990 | 0);
	      if (($9 | 0) != 0) {
	        var $lmset_0 = 0;
	        break;
	      }
	      var $lmset_0 = HEAP32[$2 + 56 >> 2];
	    }
	  } while (0);
	  var $lmset_0;
	  var $jprob_01 = (HEAP32[$dag + 40 >> 2] << 10) * $ascale & -1;
	  var $21 = ($link | 0) == 0;
	  $_$113 : do {
	    if ($21) {
	      var $jprob_0_lcssa = $jprob_01;
	    } else {
	      var $22 = ($lmset_0 | 0) == 0;
	      var $_02 = $link, $_02$s2 = $_02 >> 2;
	      var $jprob_03 = $jprob_01;
	      while (1) {
	        var $jprob_03;
	        var $_02;
	        if ($22) {
	          var $jprob_1 = $jprob_03;
	        } else {
	          var $28 = HEAP32[HEAP32[$_02$s2 + 1] + 8 >> 2];
	          var $31 = HEAP32[$_02$s2] + 8 | 0;
	          var $32 = _ngram_ng_prob($lmset_0, $28, $31, 1, $lback);
	          var $jprob_1 = $32 + $jprob_03 | 0;
	        }
	        var $jprob_1;
	        var $43 = HEAP32[$_02$s2 + 2];
	        var $jprob_0 = $jprob_1 + (HEAP32[$_02$s2 + 3] << 10) * $ascale & -1;
	        if (($43 | 0) == 0) {
	          var $jprob_0_lcssa = $jprob_0;
	          break $_$113;
	        }
	        var $_02 = $43, $_02$s2 = $_02 >> 2;
	        var $jprob_03 = $jprob_0;
	      }
	    }
	  } while (0);
	  var $jprob_0_lcssa;
	  __E__pr_info_header(STRING_TABLE.__str919 | 0, 1390);
	  var $47 = $jprob_0_lcssa - HEAP32[$dag + 44 >> 2] | 0;
	  __E__pr_info(STRING_TABLE.__str72991 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $jprob_0_lcssa, HEAP32[tempInt + 4 >> 2] = $47, tempInt));
	  STACKTOP = __stackBase__;
	  return $jprob_0_lcssa;
	  return null;
	}

	_ps_lattice_joint["X"] = 1;

	function _ps_astar_start($dag, $lmset, $lwf) {
	  var $node_05$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $1 = ___ckd_calloc__(1, 64, STRING_TABLE.__str919 | 0, 1668);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $dag;
	  var $5 = $1 + 4 | 0;
	  HEAP32[$5 >> 2] = $lmset;
	  var $7 = $1 + 8 | 0;
	  HEAPF32[$7 >> 2] = $lwf;
	  HEAP16[$1 + 12 >> 1] = 0;
	  var $12 = HEAP16[$dag + 36 >> 1] + 1 & 65535;
	  HEAP16[$1 + 14 >> 1] = $12;
	  HEAP32[$1 + 16 >> 2] = -1;
	  HEAP32[$1 + 20 >> 2] = -1;
	  var $19 = _listelem_alloc_init(16);
	  var $21 = $1 + 60 | 0;
	  HEAP32[$21 >> 2] = $19;
	  var $22 = $dag + 24 | 0;
	  var $node_04 = HEAP32[$22 >> 2];
	  var $23 = ($node_04 | 0) == 0;
	  $_$122 : do {
	    if (!$23) {
	      var $24 = $dag + 32 | 0;
	      var $node_05 = $node_04, $node_05$s2 = $node_05 >> 2;
	      while (1) {
	        var $node_05;
	        if (($node_05 | 0) == (HEAP32[$24 >> 2] | 0)) {
	          HEAP32[$node_05$s2 + 6] = 0;
	        } else {
	          var $34 = $node_05 + 24 | 0;
	          if ((HEAP32[$node_05$s2 + 7] | 0) == 0) {
	            HEAP32[$34 >> 2] = -536870912;
	          } else {
	            HEAP32[$34 >> 2] = 1;
	          }
	        }
	        var $node_0 = HEAP32[$node_05$s2 + 10];
	        if (($node_0 | 0) == 0) {
	          break $_$122;
	        }
	        var $node_05 = $node_0, $node_05$s2 = $node_05 >> 2;
	      }
	    }
	  } while (0);
	  HEAP32[$1 + 48 >> 2] = 0;
	  HEAP32[$1 + 44 >> 2] = 0;
	  var $node_11 = HEAP32[$22 >> 2];
	  var $44 = ($node_11 | 0) == 0;
	  $_$134 : do {
	    if (!$44) {
	      var $node_12 = $node_11;
	      while (1) {
	        var $node_12;
	        if (HEAP16[$node_12 + 20 >> 1] << 16 >> 16 == 0) {
	          var $49 = _best_rem_score($2, $node_12);
	          var $50 = HEAP32[$21 >> 2];
	          var $51 = ___listelem_malloc__($50, STRING_TABLE.__str919 | 0, 1699);
	          var $52 = $51;
	          var $53 = $51;
	          HEAP32[$53 >> 2] = $node_12;
	          var $55 = $51 + 4 | 0;
	          HEAP32[$55 >> 2] = 0;
	          var $56 = HEAPU32[$5 >> 2];
	          if (($56 | 0) == 0) {
	            var $73 = $51 + 12 | 0;
	            HEAP32[$73 >> 2] = 0;
	            var $75 = 0;
	          } else {
	            var $62 = HEAP32[$node_12 + 8 >> 2];
	            if (HEAPF32[$7 >> 2] != 0) {
	              var $64 = _ngram_bg_score($56, $62, -1, $n_used);
	              var $68 = $64;
	            } else {
	              var $66 = _ngram_tg_score($56, $62, -1, -1, $n_used);
	              var $68 = $66;
	            }
	            var $68;
	            var $70 = $51 + 12 | 0;
	            HEAP32[$70 >> 2] = $68;
	            var $75 = $68;
	          }
	          var $75;
	          var $77 = $51 + 12 | 0;
	          var $78 = $75 >> 10;
	          HEAP32[$77 >> 2] = $78;
	          var $82 = $78 + HEAP32[$node_12 + 24 >> 2] | 0;
	          _path_insert($2, $52, $82);
	        }
	        var $node_1 = HEAPU32[$node_12 + 40 >> 2];
	        if (($node_1 | 0) == 0) {
	          break $_$134;
	        }
	        var $node_12 = $node_1;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	_ps_astar_start["X"] = 1;

	function _best_rem_score($nbest, $from) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $1 = $from + 24 | 0;
	  var $3 = HEAP32[$1 >> 2];
	  if (($3 | 0) < 1) {
	    var $_0 = $3;
	  } else {
	    var $x_01 = HEAP32[$from + 28 >> 2];
	    var $7 = ($x_01 | 0) == 0;
	    $_$152 : do {
	      if ($7) {
	        var $bestscore_0_lcssa = -536870912;
	      } else {
	        var $8 = $nbest + 4 | 0;
	        var $9 = $from + 8 | 0;
	        var $10 = $nbest + 8 | 0;
	        var $bestscore_02 = -536870912;
	        var $x_03 = $x_01;
	        while (1) {
	          var $x_03;
	          var $bestscore_02;
	          var $12 = $x_03 | 0;
	          var $15 = HEAP32[HEAP32[$12 >> 2] + 4 >> 2];
	          var $16 = _best_rem_score($nbest, $15);
	          var $17 = HEAP32[$12 >> 2];
	          var $20 = HEAP32[$17 + 12 >> 2] + $16 | 0;
	          var $21 = HEAP32[$8 >> 2];
	          if (($21 | 0) == 0) {
	            var $score_0 = $20;
	          } else {
	            var $27 = HEAP32[HEAP32[$17 + 4 >> 2] + 8 >> 2];
	            var $28 = HEAP32[$9 >> 2];
	            var $29 = _ngram_bg_score($21, $27, $28, $n_used);
	            var $score_0 = $20 + ($29 >> 10) * HEAPF32[$10 >> 2] & -1;
	          }
	          var $score_0;
	          var $score_0_bestscore_0 = ($score_0 | 0) > ($bestscore_02 | 0) ? $score_0 : $bestscore_02;
	          var $x_0 = HEAP32[$x_03 + 4 >> 2];
	          if (($x_0 | 0) == 0) {
	            var $bestscore_0_lcssa = $score_0_bestscore_0;
	            break $_$152;
	          }
	          var $bestscore_02 = $score_0_bestscore_0;
	          var $x_03 = $x_0;
	        }
	      }
	    } while (0);
	    var $bestscore_0_lcssa;
	    HEAP32[$1 >> 2] = $bestscore_0_lcssa;
	    var $_0 = $bestscore_0_lcssa;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_best_rem_score["X"] = 1;

	function _path_insert($nbest, $newpath, $total_score) {
	  var $44$s2;
	  var $1 = $nbest + 44 | 0;
	  var $i_0 = 0;
	  var $p_0_in = $1;
	  var $prev_0 = 0;
	  while (1) {
	    var $prev_0;
	    var $p_0_in;
	    var $i_0;
	    var $p_0 = HEAP32[$p_0_in >> 2];
	    var $3 = ($i_0 | 0) < 500;
	    var $4 = ($p_0 | 0) == 0;
	    if ($4 | $3 ^ 1) {
	      var $_lcssa5 = $4;
	      break;
	    }
	    if ((HEAP32[HEAP32[$p_0 >> 2] + 24 >> 2] + HEAP32[$p_0 + 12 >> 2] | 0) < ($total_score | 0)) {
	      var $_lcssa5 = 0;
	      break;
	    }
	    var $i_0 = $i_0 + 1 | 0;
	    var $p_0_in = $p_0 + 8 | 0;
	    var $prev_0 = $p_0;
	  }
	  var $_lcssa5;
	  $_$7 : do {
	    if ($3) {
	      HEAP32[$newpath + 8 >> 2] = $p_0;
	      if (($prev_0 | 0) == 0) {
	        HEAP32[$1 >> 2] = $newpath;
	      } else {
	        HEAP32[$prev_0 + 8 >> 2] = $newpath;
	      }
	      if ($_lcssa5) {
	        HEAP32[$nbest + 48 >> 2] = $newpath;
	      }
	      var $28 = $nbest + 40 | 0;
	      var $30 = HEAP32[$28 >> 2] + 1 | 0;
	      HEAP32[$28 >> 2] = $30;
	      var $31 = $nbest + 28 | 0;
	      var $33 = HEAP32[$31 >> 2] + 1 | 0;
	      HEAP32[$31 >> 2] = $33;
	      var $34 = $nbest + 36 | 0;
	      var $36 = HEAP32[$34 >> 2] + $i_0 | 0;
	      HEAP32[$34 >> 2] = $36;
	    } else {
	      HEAP32[$nbest + 48 >> 2] = $prev_0;
	      HEAP32[$prev_0 + 8 >> 2] = 0;
	      HEAP32[$nbest + 40 >> 2] = 500;
	      var $41 = $nbest + 60 | 0;
	      var $42 = HEAP32[$41 >> 2];
	      var $43 = $newpath;
	      ___listelem_free__($42, $43);
	      var $44$s2 = ($nbest + 32 | 0) >> 2;
	      var $storemerge2 = HEAP32[$44$s2] + 1 | 0;
	      HEAP32[$44$s2] = $storemerge2;
	      if ($4) {
	        break;
	      }
	      var $p_13 = $p_0;
	      while (1) {
	        var $p_13;
	        var $46 = HEAP32[$p_13 + 8 >> 2];
	        var $47 = HEAP32[$41 >> 2];
	        ___listelem_free__($47, $p_13);
	        var $storemerge = HEAP32[$44$s2] + 1 | 0;
	        HEAP32[$44$s2] = $storemerge;
	        if (($46 | 0) == 0) {
	          break $_$7;
	        }
	        var $p_13 = $46;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_path_insert["X"] = 1;

	function _ps_astar_next($nbest) {
	  var $3 = $nbest + 44 | 0;
	  var $4 = $nbest + 52 | 0;
	  var $5 = $nbest + 48 | 0;
	  var $6 = $nbest + 40 | 0;
	  var $7 = $nbest + 14 | 0;
	  var $8 = HEAP32[$nbest >> 2] + 32 | 0;
	  while (1) {
	    var $9 = HEAP32[$3 >> 2];
	    HEAP32[$4 >> 2] = $9;
	    if (($9 | 0) == 0) {
	      var $_0 = 0;
	      break;
	    }
	    var $13 = HEAP32[$9 + 8 >> 2];
	    HEAP32[$3 >> 2] = $13;
	    if (($9 | 0) == (HEAP32[$5 >> 2] | 0)) {
	      HEAP32[$5 >> 2] = 0;
	    }
	    var $18 = HEAP32[$6 >> 2] - 1 | 0;
	    HEAP32[$6 >> 2] = $18;
	    var $20 = HEAP32[$9 >> 2];
	    var $23 = HEAP16[$7 >> 1];
	    if (HEAP16[$20 + 20 >> 1] << 16 >> 16 >= $23 << 16 >> 16) {
	      var $_0 = $9;
	      break;
	    }
	    if (($20 | 0) == (HEAP32[$8 >> 2] | 0)) {
	      var $_0 = $9;
	      break;
	    }
	    if ((HEAP32[$20 + 12 >> 2] | 0) >= ($23 << 16 >> 16 | 0)) {
	      continue;
	    }
	    _path_extend($nbest, $9);
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _path_extend($nbest, $path) {
	  var $39$s2;
	  var $15$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $1 = $path | 0;
	  var $x_01 = HEAP32[HEAP32[$1 >> 2] + 28 >> 2];
	  var $4 = ($x_01 | 0) == 0;
	  $_$32 : do {
	    if (!$4) {
	      var $5 = $nbest + 60 | 0;
	      var $6 = $path + 12 | 0;
	      var $7 = $nbest + 4 | 0;
	      var $8 = $nbest + 24 | 0;
	      var $9 = $nbest + 40 | 0;
	      var $10 = $nbest + 48 | 0;
	      var $11 = $nbest + 32 | 0;
	      var $12 = $path + 4 | 0;
	      var $13 = $nbest + 8 | 0;
	      var $x_02 = $x_01;
	      while (1) {
	        var $x_02;
	        var $15$s2 = ($x_02 | 0) >> 2;
	        var $22 = (HEAP32[HEAP32[HEAP32[$15$s2] + 4 >> 2] + 24 >> 2] | 0) < -536870911;
	        $_$36 : do {
	          if (!$22) {
	            var $24 = HEAP32[$5 >> 2];
	            var $25 = ___listelem_malloc__($24, STRING_TABLE.__str919 | 0, 1619);
	            var $26 = $25;
	            var $29 = HEAP32[HEAP32[$15$s2] + 4 >> 2];
	            var $30 = $25;
	            HEAP32[$30 >> 2] = $29;
	            var $32 = $25 + 4 | 0;
	            HEAP32[$32 >> 2] = $path;
	            var $37 = HEAP32[HEAP32[$15$s2] + 12 >> 2] + HEAP32[$6 >> 2] | 0;
	            var $39$s2 = ($25 + 12 | 0) >> 2;
	            HEAP32[$39$s2] = $37;
	            var $40 = HEAP32[$7 >> 2];
	            if (($40 | 0) != 0) {
	              var $43 = HEAP32[$12 >> 2];
	              var $45 = HEAPF32[$13 >> 2];
	              var $47 = HEAP32[$29 + 8 >> 2];
	              var $50 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
	              if (($43 | 0) == 0) {
	                var $65 = _ngram_bg_score($40, $47, $50, $n_used);
	                var $72 = HEAP32[$39$s2] + $45 * ($65 >> 10) & -1;
	                HEAP32[$39$s2] = $72;
	              } else {
	                var $55 = HEAP32[HEAP32[$43 >> 2] + 8 >> 2];
	                var $56 = _ngram_tg_score($40, $47, $50, $55, $n_used);
	                var $63 = HEAP32[$39$s2] + $45 * ($56 >> 10) & -1;
	                HEAP32[$39$s2] = $63;
	              }
	            }
	            var $75 = HEAP32[$8 >> 2] + 1 | 0;
	            HEAP32[$8 >> 2] = $75;
	            var $81 = HEAP32[HEAP32[$30 >> 2] + 24 >> 2] + HEAP32[$39$s2] | 0;
	            var $83 = (HEAP32[$9 >> 2] | 0) > 499;
	            do {
	              if ($83) {
	                var $85 = HEAP32[$10 >> 2];
	                if (($81 | 0) >= (HEAP32[HEAP32[$85 >> 2] + 24 >> 2] + HEAP32[$85 + 12 >> 2] | 0)) {
	                  break;
	                }
	                var $96 = HEAP32[$5 >> 2];
	                ___listelem_free__($96, $25);
	                var $98 = HEAP32[$11 >> 2] + 1 | 0;
	                HEAP32[$11 >> 2] = $98;
	                break $_$36;
	              }
	            } while (0);
	            _path_insert($nbest, $26, $81);
	          }
	        } while (0);
	        var $x_0 = HEAP32[$x_02 + 4 >> 2];
	        if (($x_0 | 0) == 0) {
	          break $_$32;
	        }
	        var $x_02 = $x_0;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_path_extend["X"] = 1;

	function _ps_astar_hyp($nbest, $path) {
	  var $6$s2;
	  var $1 = ($path | 0) == 0;
	  do {
	    if ($1) {
	      var $_0 = 0;
	    } else {
	      var $6$s2 = (HEAP32[HEAP32[$nbest >> 2] + 8 >> 2] + 16 | 0) >> 2;
	      var $p_04 = $path;
	      var $len_05 = 0;
	      while (1) {
	        var $len_05;
	        var $p_04;
	        var $7 = HEAP32[$6$s2];
	        var $8 = $p_04 | 0;
	        var $11 = HEAP32[HEAP32[$8 >> 2] + 8 >> 2];
	        var $12 = _dict_real_word($7, $11);
	        if (($12 | 0) == 0) {
	          var $len_1 = $len_05;
	        } else {
	          var $17 = HEAP32[HEAP32[$8 >> 2] + 8 >> 2];
	          if (($17 | 0) < 0) {
	            var $26 = 0;
	          } else {
	            var $26 = HEAP32[(HEAP32[HEAP32[$6$s2] + 8 >> 2] >> 2) + ($17 * 5 | 0)];
	          }
	          var $26;
	          var $27 = _strlen($26);
	          var $len_1 = $27 + ($len_05 + 1) | 0;
	        }
	        var $len_1;
	        var $32 = HEAP32[$p_04 + 4 >> 2];
	        if (($32 | 0) == 0) {
	          break;
	        }
	        var $p_04 = $32;
	        var $len_05 = $len_1;
	      }
	      if (($len_1 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $35 = ___ckd_calloc__(1, $len_1, STRING_TABLE.__str919 | 0, 1773);
	      var $p_12 = $path;
	      var $c_03 = $35 + ($len_1 - 1) | 0;
	      while (1) {
	        var $c_03;
	        var $p_12;
	        var $38 = HEAP32[$6$s2];
	        var $39 = $p_12 | 0;
	        var $42 = HEAP32[HEAP32[$39 >> 2] + 8 >> 2];
	        var $43 = _dict_real_word($38, $42);
	        var $44 = ($43 | 0) == 0;
	        do {
	          if ($44) {
	            var $c_1 = $c_03;
	          } else {
	            var $48 = HEAP32[HEAP32[$39 >> 2] + 8 >> 2];
	            if (($48 | 0) < 0) {
	              var $50 = _strlen(0);
	              var $59 = 0;
	              var $_pn10 = $50;
	            } else {
	              var $56 = HEAP32[(HEAP32[HEAP32[$6$s2] + 8 >> 2] >> 2) + ($48 * 5 | 0)];
	              var $57 = _strlen($56);
	              var $59 = $56;
	              var $_pn10 = $57;
	            }
	            var $_pn10;
	            var $59;
	            var $60 = $c_03 + -$_pn10 | 0;
	            _memcpy($60, $59, $_pn10, 1);
	            if ($60 >>> 0 <= $35 >>> 0) {
	              var $c_1 = $60;
	              break;
	            }
	            var $63 = $c_03 + ($_pn10 ^ -1) | 0;
	            HEAP8[$63] = 32;
	            var $c_1 = $63;
	          }
	        } while (0);
	        var $c_1;
	        var $66 = HEAPU32[$p_12 + 4 >> 2];
	        if (($66 | 0) == 0) {
	          break;
	        }
	        var $p_12 = $66;
	        var $c_03 = $c_1;
	      }
	      var $68 = $nbest + 56 | 0;
	      var $69 = HEAP32[$68 >> 2];
	      var $70 = _glist_add_ptr($69, $35);
	      HEAP32[$68 >> 2] = $70;
	      var $_0 = $35;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ps_astar_hyp["X"] = 1;

	function _ps_astar_finish($nbest) {
	  var $1 = $nbest + 56 | 0;
	  var $gn_01 = HEAP32[$1 >> 2];
	  if (($gn_01 | 0) == 0) {
	    var $8 = 0;
	  } else {
	    var $gn_02 = $gn_01;
	    while (1) {
	      var $gn_02;
	      var $4 = HEAP32[$gn_02 >> 2];
	      _ckd_free($4);
	      var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	      if (($gn_0 | 0) == 0) {
	        break;
	      }
	      var $gn_02 = $gn_0;
	    }
	    var $8 = HEAP32[$1 >> 2];
	  }
	  var $8;
	  _glist_free($8);
	  var $10 = HEAP32[$nbest + 60 >> 2];
	  _listelem_alloc_free($10);
	  var $11 = $nbest;
	  _ckd_free($11);
	  return;
	  return;
	}

	function _ps_lattice_compute_lscr($seg, $link, $to) {
	  var $17$s2;
	  var $link$s2 = $link >> 2;
	  var $seg$s2 = $seg >> 2;
	  var $2 = HEAP32[$seg$s2 + 1];
	  var $6 = HEAP32[HEAP32[$2 >> 2] >> 2];
	  var $7 = _strcmp($6, STRING_TABLE.__str71990 | 0);
	  if (($7 | 0) == 0) {
	    var $15 = HEAP32[$2 + 56 >> 2];
	    var $17 = HEAP32[$link$s2 + 2], $17$s2 = $17 >> 2;
	    var $19 = ($to | 0) != 0;
	    if (($17 | 0) == 0) {
	      if ($19) {
	        var $25 = HEAP32[HEAP32[$link$s2 + 1] + 8 >> 2];
	        var $29 = HEAP32[HEAP32[$link$s2] + 8 >> 2];
	        var $30 = $seg + 28 | 0;
	        var $31 = _ngram_bg_score($15, $25, $29, $30);
	        var $32 = $31 >> 10;
	        HEAP32[$seg$s2 + 5] = $32;
	      } else {
	        HEAP32[$seg$s2 + 5] = 0;
	        HEAP32[$seg$s2 + 7] = 1;
	      }
	    } else {
	      if ($19) {
	        var $42 = HEAP32[HEAP32[$link$s2 + 1] + 8 >> 2];
	        var $46 = HEAP32[HEAP32[$link$s2] + 8 >> 2];
	        var $50 = HEAP32[HEAP32[$17$s2] + 8 >> 2];
	        var $51 = $seg + 28 | 0;
	        var $52 = _ngram_tg_score($15, $42, $46, $50, $51);
	        var $53 = $52 >> 10;
	        HEAP32[$seg$s2 + 5] = $53;
	      } else {
	        var $57 = HEAP32[$17$s2 + 2];
	        var $62 = HEAP32[HEAP32[$link$s2] + 8 >> 2];
	        var $66 = HEAP32[HEAP32[$17$s2] + 8 >> 2];
	        if (($57 | 0) == 0) {
	          var $77 = $seg + 28 | 0;
	          var $78 = _ngram_bg_score($15, $62, $66, $77);
	          var $79 = $78 >> 10;
	          HEAP32[$seg$s2 + 5] = $79;
	        } else {
	          var $71 = HEAP32[HEAP32[$57 >> 2] + 8 >> 2];
	          var $72 = $seg + 28 | 0;
	          var $73 = _ngram_tg_score($15, $62, $66, $71, $72);
	          var $74 = $73 >> 10;
	          HEAP32[$seg$s2 + 5] = $74;
	        }
	      }
	    }
	  } else {
	    HEAP32[$seg$s2 + 7] = 1;
	    HEAP32[$seg$s2 + 5] = 0;
	  }
	  return;
	  return;
	}

	_ps_lattice_compute_lscr["X"] = 1;

	function _ps_lattice_seg_next($seg) {
	  var $2 = $seg + 46 | 0;
	  var $4 = HEAP16[$2 >> 1] + 1 & 65535;
	  HEAP16[$2 >> 1] = $4;
	  var $5 = $4 << 16 >> 16;
	  var $8 = HEAP16[$seg + 44 >> 1];
	  if (($5 | 0) == (($8 << 16 >> 16) + 1 | 0)) {
	    _ps_lattice_seg_free($seg);
	    var $_0 = 0;
	  } else {
	    if ($4 << 16 >> 16 == $8 << 16 >> 16) {
	      var $21 = HEAP32[HEAP32[$seg + 36 >> 2] + ($5 - 1 << 2) >> 2];
	      _ps_lattice_link2itor($seg, $21, 1);
	      var $_0 = $seg;
	    } else {
	      var $27 = HEAP32[HEAP32[$seg + 36 >> 2] + ($5 << 2) >> 2];
	      _ps_lattice_link2itor($seg, $27, 0);
	      var $_0 = $seg;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ps_lattice_seg_free($seg) {
	  var $4 = HEAP32[$seg + 36 >> 2];
	  _ckd_free($4);
	  var $5 = $seg;
	  _ckd_free($5);
	  return;
	  return;
	}

	function _ps_mllr_read($regmatfile) {
	  var $42$s2;
	  var $37$s2;
	  var $32$s2;
	  var $27$s2;
	  var $23$s2;
	  var $16$s2;
	  var $n$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n = __stackBase__, $n$s2 = $n >> 2;
	  var $1 = ___ckd_calloc__(1, 32, STRING_TABLE.__str1021 | 0, 58);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = 1;
	  var $4 = _fopen($regmatfile, STRING_TABLE.__str2415 | 0);
	  var $5 = ($4 | 0) == 0;
	  $_$108 : do {
	    if ($5) {
	      __E__pr_header(STRING_TABLE.__str1021 | 0, 62, STRING_TABLE.__str232533 | 0);
	      var $6 = ___errno();
	      var $7 = HEAP32[$6 >> 2];
	      var $8 = _strerror($7);
	      __E__sys_error(STRING_TABLE.__str31024 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $regmatfile, HEAP32[tempInt + 4 >> 2] = $8, tempInt));
	      __label__ = 33;
	      break;
	    }
	    __E__pr_info_header(STRING_TABLE.__str1021 | 0, 66);
	    __E__pr_info(STRING_TABLE.__str51026 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $regmatfile, tempInt));
	    var $10 = _fscanf($4, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n, tempInt));
	    var $12 = HEAP32[$n$s2];
	    var $or_cond = ($10 | 0) != 1 | ($12 | 0) < 1;
	    $_$111 : do {
	      if ($or_cond) {
	        __E__pr_header(STRING_TABLE.__str1021 | 0, 69, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str81029 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      } else {
	        var $16$s2 = ($1 + 4 | 0) >> 2;
	        HEAP32[$16$s2] = $12;
	        var $17 = _fscanf($4, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n, tempInt));
	        if (($17 | 0) == 1) {
	          var $21 = HEAP32[$n$s2];
	          var $23$s2 = ($1 + 8 | 0) >> 2;
	          HEAP32[$23$s2] = $21;
	          var $24 = ___ckd_calloc__($21, 4, STRING_TABLE.__str1021 | 0, 79);
	          var $25 = $24;
	          var $27$s2 = ($1 + 12 | 0) >> 2;
	          HEAP32[$27$s2] = $25;
	          var $28 = HEAP32[$23$s2];
	          var $29 = ___ckd_calloc__($28, 4, STRING_TABLE.__str1021 | 0, 81);
	          var $30 = $29;
	          var $32$s2 = ($1 + 16 | 0) >> 2;
	          HEAP32[$32$s2] = $30;
	          var $33 = HEAP32[$23$s2];
	          var $34 = ___ckd_calloc__($33, 4, STRING_TABLE.__str1021 | 0, 82);
	          var $35 = $34;
	          var $37$s2 = ($1 + 20 | 0) >> 2;
	          HEAP32[$37$s2] = $35;
	          var $38 = HEAP32[$23$s2];
	          var $39 = ___ckd_calloc__($38, 4, STRING_TABLE.__str1021 | 0, 83);
	          var $40 = $39;
	          var $42$s2 = ($1 + 24 | 0) >> 2;
	          HEAP32[$42$s2] = $40;
	          var $i_0 = 0;
	          $_$117 : while (1) {
	            var $i_0;
	            if (($i_0 | 0) >= (HEAP32[$23$s2] | 0)) {
	              var $132 = _fclose($4);
	              var $_0 = $2;
	              __label__ = 34;
	              break $_$108;
	            }
	            var $47 = _fscanf($4, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n, tempInt));
	            if (($47 | 0) != 1) {
	              __E__pr_header(STRING_TABLE.__str1021 | 0, 87, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str101031 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $i_0, tempInt));
	              break $_$111;
	            }
	            var $51 = HEAP32[$n$s2];
	            var $53 = ($i_0 << 2) + HEAP32[$27$s2] | 0;
	            HEAP32[$53 >> 2] = $51;
	            var $54 = HEAP32[$16$s2];
	            var $57 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	            var $58 = ___ckd_calloc_3d__($54, $57, $57, 4, STRING_TABLE.__str1021 | 0, 93);
	            var $59 = $58;
	            var $61 = ($i_0 << 2) + HEAP32[$32$s2] | 0;
	            HEAP32[$61 >> 2] = $59;
	            var $62 = HEAP32[$16$s2];
	            var $65 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	            var $66 = ___ckd_calloc_2d__($62, $65, 4, STRING_TABLE.__str1021 | 0, 96);
	            var $67 = $66;
	            var $69 = ($i_0 << 2) + HEAP32[$37$s2] | 0;
	            HEAP32[$69 >> 2] = $67;
	            var $70 = HEAP32[$16$s2];
	            var $73 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	            var $74 = ___ckd_calloc_2d__($70, $73, 4, STRING_TABLE.__str1021 | 0, 99);
	            var $75 = $74;
	            var $77 = ($i_0 << 2) + HEAP32[$42$s2] | 0;
	            HEAP32[$77 >> 2] = $75;
	            var $m_0 = 0;
	            $_$124 : while (1) {
	              var $m_0;
	              if (($m_0 | 0) >= (HEAP32[$16$s2] | 0)) {
	                var $i_0 = $i_0 + 1 | 0;
	                continue $_$117;
	              }
	              var $j_0 = 0;
	              var $82 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	              $_$128 : while (1) {
	                var $82;
	                var $j_0;
	                if (($j_0 | 0) >= ($82 | 0)) {
	                  var $j_1 = 0;
	                  var $101 = $82;
	                  break;
	                }
	                var $k_0 = 0;
	                var $84 = $82;
	                while (1) {
	                  var $84;
	                  var $k_0;
	                  if (($k_0 | 0) >= ($84 | 0)) {
	                    var $j_0 = $j_0 + 1 | 0;
	                    var $82 = $84;
	                    continue $_$128;
	                  }
	                  var $94 = ($k_0 << 2) + HEAP32[HEAP32[HEAP32[HEAP32[$32$s2] + ($i_0 << 2) >> 2] + ($m_0 << 2) >> 2] + ($j_0 << 2) >> 2] | 0;
	                  var $95 = _fscanf($4, STRING_TABLE.__str111032 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $94, tempInt));
	                  if (($95 | 0) != 1) {
	                    __E__pr_header(STRING_TABLE.__str1021 | 0, 105, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str121033 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $i_0, HEAP32[tempInt + 4 >> 2] = $m_0, HEAP32[tempInt + 8 >> 2] = $j_0, HEAP32[tempInt + 12 >> 2] = $k_0, tempInt));
	                    break $_$111;
	                  }
	                  var $k_0 = $k_0 + 1 | 0;
	                  var $84 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	                }
	              }
	              while (1) {
	                var $101;
	                var $j_1;
	                if (($j_1 | 0) >= ($101 | 0)) {
	                  var $j_2 = 0;
	                  var $114 = $101;
	                  break;
	                }
	                var $109 = ($j_1 << 2) + HEAP32[HEAP32[HEAP32[$37$s2] + ($i_0 << 2) >> 2] + ($m_0 << 2) >> 2] | 0;
	                var $110 = _fscanf($4, STRING_TABLE.__str111032 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $109, tempInt));
	                if (($110 | 0) != 1) {
	                  __E__pr_header(STRING_TABLE.__str1021 | 0, 113, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str131034 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $i_0, HEAP32[tempInt + 4 >> 2] = $m_0, HEAP32[tempInt + 8 >> 2] = $j_1, tempInt));
	                  break $_$111;
	                }
	                var $j_1 = $j_1 + 1 | 0;
	                var $101 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	              }
	              while (1) {
	                var $114;
	                var $j_2;
	                if (($j_2 | 0) >= ($114 | 0)) {
	                  var $m_0 = $m_0 + 1 | 0;
	                  continue $_$124;
	                }
	                var $122 = ($j_2 << 2) + HEAP32[HEAP32[HEAP32[$42$s2] + ($i_0 << 2) >> 2] + ($m_0 << 2) >> 2] | 0;
	                var $123 = _fscanf($4, STRING_TABLE.__str111032 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $122, tempInt));
	                if (($123 | 0) != 1) {
	                  __E__pr_header(STRING_TABLE.__str1021 | 0, 120, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str141035 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $i_0, HEAP32[tempInt + 4 >> 2] = $m_0, HEAP32[tempInt + 8 >> 2] = $j_2, tempInt));
	                  break $_$111;
	                }
	                var $j_2 = $j_2 + 1 | 0;
	                var $114 = HEAP32[HEAP32[$27$s2] + ($i_0 << 2) >> 2];
	              }
	            }
	          }
	        } else {
	          __E__pr_header(STRING_TABLE.__str1021 | 0, 75, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str91030 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        }
	      }
	    } while (0);
	    var $134 = _fclose($4);
	    __label__ = 33;
	    break;
	  } while (0);
	  if (__label__ == 33) {
	    _ps_mllr_free($2);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ps_mllr_read["X"] = 1;

	function _ps_mllr_free($mllr) {
	  var $1 = ($mllr | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $mllr | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $7 = $mllr + 8 | 0;
	      var $9 = (HEAP32[$7 >> 2] | 0) > 0;
	      var $10 = $mllr + 16 | 0;
	      var $11 = $mllr + 20 | 0;
	      var $12 = $mllr + 24 | 0;
	      $_$162 : do {
	        if ($9) {
	          var $i_01 = 0;
	          while (1) {
	            var $i_01;
	            var $13 = HEAP32[$10 >> 2];
	            if (($13 | 0) != 0) {
	              var $18 = HEAP32[$13 + ($i_01 << 2) >> 2];
	              _ckd_free_3d($18);
	            }
	            var $19 = HEAP32[$11 >> 2];
	            if (($19 | 0) != 0) {
	              var $24 = HEAP32[$19 + ($i_01 << 2) >> 2];
	              _ckd_free_2d($24);
	            }
	            var $25 = HEAP32[$12 >> 2];
	            if (($25 | 0) != 0) {
	              var $30 = HEAP32[$25 + ($i_01 << 2) >> 2];
	              _ckd_free_2d($30);
	            }
	            var $31 = $i_01 + 1 | 0;
	            if (($31 | 0) >= (HEAP32[$7 >> 2] | 0)) {
	              break $_$162;
	            }
	            var $i_01 = $31;
	          }
	        }
	      } while (0);
	      var $36 = HEAP32[$mllr + 12 >> 2];
	      _ckd_free($36);
	      var $38 = HEAP32[$10 >> 2];
	      _ckd_free($38);
	      var $40 = HEAP32[$11 >> 2];
	      _ckd_free($40);
	      var $42 = HEAP32[$12 >> 2];
	      _ckd_free($42);
	      var $43 = $mllr;
	      _ckd_free($43);
	    }
	  } while (0);
	  return;
	  return;
	}

	_ps_mllr_free["X"] = 1;

	function _ptm_mgau_frame_eval($ps, $senone_scores, $senone_active, $n_senone_active, $featbuf, $frame, $compallsen) {
	  var $1 = $ps;
	  var $4 = HEAP32[$ps + 48 >> 2];
	  var $5 = ($frame | 0) % ($4 | 0);
	  var $8 = HEAP32[$ps + 40 >> 2];
	  var $9 = ($5 << 3) + $8 | 0;
	  var $_c = $9;
	  HEAP32[$ps + 44 >> 2] = $_c;
	  if ((HEAP32[$ps + 4 >> 2] | 0) <= ($frame | 0)) {
	    var $_ = ($5 | 0) == 0 ? $4 : $5;
	    var $20 = HEAP32[HEAP32[HEAP32[$9 >> 2] >> 2] >> 2];
	    var $25 = HEAP32[HEAP32[HEAP32[$8 + ($_ - 1 << 3) >> 2] >> 2] >> 2];
	    var $28 = HEAP32[$ps + 12 >> 2];
	    var $39 = (HEAP32[$28 + 16 >> 2] << 3) * HEAP32[$28 + 20 >> 2] * (HEAP16[$ps + 36 >> 1] << 16 >> 16) | 0;
	    _memcpy($20, $25, $39, 4);
	    _ptm_mgau_calc_cb_active($1, $senone_active, $n_senone_active, $compallsen);
	    _ptm_mgau_codebook_eval($1, $featbuf, $frame);
	  }
	  _ptm_mgau_senone_eval($1, $senone_scores, $senone_active, $n_senone_active, $compallsen);
	  return 0;
	  return null;
	}

	function _ptm_mgau_calc_cb_active($s, $senone_active, $n_senone_active, $compallsen) {
	  var $1 = ($compallsen | 0) == 0;
	  var $2 = $s + 44 | 0;
	  var $6 = HEAP32[HEAP32[$2 >> 2] + 4 >> 2];
	  var $13 = ((HEAP32[HEAP32[$s + 12 >> 2] + 16 >> 2] + 31 | 0) / 32 & -1) << 2;
	  $_$6 : do {
	    if ($1) {
	      _memset($6, 0, $13, 4);
	      if (($n_senone_active | 0) <= 0) {
	        break;
	      }
	      var $17 = $s + 20 | 0;
	      var $i_01 = 0;
	      var $lastsen_02 = 0;
	      while (1) {
	        var $lastsen_02;
	        var $i_01;
	        var $22 = (HEAPU8[$senone_active + $i_01 | 0] & 255) + $lastsen_02 | 0;
	        var $26 = HEAPU8[HEAP32[$17 >> 2] + $22 | 0] & 255;
	        var $33 = ($26 >>> 5 << 2) + HEAP32[HEAP32[$2 >> 2] + 4 >> 2] | 0;
	        var $35 = HEAP32[$33 >> 2] | 1 << ($26 & 31);
	        HEAP32[$33 >> 2] = $35;
	        var $36 = $i_01 + 1 | 0;
	        if (($36 | 0) == ($n_senone_active | 0)) {
	          break $_$6;
	        }
	        var $i_01 = $36;
	        var $lastsen_02 = $22;
	      }
	    } else {
	      _memset($6, -1, $13, 4);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _ptm_mgau_codebook_eval($s, $z, $frame) {
	  var $35$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($s + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $4 = HEAP32[$2 + 16 >> 2];
	  var $5 = ($4 | 0) > 0;
	  $_$14 : do {
	    if ($5) {
	      var $i_024 = 0;
	      var $6 = $2;
	      while (1) {
	        var $6;
	        var $i_024;
	        var $9 = (HEAP32[$6 + 20 >> 2] | 0) > 0;
	        $_$17 : do {
	          if ($9) {
	            var $j_021 = 0;
	            while (1) {
	              var $j_021;
	              var $11 = HEAP32[$z + ($j_021 << 2) >> 2];
	              _eval_topn($s, $i_024, $j_021, $11);
	              var $12 = $j_021 + 1 | 0;
	              var $13 = HEAP32[$1$s2];
	              if (($12 | 0) >= (HEAP32[$13 + 20 >> 2] | 0)) {
	                var $17 = $13;
	                break $_$17;
	              }
	              var $j_021 = $12;
	            }
	          } else {
	            var $17 = $6;
	          }
	        } while (0);
	        var $17;
	        var $18 = $i_024 + 1 | 0;
	        var $20 = HEAP32[$17 + 16 >> 2];
	        if (($18 | 0) >= ($20 | 0)) {
	          var $23 = $17;
	          var $22 = $20;
	          break $_$14;
	        }
	        var $i_024 = $18;
	        var $6 = $17;
	      }
	    } else {
	      var $23 = $2;
	      var $22 = $4;
	    }
	  } while (0);
	  var $22;
	  var $23;
	  var $28 = ($frame % (HEAP16[$s + 38 >> 1] << 16 >> 16) | 0) == 0;
	  $_$22 : do {
	    if ($28) {
	      var $29 = ($22 | 0) > 0;
	      $_$24 : do {
	        if ($29) {
	          var $30 = $s + 44 | 0;
	          var $i_118 = 0;
	          var $37 = $23;
	          while (1) {
	            var $37;
	            var $i_118;
	            var $47 = (HEAP32[HEAP32[HEAP32[$30 >> 2] + 4 >> 2] + ((($i_118 | 0) / 32 & -1) << 2) >> 2] & 1 << ($i_118 & 31) | 0) == 0;
	            $_$28 : do {
	              if ($47) {
	                var $58 = $37;
	              } else {
	                if ((HEAP32[$37 + 20 >> 2] | 0) <= 0) {
	                  var $58 = $37;
	                  break;
	                }
	                var $j_115 = 0;
	                while (1) {
	                  var $j_115;
	                  var $52 = HEAP32[$z + ($j_115 << 2) >> 2];
	                  _eval_cb($s, $i_118, $j_115, $52);
	                  var $53 = $j_115 + 1 | 0;
	                  var $54 = HEAP32[$1$s2];
	                  if (($53 | 0) >= (HEAP32[$54 + 20 >> 2] | 0)) {
	                    var $58 = $54;
	                    break $_$28;
	                  }
	                  var $j_115 = $53;
	                }
	              }
	            } while (0);
	            var $58;
	            var $59 = $i_118 + 1 | 0;
	            if (($59 | 0) >= (HEAP32[$58 + 16 >> 2] | 0)) {
	              var $31 = $58;
	              break $_$24;
	            }
	            var $i_118 = $59;
	            var $37 = $58;
	          }
	        } else {
	          var $31 = $23;
	        }
	      } while (0);
	      var $31;
	      if ((HEAP32[$31 + 20 >> 2] | 0) <= 0) {
	        break;
	      }
	      var $35$s2 = ($s + 44 | 0) >> 2;
	      var $36 = $s + 36 | 0;
	      var $j_212 = 0;
	      var $63 = $31;
	      while (1) {
	        var $63;
	        var $j_212;
	        var $65 = HEAP32[$63 + 16 >> 2];
	        var $66 = ($65 | 0) > 0;
	        do {
	          if ($66) {
	            var $67 = HEAP32[$35$s2];
	            var $69 = HEAP32[$67 + 4 >> 2];
	            var $70 = $67 | 0;
	            var $i_21 = 0;
	            var $norm_02 = 2147483647;
	            while (1) {
	              var $norm_02;
	              var $i_21;
	              if ((HEAP32[$69 + ((($i_21 | 0) / 32 & -1) << 2) >> 2] & 1 << ($i_21 & 31) | 0) == 0) {
	                var $norm_1 = $norm_02;
	              } else {
	                var $87 = HEAP32[HEAP32[HEAP32[HEAP32[$70 >> 2] + ($i_21 << 2) >> 2] + ($j_212 << 2) >> 2] + 4 >> 2] >> 10;
	                var $_norm_0 = ($norm_02 | 0) > ($87 | 0) ? $87 : $norm_02;
	                var $norm_1 = $_norm_0;
	              }
	              var $norm_1;
	              var $90 = $i_21 + 1 | 0;
	              if (($90 | 0) >= ($65 | 0)) {
	                break;
	              }
	              var $i_21 = $90;
	              var $norm_02 = $norm_1;
	            }
	            if (($norm_1 | 0) == 2147483647) {
	              __label__ = 21;
	              break;
	            }
	            var $94 = $63;
	            var $93 = $65;
	            var $norm_0_lcssa34 = $norm_1;
	            __label__ = 22;
	            break;
	          } else {
	            __label__ = 21;
	          }
	        } while (0);
	        if (__label__ == 21) {
	          ___assert_func(STRING_TABLE.__str1040 | 0, 275, STRING_TABLE.___func___ptm_mgau_codebook_eval | 0, STRING_TABLE.__str631103 | 0);
	          var $_pre = HEAP32[$1$s2];
	          var $94 = $_pre;
	          var $93 = HEAP32[$_pre + 16 >> 2];
	          var $norm_0_lcssa34 = 2147483647;
	        }
	        var $norm_0_lcssa34;
	        var $93;
	        var $94;
	        var $95 = ($93 | 0) > 0;
	        $_$48 : do {
	          if ($95) {
	            var $i_37 = 0;
	            var $96 = $94;
	            while (1) {
	              var $96;
	              var $i_37;
	              var $98 = HEAP32[$35$s2];
	              var $106 = (HEAP32[HEAP32[$98 + 4 >> 2] + ((($i_37 | 0) / 32 & -1) << 2) >> 2] & 1 << ($i_37 & 31) | 0) == 0;
	              do {
	                if ($106) {
	                  var $155 = $96;
	                } else {
	                  if (HEAP16[$36 >> 1] << 16 >> 16 <= 0) {
	                    var $155 = $96;
	                    break;
	                  }
	                  var $k_04 = 0;
	                  var $109 = $98;
	                  while (1) {
	                    var $109;
	                    var $k_04;
	                    var $116 = ($k_04 << 3) + HEAP32[HEAP32[HEAP32[$109 >> 2] + ($i_37 << 2) >> 2] + ($j_212 << 2) >> 2] + 4 | 0;
	                    var $118 = HEAP32[$116 >> 2] >> 10;
	                    HEAP32[$116 >> 2] = $118;
	                    var $126 = ($k_04 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$35$s2] >> 2] + ($i_37 << 2) >> 2] + ($j_212 << 2) >> 2] + 4 | 0;
	                    var $128 = HEAP32[$126 >> 2] - $norm_0_lcssa34 | 0;
	                    HEAP32[$126 >> 2] = $128;
	                    var $136 = ($k_04 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$35$s2] >> 2] + ($i_37 << 2) >> 2] + ($j_212 << 2) >> 2] + 4 | 0;
	                    var $138 = -HEAP32[$136 >> 2] | 0;
	                    HEAP32[$136 >> 2] = $138;
	                    var $146 = ($k_04 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$35$s2] >> 2] + ($i_37 << 2) >> 2] + ($j_212 << 2) >> 2] + 4 | 0;
	                    if ((HEAP32[$146 >> 2] | 0) > 96) {
	                      HEAP32[$146 >> 2] = 96;
	                    }
	                    var $151 = $k_04 + 1 | 0;
	                    if (($151 | 0) >= (HEAP16[$36 >> 1] << 16 >> 16 | 0)) {
	                      break;
	                    }
	                    var $k_04 = $151;
	                    var $109 = HEAP32[$35$s2];
	                  }
	                  var $155 = HEAP32[$1$s2];
	                }
	              } while (0);
	              var $155;
	              var $156 = $i_37 + 1 | 0;
	              if (($156 | 0) >= (HEAP32[$155 + 16 >> 2] | 0)) {
	                var $160 = $155;
	                break $_$48;
	              }
	              var $i_37 = $156;
	              var $96 = $155;
	            }
	          } else {
	            var $160 = $94;
	          }
	        } while (0);
	        var $160;
	        var $161 = $j_212 + 1 | 0;
	        if (($161 | 0) >= (HEAP32[$160 + 20 >> 2] | 0)) {
	          break $_$22;
	        }
	        var $j_212 = $161;
	        var $63 = $160;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ptm_mgau_codebook_eval["X"] = 1;

	function _ptm_mgau_senone_eval($s, $senone_scores, $senone_active, $n_senone_active, $compall) {
	  var $13$s1;
	  var $11$s2;
	  var $2$s2;
	  var __label__;
	  var $1 = $senone_scores;
	  var $2$s2 = ($s + 16 | 0) >> 2;
	  var $4 = HEAP32[$2$s2] << 1;
	  _memset($1, 0, $4, 2);
	  var $5 = ($compall | 0) != 0;
	  if ($5) {
	    var $_0 = HEAP32[$2$s2];
	  } else {
	    var $_0 = $n_senone_active;
	  }
	  var $_0;
	  var $9 = ($_0 | 0) > 0;
	  $_$67 : do {
	    if ($9) {
	      var $10 = $s + 20 | 0;
	      var $11$s2 = ($s + 44 | 0) >> 2;
	      var $12 = $s + 12 | 0;
	      var $13$s1 = ($s + 36 | 0) >> 1;
	      var $14 = $s + 32 | 0;
	      var $15 = $s + 24 | 0;
	      var $16 = $s + 52 | 0;
	      var $bestscore_019 = 2147483647;
	      var $lastsen_020 = 0;
	      var $i_021 = 0;
	      while (1) {
	        var $i_021;
	        var $lastsen_020;
	        var $bestscore_019;
	        if ($5) {
	          var $sen_0 = $i_021;
	        } else {
	          var $sen_0 = (HEAPU8[$senone_active + $i_021 | 0] & 255) + $lastsen_020 | 0;
	        }
	        var $sen_0;
	        var $29 = HEAPU8[HEAP32[$10 >> 2] + $sen_0 | 0] & 255;
	        var $39 = (HEAP32[HEAP32[HEAP32[$11$s2] + 4 >> 2] + ($29 >>> 5 << 2) >> 2] & 1 << ($29 & 31) | 0) == 0;
	        var $40 = HEAP32[$12 >> 2];
	        var $42 = HEAPU32[$40 + 20 >> 2];
	        $_$74 : do {
	          if ($39) {
	            if (($42 | 0) <= 0) {
	              var $ascore_0_lcssa = 0;
	              __label__ = 28;
	              break;
	            }
	            var $f_07 = 0;
	            var $45 = HEAP16[$13$s1];
	            var $44 = $40;
	            while (1) {
	              var $44;
	              var $45;
	              var $f_07;
	              if ($45 << 16 >> 16 > 0) {
	                var $j_03 = 0;
	                while (1) {
	                  var $j_03;
	                  var $54 = ($j_03 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$11$s2] >> 2] + ($29 << 2) >> 2] + ($f_07 << 2) >> 2] + 4 | 0;
	                  HEAP32[$54 >> 2] = 96;
	                  var $55 = $j_03 + 1 | 0;
	                  var $56 = HEAP16[$13$s1];
	                  if (($55 | 0) >= ($56 << 16 >> 16 | 0)) {
	                    break;
	                  }
	                  var $j_03 = $55;
	                }
	                var $61 = $56;
	                var $60 = HEAP32[$12 >> 2];
	              } else {
	                var $61 = $45;
	                var $60 = $44;
	              }
	              var $60;
	              var $61;
	              var $62 = $f_07 + 1 | 0;
	              var $64 = HEAP32[$60 + 20 >> 2];
	              if (($62 | 0) >= ($64 | 0)) {
	                var $66 = $64;
	                __label__ = 16;
	                break $_$74;
	              }
	              var $f_07 = $62;
	              var $45 = $61;
	              var $44 = $60;
	            }
	          } else {
	            var $66 = $42;
	            __label__ = 16;
	          }
	        } while (0);
	        $_$84 : do {
	          if (__label__ == 16) {
	            var $66;
	            if (($66 | 0) <= 0) {
	              var $ascore_0_lcssa = 0;
	              break;
	            }
	            var $72 = HEAP32[HEAP32[HEAP32[$11$s2] >> 2] + ($29 << 2) >> 2];
	            var $73 = HEAP16[$13$s1];
	            var $74 = $73 << 16 >> 16 > 0;
	            var $75 = ($sen_0 | 0) / 2 & -1;
	            var $76 = $73 << 16 >> 16;
	            var $ascore_014 = 0;
	            var $f_115 = 0;
	            while (1) {
	              var $f_115;
	              var $ascore_014;
	              var $79 = HEAPU32[$72 + ($f_115 << 2) >> 2];
	              $_$89 : do {
	                if ($74) {
	                  var $80 = HEAPU32[$14 >> 2];
	                  var $81 = ($80 | 0) == 0;
	                  var $84 = HEAP32[HEAP32[$15 >> 2] + ($f_115 << 2) >> 2];
	                  var $85 = $79 + 4 | 0;
	                  var $j1_08 = 0;
	                  var $fden_09 = 0;
	                  while (1) {
	                    var $fden_09;
	                    var $j1_08;
	                    var $90 = HEAPU32[$84 + (HEAP32[$79 + ($j1_08 << 3) >> 2] << 2) >> 2];
	                    if ($81) {
	                      var $mixw_0_in_in = $90 + $sen_0 | 0;
	                    } else {
	                      var $94 = HEAPU8[$90 + $75 | 0] & 255;
	                      var $99 = ($94 & 1 | 0) != 0 ? $94 >>> 4 : $94 & 15;
	                      var $mixw_0_in_in = $80 + $99 | 0;
	                    }
	                    var $mixw_0_in_in;
	                    var $mixw_0 = HEAPU8[$mixw_0_in_in] & 255;
	                    if (($j1_08 | 0) == 0) {
	                      var $fden_1 = HEAP32[$85 >> 2] + $mixw_0 | 0;
	                    } else {
	                      var $112 = HEAP32[$79 + ($j1_08 << 3) + 4 >> 2] + $mixw_0 | 0;
	                      var $_idx_val = HEAP32[HEAP32[$16 >> 2] >> 2];
	                      var $113 = _fast_logmath_add($_idx_val, $fden_09, $112);
	                      var $fden_1 = $113;
	                    }
	                    var $fden_1;
	                    var $115 = $j1_08 + 1 | 0;
	                    if (($115 | 0) >= ($76 | 0)) {
	                      var $fden_0_lcssa = $fden_1;
	                      break $_$89;
	                    }
	                    var $j1_08 = $115;
	                    var $fden_09 = $fden_1;
	                  }
	                } else {
	                  var $fden_0_lcssa = 0;
	                }
	              } while (0);
	              var $fden_0_lcssa;
	              var $117 = $fden_0_lcssa + $ascore_014 | 0;
	              var $118 = $f_115 + 1 | 0;
	              if (($118 | 0) >= ($66 | 0)) {
	                var $ascore_0_lcssa = $117;
	                break $_$84;
	              }
	              var $ascore_014 = $117;
	              var $f_115 = $118;
	            }
	          }
	        } while (0);
	        var $ascore_0_lcssa;
	        var $ascore_0_bestscore_0 = ($ascore_0_lcssa | 0) < ($bestscore_019 | 0) ? $ascore_0_lcssa : $bestscore_019;
	        HEAP16[$senone_scores + ($sen_0 << 1) >> 1] = $ascore_0_lcssa & 65535;
	        var $123 = $i_021 + 1 | 0;
	        if (($123 | 0) == ($_0 | 0)) {
	          var $bestscore_0_lcssa = $ascore_0_bestscore_0;
	          break $_$67;
	        }
	        var $bestscore_019 = $ascore_0_bestscore_0;
	        var $lastsen_020 = $sen_0;
	        var $i_021 = $123;
	      }
	    } else {
	      var $bestscore_0_lcssa = 2147483647;
	    }
	  } while (0);
	  var $bestscore_0_lcssa;
	  var $18 = (HEAP32[$2$s2] | 0) > 0;
	  $_$104 : do {
	    if ($18) {
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $124 = ($i_11 << 1) + $senone_scores | 0;
	        HEAP16[$124 >> 1] = (HEAPU16[$124 >> 1] & 65535) - $bestscore_0_lcssa & 65535;
	        var $129 = $i_11 + 1 | 0;
	        if (($129 | 0) >= (HEAP32[$2$s2] | 0)) {
	          break $_$104;
	        }
	        var $i_11 = $129;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ptm_mgau_senone_eval["X"] = 1;

	function _ptm_mgau_init($acmod, $mdef) {
	  var $167$s2;
	  var $163$s2;
	  var $139$s2;
	  var $135$s1;
	  var $57$s2;
	  var $35$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 60, STRING_TABLE.__str1040 | 0, 776);
	  var $2 = $1;
	  var $4 = HEAP32[$acmod >> 2];
	  var $6$s2 = ($1 + 8 | 0) >> 2;
	  HEAP32[$6$s2] = $4;
	  var $7 = $acmod + 4 | 0;
	  var $8 = HEAP32[$7 >> 2];
	  var $9 = _logmath_retain($8);
	  var $11 = $1 + 56 | 0;
	  HEAP32[$11 >> 2] = $9;
	  var $_idx11 = HEAP32[$7 >> 2] + 20 | 0;
	  var $_idx11_val = (tempDoubleI32[0] = HEAP32[$_idx11 >> 2], tempDoubleI32[1] = HEAP32[$_idx11 + 4 >> 2], tempDoubleF64[0]);
	  var $13 = _logmath_get_base($_idx11_val);
	  var $14 = _logmath_init($13, 10, 1);
	  var $16 = $1 + 52 | 0;
	  HEAP32[$16 >> 2] = $14;
	  var $17 = ($14 | 0) == 0;
	  $_$2 : do {
	    if ($17) {
	      __label__ = 40;
	    } else {
	      var $_idx12_val = HEAP8[$14 + 8 | 0];
	      var $19 = _logmath_get_width($_idx12_val);
	      if (($19 | 0) != 1) {
	        __E__pr_header(STRING_TABLE.__str1040 | 0, 786, STRING_TABLE.__str102579 | 0);
	        var $_idx10 = HEAP32[$16 >> 2] + 20 | 0;
	        var $_idx10_val = (tempDoubleI32[0] = HEAP32[$_idx10 >> 2], tempDoubleI32[1] = HEAP32[$_idx10 + 4 >> 2], tempDoubleF64[0]);
	        var $23 = _logmath_get_base($_idx10_val);
	        __E__pr_warn(STRING_TABLE.__str21108 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $23, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	        __label__ = 40;
	        break;
	      }
	      var $_idx9_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $26 = _cmd_ln_str_r($_idx9_val, STRING_TABLE.__str1192688 | 0);
	      var $_idx8_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $28 = _cmd_ln_str_r($_idx8_val, STRING_TABLE.__str1212690 | 0);
	      var $_idx5_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $30 = _cmd_ln_float_r($_idx5_val, STRING_TABLE.__str1232692 | 0);
	      var $31 = $30;
	      var $32 = HEAP32[$11 >> 2];
	      var $33 = _gauden_init($26, $28, $31, $32);
	      var $35$s2 = ($1 + 12 | 0) >> 2;
	      HEAP32[$35$s2] = $33;
	      if (($33 | 0) == 0) {
	        __label__ = 40;
	        break;
	      }
	      var $39 = HEAP32[$33 + 16 >> 2];
	      if (($39 | 0) > 256) {
	        __E__pr_info_header(STRING_TABLE.__str1040 | 0, 800);
	        var $44 = HEAP32[HEAP32[$35$s2] + 16 >> 2];
	        __E__pr_info(STRING_TABLE.__str71047 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $44, tempInt));
	        __label__ = 40;
	        break;
	      }
	      var $46 = $mdef + 4 | 0;
	      if (($39 | 0) != (HEAP32[$46 >> 2] | 0)) {
	        __E__pr_info_header(STRING_TABLE.__str1040 | 0, 804);
	        var $52 = HEAP32[HEAP32[$35$s2] + 16 >> 2];
	        var $53 = HEAP32[$46 >> 2];
	        __E__pr_info(STRING_TABLE.__str81048 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $52, HEAP32[tempInt + 4 >> 2] = $53, tempInt));
	        __label__ = 40;
	        break;
	      }
	      var $56 = HEAP32[$33 + 20 >> 2];
	      var $57$s2 = ($acmod + 16 | 0) >> 2;
	      var $58 = HEAP32[$57$s2];
	      var $60 = HEAP32[$58 + 24 >> 2];
	      if (($60 | 0) == 0) {
	        var $66 = HEAP32[$58 + 12 >> 2];
	      } else {
	        var $66 = $60;
	      }
	      var $66;
	      if (($56 | 0) == ($66 | 0)) {
	        var $68 = $33 + 28 | 0;
	        var $69 = $58 + 28 | 0;
	        var $70 = $58 + 16 | 0;
	        var $i_0 = 0;
	        while (1) {
	          var $i_0;
	          if (($i_0 | 0) >= ($56 | 0)) {
	            break;
	          }
	          var $84 = HEAP32[$69 >> 2];
	          if (($84 | 0) == 0) {
	            var $_pn = HEAP32[$70 >> 2];
	          } else {
	            var $_pn = $84;
	          }
	          var $_pn;
	          if ((HEAP32[HEAP32[$68 >> 2] + ($i_0 << 2) >> 2] | 0) == (HEAP32[$_pn + ($i_0 << 2) >> 2] | 0)) {
	            var $i_0 = $i_0 + 1 | 0;
	            continue;
	          }
	          __E__pr_header(STRING_TABLE.__str1040 | 0, 815, STRING_TABLE.__str102579 | 0);
	          var $97 = HEAP32[HEAP32[HEAP32[$35$s2] + 28 >> 2] + ($i_0 << 2) >> 2];
	          var $98 = HEAP32[$57$s2];
	          var $100 = HEAP32[$98 + 28 >> 2];
	          if (($100 | 0) == 0) {
	            var $_pn2 = HEAP32[$98 + 16 >> 2];
	          } else {
	            var $_pn2 = $100;
	          }
	          var $_pn2;
	          var $106 = HEAP32[$_pn2 + ($i_0 << 2) >> 2];
	          __E__pr_warn(STRING_TABLE.__str71113 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $97, HEAP32[tempInt + 4 >> 2] = $106, tempInt));
	          __label__ = 40;
	          break $_$2;
	        }
	        var $_idx7_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $109 = _cmd_ln_str_r($_idx7_val, STRING_TABLE.__str1332702 | 0);
	        if (($109 | 0) == 0) {
	          var $_idx6_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	          var $118 = _cmd_ln_str_r($_idx6_val, STRING_TABLE.__str1252694 | 0);
	          var $_idx4_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	          var $120 = _cmd_ln_float_r($_idx4_val, STRING_TABLE.__str1272696 | 0);
	          var $122 = $120;
	          var $123 = _read_mixw($2, $118, $122);
	          if (($123 | 0) < 0) {
	            __label__ = 40;
	            break;
	          }
	        } else {
	          var $_idx_val = HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2];
	          var $114 = _read_sendump($2, $_idx_val, $109);
	          if (($114 | 0) < 0) {
	            __label__ = 40;
	            break;
	          }
	        }
	        var $_idx3_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $127 = _cmd_ln_int_r($_idx3_val, STRING_TABLE.__str1392708 | 0);
	        HEAP16[$1 + 38 >> 1] = $127 & 65535;
	        var $_idx2_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $132 = _cmd_ln_int_r($_idx2_val, STRING_TABLE.__str1412710 | 0);
	        var $135$s1 = ($1 + 36 | 0) >> 1;
	        HEAP16[$135$s1] = $132 & 65535;
	        __E__pr_info_header(STRING_TABLE.__str1040 | 0, 834);
	        var $137 = HEAP16[$135$s1] << 16 >> 16;
	        __E__pr_info(STRING_TABLE.__str161056 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $137, tempInt));
	        var $139$s2 = ($1 + 16 | 0) >> 2;
	        var $140 = HEAP32[$139$s2];
	        var $141 = ___ckd_calloc__($140, 1, STRING_TABLE.__str1040 | 0, 838);
	        var $143 = $1 + 20 | 0;
	        HEAP32[$143 >> 2] = $141;
	        var $145 = (HEAP32[$139$s2] | 0) > 0;
	        $_$34 : do {
	          if ($145) {
	            var $146 = $acmod + 20 | 0;
	            var $i_113 = 0;
	            var $148 = $141;
	            while (1) {
	              var $148;
	              var $i_113;
	              HEAP8[$148 + $i_113 | 0] = HEAP16[HEAP32[HEAP32[$146 >> 2] + 72 >> 2] + ($i_113 << 1) >> 1] & 255;
	              var $156 = $i_113 + 1 | 0;
	              if (($156 | 0) >= (HEAP32[$139$s2] | 0)) {
	                break $_$34;
	              }
	              var $i_113 = $156;
	              var $148 = HEAP32[$143 >> 2];
	            }
	          }
	        } while (0);
	        var $_idx1_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $160 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str1732742 | 0);
	        var $161 = $160 + 2 | 0;
	        var $163$s2 = ($1 + 48 | 0) >> 2;
	        HEAP32[$163$s2] = $161;
	        var $164 = ___ckd_calloc__($161, 8, STRING_TABLE.__str1040 | 0, 846);
	        var $165 = $164;
	        var $167$s2 = ($1 + 40 | 0) >> 2;
	        HEAP32[$167$s2] = $165;
	        HEAP32[$1 + 44 >> 2] = $165;
	        var $171 = (HEAP32[$163$s2] | 0) > 0;
	        $_$40 : do {
	          if ($171) {
	            var $i_29 = 0;
	            while (1) {
	              var $i_29;
	              var $172 = HEAP32[$35$s2];
	              var $174 = HEAP32[$172 + 16 >> 2];
	              var $176 = HEAP32[$172 + 20 >> 2];
	              var $178 = HEAP16[$135$s1] << 16 >> 16;
	              var $179 = ___ckd_calloc_3d__($174, $176, $178, 8, STRING_TABLE.__str1040 | 0, 853);
	              var $180 = $179;
	              var $182 = ($i_29 << 3) + HEAP32[$167$s2] | 0;
	              HEAP32[$182 >> 2] = $180;
	              var $183 = HEAP32[$35$s2];
	              var $185 = HEAP32[$183 + 16 >> 2];
	              var $186 = ($185 | 0) > 0;
	              $_$43 : do {
	                if ($186) {
	                  var $j_07 = 0;
	                  var $187 = $183;
	                  while (1) {
	                    var $187;
	                    var $j_07;
	                    var $190 = (HEAP32[$187 + 20 >> 2] | 0) > 0;
	                    $_$46 : do {
	                      if ($190) {
	                        var $k_05 = 0;
	                        var $192 = HEAP16[$135$s1];
	                        var $191 = $187;
	                        while (1) {
	                          var $191;
	                          var $192;
	                          var $k_05;
	                          if ($192 << 16 >> 16 > 0) {
	                            var $m_03 = 0;
	                            while (1) {
	                              var $m_03;
	                              var $201 = ($m_03 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$167$s2] + ($i_29 << 3) >> 2] + ($j_07 << 2) >> 2] + ($k_05 << 2) >> 2] | 0;
	                              HEAP32[$201 >> 2] = $m_03;
	                              var $209 = ($m_03 << 3) + HEAP32[HEAP32[HEAP32[HEAP32[$167$s2] + ($i_29 << 3) >> 2] + ($j_07 << 2) >> 2] + ($k_05 << 2) >> 2] + 4 | 0;
	                              HEAP32[$209 >> 2] = -2147483648;
	                              var $210 = $m_03 + 1 | 0;
	                              var $211 = HEAP16[$135$s1];
	                              if (($210 | 0) >= ($211 << 16 >> 16 | 0)) {
	                                break;
	                              }
	                              var $m_03 = $210;
	                            }
	                            var $216 = $211;
	                            var $215 = HEAP32[$35$s2];
	                          } else {
	                            var $216 = $192;
	                            var $215 = $191;
	                          }
	                          var $215;
	                          var $216;
	                          var $217 = $k_05 + 1 | 0;
	                          if (($217 | 0) >= (HEAP32[$215 + 20 >> 2] | 0)) {
	                            var $221 = $215;
	                            break $_$46;
	                          }
	                          var $k_05 = $217;
	                          var $192 = $216;
	                          var $191 = $215;
	                        }
	                      } else {
	                        var $221 = $187;
	                      }
	                    } while (0);
	                    var $221;
	                    var $222 = $j_07 + 1 | 0;
	                    var $224 = HEAP32[$221 + 16 >> 2];
	                    if (($222 | 0) >= ($224 | 0)) {
	                      var $_lcssa = $224;
	                      break $_$43;
	                    }
	                    var $j_07 = $222;
	                    var $187 = $221;
	                  }
	                } else {
	                  var $_lcssa = $185;
	                }
	              } while (0);
	              var $_lcssa;
	              var $228 = ___ckd_calloc__(($_lcssa + 31 | 0) / 32 & -1, 4, STRING_TABLE.__str1040 | 0, 865);
	              var $231 = ($i_29 << 3) + HEAP32[$167$s2] + 4 | 0;
	              HEAP32[$231 >> 2] = $228;
	              var $235 = HEAP32[HEAP32[$167$s2] + ($i_29 << 3) + 4 >> 2];
	              var $241 = ((HEAP32[HEAP32[$35$s2] + 16 >> 2] + 31 | 0) / 32 & -1) << 2;
	              _memset($235, -1, $241, 4);
	              var $242 = $i_29 + 1 | 0;
	              if (($242 | 0) >= (HEAP32[$163$s2] | 0)) {
	                break $_$40;
	              }
	              var $i_29 = $242;
	            }
	          }
	        } while (0);
	        var $245 = $1;
	        HEAP32[$1 >> 2] = _ptm_mgau_funcs;
	        var $_0 = $245;
	        __label__ = 41;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str1040 | 0, 809, STRING_TABLE.__str102579 | 0);
	      var $74 = HEAP32[HEAP32[$35$s2] + 20 >> 2];
	      var $77 = HEAP32[HEAP32[$57$s2] + 92 >> 2];
	      __E__pr_warn(STRING_TABLE.__str61112 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $74, HEAP32[tempInt + 4 >> 2] = $77, tempInt));
	      __label__ = 40;
	      break;
	    }
	  } while (0);
	  if (__label__ == 40) {
	    var $248 = $1;
	    _ptm_mgau_free($248);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ptm_mgau_init["X"] = 1;

	function _read_sendump($s, $mdef_0_5_val, $file) {
	  var $7$s2;
	  var $1$s2;
	  var $c$s2;
	  var $r$s2;
	  var $n$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1012;
	  var $line = __stackBase__;
	  var $n = __stackBase__ + 1e3, $n$s2 = $n >> 2;
	  var $r = __stackBase__ + 1004, $r$s2 = $r >> 2;
	  var $c = __stackBase__ + 1008, $c$s2 = $c >> 2;
	  var $1$s2 = ($s + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $4 = HEAP32[$2 + 20 >> 2];
	  var $6 = HEAP32[$2 + 24 >> 2];
	  var $7$s2 = ($s + 16 | 0) >> 2;
	  HEAP32[$7$s2] = $mdef_0_5_val;
	  var $_idx_val = HEAP32[HEAP32[$s + 8 >> 2] + 4 >> 2];
	  var $10 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1372706 | 0);
	  var $11 = ($10 | 0) != 0;
	  var $12 = _fopen($file, STRING_TABLE.__str92578 | 0);
	  var $13 = ($12 | 0) == 0;
	  $_$63 : do {
	    if ($13) {
	      var $_0 = -1;
	    } else {
	      __E__pr_info_header(STRING_TABLE.__str1040 | 0, 472);
	      __E__pr_info(STRING_TABLE.__str391145 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	      var $15 = $n;
	      var $16 = _fread($15, 4, 1, $12);
	      var $17 = ($16 | 0) == 1;
	      $_$65 : do {
	        if ($17) {
	          var $20 = HEAPU32[$n$s2];
	          var $21 = ($20 - 1 | 0) >>> 0 > 998;
	          do {
	            if ($21) {
	              var $23 = _llvm_bswap_i32($20);
	              HEAP32[$n$s2] = $23;
	              if (($23 - 1 | 0) >>> 0 <= 998) {
	                var $do_swap_0 = 1;
	                var $27 = $23;
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str1040 | 0, 483, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str421148 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $23, HEAP32[tempInt + 4 >> 2] = $file, tempInt));
	              break $_$65;
	            }
	            var $do_swap_0 = 0;
	            var $27 = $20;
	          } while (0);
	          var $27;
	          var $do_swap_0;
	          var $28 = $line | 0;
	          var $29 = _fread($28, 1, $27, $12);
	          if (($29 | 0) == ($27 | 0)) {
	            if (HEAP8[$line + ($27 - 1) | 0] << 24 >> 24 == 0) {
	              __E__pr_info_header(STRING_TABLE.__str1040 | 0, 496);
	              __E__pr_info(STRING_TABLE.__str32302 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $28, tempInt));
	              var $39 = _fread($15, 4, 1, $12);
	              if (($39 | 0) == 1) {
	                var $43 = ($do_swap_0 | 0) != 0;
	                var $44 = HEAP32[$n$s2];
	                if ($43) {
	                  var $46 = _llvm_bswap_i32($44);
	                  HEAP32[$n$s2] = $46;
	                  var $47 = $46;
	                } else {
	                  var $47 = $44;
	                }
	                var $47;
	                var $48 = _fread($28, 1, $47, $12);
	                if (($48 | 0) == ($47 | 0)) {
	                  if (HEAP8[$line + ($47 - 1) | 0] << 24 >> 24 == 0) {
	                    var $56 = $line + 14 | 0;
	                    var $57 = $line + 12 | 0;
	                    var $58 = $line + 13 | 0;
	                    var $n_bits_0_ph = 8;
	                    var $n_sen_0_ph = $mdef_0_5_val;
	                    var $n_density_0_ph = $6;
	                    var $n_feat_0_ph = $4;
	                    var $n_clust_0_ph = 0;
	                    $_$89 : while (1) {
	                      var $n_clust_0_ph;
	                      var $n_feat_0_ph;
	                      var $n_density_0_ph;
	                      var $n_sen_0_ph;
	                      var $n_bits_0_ph;
	                      var $n_sen_0 = $n_sen_0_ph;
	                      var $n_density_0 = $n_density_0_ph;
	                      var $n_feat_0 = $n_feat_0_ph;
	                      var $n_clust_0 = $n_clust_0_ph;
	                      while (1) {
	                        var $n_clust_0;
	                        var $n_feat_0;
	                        var $n_density_0;
	                        var $n_sen_0;
	                        var $61 = _fread($15, 4, 1, $12);
	                        if (($61 | 0) != 1) {
	                          __E__pr_header(STRING_TABLE.__str1040 | 0, 516, STRING_TABLE.__str232533 | 0);
	                          __E__sys_error(STRING_TABLE.__str491155 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	                          break $_$65;
	                        }
	                        var $65 = HEAP32[$n$s2];
	                        if ($43) {
	                          var $67 = _llvm_bswap_i32($65);
	                          HEAP32[$n$s2] = $67;
	                          var $68 = $67;
	                        } else {
	                          var $68 = $65;
	                        }
	                        var $68;
	                        if (($68 | 0) == 0) {
	                          break $_$89;
	                        }
	                        var $71 = _fread($28, 1, $68, $12);
	                        if (($71 | 0) == ($68 | 0)) {
	                          var $75 = _strncmp($28, STRING_TABLE.__str501156 | 0, 14);
	                          if (($75 | 0) == 0) {
	                            var $78 = _atoi($56);
	                            var $n_feat_1 = $78;
	                          } else {
	                            var $n_feat_1 = $n_feat_0;
	                          }
	                          var $n_feat_1;
	                          var $80 = _strncmp($28, STRING_TABLE.__str511157 | 0, 14);
	                          if (($80 | 0) == 0) {
	                            var $83 = _atoi($56);
	                            var $n_density_1 = $83;
	                          } else {
	                            var $n_density_1 = $n_density_0;
	                          }
	                          var $n_density_1;
	                          var $85 = _strncmp($28, STRING_TABLE.__str521158 | 0, 12);
	                          if (($85 | 0) == 0) {
	                            var $88 = _atoi($57);
	                            var $n_sen_1 = $88;
	                          } else {
	                            var $n_sen_1 = $n_sen_0;
	                          }
	                          var $n_sen_1;
	                          var $90 = _strncmp($28, STRING_TABLE.__str531159 | 0, 14);
	                          if (($90 | 0) == 0) {
	                            var $93 = _atoi($56);
	                            var $n_clust_1 = $93;
	                          } else {
	                            var $n_clust_1 = $n_clust_0;
	                          }
	                          var $n_clust_1;
	                          var $95 = _strncmp($28, STRING_TABLE.__str541160 | 0, 13);
	                          if (($95 | 0) != 0) {
	                            var $n_sen_0 = $n_sen_1;
	                            var $n_density_0 = $n_density_1;
	                            var $n_feat_0 = $n_feat_1;
	                            var $n_clust_0 = $n_clust_1;
	                            continue;
	                          }
	                          var $98 = _atoi($58);
	                          var $n_bits_0_ph = $98;
	                          var $n_sen_0_ph = $n_sen_1;
	                          var $n_density_0_ph = $n_density_1;
	                          var $n_feat_0_ph = $n_feat_1;
	                          var $n_clust_0_ph = $n_clust_1;
	                          continue $_$89;
	                        }
	                        __E__pr_header(STRING_TABLE.__str1040 | 0, 523, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str471153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break $_$65;
	                      }
	                    }
	                    HEAP32[$c$s2] = $n_sen_0;
	                    HEAP32[$r$s2] = $n_density_0;
	                    if (($n_clust_0 | 0) == 0) {
	                      var $102 = $r;
	                      var $103 = _fread($102, 4, 1, $12);
	                      if (($103 | 0) != 1) {
	                        __E__pr_header(STRING_TABLE.__str1040 | 0, 550, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str551161 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break;
	                      }
	                      if ($43) {
	                        var $108 = HEAP32[$r$s2];
	                        var $109 = _llvm_bswap_i32($108);
	                        HEAP32[$r$s2] = $109;
	                      }
	                      var $111 = $c;
	                      var $112 = _fread($111, 4, 1, $12);
	                      if (($112 | 0) != 1) {
	                        __E__pr_header(STRING_TABLE.__str1040 | 0, 555, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str561162 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break;
	                      }
	                      var $116 = HEAP32[$c$s2];
	                      if ($43) {
	                        var $118 = _llvm_bswap_i32($116);
	                        HEAP32[$c$s2] = $118;
	                        var $119 = $118;
	                      } else {
	                        var $119 = $116;
	                      }
	                      var $119;
	                      __E__pr_info_header(STRING_TABLE.__str1040 | 0, 559);
	                      var $120 = HEAP32[$r$s2];
	                      __E__pr_info(STRING_TABLE.__str571163 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $120, HEAP32[tempInt + 4 >> 2] = $119, tempInt));
	                      var $123 = $119;
	                      var $122 = $120;
	                    } else {
	                      var $123 = $n_sen_0;
	                      var $122 = $n_density_0;
	                    }
	                    var $122;
	                    var $123;
	                    var $124 = HEAP32[$1$s2];
	                    if (($n_feat_0 | 0) == (HEAP32[$124 + 20 >> 2] | 0)) {
	                      if (($n_density_0 | 0) == (HEAP32[$124 + 24 >> 2] | 0)) {
	                        if (($n_sen_0 | 0) == (HEAP32[$7$s2] | 0)) {
	                          if (($n_clust_0 | 0) == 15) {
	                            var $n_clust_2 = 16;
	                          } else if (($n_clust_0 | 0) == 0 || ($n_clust_0 | 0) == 16) {
	                            var $n_clust_2 = $n_clust_0;
	                          } else {
	                            __E__pr_header(STRING_TABLE.__str1040 | 0, 579, STRING_TABLE.__str102579 | 0);
	                            __E__pr_warn(STRING_TABLE.__str611167 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                            break;
	                          }
	                          var $n_clust_2;
	                          var $149 = ($n_bits_0_ph | 0) == 4;
	                          if (($n_bits_0_ph | 0) == 8 || ($n_bits_0_ph | 0) == 4) {
	                            if ($11) {
	                              __E__pr_info_header(STRING_TABLE.__str1040 | 0, 591);
	                              __E__pr_info(STRING_TABLE.__str631169 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                            }
	                            var $154 = _ftell($12);
	                            var $155 = _fseek($12, 0, 2);
	                            var $156 = _ftell($12);
	                            var $157 = _fseek($12, $154, 0);
	                            do {
	                              if (!$11) {
	                                if (($n_clust_2 | 0) == 0) {
	                                  var $offset_0 = $154;
	                                  break;
	                                }
	                                var $170 = ___ckd_calloc__(1, $n_clust_2, STRING_TABLE.__str1040 | 0, 610);
	                                HEAP32[$s + 32 >> 2] = $170;
	                                var $172 = _fread($170, 1, $n_clust_2, $12);
	                                if (($172 | 0) == ($n_clust_2 | 0)) {
	                                  var $offset_0 = $154;
	                                  break;
	                                }
	                                __E__pr_header(STRING_TABLE.__str1040 | 0, 612, STRING_TABLE.__str102579 | 0);
	                                __E__pr_warn(STRING_TABLE.__str641170 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_clust_2, tempInt));
	                                break $_$65;
	                              }
	                              var $159 = _mmio_file_read($file);
	                              HEAP32[$s + 28 >> 2] = $159;
	                              if (($n_clust_2 | 0) == 0) {
	                                var $offset_0 = $154;
	                                break;
	                              }
	                              var $_idx2_val = HEAP32[$159 >> 2];
	                              var $163 = _mmio_file_ptr($_idx2_val);
	                              var $164 = $163 + $154 | 0;
	                              HEAP32[$s + 32 >> 2] = $164;
	                              var $offset_0 = $154 + $n_clust_2 | 0;
	                            } while (0);
	                            var $offset_0;
	                            var $175 = $s + 28 | 0;
	                            var $177 = (HEAP32[$175 >> 2] | 0) == 0;
	                            $_$158 : do {
	                              if ($177) {
	                                var $204 = ___ckd_calloc_3d__($n_feat_0, $n_density_0, $n_sen_0, 1, STRING_TABLE.__str1040 | 0, 632);
	                                var $206 = $s + 24 | 0;
	                                HEAP32[$206 >> 2] = $204;
	                                var $_46 = $149 ? ($123 + 1 | 0) / 2 & -1 : $123;
	                                var $storemerge = 0;
	                                $_$171 : while (1) {
	                                  var $storemerge;
	                                  if (($storemerge | 0) >= ($n_feat_0 | 0)) {
	                                    HEAP32[$n$s2] = $storemerge;
	                                    break $_$158;
	                                  }
	                                  var $i_1 = 0;
	                                  while (1) {
	                                    var $i_1;
	                                    if (($i_1 | 0) < ($122 | 0)) {
	                                      var $218 = HEAP32[HEAP32[HEAP32[$206 >> 2] + ($storemerge << 2) >> 2] + ($i_1 << 2) >> 2];
	                                      var $219 = _fread($218, 1, $_46, $12);
	                                      if (($219 | 0) == ($_46 | 0)) {
	                                        var $i_1 = $i_1 + 1 | 0;
	                                        continue;
	                                      }
	                                      HEAP32[$n$s2] = $storemerge;
	                                      __E__pr_header(STRING_TABLE.__str1040 | 0, 641, STRING_TABLE.__str102579 | 0);
	                                      __E__pr_warn(STRING_TABLE.__str641170 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_46, tempInt));
	                                      break $_$65;
	                                    }
	                                    var $storemerge = $storemerge + 1 | 0;
	                                    continue $_$171;
	                                  }
	                                }
	                              } else {
	                                var $179 = ___ckd_calloc_2d__($n_feat_0, $n_density_0, 4, STRING_TABLE.__str1040 | 0, 620);
	                                var $181 = $s + 24 | 0;
	                                HEAP32[$181 >> 2] = $179;
	                                HEAP32[$n$s2] = 0;
	                                if (($n_feat_0 | 0) <= 0) {
	                                  break;
	                                }
	                                var $185 = ($122 | 0) > 0;
	                                var $186 = ($n_feat_0 | 0) > 1;
	                                var $_ = $149 ? ($123 + 1 | 0) / 2 & -1 : $123;
	                                var $187 = $122 * $_ | 0;
	                                var $offset_13 = $offset_0;
	                                var $189 = 0;
	                                while (1) {
	                                  var $189;
	                                  var $offset_13;
	                                  if ($185) {
	                                    var $offset_21 = $offset_13;
	                                    var $i_02 = 0;
	                                    while (1) {
	                                      var $i_02;
	                                      var $offset_21;
	                                      var $_idx1_val = HEAP32[HEAP32[$175 >> 2] >> 2];
	                                      var $191 = _mmio_file_ptr($_idx1_val);
	                                      var $192 = $191 + $offset_21 | 0;
	                                      var $196 = ($i_02 << 2) + HEAP32[HEAP32[$181 >> 2] + ($189 << 2) >> 2] | 0;
	                                      HEAP32[$196 >> 2] = $192;
	                                      var $197 = $i_02 + 1 | 0;
	                                      if (($197 | 0) == ($122 | 0)) {
	                                        break;
	                                      }
	                                      var $offset_21 = $offset_21 + $_ | 0;
	                                      var $i_02 = $197;
	                                    }
	                                    var $offset_2_lcssa = $offset_13 + $187 | 0;
	                                  } else {
	                                    var $offset_2_lcssa = $offset_13;
	                                  }
	                                  var $offset_2_lcssa;
	                                  var $201 = $189 + 1 | 0;
	                                  if (($201 | 0) >= ($n_feat_0 | 0)) {
	                                    break;
	                                  }
	                                  var $offset_13 = $offset_2_lcssa;
	                                  var $189 = $201;
	                                }
	                                var $smax = $186 ? $n_feat_0 : 1;
	                                HEAP32[$n$s2] = $smax;
	                              }
	                            } while (0);
	                            var $225 = _fclose($12);
	                            var $_0 = 0;
	                            break $_$63;
	                          }
	                          __E__pr_header(STRING_TABLE.__str1040 | 0, 586, STRING_TABLE.__str102579 | 0);
	                          __E__pr_warn(STRING_TABLE.__str621168 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        } else {
	                          __E__pr_header(STRING_TABLE.__str1040 | 0, 573, STRING_TABLE.__str102579 | 0);
	                          var $144 = HEAP32[$7$s2];
	                          __E__pr_warn(STRING_TABLE.__str601166 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_sen_0, HEAP32[tempInt + 4 >> 2] = $144, tempInt));
	                        }
	                      } else {
	                        __E__pr_header(STRING_TABLE.__str1040 | 0, 568, STRING_TABLE.__str102579 | 0);
	                        var $139 = HEAP32[HEAP32[$1$s2] + 24 >> 2];
	                        __E__pr_warn(STRING_TABLE.__str591165 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_density_0, HEAP32[tempInt + 4 >> 2] = $139, tempInt));
	                      }
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str1040 | 0, 563, STRING_TABLE.__str102579 | 0);
	                      var $131 = HEAP32[HEAP32[$1$s2] + 20 >> 2];
	                      __E__pr_warn(STRING_TABLE.__str581164 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_feat_0, HEAP32[tempInt + 4 >> 2] = $131, tempInt));
	                    }
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str1040 | 0, 509, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str481154 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  }
	                } else {
	                  __E__pr_header(STRING_TABLE.__str1040 | 0, 505, STRING_TABLE.__str232533 | 0);
	                  __E__sys_error(STRING_TABLE.__str471153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                }
	              } else {
	                __E__pr_header(STRING_TABLE.__str1040 | 0, 500, STRING_TABLE.__str232533 | 0);
	                __E__sys_error(STRING_TABLE.__str461152 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str1040 | 0, 493, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str441150 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str1040 | 0, 489, STRING_TABLE.__str232533 | 0);
	            __E__sys_error(STRING_TABLE.__str431149 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          }
	        } else {
	          __E__pr_header(STRING_TABLE.__str1040 | 0, 475, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str411147 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	        }
	      } while (0);
	      var $227 = _fclose($12);
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_read_sendump["X"] = 1;

	function _fast_logmath_add($lmath_0_0_0_val, $mlx, $mly) {
	  var $1 = ($mlx | 0) > ($mly | 0);
	  var $d_0 = $1 ? $mlx - $mly | 0 : $mly - $mlx | 0;
	  var $r_0 = $1 ? $mly : $mlx;
	  return $r_0 - (HEAPU8[$lmath_0_0_0_val + $d_0 | 0] & 255) | 0;
	  return null;
	}

	function _insertion_sort_cb($cur, $worst, $best, $cw, $intd) {
	  var $worst_pn = $worst;
	  while (1) {
	    var $worst_pn;
	    var $storemerge = $worst_pn - 8 | 0;
	    HEAP32[$cur >> 2] = $storemerge;
	    if ($storemerge >>> 0 < $best >>> 0) {
	      break;
	    }
	    if ((HEAP32[$worst_pn - 8 + 4 >> 2] | 0) > ($intd | 0)) {
	      break;
	    }
	    var $8 = $storemerge;
	    var $9 = $worst_pn;
	    var $10$0 = HEAP32[$8 >> 2];
	    var $10$1 = HEAP32[$8 + 4 >> 2];
	    HEAP32[$9 >> 2] = $10$0;
	    HEAP32[$9 + 4 >> 2] = $10$1;
	    var $worst_pn = HEAP32[$cur >> 2];
	  }
	  HEAP32[$cur >> 2] = $worst_pn;
	  HEAP32[$worst_pn >> 2] = $cw;
	  var $14 = HEAP32[$cur >> 2] + 4 | 0;
	  HEAP32[$14 >> 2] = $intd;
	  return;
	  return;
	}

	function _insertion_sort_topn($topn, $i, $d) {
	  HEAP32[$topn + ($i << 3) + 4 >> 2] = $d;
	  if (($i | 0) != 0) {
	    var $tmp3 = HEAP32[$topn + ($i << 3) >> 2];
	    var $j_0_in = $i;
	    while (1) {
	      var $j_0_in;
	      var $j_0 = $j_0_in - 1 | 0;
	      if (($j_0_in | 0) <= 0) {
	        var $17 = ($j_0_in << 3) + $topn | 0;
	        break;
	      }
	      var $11 = ($j_0_in << 3) + $topn | 0;
	      if ((HEAP32[$topn + ($j_0 << 3) + 4 >> 2] | 0) >= ($d | 0)) {
	        var $17 = $11;
	        break;
	      }
	      var $14 = ($j_0 << 3) + $topn | 0;
	      var $15 = $11;
	      var $16$0 = HEAP32[$14 >> 2];
	      var $16$1 = HEAP32[$14 + 4 >> 2];
	      HEAP32[$15 >> 2] = $16$0;
	      HEAP32[$15 + 4 >> 2] = $16$1;
	      var $j_0_in = $j_0;
	    }
	    var $17;
	    HEAP32[$17 >> 2] = $tmp3;
	    HEAP32[$topn + ($j_0_in << 3) + 4 >> 2] = $d;
	  }
	  return;
	  return;
	}

	function _mgau_norm($s, $feat) {
	  var $1$s2;
	  var $1$s2 = ($s + 68 | 0) >> 2;
	  var $7 = HEAP32[HEAP32[HEAP32[$1$s2] + ($feat << 2) >> 2] >> 2] >> 10;
	  var $8 = $s + 56 | 0;
	  var $9 = $s + 52 | 0;
	  var $j_0 = 0;
	  while (1) {
	    var $j_0;
	    if (($j_0 | 0) >= (HEAP16[$8 >> 1] << 16 >> 16 | 0)) {
	      break;
	    }
	    var $18 = ($j_0 << 3) + HEAP32[HEAP32[$1$s2] + ($feat << 2) >> 2] | 0;
	    var $21 = $7 - (HEAP32[$18 >> 2] >> 10) | 0;
	    HEAP32[$18 >> 2] = $21;
	    var $25 = ($j_0 << 3) + HEAP32[HEAP32[$1$s2] + ($feat << 2) >> 2] | 0;
	    if ((HEAP32[$25 >> 2] | 0) > 96) {
	      HEAP32[$25 >> 2] = 96;
	    }
	    var $32 = HEAPU8[HEAP32[$9 >> 2] + $feat | 0];
	    if ($32 << 24 >> 24 != 0) {
	      if ((HEAP32[HEAP32[HEAP32[$1$s2] + ($feat << 2) >> 2] + ($j_0 << 3) >> 2] | 0) > ($32 & 255 | 0)) {
	        break;
	      }
	    }
	    var $j_0 = $j_0 + 1 | 0;
	  }
	  return $j_0;
	  return null;
	}

	function _ptm_mgau_free($ps) {
	  var $ps$s2 = $ps >> 2;
	  var $3 = HEAP32[$ps$s2 + 14];
	  _logmath_free($3);
	  var $6 = HEAP32[$ps$s2 + 13];
	  _logmath_free($6);
	  var $8 = $ps + 28 | 0;
	  var $14 = HEAP32[$ps$s2 + 6];
	  if ((HEAP32[$8 >> 2] | 0) == 0) {
	    _ckd_free_3d($14);
	  } else {
	    _ckd_free_2d($14);
	    var $16 = HEAP32[$8 >> 2];
	    _mmio_file_unmap($16);
	  }
	  var $21 = HEAP32[$ps$s2 + 5];
	  _ckd_free($21);
	  var $24 = HEAP32[$ps$s2 + 3];
	  _gauden_free($24);
	  var $25 = $ps;
	  _ckd_free($25);
	  return;
	  return;
	}

	function _ptm_mgau_mllr_transform($ps, $mllr) {
	  var $3 = HEAP32[$ps + 12 >> 2];
	  var $6 = HEAP32[$ps + 8 >> 2];
	  _gauden_mllr_transform($3, $mllr, $6);
	  return 0;
	  return null;
	}

	function _eval_topn($s, $cb, $feat, $z) {
	  var $obs_113$s2;
	  var $var_111$s2;
	  var $mean_110$s2;
	  var $21$s2;
	  var $8 = HEAP32[HEAP32[HEAP32[HEAP32[$s + 44 >> 2] >> 2] + ($cb << 2) >> 2] + ($feat << 2) >> 2];
	  var $9 = $s + 12 | 0;
	  var $10 = HEAP32[$9 >> 2];
	  var $14 = HEAP32[HEAP32[$10 + 28 >> 2] + ($feat << 2) >> 2];
	  var $15 = $s + 36 | 0;
	  var $17 = HEAP16[$15 >> 1] << 16 >> 16 > 0;
	  $_$62 : do {
	    if ($17) {
	      var $18 = ($14 | 0) % 4;
	      var $19 = ($18 | 0) > 0;
	      var $scevgep28 = ($18 << 2) + $z | 0;
	      var $i_017 = 0;
	      var $21 = $10, $21$s2 = $21 >> 2;
	      while (1) {
	        var $21;
	        var $i_017;
	        var $23 = HEAP32[$8 + ($i_017 << 3) >> 2];
	        var $30 = HEAP32[HEAP32[HEAP32[HEAP32[$21$s2] + ($cb << 2) >> 2] + ($feat << 2) >> 2] >> 2];
	        var $31 = $23 * $14 | 0;
	        var $32 = ($31 << 2) + $30 | 0;
	        var $39 = HEAP32[HEAP32[HEAP32[HEAP32[$21$s2 + 1] + ($cb << 2) >> 2] + ($feat << 2) >> 2] >> 2];
	        var $40 = ($31 << 2) + $39 | 0;
	        var $48 = HEAPF32[HEAP32[HEAP32[HEAP32[$21$s2 + 2] + ($cb << 2) >> 2] + ($feat << 2) >> 2] + ($23 << 2) >> 2];
	        if ($19) {
	          var $mean_01 = $32;
	          var $var_02 = $40;
	          var $d_03 = $48;
	          var $obs_04 = $z;
	          var $j_05 = 0;
	          while (1) {
	            var $j_05;
	            var $obs_04;
	            var $d_03;
	            var $var_02;
	            var $mean_01;
	            var $53 = HEAPF32[$obs_04 >> 2] - HEAPF32[$mean_01 >> 2];
	            var $57 = $d_03 - $53 * $53 * HEAPF32[$var_02 >> 2];
	            var $59 = $j_05 + 1 | 0;
	            if (($59 | 0) == ($18 | 0)) {
	              break;
	            }
	            var $mean_01 = $mean_01 + 4 | 0;
	            var $var_02 = $var_02 + 4 | 0;
	            var $d_03 = $57;
	            var $obs_04 = $obs_04 + 4 | 0;
	            var $j_05 = $59;
	          }
	          var $scevgep_sum = $18 + $31 | 0;
	          var $mean_0_lcssa = ($scevgep_sum << 2) + $30 | 0;
	          var $var_0_lcssa = ($scevgep_sum << 2) + $39 | 0;
	          var $d_0_lcssa = $57;
	          var $obs_0_lcssa = $scevgep28;
	          var $j_0_lcssa = $18;
	        } else {
	          var $mean_0_lcssa = $32;
	          var $var_0_lcssa = $40;
	          var $d_0_lcssa = $48;
	          var $obs_0_lcssa = $z;
	          var $j_0_lcssa = 0;
	        }
	        var $j_0_lcssa;
	        var $obs_0_lcssa;
	        var $d_0_lcssa;
	        var $var_0_lcssa;
	        var $mean_0_lcssa;
	        var $60 = ($j_0_lcssa | 0) < ($14 | 0);
	        $_$71 : do {
	          if ($60) {
	            var $mean_110 = $mean_0_lcssa, $mean_110$s2 = $mean_110 >> 2;
	            var $var_111 = $var_0_lcssa, $var_111$s2 = $var_111 >> 2;
	            var $d_112 = $d_0_lcssa;
	            var $obs_113 = $obs_0_lcssa, $obs_113$s2 = $obs_113 >> 2;
	            var $j_114 = $j_0_lcssa;
	            while (1) {
	              var $j_114;
	              var $obs_113;
	              var $d_112;
	              var $var_111;
	              var $mean_110;
	              var $63 = HEAPF32[$obs_113$s2] - HEAPF32[$mean_110$s2];
	              var $71 = HEAPF32[$obs_113$s2 + 1] - HEAPF32[$mean_110$s2 + 1];
	              var $80 = HEAPF32[$obs_113$s2 + 2] - HEAPF32[$mean_110$s2 + 2];
	              var $89 = HEAPF32[$obs_113$s2 + 3] - HEAPF32[$mean_110$s2 + 3];
	              var $97 = $d_112 - $63 * $63 * HEAPF32[$var_111$s2] - $71 * $71 * HEAPF32[$var_111$s2 + 1] - $80 * $80 * HEAPF32[$var_111$s2 + 2] - $89 * $89 * HEAPF32[$var_111$s2 + 3];
	              var $101 = $j_114 + 4 | 0;
	              if (($101 | 0) >= ($14 | 0)) {
	                var $d_1_lcssa = $97;
	                break $_$71;
	              }
	              var $mean_110 = $mean_110 + 16 | 0, $mean_110$s2 = $mean_110 >> 2;
	              var $var_111 = $var_111 + 16 | 0, $var_111$s2 = $var_111 >> 2;
	              var $d_112 = $97;
	              var $obs_113 = $obs_113 + 16 | 0, $obs_113$s2 = $obs_113 >> 2;
	              var $j_114 = $101;
	            }
	          } else {
	            var $d_1_lcssa = $d_0_lcssa;
	          }
	        } while (0);
	        var $d_1_lcssa;
	        _insertion_sort_topn($8, $i_017, $d_1_lcssa & -1);
	        var $104 = $i_017 + 1 | 0;
	        if (($104 | 0) >= (HEAP16[$15 >> 1] << 16 >> 16 | 0)) {
	          break $_$62;
	        }
	        var $i_017 = $104;
	        var $21 = HEAP32[$9 >> 2], $21$s2 = $21 >> 2;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_eval_topn["X"] = 1;

	function _eval_cb($s, $cb, $feat, $z) {
	  var $obs_117$s2;
	  var $var_215$s2;
	  var $mean_214$s2;
	  var $15$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $cur = __stackBase__;
	  var $8 = HEAPU32[HEAP32[HEAP32[HEAP32[$s + 44 >> 2] >> 2] + ($cb << 2) >> 2] + ($feat << 2) >> 2];
	  var $9 = $s + 36 | 0;
	  var $12 = (HEAP16[$9 >> 1] << 16 >> 16) - 1 | 0;
	  var $13 = ($12 << 3) + $8 | 0;
	  var $15$s2 = HEAP32[$s + 12 >> 2] >> 2;
	  var $21 = HEAP32[HEAP32[HEAP32[$15$s2 + 2] + ($cb << 2) >> 2] + ($feat << 2) >> 2];
	  var $23 = HEAP32[$15$s2 + 6];
	  var $24 = ($23 << 2) + $21 | 0;
	  var $28 = HEAPU32[HEAP32[$15$s2 + 7] + ($feat << 2) >> 2];
	  var $29 = ($23 | 0) > 0;
	  $_$78 : do {
	    if ($29) {
	      var $44 = ($12 << 3) + $8 + 4 | 0;
	      var $45 = $21;
	      var $46 = ($28 | 0) % 4;
	      var $47 = ($46 | 0) < 1;
	      var $mean_025 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2] + ($cb << 2) >> 2] + ($feat << 2) >> 2] >> 2];
	      var $var_026 = HEAP32[HEAP32[HEAP32[HEAP32[$15$s2 + 1] + ($cb << 2) >> 2] + ($feat << 2) >> 2] >> 2];
	      var $detP_027 = $21;
	      while (1) {
	        var $detP_027;
	        var $var_026;
	        var $mean_025;
	        var $48 = HEAPF32[$detP_027 >> 2];
	        var $50 = HEAP32[$44 >> 2] | 0;
	        var $53 = $detP_027 - $45 >> 2;
	        var $or_cond2 = $47 | $48 < $50;
	        $_$82 : do {
	          if ($or_cond2) {
	            var $mean_1_lcssa = $mean_025;
	            var $var_1_lcssa = $var_026;
	            var $d_0_lcssa = $48;
	            var $obs_0_lcssa = $z;
	            var $j_0_lcssa = 0;
	          } else {
	            var $mean_13 = $mean_025;
	            var $var_14 = $var_026;
	            var $d_05 = $48;
	            var $obs_06 = $z;
	            var $j_07 = 0;
	            while (1) {
	              var $j_07;
	              var $obs_06;
	              var $d_05;
	              var $var_14;
	              var $mean_13;
	              var $55 = $obs_06 + 4 | 0;
	              var $57 = $mean_13 + 4 | 0;
	              var $59 = HEAPF32[$obs_06 >> 2] - HEAPF32[$mean_13 >> 2];
	              var $61 = $var_14 + 4 | 0;
	              var $64 = $d_05 - $59 * $59 * HEAPF32[$var_14 >> 2];
	              var $65 = $j_07 + 1 | 0;
	              if (($65 | 0) >= ($46 | 0) | $64 < $50) {
	                var $mean_1_lcssa = $57;
	                var $var_1_lcssa = $61;
	                var $d_0_lcssa = $64;
	                var $obs_0_lcssa = $55;
	                var $j_0_lcssa = $65;
	                break $_$82;
	              }
	              var $mean_13 = $57;
	              var $var_14 = $61;
	              var $d_05 = $64;
	              var $obs_06 = $55;
	              var $j_07 = $65;
	            }
	          }
	        } while (0);
	        var $j_0_lcssa;
	        var $obs_0_lcssa;
	        var $d_0_lcssa;
	        var $var_1_lcssa;
	        var $mean_1_lcssa;
	        var $68 = ($j_0_lcssa | 0) < ($28 | 0);
	        var $or_cond113 = $d_0_lcssa < $50 | $68 ^ 1;
	        $_$86 : do {
	          if ($or_cond113) {
	            var $mean_2_lcssa = $mean_1_lcssa;
	            var $var_2_lcssa = $var_1_lcssa;
	            var $d_1_lcssa = $d_0_lcssa;
	            var $j_1_lcssa = $j_0_lcssa;
	            var $_lcssa = $68;
	          } else {
	            var $mean_214 = $mean_1_lcssa, $mean_214$s2 = $mean_214 >> 2;
	            var $var_215 = $var_1_lcssa, $var_215$s2 = $var_215 >> 2;
	            var $d_116 = $d_0_lcssa;
	            var $obs_117 = $obs_0_lcssa, $obs_117$s2 = $obs_117 >> 2;
	            var $j_118 = $j_0_lcssa;
	            while (1) {
	              var $j_118;
	              var $obs_117;
	              var $d_116;
	              var $var_215;
	              var $mean_214;
	              var $72 = HEAPF32[$obs_117$s2] - HEAPF32[$mean_214$s2];
	              var $80 = HEAPF32[$obs_117$s2 + 1] - HEAPF32[$mean_214$s2 + 1];
	              var $89 = HEAPF32[$obs_117$s2 + 2] - HEAPF32[$mean_214$s2 + 2];
	              var $98 = HEAPF32[$obs_117$s2 + 3] - HEAPF32[$mean_214$s2 + 3];
	              var $106 = $d_116 - $72 * $72 * HEAPF32[$var_215$s2] - $80 * $80 * HEAPF32[$var_215$s2 + 1] - $89 * $89 * HEAPF32[$var_215$s2 + 2] - $98 * $98 * HEAPF32[$var_215$s2 + 3];
	              var $107 = $var_215 + 16 | 0;
	              var $109 = $mean_214 + 16 | 0;
	              var $110 = $j_118 + 4 | 0;
	              var $111 = ($110 | 0) < ($28 | 0);
	              if ($106 < $50 | $111 ^ 1) {
	                var $mean_2_lcssa = $109;
	                var $var_2_lcssa = $107;
	                var $d_1_lcssa = $106;
	                var $j_1_lcssa = $110;
	                var $_lcssa = $111;
	                break $_$86;
	              }
	              var $mean_214 = $109, $mean_214$s2 = $mean_214 >> 2;
	              var $var_215 = $107, $var_215$s2 = $var_215 >> 2;
	              var $d_116 = $106;
	              var $obs_117 = $obs_117 + 16 | 0, $obs_117$s2 = $obs_117 >> 2;
	              var $j_118 = $110;
	            }
	          }
	        } while (0);
	        var $_lcssa;
	        var $j_1_lcssa;
	        var $d_1_lcssa;
	        var $var_2_lcssa;
	        var $mean_2_lcssa;
	        $_$90 : do {
	          if ($_lcssa) {
	            var $114 = $28 - $j_1_lcssa | 0;
	            var $var_3 = ($114 << 2) + $var_2_lcssa | 0;
	            var $mean_3 = ($114 << 2) + $mean_2_lcssa | 0;
	          } else {
	            if ($d_1_lcssa < $50) {
	              var $var_3 = $var_2_lcssa;
	              var $mean_3 = $mean_2_lcssa;
	              break;
	            }
	            var $120 = HEAP16[$9 >> 1] << 16 >> 16;
	            var $i_0 = 0;
	            while (1) {
	              var $i_0;
	              if (($i_0 | 0) >= ($120 | 0)) {
	                break;
	              }
	              if ((HEAP32[$8 + ($i_0 << 3) >> 2] | 0) == ($53 | 0)) {
	                var $var_3 = $var_2_lcssa;
	                var $mean_3 = $mean_2_lcssa;
	                break $_$90;
	              }
	              var $i_0 = $i_0 + 1 | 0;
	            }
	            _insertion_sort_cb($cur, $13, $8, $53, $d_1_lcssa & -1);
	            var $var_3 = $var_2_lcssa;
	            var $mean_3 = $mean_2_lcssa;
	          }
	        } while (0);
	        var $mean_3;
	        var $var_3;
	        var $130 = $detP_027 + 4 | 0;
	        if ($130 >>> 0 >= $24 >>> 0) {
	          break $_$78;
	        }
	        var $mean_025 = $mean_3;
	        var $var_026 = $var_3;
	        var $detP_027 = $130;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_eval_cb["X"] = 1;

	function _s2_semi_mgau_frame_eval($ps, $senone_scores, $senone_active, $n_senone_active, $featbuf, $frame, $compallsen) {
	  var $12$s2;
	  var $1 = $ps;
	  var $2 = $senone_scores;
	  var $6 = HEAP32[$ps + 48 >> 2] << 1;
	  _memset($2, 0, $6, 2);
	  var $8 = $ps + 72 | 0;
	  var $10 = ($frame | 0) % (HEAP32[$8 >> 2] | 0);
	  var $12$s2 = ($ps + 60 | 0) >> 2;
	  var $16 = $ps + 68 | 0;
	  var $17 = $16;
	  var $_c = HEAP32[HEAP32[$12$s2] + ($10 << 2) >> 2];
	  HEAP32[$16 >> 2] = $_c;
	  var $19 = $ps + 44 | 0;
	  var $21 = HEAP16[$19 >> 1] << 16 >> 16 > 0;
	  $_$118 : do {
	    if ($21) {
	      var $22 = $ps + 4 | 0;
	      var $24 = $ps + 36 | 0;
	      var $25 = ($compallsen | 0) != 0;
	      var $27 = $ps + 64 | 0;
	      var $28 = ($10 | 0) == 0;
	      var $30 = $ps + 56 | 0;
	      var $31 = $10 - 1 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        if ((HEAP32[$22 >> 2] | 0) <= ($frame | 0)) {
	          if ($28) {
	            var $lastf_0_in = (HEAP32[$8 >> 2] - 1 << 2) + HEAP32[$12$s2] | 0;
	          } else {
	            var $lastf_0_in = ($31 << 2) + HEAP32[$12$s2] | 0;
	          }
	          var $lastf_0_in;
	          var $48 = HEAP32[HEAP32[$17 >> 2] + ($i_01 << 2) >> 2];
	          var $51 = HEAP32[HEAP32[$lastf_0_in >> 2] + ($i_01 << 2) >> 2];
	          var $54 = HEAP16[$30 >> 1] << 16 >> 16 << 3;
	          _memcpy($48, $51, $54, 4);
	          var $56 = HEAP32[$featbuf + ($i_01 << 2) >> 2];
	          _mgau_dist($1, $frame, $i_01, $56);
	          var $57 = _mgau_norm($1, $i_01);
	          HEAP8[HEAP32[HEAP32[$27 >> 2] + ($10 << 2) >> 2] + $i_01 | 0] = $57 & 255;
	        }
	        var $71 = HEAPU8[HEAP32[HEAP32[$27 >> 2] + ($10 << 2) >> 2] + $i_01 | 0] & 255;
	        if ((HEAP32[$24 >> 2] | 0) == 0) {
	          if ($25) {
	            _get_scores_8b_feat_all($1, $i_01, $71, $senone_scores);
	          } else {
	            _get_scores_8b_feat($1, $i_01, $71, $senone_scores, $senone_active, $n_senone_active);
	          }
	        } else {
	          if ($25) {
	            _get_scores_4b_feat_all($1, $i_01, $71, $senone_scores);
	          } else {
	            _get_scores_4b_feat($1, $i_01, $71, $senone_scores, $senone_active, $n_senone_active);
	          }
	        }
	        var $79 = $i_01 + 1 | 0;
	        if (($79 | 0) >= (HEAP16[$19 >> 1] << 16 >> 16 | 0)) {
	          break $_$118;
	        }
	        var $i_01 = $79;
	      }
	    }
	  } while (0);
	  return 0;
	  return null;
	}

	_s2_semi_mgau_frame_eval["X"] = 1;

	function _mgau_dist($s, $frame, $feat, $z) {
	  _eval_topn1176($s, $feat, $z);
	  if (($frame % (HEAP16[$s + 58 >> 1] << 16 >> 16) | 0) == 0) {
	    _eval_cb1177($s, $feat, $z);
	  }
	  return;
	  return;
	}

	function _read_mixw($s, $file_name, $SmoothMin) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 36;
	  var $argname = __stackBase__;
	  var $argval = __stackBase__ + 4;
	  var $eofchk = __stackBase__ + 8;
	  var $byteswap = __stackBase__ + 12;
	  var $chksum = __stackBase__ + 16;
	  var $n = __stackBase__ + 20;
	  var $n_sen = __stackBase__ + 24;
	  var $n_feat = __stackBase__ + 28;
	  var $n_comp = __stackBase__ + 32;
	  __E__pr_info_header(STRING_TABLE.__str1040 | 0, 670);
	  __E__pr_info(STRING_TABLE.__str211127 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str1040 | 0, 673, STRING_TABLE.__str72422 | 0);
	    var $4 = ___errno();
	    var $5 = HEAP32[$4 >> 2];
	    var $6 = _strerror($5);
	    __E__die_error(STRING_TABLE.__str221062 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
	  } else {
	    var $8 = _bio_readhdr($1, $argname, $argval, $byteswap);
	    if (($8 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str1040 | 0, 677, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str161205 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      var $10 = HEAP32[$argname >> 2];
	      var $11 = HEAP32[$10 >> 2];
	      var $12 = ($11 | 0) == 0;
	      var $_pre = HEAP32[$argval >> 2];
	      $_$7 : do {
	        if ($12) {
	          var $i_0_lcssa = 0;
	          var $chksum_present_0_lcssa = 0;
	        } else {
	          var $i_06 = 0;
	          var $chksum_present_07 = 0;
	          var $14 = $11;
	          while (1) {
	            var $14;
	            var $chksum_present_07;
	            var $i_06;
	            var $15 = _strcmp($14, STRING_TABLE.__str82348 | 0);
	            var $16 = ($15 | 0) == 0;
	            do {
	              if ($16) {
	                var $18 = ($i_06 << 2) + $_pre | 0;
	                var $19 = HEAP32[$18 >> 2];
	                var $20 = _strcmp($19, STRING_TABLE.__str2392808 | 0);
	                if (($20 | 0) == 0) {
	                  var $chksum_present_1 = $chksum_present_07;
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str1040 | 0, 684, STRING_TABLE.__str212436 | 0);
	                var $23 = HEAP32[$18 >> 2];
	                __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str2392808 | 0, tempInt));
	                var $chksum_present_1 = $chksum_present_07;
	              } else {
	                var $25 = _strcmp($14, STRING_TABLE.__str92349 | 0);
	                var $_chksum_present_0 = ($25 | 0) == 0 ? 1 : $chksum_present_07;
	                var $chksum_present_1 = $_chksum_present_0;
	              }
	            } while (0);
	            var $chksum_present_1;
	            var $28 = $i_06 + 1 | 0;
	            var $30 = HEAP32[$10 + ($28 << 2) >> 2];
	            if (($30 | 0) == 0) {
	              var $i_0_lcssa = $28;
	              var $chksum_present_0_lcssa = $chksum_present_1;
	              break $_$7;
	            }
	            var $i_06 = $28;
	            var $chksum_present_07 = $chksum_present_1;
	            var $14 = $30;
	          }
	        }
	      } while (0);
	      var $chksum_present_0_lcssa;
	      var $i_0_lcssa;
	      _bio_hdrarg_free($10, $_pre);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $32 = $n_sen;
	      var $33 = HEAPU32[$byteswap >> 2];
	      var $34 = _bio_fread($32, 1, $1, $33, $chksum);
	      var $35 = ($34 | 0) == 1;
	      do {
	        if ($35) {
	          var $37 = $n_feat;
	          var $38 = _bio_fread($37, 1, $1, $33, $chksum);
	          if (($38 | 0) != 1) {
	            break;
	          }
	          var $41 = $n_comp;
	          var $42 = _bio_fread($41, 1, $1, $33, $chksum);
	          if (($42 | 0) != 1) {
	            break;
	          }
	          var $45 = $n;
	          var $46 = _bio_fread($45, 1, $1, $33, $chksum);
	          if (($46 | 0) != 1) {
	            break;
	          }
	          var $50 = HEAPU32[$n_feat >> 2];
	          var $51 = $s + 12 | 0;
	          var $52 = HEAP32[$51 >> 2];
	          var $53 = $52 + 20 | 0;
	          if (($50 | 0) == (HEAP32[$53 >> 2] | 0)) {
	            var $62 = HEAPU32[$n_sen >> 2];
	            var $63 = HEAPU32[$n_comp >> 2];
	            if ((HEAP32[$n >> 2] | 0) == ($62 * $50 * $63 | 0)) {
	              HEAP32[$s + 16 >> 2] = $62;
	              var $70 = HEAP32[$53 >> 2];
	              var $72 = HEAP32[$52 + 24 >> 2];
	              var $73 = ___ckd_calloc_3d__($70, $72, $62, 1, STRING_TABLE.__str1040 | 0, 720);
	              var $74 = $73;
	              var $75 = $s + 24 | 0;
	              HEAP32[$75 >> 2] = $74;
	              var $76 = ___ckd_calloc__($63, 4, STRING_TABLE.__str1040 | 0, 723);
	              var $77 = $76;
	              var $78 = ($63 | 0) > 0;
	              var $79 = $s + 52 | 0;
	              var $n_err_0 = 0;
	              var $i_1 = 0;
	              $_$27 : while (1) {
	                var $i_1;
	                var $n_err_0;
	                if (($i_1 | 0) < ($62 | 0)) {
	                  var $n_err_1 = $n_err_0;
	                  var $f_0 = 0;
	                  while (1) {
	                    var $f_0;
	                    var $n_err_1;
	                    if (($f_0 | 0) >= ($50 | 0)) {
	                      var $n_err_0 = $n_err_1;
	                      var $i_1 = $i_1 + 1 | 0;
	                      continue $_$27;
	                    }
	                    var $84 = _bio_fread($76, $63, $1, $33, $chksum);
	                    if (($84 | 0) == ($63 | 0)) {
	                      var $88 = _vector_sum_norm($77, $63);
	                      var $n_err_2 = ($88 <= 0 & 1) + $n_err_1 | 0;
	                      _vector_floor($77, $63, $SmoothMin);
	                      var $90 = _vector_sum_norm($77, $63);
	                      $_$37 : do {
	                        if ($78) {
	                          var $c_02 = 0;
	                          while (1) {
	                            var $c_02;
	                            var $91 = HEAP32[$79 >> 2];
	                            var $94 = HEAPF32[$77 + ($c_02 << 2) >> 2];
	                            var $95 = _logmath_log($91, $94);
	                            var $96 = -$95 | 0;
	                            var $100 = ($96 | 0) > 159 | ($95 | 0) > 0 ? -97 : $96 & 255;
	                            HEAP8[HEAP32[HEAP32[HEAP32[$75 >> 2] + ($f_0 << 2) >> 2] + ($c_02 << 2) >> 2] + $i_1 | 0] = $100;
	                            var $107 = $c_02 + 1 | 0;
	                            if (($107 | 0) == ($63 | 0)) {
	                              break $_$37;
	                            }
	                            var $c_02 = $107;
	                          }
	                        }
	                      } while (0);
	                      var $n_err_1 = $n_err_2;
	                      var $f_0 = $f_0 + 1 | 0;
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str1040 | 0, 731, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str341140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                    }
	                  }
	                } else {
	                  if (($n_err_0 | 0) > 0) {
	                    __E__pr_header(STRING_TABLE.__str1040 | 0, 752, STRING_TABLE.__str212436 | 0);
	                    __E__pr_warn(STRING_TABLE.__str351141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_err_0, tempInt));
	                  }
	                  _ckd_free($76);
	                  if (($chksum_present_0_lcssa | 0) != 0) {
	                    var $117 = HEAP32[$chksum >> 2];
	                    _bio_verify_chksum($1, $33, $117);
	                  }
	                  var $119 = _fread($eofchk, 1, 1, $1);
	                  if (($119 | 0) == 1) {
	                    __E__pr_header(STRING_TABLE.__str1040 | 0, 760, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str361142 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                  } else {
	                    var $123 = _fclose($1);
	                    __E__pr_info_header(STRING_TABLE.__str1040 | 0, 764);
	                    __E__pr_info(STRING_TABLE.__str371143 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $62, HEAP32[tempInt + 4 >> 2] = $50, HEAP32[tempInt + 8 >> 2] = $63, tempInt));
	                    STACKTOP = __stackBase__;
	                    return $62;
	                  }
	                }
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str1040 | 0, 708, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str331139 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $i_0_lcssa, HEAP32[tempInt + 8 >> 2] = $62, HEAP32[tempInt + 12 >> 2] = $50, HEAP32[tempInt + 16 >> 2] = $63, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str1040 | 0, 706, STRING_TABLE.__str72422 | 0);
	            var $59 = HEAP32[HEAP32[$51 >> 2] + 20 >> 2];
	            __E__die_error(STRING_TABLE.__str321138 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $50, HEAP32[tempInt + 4 >> 2] = $59, tempInt));
	          }
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str1040 | 0, 703, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str311137 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    }
	  }
	  return null;
	}

	_read_mixw["X"] = 1;

	function _get_scores_4b_feat_all($s, $i, $topn, $senone_scores) {
	  var $13$s2;
	  var $3 = HEAP32[$s + 48 >> 2] & -2;
	  var $4 = ($3 | 0) > 0;
	  $_$2 : do {
	    if ($4) {
	      var $5 = $s + 68 | 0;
	      var $6 = $s + 28 | 0;
	      var $7 = $s + 36 | 0;
	      var $8 = ($topn | 0) > 1;
	      var $9 = $s + 76 | 0;
	      var $j_06 = 0;
	      while (1) {
	        var $j_06;
	        var $13$s2 = HEAPU32[HEAP32[$5 >> 2] + ($i << 2) >> 2] >> 2;
	        var $18 = HEAPU32[HEAP32[$6 >> 2] + ($i << 2) >> 2];
	        var $21 = ($j_06 | 0) / 2 & -1;
	        var $24 = HEAPU8[HEAP32[$18 + (HEAP32[$13$s2 + 1] << 2) >> 2] + $21 | 0] & 255;
	        var $26 = HEAPU32[$7 >> 2];
	        var $31 = HEAPU32[$13$s2];
	        var $32 = (HEAPU8[$26 + ($24 & 15) | 0] & 255) + $31 | 0;
	        var $37 = (HEAPU8[$26 + ($24 >>> 4) | 0] & 255) + $31 | 0;
	        $_$6 : do {
	          if ($8) {
	            var $_idx1_val = HEAP32[HEAP32[$9 >> 2] >> 2];
	            var $tmp0_02 = $32;
	            var $tmp1_03 = $37;
	            var $k_04 = 1;
	            while (1) {
	              var $k_04;
	              var $tmp1_03;
	              var $tmp0_02;
	              var $46 = HEAPU8[HEAP32[$18 + (HEAP32[(($k_04 << 3) + 4 >> 2) + $13$s2] << 2) >> 2] + $21 | 0] & 255;
	              var $52 = HEAPU32[($k_04 << 3 >> 2) + $13$s2];
	              var $53 = (HEAPU8[$26 + ($46 & 15) | 0] & 255) + $52 | 0;
	              var $58 = (HEAPU8[$26 + ($46 >>> 4) | 0] & 255) + $52 | 0;
	              var $59 = _fast_logmath_add1175($_idx1_val, $tmp0_02, $53);
	              var $60 = _fast_logmath_add1175($_idx1_val, $tmp1_03, $58);
	              var $61 = $k_04 + 1 | 0;
	              if (($61 | 0) == ($topn | 0)) {
	                var $tmp0_0_lcssa = $59;
	                var $tmp1_0_lcssa = $60;
	                break $_$6;
	              }
	              var $tmp0_02 = $59;
	              var $tmp1_03 = $60;
	              var $k_04 = $61;
	            }
	          } else {
	            var $tmp0_0_lcssa = $32;
	            var $tmp1_0_lcssa = $37;
	          }
	        } while (0);
	        var $tmp1_0_lcssa;
	        var $tmp0_0_lcssa;
	        var $63 = ($j_06 << 1) + $senone_scores | 0;
	        HEAP16[$63 >> 1] = (HEAPU16[$63 >> 1] & 65535) + $tmp0_0_lcssa & 65535;
	        var $68 = $j_06 + 2 | 0;
	        var $69 = (($j_06 | 1) << 1) + $senone_scores | 0;
	        HEAP16[$69 >> 1] = (HEAPU16[$69 >> 1] & 65535) + $tmp1_0_lcssa & 65535;
	        if (($68 | 0) >= ($3 | 0)) {
	          break $_$2;
	        }
	        var $j_06 = $68;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_4b_feat_all["X"] = 1;

	function _get_scores_4b_feat($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active) {
	  if (($topn | 0) == 6) {
	    _get_scores_4b_feat_6($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 5) {
	    _get_scores_4b_feat_5($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 4) {
	    _get_scores_4b_feat_4($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 3) {
	    _get_scores_4b_feat_3($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 2) {
	    _get_scores_4b_feat_2($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 1) {
	    var $s_idx_val = HEAP32[$s + 28 >> 2];
	    var $s_idx1_val = HEAP32[$s + 36 >> 2];
	    var $s_idx2_val = HEAP32[$s + 68 >> 2];
	    _get_scores_4b_feat_1($s_idx_val, $s_idx1_val, $s_idx2_val, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else {
	    _get_scores_4b_feat_any($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active);
	  }
	  return;
	  return;
	}

	function _get_scores_8b_feat_all($s, $i, $topn, $senone_scores) {
	  var $11$s2;
	  var $1 = $s + 48 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  $_$23 : do {
	    if ($3) {
	      var $4 = $s + 68 | 0;
	      var $5 = $s + 28 | 0;
	      var $6 = ($topn | 0) > 1;
	      var $7 = $s + 76 | 0;
	      var $j_03 = 0;
	      while (1) {
	        var $j_03;
	        var $11$s2 = HEAPU32[HEAP32[$4 >> 2] + ($i << 2) >> 2] >> 2;
	        var $16 = HEAPU32[HEAP32[$5 >> 2] + ($i << 2) >> 2];
	        var $24 = (HEAPU8[HEAP32[$16 + (HEAP32[$11$s2 + 1] << 2) >> 2] + $j_03 | 0] & 255) + HEAP32[$11$s2] | 0;
	        $_$27 : do {
	          if ($6) {
	            var $_idx_val = HEAP32[HEAP32[$7 >> 2] >> 2];
	            var $k_01 = 1;
	            var $tmp_02 = $24;
	            while (1) {
	              var $tmp_02;
	              var $k_01;
	              var $36 = (HEAPU8[HEAP32[$16 + (HEAP32[(($k_01 << 3) + 4 >> 2) + $11$s2] << 2) >> 2] + $j_03 | 0] & 255) + HEAP32[($k_01 << 3 >> 2) + $11$s2] | 0;
	              var $37 = _fast_logmath_add1175($_idx_val, $tmp_02, $36);
	              var $38 = $k_01 + 1 | 0;
	              if (($38 | 0) == ($topn | 0)) {
	                var $tmp_0_lcssa = $37;
	                break $_$27;
	              }
	              var $k_01 = $38;
	              var $tmp_02 = $37;
	            }
	          } else {
	            var $tmp_0_lcssa = $24;
	          }
	        } while (0);
	        var $tmp_0_lcssa;
	        var $39 = ($j_03 << 1) + $senone_scores | 0;
	        HEAP16[$39 >> 1] = (HEAPU16[$39 >> 1] & 65535) + $tmp_0_lcssa & 65535;
	        var $44 = $j_03 + 1 | 0;
	        if (($44 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          break $_$23;
	        }
	        var $j_03 = $44;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_all["X"] = 1;

	function _get_scores_8b_feat($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active) {
	  if (($topn | 0) == 6) {
	    _get_scores_8b_feat_6($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 5) {
	    _get_scores_8b_feat_5($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 4) {
	    _get_scores_8b_feat_4($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 3) {
	    _get_scores_8b_feat_3($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 2) {
	    _get_scores_8b_feat_2($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else if (($topn | 0) == 1) {
	    _get_scores_8b_feat_1($s, $i, $senone_scores, $senone_active, $n_senone_active);
	  } else {
	    _get_scores_8b_feat_any($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active);
	  }
	  return;
	  return;
	}

	function _s2_semi_mgau_init($acmod) {
	  var $179$s2;
	  var $171$s2;
	  var $149$s1;
	  var $144$s2;
	  var $67$s2;
	  var $65$s1;
	  var $33$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 84, STRING_TABLE.__str1106 | 0, 1242);
	  var $2 = $1;
	  var $4 = HEAP32[$acmod >> 2];
	  var $6$s2 = ($1 + 8 | 0) >> 2;
	  HEAP32[$6$s2] = $4;
	  var $7 = $acmod + 4 | 0;
	  var $8 = HEAP32[$7 >> 2];
	  var $9 = _logmath_retain($8);
	  var $11 = $1 + 80 | 0;
	  HEAP32[$11 >> 2] = $9;
	  var $_idx12 = HEAP32[$7 >> 2] + 20 | 0;
	  var $_idx12_val = (tempDoubleI32[0] = HEAP32[$_idx12 >> 2], tempDoubleI32[1] = HEAP32[$_idx12 + 4 >> 2], tempDoubleF64[0]);
	  var $13 = _logmath_get_base($_idx12_val);
	  var $14 = _logmath_init($13, 10, 1);
	  var $16 = $1 + 76 | 0;
	  HEAP32[$16 >> 2] = $14;
	  var $17 = ($14 | 0) == 0;
	  $_$44 : do {
	    if ($17) {
	      __label__ = 35;
	    } else {
	      var $_idx13_val = HEAP8[$14 + 8 | 0];
	      var $19 = _logmath_get_width($_idx13_val);
	      if (($19 | 0) != 1) {
	        __E__pr_header(STRING_TABLE.__str1106 | 0, 1252, STRING_TABLE.__str102579 | 0);
	        var $_idx11 = HEAP32[$16 >> 2] + 20 | 0;
	        var $_idx11_val = (tempDoubleI32[0] = HEAP32[$_idx11 >> 2], tempDoubleI32[1] = HEAP32[$_idx11 + 4 >> 2], tempDoubleF64[0]);
	        var $23 = _logmath_get_base($_idx11_val);
	        __E__pr_warn(STRING_TABLE.__str21108 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $23, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	        __label__ = 35;
	        break;
	      }
	      var $_idx10_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $26 = _cmd_ln_str_r($_idx10_val, STRING_TABLE.__str1192688 | 0);
	      var $_idx9_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $28 = _cmd_ln_str_r($_idx9_val, STRING_TABLE.__str1212690 | 0);
	      var $_idx5_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	      var $30 = _cmd_ln_float_r($_idx5_val, STRING_TABLE.__str1232692 | 0);
	      var $31 = $30;
	      var $32 = HEAP32[$11 >> 2];
	      var $33 = _gauden_init($26, $28, $31, $32), $33$s2 = $33 >> 2;
	      HEAP32[$1 + 12 >> 2] = $33;
	      if (($33 | 0) == 0) {
	        __label__ = 35;
	        break;
	      }
	      if ((HEAP32[$33$s2 + 4] | 0) != 1) {
	        __label__ = 35;
	        break;
	      }
	      var $44 = HEAP32[HEAP32[$33$s2] >> 2];
	      HEAP32[$1 + 16 >> 2] = $44;
	      var $49 = HEAP32[HEAP32[$33$s2 + 1] >> 2];
	      HEAP32[$1 + 20 >> 2] = $49;
	      var $54 = HEAP32[HEAP32[$33$s2 + 2] >> 2];
	      HEAP32[$1 + 24 >> 2] = $54;
	      var $58 = HEAP32[$33$s2 + 7];
	      var $60 = $1 + 40 | 0;
	      HEAP32[$60 >> 2] = $58;
	      var $63 = HEAP32[$33$s2 + 5] & 65535;
	      var $65$s1 = ($1 + 44 | 0) >> 1;
	      HEAP16[$65$s1] = $63;
	      var $66 = $63 << 16 >> 16;
	      var $67$s2 = ($acmod + 16 | 0) >> 2;
	      var $68 = HEAP32[$67$s2];
	      var $70 = HEAP32[$68 + 24 >> 2];
	      if (($70 | 0) == 0) {
	        var $76 = HEAP32[$68 + 12 >> 2];
	      } else {
	        var $76 = $70;
	      }
	      var $76;
	      if (($66 | 0) == ($76 | 0)) {
	        var $78 = $68 + 28 | 0;
	        var $79 = $68 + 16 | 0;
	        var $i_0 = 0;
	        while (1) {
	          var $i_0;
	          if (($i_0 | 0) >= ($66 | 0)) {
	            break;
	          }
	          var $90 = HEAP32[$78 >> 2];
	          if (($90 | 0) == 0) {
	            var $_pn = HEAP32[$79 >> 2];
	          } else {
	            var $_pn = $90;
	          }
	          var $_pn;
	          if ((HEAP32[$58 + ($i_0 << 2) >> 2] | 0) == (HEAP32[$_pn + ($i_0 << 2) >> 2] | 0)) {
	            var $i_0 = $i_0 + 1 | 0;
	            continue;
	          }
	          __E__pr_header(STRING_TABLE.__str1106 | 0, 1280, STRING_TABLE.__str102579 | 0);
	          var $101 = HEAP32[HEAP32[$60 >> 2] + ($i_0 << 2) >> 2];
	          var $102 = HEAP32[$67$s2];
	          var $104 = HEAP32[$102 + 28 >> 2];
	          if (($104 | 0) == 0) {
	            var $_pn2 = HEAP32[$102 + 16 >> 2];
	          } else {
	            var $_pn2 = $104;
	          }
	          var $_pn2;
	          var $110 = HEAP32[$_pn2 + ($i_0 << 2) >> 2];
	          __E__pr_warn(STRING_TABLE.__str71113 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $101, HEAP32[tempInt + 4 >> 2] = $110, tempInt));
	          __label__ = 35;
	          break $_$44;
	        }
	        HEAP16[$1 + 46 >> 1] = HEAP32[$33$s2 + 6] & 65535;
	        var $_idx8_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $118 = _cmd_ln_str_r($_idx8_val, STRING_TABLE.__str1332702 | 0);
	        if (($118 | 0) == 0) {
	          var $_idx7_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	          var $127 = _cmd_ln_str_r($_idx7_val, STRING_TABLE.__str1252694 | 0);
	          var $_idx4_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	          var $129 = _cmd_ln_float_r($_idx4_val, STRING_TABLE.__str1272696 | 0);
	          var $131 = $129;
	          var $132 = _read_mixw1174($2, $127, $131);
	          if (($132 | 0) < 0) {
	            __label__ = 35;
	            break;
	          }
	        } else {
	          var $_idx_val = HEAP32[HEAP32[$acmod + 20 >> 2] + 20 >> 2];
	          var $123 = _read_sendump1173($2, $_idx_val, $118);
	          if (($123 | 0) < 0) {
	            __label__ = 35;
	            break;
	          }
	        }
	        var $_idx3_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $136 = _cmd_ln_int_r($_idx3_val, STRING_TABLE.__str1392708 | 0);
	        HEAP16[$1 + 58 >> 1] = $136 & 65535;
	        var $141 = HEAP16[$65$s1] << 16 >> 16;
	        var $142 = ___ckd_calloc__($141, 1, STRING_TABLE.__str1106 | 0, 1301);
	        var $144$s2 = ($1 + 52 | 0) >> 2;
	        HEAP32[$144$s2] = $142;
	        var $_idx2_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $146 = _cmd_ln_int_r($_idx2_val, STRING_TABLE.__str1412710 | 0);
	        var $149$s1 = ($1 + 56 | 0) >> 1;
	        HEAP16[$149$s1] = $146 & 65535;
	        var $_idx6_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $151 = _cmd_ln_str_r($_idx6_val, STRING_TABLE.__str1442713 | 0);
	        var $152 = HEAP32[$144$s2];
	        var $154 = HEAP16[$65$s1] << 16 >> 16;
	        _split_topn($151, $152, $154);
	        __E__pr_info_header(STRING_TABLE.__str1106 | 0, 1304);
	        var $156 = HEAP16[$149$s1] << 16 >> 16;
	        __E__pr_info(STRING_TABLE.__str151121 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $156, tempInt));
	        __E__pr_info(STRING_TABLE.__str161122 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $158 = HEAP16[$65$s1] << 16 >> 16 > 0;
	        $_$71 : do {
	          if ($158) {
	            var $i_19 = 0;
	            while (1) {
	              var $i_19;
	              var $162 = HEAPU8[HEAP32[$144$s2] + $i_19 | 0] & 255;
	              __E__pr_info(STRING_TABLE.__str551570 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $162, tempInt));
	              var $163 = $i_19 + 1 | 0;
	              if (($163 | 0) >= (HEAP16[$65$s1] << 16 >> 16 | 0)) {
	                break $_$71;
	              }
	              var $i_19 = $163;
	            }
	          }
	        } while (0);
	        __E__pr_info(STRING_TABLE.__str411556 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_idx1_val = HEAP32[HEAP32[$6$s2] + 4 >> 2];
	        var $168 = _cmd_ln_int_r($_idx1_val, STRING_TABLE.__str1732742 | 0);
	        var $169 = $168 + 2 | 0;
	        var $171$s2 = ($1 + 72 | 0) >> 2;
	        HEAP32[$171$s2] = $169;
	        var $173 = HEAP16[$65$s1] << 16 >> 16;
	        var $175 = HEAP16[$149$s1] << 16 >> 16;
	        var $176 = ___ckd_calloc_3d__($169, $173, $175, 8, STRING_TABLE.__str1106 | 0, 1315);
	        var $177 = $176;
	        var $179$s2 = ($1 + 60 | 0) >> 2;
	        HEAP32[$179$s2] = $177;
	        var $180 = HEAP32[$171$s2];
	        var $182 = HEAP16[$65$s1] << 16 >> 16;
	        var $183 = ___ckd_calloc_2d__($180, $182, 1, STRING_TABLE.__str1106 | 0, 1317);
	        var $184 = $183;
	        HEAP32[$1 + 64 >> 2] = $184;
	        var $187 = HEAP32[$171$s2];
	        var $188 = ($187 | 0) > 0;
	        $_$75 : do {
	          if ($188) {
	            var $i_27 = 0;
	            var $190 = HEAP16[$65$s1];
	            var $189 = $187;
	            while (1) {
	              var $189;
	              var $190;
	              var $i_27;
	              if ($190 << 16 >> 16 > 0) {
	                var $j_05 = 0;
	                var $193 = HEAP16[$149$s1];
	                var $192 = $190;
	                while (1) {
	                  var $192;
	                  var $193;
	                  var $j_05;
	                  if ($193 << 16 >> 16 > 0) {
	                    var $k_03 = 0;
	                    while (1) {
	                      var $k_03;
	                      var $200 = ($k_03 << 3) + HEAP32[HEAP32[HEAP32[$179$s2] + ($i_27 << 2) >> 2] + ($j_05 << 2) >> 2] | 0;
	                      HEAP32[$200 >> 2] = -2147483648;
	                      var $206 = ($k_03 << 3) + HEAP32[HEAP32[HEAP32[$179$s2] + ($i_27 << 2) >> 2] + ($j_05 << 2) >> 2] + 4 | 0;
	                      HEAP32[$206 >> 2] = $k_03;
	                      var $207 = $k_03 + 1 | 0;
	                      var $208 = HEAP16[$149$s1];
	                      if (($207 | 0) >= ($208 << 16 >> 16 | 0)) {
	                        break;
	                      }
	                      var $k_03 = $207;
	                    }
	                    var $213 = $208;
	                    var $212 = HEAP16[$65$s1];
	                  } else {
	                    var $213 = $193;
	                    var $212 = $192;
	                  }
	                  var $212;
	                  var $213;
	                  var $214 = $j_05 + 1 | 0;
	                  if (($214 | 0) >= ($212 << 16 >> 16 | 0)) {
	                    break;
	                  }
	                  var $j_05 = $214;
	                  var $193 = $213;
	                  var $192 = $212;
	                }
	                var $219 = $212;
	                var $218 = HEAP32[$171$s2];
	              } else {
	                var $219 = $190;
	                var $218 = $189;
	              }
	              var $218;
	              var $219;
	              var $220 = $i_27 + 1 | 0;
	              if (($220 | 0) >= ($218 | 0)) {
	                break $_$75;
	              }
	              var $i_27 = $220;
	              var $190 = $219;
	              var $189 = $218;
	            }
	          }
	        } while (0);
	        var $222 = $1;
	        HEAP32[$1 >> 2] = _s2_semi_mgau_funcs;
	        var $_0 = $222;
	        __label__ = 36;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str1106 | 0, 1274, STRING_TABLE.__str102579 | 0);
	      var $82 = HEAP16[$65$s1] << 16 >> 16;
	      var $85 = HEAP32[HEAP32[$67$s2] + 92 >> 2];
	      __E__pr_warn(STRING_TABLE.__str61112 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $82, HEAP32[tempInt + 4 >> 2] = $85, tempInt));
	      __label__ = 35;
	      break;
	    }
	  } while (0);
	  if (__label__ == 35) {
	    var $225 = $1;
	    _s2_semi_mgau_free($225);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_s2_semi_mgau_init["X"] = 1;

	function _read_sendump1173($s, $mdef_0_5_val, $file) {
	  var $7$s2;
	  var $4$s1;
	  var $1$s1;
	  var $c$s2;
	  var $r$s2;
	  var $n$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1012;
	  var $line = __stackBase__;
	  var $n = __stackBase__ + 1e3, $n$s2 = $n >> 2;
	  var $r = __stackBase__ + 1004, $r$s2 = $r >> 2;
	  var $c = __stackBase__ + 1008, $c$s2 = $c >> 2;
	  var $1$s1 = ($s + 44 | 0) >> 1;
	  var $3 = HEAP16[$1$s1] << 16 >> 16;
	  var $4$s1 = ($s + 46 | 0) >> 1;
	  var $6 = HEAP16[$4$s1] << 16 >> 16;
	  var $7$s2 = ($s + 48 | 0) >> 2;
	  HEAP32[$7$s2] = $mdef_0_5_val;
	  var $_idx_val = HEAP32[HEAP32[$s + 8 >> 2] + 4 >> 2];
	  var $10 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str1372706 | 0);
	  var $11 = ($10 | 0) != 0;
	  var $12 = _fopen($file, STRING_TABLE.__str92578 | 0);
	  var $13 = ($12 | 0) == 0;
	  $_$2 : do {
	    if ($13) {
	      var $_0 = -1;
	    } else {
	      __E__pr_info_header(STRING_TABLE.__str1106 | 0, 908);
	      __E__pr_info(STRING_TABLE.__str391145 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	      var $15 = $n;
	      var $16 = _fread($15, 4, 1, $12);
	      var $17 = ($16 | 0) == 1;
	      $_$4 : do {
	        if ($17) {
	          var $20 = HEAPU32[$n$s2];
	          var $21 = ($20 - 1 | 0) >>> 0 > 998;
	          do {
	            if ($21) {
	              var $23 = _llvm_bswap_i32($20);
	              HEAP32[$n$s2] = $23;
	              if (($23 - 1 | 0) >>> 0 <= 998) {
	                var $do_swap_0 = 1;
	                var $27 = $23;
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str1106 | 0, 919, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str421148 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $23, HEAP32[tempInt + 4 >> 2] = $file, tempInt));
	              break $_$4;
	            }
	            var $do_swap_0 = 0;
	            var $27 = $20;
	          } while (0);
	          var $27;
	          var $do_swap_0;
	          var $28 = $line | 0;
	          var $29 = _fread($28, 1, $27, $12);
	          if (($29 | 0) == ($27 | 0)) {
	            if (HEAP8[$line + ($27 - 1) | 0] << 24 >> 24 == 0) {
	              __E__pr_info_header(STRING_TABLE.__str1106 | 0, 932);
	              __E__pr_info(STRING_TABLE.__str32302 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $28, tempInt));
	              var $39 = _fread($15, 4, 1, $12);
	              if (($39 | 0) == 1) {
	                var $43 = ($do_swap_0 | 0) != 0;
	                var $44 = HEAP32[$n$s2];
	                if ($43) {
	                  var $46 = _llvm_bswap_i32($44);
	                  HEAP32[$n$s2] = $46;
	                  var $47 = $46;
	                } else {
	                  var $47 = $44;
	                }
	                var $47;
	                var $48 = _fread($28, 1, $47, $12);
	                if (($48 | 0) == ($47 | 0)) {
	                  if (HEAP8[$line + ($47 - 1) | 0] << 24 >> 24 == 0) {
	                    var $56 = $line + 14 | 0;
	                    var $57 = $line + 12 | 0;
	                    var $58 = $line + 13 | 0;
	                    var $n_bits_0_ph = 8;
	                    var $n_sen_0_ph = $mdef_0_5_val;
	                    var $n_density_0_ph = $6;
	                    var $n_feat_0_ph = $3;
	                    var $n_clust_0_ph = 0;
	                    $_$28 : while (1) {
	                      var $n_clust_0_ph;
	                      var $n_feat_0_ph;
	                      var $n_density_0_ph;
	                      var $n_sen_0_ph;
	                      var $n_bits_0_ph;
	                      var $n_sen_0 = $n_sen_0_ph;
	                      var $n_density_0 = $n_density_0_ph;
	                      var $n_feat_0 = $n_feat_0_ph;
	                      var $n_clust_0 = $n_clust_0_ph;
	                      while (1) {
	                        var $n_clust_0;
	                        var $n_feat_0;
	                        var $n_density_0;
	                        var $n_sen_0;
	                        var $61 = _fread($15, 4, 1, $12);
	                        if (($61 | 0) != 1) {
	                          __E__pr_header(STRING_TABLE.__str1106 | 0, 952, STRING_TABLE.__str232533 | 0);
	                          __E__sys_error(STRING_TABLE.__str491155 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	                          break $_$4;
	                        }
	                        var $65 = HEAP32[$n$s2];
	                        if ($43) {
	                          var $67 = _llvm_bswap_i32($65);
	                          HEAP32[$n$s2] = $67;
	                          var $68 = $67;
	                        } else {
	                          var $68 = $65;
	                        }
	                        var $68;
	                        if (($68 | 0) == 0) {
	                          break $_$28;
	                        }
	                        var $71 = _fread($28, 1, $68, $12);
	                        if (($71 | 0) == ($68 | 0)) {
	                          var $75 = _strncmp($28, STRING_TABLE.__str501156 | 0, 14);
	                          if (($75 | 0) == 0) {
	                            var $78 = _atoi($56);
	                            var $n_feat_1 = $78;
	                          } else {
	                            var $n_feat_1 = $n_feat_0;
	                          }
	                          var $n_feat_1;
	                          var $80 = _strncmp($28, STRING_TABLE.__str511157 | 0, 14);
	                          if (($80 | 0) == 0) {
	                            var $83 = _atoi($56);
	                            var $n_density_1 = $83;
	                          } else {
	                            var $n_density_1 = $n_density_0;
	                          }
	                          var $n_density_1;
	                          var $85 = _strncmp($28, STRING_TABLE.__str521158 | 0, 12);
	                          if (($85 | 0) == 0) {
	                            var $88 = _atoi($57);
	                            var $n_sen_1 = $88;
	                          } else {
	                            var $n_sen_1 = $n_sen_0;
	                          }
	                          var $n_sen_1;
	                          var $90 = _strncmp($28, STRING_TABLE.__str531159 | 0, 14);
	                          if (($90 | 0) == 0) {
	                            var $93 = _atoi($56);
	                            var $n_clust_1 = $93;
	                          } else {
	                            var $n_clust_1 = $n_clust_0;
	                          }
	                          var $n_clust_1;
	                          var $95 = _strncmp($28, STRING_TABLE.__str541160 | 0, 13);
	                          if (($95 | 0) != 0) {
	                            var $n_sen_0 = $n_sen_1;
	                            var $n_density_0 = $n_density_1;
	                            var $n_feat_0 = $n_feat_1;
	                            var $n_clust_0 = $n_clust_1;
	                            continue;
	                          }
	                          var $98 = _atoi($58);
	                          var $n_bits_0_ph = $98;
	                          var $n_sen_0_ph = $n_sen_1;
	                          var $n_density_0_ph = $n_density_1;
	                          var $n_feat_0_ph = $n_feat_1;
	                          var $n_clust_0_ph = $n_clust_1;
	                          continue $_$28;
	                        }
	                        __E__pr_header(STRING_TABLE.__str1106 | 0, 959, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str471153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break $_$4;
	                      }
	                    }
	                    HEAP32[$c$s2] = $n_sen_0;
	                    HEAP32[$r$s2] = $n_density_0;
	                    if (($n_clust_0 | 0) == 0) {
	                      var $102 = $r;
	                      var $103 = _fread($102, 4, 1, $12);
	                      if (($103 | 0) != 1) {
	                        __E__pr_header(STRING_TABLE.__str1106 | 0, 986, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str551161 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break;
	                      }
	                      if ($43) {
	                        var $108 = HEAP32[$r$s2];
	                        var $109 = _llvm_bswap_i32($108);
	                        HEAP32[$r$s2] = $109;
	                      }
	                      var $111 = $c;
	                      var $112 = _fread($111, 4, 1, $12);
	                      if (($112 | 0) != 1) {
	                        __E__pr_header(STRING_TABLE.__str1106 | 0, 991, STRING_TABLE.__str232533 | 0);
	                        __E__sys_error(STRING_TABLE.__str561162 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        break;
	                      }
	                      var $116 = HEAP32[$c$s2];
	                      if ($43) {
	                        var $118 = _llvm_bswap_i32($116);
	                        HEAP32[$c$s2] = $118;
	                        var $119 = $118;
	                      } else {
	                        var $119 = $116;
	                      }
	                      var $119;
	                      __E__pr_info_header(STRING_TABLE.__str1106 | 0, 995);
	                      var $120 = HEAP32[$r$s2];
	                      __E__pr_info(STRING_TABLE.__str571163 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $120, HEAP32[tempInt + 4 >> 2] = $119, tempInt));
	                      var $123 = $119;
	                      var $122 = $120;
	                    } else {
	                      var $123 = $n_sen_0;
	                      var $122 = $n_density_0;
	                    }
	                    var $122;
	                    var $123;
	                    if (($n_feat_0 | 0) == (HEAP16[$1$s1] << 16 >> 16 | 0)) {
	                      if (($n_density_0 | 0) == (HEAP16[$4$s1] << 16 >> 16 | 0)) {
	                        if (($n_sen_0 | 0) == (HEAP32[$7$s2] | 0)) {
	                          if (($n_clust_0 | 0) == 15) {
	                            var $n_clust_2 = 16;
	                          } else if (($n_clust_0 | 0) == 0 || ($n_clust_0 | 0) == 16) {
	                            var $n_clust_2 = $n_clust_0;
	                          } else {
	                            __E__pr_header(STRING_TABLE.__str1106 | 0, 1015, STRING_TABLE.__str102579 | 0);
	                            __E__pr_warn(STRING_TABLE.__str611167 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                            break;
	                          }
	                          var $n_clust_2;
	                          var $146 = ($n_bits_0_ph | 0) == 4;
	                          if (($n_bits_0_ph | 0) == 8 || ($n_bits_0_ph | 0) == 4) {
	                            if ($11) {
	                              __E__pr_info_header(STRING_TABLE.__str1106 | 0, 1027);
	                              __E__pr_info(STRING_TABLE.__str631169 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                            }
	                            var $151 = _ftell($12);
	                            var $152 = _fseek($12, 0, 2);
	                            var $153 = _ftell($12);
	                            var $154 = _fseek($12, $151, 0);
	                            do {
	                              if (!$11) {
	                                if (($n_clust_2 | 0) == 0) {
	                                  var $offset_0 = $151;
	                                  break;
	                                }
	                                var $167 = ___ckd_calloc__(1, $n_clust_2, STRING_TABLE.__str1106 | 0, 1046);
	                                HEAP32[$s + 36 >> 2] = $167;
	                                var $169 = _fread($167, 1, $n_clust_2, $12);
	                                if (($169 | 0) == ($n_clust_2 | 0)) {
	                                  var $offset_0 = $151;
	                                  break;
	                                }
	                                __E__pr_header(STRING_TABLE.__str1106 | 0, 1048, STRING_TABLE.__str102579 | 0);
	                                __E__pr_warn(STRING_TABLE.__str641170 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_clust_2, tempInt));
	                                break $_$4;
	                              }
	                              var $156 = _mmio_file_read($file);
	                              HEAP32[$s + 32 >> 2] = $156;
	                              if (($n_clust_2 | 0) == 0) {
	                                var $offset_0 = $151;
	                                break;
	                              }
	                              var $_idx2_val = HEAP32[$156 >> 2];
	                              var $160 = _mmio_file_ptr($_idx2_val);
	                              var $161 = $160 + $151 | 0;
	                              HEAP32[$s + 36 >> 2] = $161;
	                              var $offset_0 = $151 + $n_clust_2 | 0;
	                            } while (0);
	                            var $offset_0;
	                            var $172 = $s + 32 | 0;
	                            var $174 = (HEAP32[$172 >> 2] | 0) == 0;
	                            $_$97 : do {
	                              if ($174) {
	                                var $203 = ___ckd_calloc_3d__($n_feat_0, $n_density_0, $n_sen_0, 1, STRING_TABLE.__str1106 | 0, 1068);
	                                var $205 = $s + 28 | 0;
	                                HEAP32[$205 >> 2] = $203;
	                                var $_46 = $146 ? ($123 + 1 | 0) / 2 & -1 : $123;
	                                var $storemerge = 0;
	                                $_$110 : while (1) {
	                                  var $storemerge;
	                                  if (($storemerge | 0) >= ($n_feat_0 | 0)) {
	                                    HEAP32[$n$s2] = $storemerge;
	                                    break $_$97;
	                                  }
	                                  var $i_1 = 0;
	                                  while (1) {
	                                    var $i_1;
	                                    if (($i_1 | 0) < ($122 | 0)) {
	                                      var $217 = HEAP32[HEAP32[HEAP32[$205 >> 2] + ($storemerge << 2) >> 2] + ($i_1 << 2) >> 2];
	                                      var $218 = _fread($217, 1, $_46, $12);
	                                      if (($218 | 0) == ($_46 | 0)) {
	                                        var $i_1 = $i_1 + 1 | 0;
	                                        continue;
	                                      }
	                                      HEAP32[$n$s2] = $storemerge;
	                                      __E__pr_header(STRING_TABLE.__str1106 | 0, 1077, STRING_TABLE.__str102579 | 0);
	                                      __E__pr_warn(STRING_TABLE.__str641170 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_46, tempInt));
	                                      break $_$4;
	                                    }
	                                    var $storemerge = $storemerge + 1 | 0;
	                                    continue $_$110;
	                                  }
	                                }
	                              } else {
	                                var $177 = HEAP16[$1$s1] << 16 >> 16;
	                                var $178 = ___ckd_calloc_2d__($177, $n_density_0, 4, STRING_TABLE.__str1106 | 0, 1056);
	                                var $180 = $s + 28 | 0;
	                                HEAP32[$180 >> 2] = $178;
	                                HEAP32[$n$s2] = 0;
	                                if (($n_feat_0 | 0) <= 0) {
	                                  break;
	                                }
	                                var $184 = ($122 | 0) > 0;
	                                var $185 = ($n_feat_0 | 0) > 1;
	                                var $_ = $146 ? ($123 + 1 | 0) / 2 & -1 : $123;
	                                var $186 = $122 * $_ | 0;
	                                var $offset_13 = $offset_0;
	                                var $188 = 0;
	                                while (1) {
	                                  var $188;
	                                  var $offset_13;
	                                  if ($184) {
	                                    var $offset_21 = $offset_13;
	                                    var $i_02 = 0;
	                                    while (1) {
	                                      var $i_02;
	                                      var $offset_21;
	                                      var $_idx1_val = HEAP32[HEAP32[$172 >> 2] >> 2];
	                                      var $190 = _mmio_file_ptr($_idx1_val);
	                                      var $191 = $190 + $offset_21 | 0;
	                                      var $195 = ($i_02 << 2) + HEAP32[HEAP32[$180 >> 2] + ($188 << 2) >> 2] | 0;
	                                      HEAP32[$195 >> 2] = $191;
	                                      var $196 = $i_02 + 1 | 0;
	                                      if (($196 | 0) == ($122 | 0)) {
	                                        break;
	                                      }
	                                      var $offset_21 = $offset_21 + $_ | 0;
	                                      var $i_02 = $196;
	                                    }
	                                    var $offset_2_lcssa = $offset_13 + $186 | 0;
	                                  } else {
	                                    var $offset_2_lcssa = $offset_13;
	                                  }
	                                  var $offset_2_lcssa;
	                                  var $200 = $188 + 1 | 0;
	                                  if (($200 | 0) >= ($n_feat_0 | 0)) {
	                                    break;
	                                  }
	                                  var $offset_13 = $offset_2_lcssa;
	                                  var $188 = $200;
	                                }
	                                var $smax = $185 ? $n_feat_0 : 1;
	                                HEAP32[$n$s2] = $smax;
	                              }
	                            } while (0);
	                            var $224 = _fclose($12);
	                            var $_0 = 0;
	                            break $_$2;
	                          }
	                          __E__pr_header(STRING_TABLE.__str1106 | 0, 1022, STRING_TABLE.__str102579 | 0);
	                          __E__pr_warn(STRING_TABLE.__str621168 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        } else {
	                          __E__pr_header(STRING_TABLE.__str1106 | 0, 1009, STRING_TABLE.__str102579 | 0);
	                          var $141 = HEAP32[$7$s2];
	                          __E__pr_warn(STRING_TABLE.__str601166 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_sen_0, HEAP32[tempInt + 4 >> 2] = $141, tempInt));
	                        }
	                      } else {
	                        __E__pr_header(STRING_TABLE.__str1106 | 0, 1004, STRING_TABLE.__str102579 | 0);
	                        var $136 = HEAP16[$4$s1] << 16 >> 16;
	                        __E__pr_warn(STRING_TABLE.__str591165 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_density_0, HEAP32[tempInt + 4 >> 2] = $136, tempInt));
	                      }
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str1106 | 0, 999, STRING_TABLE.__str102579 | 0);
	                      var $129 = HEAP16[$1$s1] << 16 >> 16;
	                      __E__pr_warn(STRING_TABLE.__str581164 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_feat_0, HEAP32[tempInt + 4 >> 2] = $129, tempInt));
	                    }
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str1106 | 0, 945, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str481154 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  }
	                } else {
	                  __E__pr_header(STRING_TABLE.__str1106 | 0, 941, STRING_TABLE.__str232533 | 0);
	                  __E__sys_error(STRING_TABLE.__str471153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                }
	              } else {
	                __E__pr_header(STRING_TABLE.__str1106 | 0, 936, STRING_TABLE.__str232533 | 0);
	                __E__sys_error(STRING_TABLE.__str461152 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str1106 | 0, 929, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str441150 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str1106 | 0, 925, STRING_TABLE.__str232533 | 0);
	            __E__sys_error(STRING_TABLE.__str431149 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          }
	        } else {
	          __E__pr_header(STRING_TABLE.__str1106 | 0, 911, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str411147 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file, tempInt));
	        }
	      } while (0);
	      var $226 = _fclose($12);
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_read_sendump1173["X"] = 1;

	function _split_topn($str, $out, $nfeat) {
	  var $1 = ___ckd_salloc__($str, STRING_TABLE.__str1106 | 0, 1207);
	  var $maxn_0 = 0;
	  var $i_0 = 0;
	  var $c_0 = $1;
	  while (1) {
	    var $c_0;
	    var $i_0;
	    var $maxn_0;
	    if (($i_0 | 0) >= ($nfeat | 0)) {
	      var $maxn_3_ph = $maxn_0;
	      var $i_1_ph = $i_0;
	      break;
	    }
	    var $5 = _strchr($c_0, 44);
	    if (($5 | 0) == 0) {
	      if (HEAP8[$c_0] << 24 >> 24 == 0) {
	        var $maxn_3_ph = $maxn_0;
	        var $i_1_ph = $i_0;
	        break;
	      }
	      var $19 = _atoi($c_0);
	      HEAP8[$out + $i_0 | 0] = $19 & 255;
	      var $22 = $19 & 255;
	      var $_maxn_02 = ($22 | 0) > ($maxn_0 | 0) ? $22 : $maxn_0;
	      var $maxn_3_ph = $_maxn_02;
	      var $i_1_ph = $i_0 + 1 | 0;
	      break;
	    }
	    HEAP8[$5] = 0;
	    var $8 = _atoi($c_0);
	    HEAP8[$out + $i_0 | 0] = $8 & 255;
	    var $11 = $8 & 255;
	    var $_maxn_0 = ($11 | 0) > ($maxn_0 | 0) ? $11 : $maxn_0;
	    var $maxn_0 = $_maxn_0;
	    var $i_0 = $i_0 + 1 | 0;
	    var $c_0 = $5 + 1 | 0;
	  }
	  var $i_1_ph;
	  var $maxn_3_ph;
	  if (($i_1_ph | 0) < ($nfeat | 0)) {
	    var $scevgep = $out + $i_1_ph | 0;
	    var $27 = $nfeat - $i_1_ph | 0;
	    _memset($scevgep, $maxn_3_ph & 255, $27, 1);
	  }
	  _ckd_free($1);
	  return;
	  return;
	}

	function _s2_semi_mgau_free($ps) {
	  var $ps$s2 = $ps >> 2;
	  var $3 = HEAP32[$ps$s2 + 20];
	  _logmath_free($3);
	  var $6 = HEAP32[$ps$s2 + 19];
	  _logmath_free($6);
	  var $8 = $ps + 32 | 0;
	  var $14 = HEAP32[$ps$s2 + 7];
	  if ((HEAP32[$8 >> 2] | 0) == 0) {
	    _ckd_free_3d($14);
	  } else {
	    _ckd_free_2d($14);
	    var $16 = HEAP32[$8 >> 2];
	    _mmio_file_unmap($16);
	  }
	  var $21 = HEAP32[$ps$s2 + 3];
	  _gauden_free($21);
	  var $24 = HEAP32[$ps$s2 + 13];
	  _ckd_free($24);
	  var $28 = HEAP32[$ps$s2 + 16];
	  _ckd_free_2d($28);
	  var $32 = HEAP32[$ps$s2 + 15];
	  _ckd_free_3d($32);
	  var $33 = $ps;
	  _ckd_free($33);
	  return;
	  return;
	}

	function _s2_semi_mgau_mllr_transform($ps, $mllr) {
	  var $3 = HEAP32[$ps + 12 >> 2];
	  var $6 = HEAP32[$ps + 8 >> 2];
	  _gauden_mllr_transform($3, $mllr, $6);
	  return 0;
	  return null;
	}

	function _read_mixw1174($s, $file_name, $SmoothMin) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 36;
	  var $argname = __stackBase__;
	  var $argval = __stackBase__ + 4;
	  var $eofchk = __stackBase__ + 8;
	  var $byteswap = __stackBase__ + 12;
	  var $chksum = __stackBase__ + 16;
	  var $n = __stackBase__ + 20;
	  var $n_sen = __stackBase__ + 24;
	  var $n_feat = __stackBase__ + 28;
	  var $n_comp = __stackBase__ + 32;
	  __E__pr_info_header(STRING_TABLE.__str1106 | 0, 1106);
	  __E__pr_info(STRING_TABLE.__str211127 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str1106 | 0, 1109, STRING_TABLE.__str72422 | 0);
	    var $4 = ___errno();
	    var $5 = HEAP32[$4 >> 2];
	    var $6 = _strerror($5);
	    __E__die_error(STRING_TABLE.__str241130 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
	  } else {
	    var $8 = _bio_readhdr($1, $argname, $argval, $byteswap);
	    if (($8 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str1106 | 0, 1113, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str101199 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      var $10 = HEAP32[$argname >> 2];
	      var $11 = HEAP32[$10 >> 2];
	      var $12 = ($11 | 0) == 0;
	      var $_pre = HEAP32[$argval >> 2];
	      $_$130 : do {
	        if ($12) {
	          var $i_0_lcssa = 0;
	          var $chksum_present_0_lcssa = 0;
	        } else {
	          var $i_06 = 0;
	          var $chksum_present_07 = 0;
	          var $14 = $11;
	          while (1) {
	            var $14;
	            var $chksum_present_07;
	            var $i_06;
	            var $15 = _strcmp($14, STRING_TABLE.__str82348 | 0);
	            var $16 = ($15 | 0) == 0;
	            do {
	              if ($16) {
	                var $18 = ($i_06 << 2) + $_pre | 0;
	                var $19 = HEAP32[$18 >> 2];
	                var $20 = _strcmp($19, STRING_TABLE.__str2392808 | 0);
	                if (($20 | 0) == 0) {
	                  var $chksum_present_1 = $chksum_present_07;
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str1106 | 0, 1120, STRING_TABLE.__str212436 | 0);
	                var $23 = HEAP32[$18 >> 2];
	                __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str2392808 | 0, tempInt));
	                var $chksum_present_1 = $chksum_present_07;
	              } else {
	                var $25 = _strcmp($14, STRING_TABLE.__str92349 | 0);
	                var $_chksum_present_0 = ($25 | 0) == 0 ? 1 : $chksum_present_07;
	                var $chksum_present_1 = $_chksum_present_0;
	              }
	            } while (0);
	            var $chksum_present_1;
	            var $28 = $i_06 + 1 | 0;
	            var $30 = HEAP32[$10 + ($28 << 2) >> 2];
	            if (($30 | 0) == 0) {
	              var $i_0_lcssa = $28;
	              var $chksum_present_0_lcssa = $chksum_present_1;
	              break $_$130;
	            }
	            var $i_06 = $28;
	            var $chksum_present_07 = $chksum_present_1;
	            var $14 = $30;
	          }
	        }
	      } while (0);
	      var $chksum_present_0_lcssa;
	      var $i_0_lcssa;
	      _bio_hdrarg_free($10, $_pre);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $32 = $n_sen;
	      var $33 = HEAPU32[$byteswap >> 2];
	      var $34 = _bio_fread($32, 1, $1, $33, $chksum);
	      var $35 = ($34 | 0) == 1;
	      do {
	        if ($35) {
	          var $37 = $n_feat;
	          var $38 = _bio_fread($37, 1, $1, $33, $chksum);
	          if (($38 | 0) != 1) {
	            break;
	          }
	          var $41 = $n_comp;
	          var $42 = _bio_fread($41, 1, $1, $33, $chksum);
	          if (($42 | 0) != 1) {
	            break;
	          }
	          var $45 = $n;
	          var $46 = _bio_fread($45, 1, $1, $33, $chksum);
	          if (($46 | 0) != 1) {
	            break;
	          }
	          var $50 = HEAPU32[$n_feat >> 2];
	          var $51 = $s + 44 | 0;
	          if (($50 | 0) == (HEAP16[$51 >> 1] << 16 >> 16 | 0)) {
	            var $60 = HEAPU32[$n_sen >> 2];
	            var $61 = HEAPU32[$n_comp >> 2];
	            if ((HEAP32[$n >> 2] | 0) == ($60 * $50 * $61 | 0)) {
	              HEAP32[$s + 48 >> 2] = $60;
	              var $70 = HEAP16[$s + 46 >> 1] << 16 >> 16;
	              var $71 = ___ckd_calloc_3d__($50, $70, $60, 1, STRING_TABLE.__str1106 | 0, 1155);
	              var $73 = $s + 28 | 0;
	              HEAP32[$73 >> 2] = $71;
	              var $74 = ___ckd_calloc__($61, 4, STRING_TABLE.__str1106 | 0, 1158);
	              var $75 = $74;
	              var $76 = ($61 | 0) > 0;
	              var $77 = $s + 76 | 0;
	              var $n_err_0 = 0;
	              var $i_1 = 0;
	              $_$150 : while (1) {
	                var $i_1;
	                var $n_err_0;
	                if (($i_1 | 0) < ($60 | 0)) {
	                  var $n_err_1 = $n_err_0;
	                  var $f_0 = 0;
	                  while (1) {
	                    var $f_0;
	                    var $n_err_1;
	                    if (($f_0 | 0) >= ($50 | 0)) {
	                      var $n_err_0 = $n_err_1;
	                      var $i_1 = $i_1 + 1 | 0;
	                      continue $_$150;
	                    }
	                    var $82 = _bio_fread($74, $61, $1, $33, $chksum);
	                    if (($82 | 0) == ($61 | 0)) {
	                      var $86 = _vector_sum_norm($75, $61);
	                      var $n_err_2 = ($86 <= 0 & 1) + $n_err_1 | 0;
	                      _vector_floor($75, $61, $SmoothMin);
	                      var $88 = _vector_sum_norm($75, $61);
	                      $_$160 : do {
	                        if ($76) {
	                          var $c_02 = 0;
	                          while (1) {
	                            var $c_02;
	                            var $89 = HEAP32[$77 >> 2];
	                            var $92 = HEAPF32[$75 + ($c_02 << 2) >> 2];
	                            var $93 = _logmath_log($89, $92);
	                            var $94 = -$93 | 0;
	                            var $98 = ($94 | 0) > 159 | ($93 | 0) > 0 ? -97 : $94 & 255;
	                            HEAP8[HEAP32[HEAP32[HEAP32[$73 >> 2] + ($f_0 << 2) >> 2] + ($c_02 << 2) >> 2] + $i_1 | 0] = $98;
	                            var $105 = $c_02 + 1 | 0;
	                            if (($105 | 0) == ($61 | 0)) {
	                              break $_$160;
	                            }
	                            var $c_02 = $105;
	                          }
	                        }
	                      } while (0);
	                      var $n_err_1 = $n_err_2;
	                      var $f_0 = $f_0 + 1 | 0;
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str1106 | 0, 1166, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str341140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                    }
	                  }
	                } else {
	                  if (($n_err_0 | 0) > 0) {
	                    __E__pr_header(STRING_TABLE.__str1106 | 0, 1187, STRING_TABLE.__str212436 | 0);
	                    __E__pr_warn(STRING_TABLE.__str351141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_err_0, tempInt));
	                  }
	                  _ckd_free($74);
	                  if (($chksum_present_0_lcssa | 0) != 0) {
	                    var $115 = HEAP32[$chksum >> 2];
	                    _bio_verify_chksum($1, $33, $115);
	                  }
	                  var $117 = _fread($eofchk, 1, 1, $1);
	                  if (($117 | 0) == 1) {
	                    __E__pr_header(STRING_TABLE.__str1106 | 0, 1195, STRING_TABLE.__str72422 | 0);
	                    __E__die_error(STRING_TABLE.__str361142 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	                  } else {
	                    var $121 = _fclose($1);
	                    __E__pr_info_header(STRING_TABLE.__str1106 | 0, 1199);
	                    __E__pr_info(STRING_TABLE.__str371143 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $60, HEAP32[tempInt + 4 >> 2] = $50, HEAP32[tempInt + 8 >> 2] = $61, tempInt));
	                    STACKTOP = __stackBase__;
	                    return $60;
	                  }
	                }
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str1106 | 0, 1144, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str331139 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $i_0_lcssa, HEAP32[tempInt + 8 >> 2] = $60, HEAP32[tempInt + 12 >> 2] = $50, HEAP32[tempInt + 16 >> 2] = $61, tempInt));
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str1106 | 0, 1142, STRING_TABLE.__str72422 | 0);
	            var $57 = HEAP16[$51 >> 1] << 16 >> 16;
	            __E__die_error(STRING_TABLE.__str321138 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $50, HEAP32[tempInt + 4 >> 2] = $57, tempInt));
	          }
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str1106 | 0, 1139, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str311137 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    }
	  }
	  return null;
	}

	_read_mixw1174["X"] = 1;

	function _get_scores_8b_feat_1($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2];
	  var $12 = HEAP32[HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2];
	  var $13 = ($n_senone_active | 0) > 0;
	  $_$37 : do {
	    if ($13) {
	      var $j_01 = 0;
	      var $l_02 = 0;
	      var $14 = $4;
	      while (1) {
	        var $14;
	        var $l_02;
	        var $j_01;
	        var $18 = (HEAPU8[$senone_active + $j_01 | 0] & 255) + $l_02 | 0;
	        var $24 = ($18 << 1) + $senone_scores | 0;
	        HEAP16[$24 >> 1] = HEAP32[$14 >> 2] + (HEAPU8[$12 + $18 | 0] & 255) + (HEAPU16[$24 >> 1] & 65535) & 65535;
	        var $30 = $j_01 + 1 | 0;
	        if (($30 | 0) == ($n_senone_active | 0)) {
	          break $_$37;
	        }
	        var $j_01 = $30;
	        var $l_02 = $18;
	        var $14 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fast_logmath_add1175($lmath_0_0_0_val, $mlx, $mly) {
	  var $1 = ($mlx | 0) > ($mly | 0);
	  var $d_0 = $1 ? $mlx - $mly | 0 : $mly - $mlx | 0;
	  var $r_0 = $1 ? $mly : $mlx;
	  return $r_0 - (HEAPU8[$lmath_0_0_0_val + $d_0 | 0] & 255) | 0;
	  return null;
	}

	function _get_scores_8b_feat_6($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $36$s2;
	  var $10$s2;
	  var $4$s2;
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $4$s2 = $4 >> 2;
	  var $10$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $12 = HEAP32[(HEAP32[$4$s2 + 1] << 2 >> 2) + $10$s2];
	  var $16 = HEAP32[(HEAP32[$4$s2 + 3] << 2 >> 2) + $10$s2];
	  var $20 = HEAP32[(HEAP32[$4$s2 + 5] << 2 >> 2) + $10$s2];
	  var $24 = HEAP32[(HEAP32[$4$s2 + 7] << 2 >> 2) + $10$s2];
	  var $28 = HEAP32[(HEAP32[$4$s2 + 9] << 2 >> 2) + $10$s2];
	  var $32 = HEAP32[(HEAP32[$4$s2 + 11] << 2 >> 2) + $10$s2];
	  var $33 = ($n_senone_active | 0) > 0;
	  $_$2 : do {
	    if ($33) {
	      var $34 = $s + 76 | 0;
	      var $j_05 = 0;
	      var $l_06 = 0;
	      var $36 = $4, $36$s2 = $36 >> 2;
	      while (1) {
	        var $36;
	        var $l_06;
	        var $j_05;
	        var $40 = (HEAPU8[$senone_active + $j_05 | 0] & 255) + $l_06 | 0;
	        var $46 = HEAP32[$36$s2] + (HEAPU8[$12 + $40 | 0] & 255) | 0;
	        var $53 = (HEAPU8[$16 + $40 | 0] & 255) + HEAP32[$36$s2 + 2] | 0;
	        var $_idx4_val = HEAPU32[HEAP32[$34 >> 2] >> 2];
	        var $54 = _fast_logmath_add1175($_idx4_val, $46, $53);
	        var $60 = (HEAPU8[$20 + $40 | 0] & 255) + HEAP32[$36$s2 + 4] | 0;
	        var $61 = _fast_logmath_add1175($_idx4_val, $54, $60);
	        var $67 = (HEAPU8[$24 + $40 | 0] & 255) + HEAP32[$36$s2 + 6] | 0;
	        var $68 = _fast_logmath_add1175($_idx4_val, $61, $67);
	        var $74 = (HEAPU8[$28 + $40 | 0] & 255) + HEAP32[$36$s2 + 8] | 0;
	        var $75 = _fast_logmath_add1175($_idx4_val, $68, $74);
	        var $81 = (HEAPU8[$32 + $40 | 0] & 255) + HEAP32[$36$s2 + 10] | 0;
	        var $82 = _fast_logmath_add1175($_idx4_val, $75, $81);
	        var $83 = ($40 << 1) + $senone_scores | 0;
	        HEAP16[$83 >> 1] = (HEAPU16[$83 >> 1] & 65535) + $82 & 65535;
	        var $88 = $j_05 + 1 | 0;
	        if (($88 | 0) == ($n_senone_active | 0)) {
	          break $_$2;
	        }
	        var $j_05 = $88;
	        var $l_06 = $40;
	        var $36 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $36$s2 = $36 >> 2;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_6["X"] = 1;

	function _get_scores_8b_feat_5($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $32$s2;
	  var $10$s2;
	  var $4$s2;
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $4$s2 = $4 >> 2;
	  var $10$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $12 = HEAP32[(HEAP32[$4$s2 + 1] << 2 >> 2) + $10$s2];
	  var $16 = HEAP32[(HEAP32[$4$s2 + 3] << 2 >> 2) + $10$s2];
	  var $20 = HEAP32[(HEAP32[$4$s2 + 5] << 2 >> 2) + $10$s2];
	  var $24 = HEAP32[(HEAP32[$4$s2 + 7] << 2 >> 2) + $10$s2];
	  var $28 = HEAP32[(HEAP32[$4$s2 + 9] << 2 >> 2) + $10$s2];
	  var $29 = ($n_senone_active | 0) > 0;
	  $_$9 : do {
	    if ($29) {
	      var $30 = $s + 76 | 0;
	      var $j_04 = 0;
	      var $l_05 = 0;
	      var $32 = $4, $32$s2 = $32 >> 2;
	      while (1) {
	        var $32;
	        var $l_05;
	        var $j_04;
	        var $36 = (HEAPU8[$senone_active + $j_04 | 0] & 255) + $l_05 | 0;
	        var $42 = HEAP32[$32$s2] + (HEAPU8[$12 + $36 | 0] & 255) | 0;
	        var $49 = (HEAPU8[$16 + $36 | 0] & 255) + HEAP32[$32$s2 + 2] | 0;
	        var $_idx3_val = HEAPU32[HEAP32[$30 >> 2] >> 2];
	        var $50 = _fast_logmath_add1175($_idx3_val, $42, $49);
	        var $56 = (HEAPU8[$20 + $36 | 0] & 255) + HEAP32[$32$s2 + 4] | 0;
	        var $57 = _fast_logmath_add1175($_idx3_val, $50, $56);
	        var $63 = (HEAPU8[$24 + $36 | 0] & 255) + HEAP32[$32$s2 + 6] | 0;
	        var $64 = _fast_logmath_add1175($_idx3_val, $57, $63);
	        var $70 = (HEAPU8[$28 + $36 | 0] & 255) + HEAP32[$32$s2 + 8] | 0;
	        var $71 = _fast_logmath_add1175($_idx3_val, $64, $70);
	        var $72 = ($36 << 1) + $senone_scores | 0;
	        HEAP16[$72 >> 1] = (HEAPU16[$72 >> 1] & 65535) + $71 & 65535;
	        var $77 = $j_04 + 1 | 0;
	        if (($77 | 0) == ($n_senone_active | 0)) {
	          break $_$9;
	        }
	        var $j_04 = $77;
	        var $l_05 = $36;
	        var $32 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $32$s2 = $32 >> 2;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_5["X"] = 1;

	function _get_scores_8b_feat_4($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $28$s2;
	  var $10$s2;
	  var $4$s2;
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $4$s2 = $4 >> 2;
	  var $10$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $12 = HEAP32[(HEAP32[$4$s2 + 1] << 2 >> 2) + $10$s2];
	  var $16 = HEAP32[(HEAP32[$4$s2 + 3] << 2 >> 2) + $10$s2];
	  var $20 = HEAP32[(HEAP32[$4$s2 + 5] << 2 >> 2) + $10$s2];
	  var $24 = HEAP32[(HEAP32[$4$s2 + 7] << 2 >> 2) + $10$s2];
	  var $25 = ($n_senone_active | 0) > 0;
	  $_$16 : do {
	    if ($25) {
	      var $26 = $s + 76 | 0;
	      var $j_03 = 0;
	      var $l_04 = 0;
	      var $28 = $4, $28$s2 = $28 >> 2;
	      while (1) {
	        var $28;
	        var $l_04;
	        var $j_03;
	        var $32 = (HEAPU8[$senone_active + $j_03 | 0] & 255) + $l_04 | 0;
	        var $38 = HEAP32[$28$s2] + (HEAPU8[$12 + $32 | 0] & 255) | 0;
	        var $45 = (HEAPU8[$16 + $32 | 0] & 255) + HEAP32[$28$s2 + 2] | 0;
	        var $_idx2_val = HEAPU32[HEAP32[$26 >> 2] >> 2];
	        var $46 = _fast_logmath_add1175($_idx2_val, $38, $45);
	        var $52 = (HEAPU8[$20 + $32 | 0] & 255) + HEAP32[$28$s2 + 4] | 0;
	        var $53 = _fast_logmath_add1175($_idx2_val, $46, $52);
	        var $59 = (HEAPU8[$24 + $32 | 0] & 255) + HEAP32[$28$s2 + 6] | 0;
	        var $60 = _fast_logmath_add1175($_idx2_val, $53, $59);
	        var $61 = ($32 << 1) + $senone_scores | 0;
	        HEAP16[$61 >> 1] = (HEAPU16[$61 >> 1] & 65535) + $60 & 65535;
	        var $66 = $j_03 + 1 | 0;
	        if (($66 | 0) == ($n_senone_active | 0)) {
	          break $_$16;
	        }
	        var $j_03 = $66;
	        var $l_04 = $32;
	        var $28 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $28$s2 = $28 >> 2;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_4["X"] = 1;

	function _get_scores_8b_feat_3($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $24$s2;
	  var $10$s2;
	  var $4$s2;
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $4$s2 = $4 >> 2;
	  var $10$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $12 = HEAP32[(HEAP32[$4$s2 + 1] << 2 >> 2) + $10$s2];
	  var $16 = HEAP32[(HEAP32[$4$s2 + 3] << 2 >> 2) + $10$s2];
	  var $20 = HEAP32[(HEAP32[$4$s2 + 5] << 2 >> 2) + $10$s2];
	  var $21 = ($n_senone_active | 0) > 0;
	  $_$23 : do {
	    if ($21) {
	      var $22 = $s + 76 | 0;
	      var $j_02 = 0;
	      var $l_03 = 0;
	      var $24 = $4, $24$s2 = $24 >> 2;
	      while (1) {
	        var $24;
	        var $l_03;
	        var $j_02;
	        var $28 = (HEAPU8[$senone_active + $j_02 | 0] & 255) + $l_03 | 0;
	        var $34 = HEAP32[$24$s2] + (HEAPU8[$12 + $28 | 0] & 255) | 0;
	        var $41 = (HEAPU8[$16 + $28 | 0] & 255) + HEAP32[$24$s2 + 2] | 0;
	        var $_idx1_val = HEAPU32[HEAP32[$22 >> 2] >> 2];
	        var $42 = _fast_logmath_add1175($_idx1_val, $34, $41);
	        var $48 = (HEAPU8[$20 + $28 | 0] & 255) + HEAP32[$24$s2 + 4] | 0;
	        var $49 = _fast_logmath_add1175($_idx1_val, $42, $48);
	        var $50 = ($28 << 1) + $senone_scores | 0;
	        HEAP16[$50 >> 1] = (HEAPU16[$50 >> 1] & 65535) + $49 & 65535;
	        var $55 = $j_02 + 1 | 0;
	        if (($55 | 0) == ($n_senone_active | 0)) {
	          break $_$23;
	        }
	        var $j_02 = $55;
	        var $l_03 = $28;
	        var $24 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2], $24$s2 = $24 >> 2;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_3["X"] = 1;

	function _get_scores_8b_feat_2($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $1 = $s + 68 | 0;
	  var $4 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2];
	  var $10 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2];
	  var $12 = HEAP32[$10 + (HEAP32[$4 + 4 >> 2] << 2) >> 2];
	  var $16 = HEAP32[$10 + (HEAP32[$4 + 12 >> 2] << 2) >> 2];
	  var $17 = ($n_senone_active | 0) > 0;
	  $_$30 : do {
	    if ($17) {
	      var $18 = $s + 76 | 0;
	      var $j_01 = 0;
	      var $l_02 = 0;
	      var $20 = $4;
	      while (1) {
	        var $20;
	        var $l_02;
	        var $j_01;
	        var $24 = (HEAPU8[$senone_active + $j_01 | 0] & 255) + $l_02 | 0;
	        var $30 = HEAP32[$20 >> 2] + (HEAPU8[$12 + $24 | 0] & 255) | 0;
	        var $37 = (HEAPU8[$16 + $24 | 0] & 255) + HEAP32[$20 + 8 >> 2] | 0;
	        var $_idx_val = HEAP32[HEAP32[$18 >> 2] >> 2];
	        var $38 = _fast_logmath_add1175($_idx_val, $30, $37);
	        var $39 = ($24 << 1) + $senone_scores | 0;
	        HEAP16[$39 >> 1] = (HEAPU16[$39 >> 1] & 65535) + $38 & 65535;
	        var $44 = $j_01 + 1 | 0;
	        if (($44 | 0) == ($n_senone_active | 0)) {
	          break $_$30;
	        }
	        var $j_01 = $44;
	        var $l_02 = $24;
	        var $20 = HEAP32[HEAP32[$1 >> 2] + ($i << 2) >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_2["X"] = 1;

	function _get_scores_8b_feat_any($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active) {
	  var $13$s2;
	  var $1 = ($n_senone_active | 0) > 0;
	  $_$43 : do {
	    if ($1) {
	      var $2 = $s + 68 | 0;
	      var $3 = $s + 28 | 0;
	      var $4 = ($topn | 0) > 1;
	      var $5 = $s + 76 | 0;
	      var $j_03 = 0;
	      var $l_04 = 0;
	      while (1) {
	        var $l_04;
	        var $j_03;
	        var $10 = (HEAPU8[$senone_active + $j_03 | 0] & 255) + $l_04 | 0;
	        var $13$s2 = HEAPU32[HEAP32[$2 >> 2] + ($i << 2) >> 2] >> 2;
	        var $18 = HEAPU32[HEAP32[$3 >> 2] + ($i << 2) >> 2];
	        var $26 = (HEAPU8[HEAP32[$18 + (HEAP32[$13$s2 + 1] << 2) >> 2] + $10 | 0] & 255) + HEAP32[$13$s2] | 0;
	        $_$47 : do {
	          if ($4) {
	            var $_idx_val = HEAP32[HEAP32[$5 >> 2] >> 2];
	            var $k_01 = 1;
	            var $tmp_02 = $26;
	            while (1) {
	              var $tmp_02;
	              var $k_01;
	              var $38 = (HEAPU8[HEAP32[$18 + (HEAP32[(($k_01 << 3) + 4 >> 2) + $13$s2] << 2) >> 2] + $10 | 0] & 255) + HEAP32[($k_01 << 3 >> 2) + $13$s2] | 0;
	              var $39 = _fast_logmath_add1175($_idx_val, $tmp_02, $38);
	              var $40 = $k_01 + 1 | 0;
	              if (($40 | 0) == ($topn | 0)) {
	                var $tmp_0_lcssa = $39;
	                break $_$47;
	              }
	              var $k_01 = $40;
	              var $tmp_02 = $39;
	            }
	          } else {
	            var $tmp_0_lcssa = $26;
	          }
	        } while (0);
	        var $tmp_0_lcssa;
	        var $41 = ($10 << 1) + $senone_scores | 0;
	        HEAP16[$41 >> 1] = (HEAPU16[$41 >> 1] & 65535) + $tmp_0_lcssa & 65535;
	        var $46 = $j_03 + 1 | 0;
	        if (($46 | 0) == ($n_senone_active | 0)) {
	          break $_$43;
	        }
	        var $j_03 = $46;
	        var $l_04 = $10;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_8b_feat_any["X"] = 1;

	function _get_scores_4b_feat_6($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $48$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 96;
	  var $w_den = __stackBase__;
	  var $2 = HEAP32[$s + 36 >> 2];
	  var $6$s2 = HEAPU32[HEAP32[$s + 68 >> 2] + ($i << 2) >> 2] >> 2;
	  var $8 = HEAP32[$6$s2];
	  var $10 = HEAP32[$6$s2 + 2];
	  var $12 = HEAP32[$6$s2 + 4];
	  var $14 = HEAP32[$6$s2 + 6];
	  var $16 = HEAP32[$6$s2 + 8];
	  var $18 = HEAP32[$6$s2 + 10];
	  var $j_012 = 0;
	  while (1) {
	    var $j_012;
	    var $22 = HEAPU8[$2 + $j_012 | 0] & 255;
	    HEAP8[$w_den + $j_012 | 0] = $8 + $22 & 255;
	    HEAP8[$w_den + ($j_012 + 16) | 0] = $10 + $22 & 255;
	    HEAP8[$w_den + ($j_012 + 32) | 0] = $12 + $22 & 255;
	    HEAP8[$w_den + ($j_012 + 48) | 0] = $14 + $22 & 255;
	    HEAP8[$w_den + ($j_012 + 64) | 0] = $16 + $22 & 255;
	    HEAP8[$w_den + ($j_012 + 80) | 0] = $18 + $22 & 255;
	    var $41 = $j_012 + 1 | 0;
	    if (($41 | 0) == 16) {
	      break;
	    }
	    var $j_012 = $41;
	  }
	  var $48$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $50 = HEAP32[(HEAP32[$6$s2 + 1] << 2 >> 2) + $48$s2];
	  var $54 = HEAPU32[(HEAP32[$6$s2 + 3] << 2 >> 2) + $48$s2];
	  var $58 = HEAPU32[(HEAP32[$6$s2 + 5] << 2 >> 2) + $48$s2];
	  var $62 = HEAPU32[(HEAP32[$6$s2 + 7] << 2 >> 2) + $48$s2];
	  var $66 = HEAPU32[(HEAP32[$6$s2 + 9] << 2 >> 2) + $48$s2];
	  var $70 = HEAPU32[(HEAP32[$6$s2 + 11] << 2 >> 2) + $48$s2];
	  var $71 = ($n_senone_active | 0) > 0;
	  $_$58 : do {
	    if ($71) {
	      var $72 = $s + 76 | 0;
	      var $j_110 = 0;
	      var $l_011 = 0;
	      while (1) {
	        var $l_011;
	        var $j_110;
	        var $77 = (HEAPU8[$senone_active + $j_110 | 0] & 255) + $l_011 | 0;
	        var $80 = ($77 | 0) / 2 & -1;
	        var $83 = HEAPU8[$50 + $80 | 0] & 255;
	        if (($77 & 1 | 0) == 0) {
	          var $134 = HEAPU8[$w_den + ($83 & 15) | 0] & 255;
	          var $142 = HEAPU8[$w_den + (HEAPU8[$54 + $80 | 0] & 255 & 15) + 16 | 0] & 255;
	          var $_idx4_val = HEAPU32[HEAP32[$72 >> 2] >> 2];
	          var $143 = _fast_logmath_add1175($_idx4_val, $134, $142);
	          var $150 = HEAPU8[$w_den + (HEAPU8[$58 + $80 | 0] & 255 & 15) + 32 | 0] & 255;
	          var $151 = _fast_logmath_add1175($_idx4_val, $143, $150);
	          var $158 = HEAPU8[$w_den + (HEAPU8[$62 + $80 | 0] & 255 & 15) + 48 | 0] & 255;
	          var $159 = _fast_logmath_add1175($_idx4_val, $151, $158);
	          var $166 = HEAPU8[$w_den + (HEAPU8[$66 + $80 | 0] & 255 & 15) + 64 | 0] & 255;
	          var $167 = _fast_logmath_add1175($_idx4_val, $159, $166);
	          var $174 = HEAPU8[$w_den + (HEAPU8[$70 + $80 | 0] & 255 & 15) + 80 | 0] & 255;
	          var $175 = _fast_logmath_add1175($_idx4_val, $167, $174);
	          var $tmp_0 = $175;
	        } else {
	          var $88 = HEAPU8[$w_den + ($83 >>> 4) | 0] & 255;
	          var $96 = HEAPU8[$w_den + ((HEAPU8[$54 + $80 | 0] & 255) >>> 4) + 16 | 0] & 255;
	          var $_idx9_val = HEAPU32[HEAP32[$72 >> 2] >> 2];
	          var $97 = _fast_logmath_add1175($_idx9_val, $88, $96);
	          var $104 = HEAPU8[$w_den + ((HEAPU8[$58 + $80 | 0] & 255) >>> 4) + 32 | 0] & 255;
	          var $105 = _fast_logmath_add1175($_idx9_val, $97, $104);
	          var $112 = HEAPU8[$w_den + ((HEAPU8[$62 + $80 | 0] & 255) >>> 4) + 48 | 0] & 255;
	          var $113 = _fast_logmath_add1175($_idx9_val, $105, $112);
	          var $120 = HEAPU8[$w_den + ((HEAPU8[$66 + $80 | 0] & 255) >>> 4) + 64 | 0] & 255;
	          var $121 = _fast_logmath_add1175($_idx9_val, $113, $120);
	          var $128 = HEAPU8[$w_den + ((HEAPU8[$70 + $80 | 0] & 255) >>> 4) + 80 | 0] & 255;
	          var $129 = _fast_logmath_add1175($_idx9_val, $121, $128);
	          var $tmp_0 = $129;
	        }
	        var $tmp_0;
	        var $177 = ($77 << 1) + $senone_scores | 0;
	        HEAP16[$177 >> 1] = (HEAPU16[$177 >> 1] & 65535) + $tmp_0 & 65535;
	        var $182 = $j_110 + 1 | 0;
	        if (($182 | 0) == ($n_senone_active | 0)) {
	          break $_$58;
	        }
	        var $j_110 = $182;
	        var $l_011 = $77;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_6["X"] = 1;

	function _get_scores_4b_feat_5($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $43$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 80;
	  var $w_den = __stackBase__;
	  var $2 = HEAP32[$s + 36 >> 2];
	  var $6$s2 = HEAPU32[HEAP32[$s + 68 >> 2] + ($i << 2) >> 2] >> 2;
	  var $8 = HEAP32[$6$s2];
	  var $10 = HEAP32[$6$s2 + 2];
	  var $12 = HEAP32[$6$s2 + 4];
	  var $14 = HEAP32[$6$s2 + 6];
	  var $16 = HEAP32[$6$s2 + 8];
	  var $j_010 = 0;
	  while (1) {
	    var $j_010;
	    var $20 = HEAPU8[$2 + $j_010 | 0] & 255;
	    HEAP8[$w_den + $j_010 | 0] = $8 + $20 & 255;
	    HEAP8[$w_den + ($j_010 + 16) | 0] = $10 + $20 & 255;
	    HEAP8[$w_den + ($j_010 + 32) | 0] = $12 + $20 & 255;
	    HEAP8[$w_den + ($j_010 + 48) | 0] = $14 + $20 & 255;
	    HEAP8[$w_den + ($j_010 + 64) | 0] = $16 + $20 & 255;
	    var $36 = $j_010 + 1 | 0;
	    if (($36 | 0) == 16) {
	      break;
	    }
	    var $j_010 = $36;
	  }
	  var $43$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $45 = HEAP32[(HEAP32[$6$s2 + 1] << 2 >> 2) + $43$s2];
	  var $49 = HEAPU32[(HEAP32[$6$s2 + 3] << 2 >> 2) + $43$s2];
	  var $53 = HEAPU32[(HEAP32[$6$s2 + 5] << 2 >> 2) + $43$s2];
	  var $57 = HEAPU32[(HEAP32[$6$s2 + 7] << 2 >> 2) + $43$s2];
	  var $61 = HEAPU32[(HEAP32[$6$s2 + 9] << 2 >> 2) + $43$s2];
	  var $62 = ($n_senone_active | 0) > 0;
	  $_$71 : do {
	    if ($62) {
	      var $63 = $s + 76 | 0;
	      var $j_18 = 0;
	      var $l_09 = 0;
	      while (1) {
	        var $l_09;
	        var $j_18;
	        var $68 = (HEAPU8[$senone_active + $j_18 | 0] & 255) + $l_09 | 0;
	        var $71 = ($68 | 0) / 2 & -1;
	        var $74 = HEAPU8[$45 + $71 | 0] & 255;
	        if (($68 & 1 | 0) == 0) {
	          var $117 = HEAPU8[$w_den + ($74 & 15) | 0] & 255;
	          var $125 = HEAPU8[$w_den + (HEAPU8[$49 + $71 | 0] & 255 & 15) + 16 | 0] & 255;
	          var $_idx3_val = HEAPU32[HEAP32[$63 >> 2] >> 2];
	          var $126 = _fast_logmath_add1175($_idx3_val, $117, $125);
	          var $133 = HEAPU8[$w_den + (HEAPU8[$53 + $71 | 0] & 255 & 15) + 32 | 0] & 255;
	          var $134 = _fast_logmath_add1175($_idx3_val, $126, $133);
	          var $141 = HEAPU8[$w_den + (HEAPU8[$57 + $71 | 0] & 255 & 15) + 48 | 0] & 255;
	          var $142 = _fast_logmath_add1175($_idx3_val, $134, $141);
	          var $149 = HEAPU8[$w_den + (HEAPU8[$61 + $71 | 0] & 255 & 15) + 64 | 0] & 255;
	          var $150 = _fast_logmath_add1175($_idx3_val, $142, $149);
	          var $tmp_0 = $150;
	        } else {
	          var $79 = HEAPU8[$w_den + ($74 >>> 4) | 0] & 255;
	          var $87 = HEAPU8[$w_den + ((HEAPU8[$49 + $71 | 0] & 255) >>> 4) + 16 | 0] & 255;
	          var $_idx7_val = HEAPU32[HEAP32[$63 >> 2] >> 2];
	          var $88 = _fast_logmath_add1175($_idx7_val, $79, $87);
	          var $95 = HEAPU8[$w_den + ((HEAPU8[$53 + $71 | 0] & 255) >>> 4) + 32 | 0] & 255;
	          var $96 = _fast_logmath_add1175($_idx7_val, $88, $95);
	          var $103 = HEAPU8[$w_den + ((HEAPU8[$57 + $71 | 0] & 255) >>> 4) + 48 | 0] & 255;
	          var $104 = _fast_logmath_add1175($_idx7_val, $96, $103);
	          var $111 = HEAPU8[$w_den + ((HEAPU8[$61 + $71 | 0] & 255) >>> 4) + 64 | 0] & 255;
	          var $112 = _fast_logmath_add1175($_idx7_val, $104, $111);
	          var $tmp_0 = $112;
	        }
	        var $tmp_0;
	        var $152 = ($68 << 1) + $senone_scores | 0;
	        HEAP16[$152 >> 1] = (HEAPU16[$152 >> 1] & 65535) + $tmp_0 & 65535;
	        var $157 = $j_18 + 1 | 0;
	        if (($157 | 0) == ($n_senone_active | 0)) {
	          break $_$71;
	        }
	        var $j_18 = $157;
	        var $l_09 = $68;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_5["X"] = 1;

	function _get_scores_4b_feat_1($s_0_6_val, $s_0_8_val, $s_0_18_val, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 16;
	  var $w_den = __stackBase__;
	  var $2 = HEAPU32[$s_0_18_val + ($i << 2) >> 2];
	  var $4 = HEAPU32[$2 >> 2];
	  HEAP8[$w_den | 0] = $4 + (HEAPU8[$s_0_8_val] & 255) & 255;
	  HEAP8[$w_den + 1 | 0] = $4 + (HEAPU8[$s_0_8_val + 1 | 0] & 255) & 255;
	  HEAP8[$w_den + 2 | 0] = $4 + (HEAPU8[$s_0_8_val + 2 | 0] & 255) & 255;
	  HEAP8[$w_den + 3 | 0] = $4 + (HEAPU8[$s_0_8_val + 3 | 0] & 255) & 255;
	  HEAP8[$w_den + 4 | 0] = $4 + (HEAPU8[$s_0_8_val + 4 | 0] & 255) & 255;
	  HEAP8[$w_den + 5 | 0] = $4 + (HEAPU8[$s_0_8_val + 5 | 0] & 255) & 255;
	  HEAP8[$w_den + 6 | 0] = $4 + (HEAPU8[$s_0_8_val + 6 | 0] & 255) & 255;
	  HEAP8[$w_den + 7 | 0] = $4 + (HEAPU8[$s_0_8_val + 7 | 0] & 255) & 255;
	  HEAP8[$w_den + 8 | 0] = $4 + (HEAPU8[$s_0_8_val + 8 | 0] & 255) & 255;
	  HEAP8[$w_den + 9 | 0] = $4 + (HEAPU8[$s_0_8_val + 9 | 0] & 255) & 255;
	  HEAP8[$w_den + 10 | 0] = $4 + (HEAPU8[$s_0_8_val + 10 | 0] & 255) & 255;
	  HEAP8[$w_den + 11 | 0] = $4 + (HEAPU8[$s_0_8_val + 11 | 0] & 255) & 255;
	  HEAP8[$w_den + 12 | 0] = $4 + (HEAPU8[$s_0_8_val + 12 | 0] & 255) & 255;
	  HEAP8[$w_den + 13 | 0] = $4 + (HEAPU8[$s_0_8_val + 13 | 0] & 255) & 255;
	  HEAP8[$w_den + 14 | 0] = $4 + (HEAPU8[$s_0_8_val + 14 | 0] & 255) & 255;
	  HEAP8[$w_den + 15 | 0] = $4 + (HEAPU8[$s_0_8_val + 15 | 0] & 255) & 255;
	  var $105 = HEAP32[HEAP32[$s_0_6_val + ($i << 2) >> 2] + (HEAP32[$2 + 4 >> 2] << 2) >> 2];
	  var $106 = ($n_senone_active | 0) > 0;
	  $_$41 : do {
	    if ($106) {
	      var $j_11 = 0;
	      var $l_02 = 0;
	      while (1) {
	        var $l_02;
	        var $j_11;
	        var $110 = (HEAPU8[$senone_active + $j_11 | 0] & 255) + $l_02 | 0;
	        var $116 = HEAPU8[$105 + (($110 | 0) / 2 & -1) | 0] & 255;
	        var $_pn = ($110 & 1 | 0) == 0 ? $116 & 15 : $116 >>> 4;
	        var $119 = ($110 << 1) + $senone_scores | 0;
	        var $121 = HEAP16[$119 >> 1] + (HEAPU8[$w_den + $_pn | 0] & 255) & 65535;
	        HEAP16[$119 >> 1] = $121;
	        var $122 = $j_11 + 1 | 0;
	        if (($122 | 0) == ($n_senone_active | 0)) {
	          break $_$41;
	        }
	        var $j_11 = $122;
	        var $l_02 = $110;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_1["X"] = 1;

	function _eval_topn1176($s, $feat, $z) {
	  var $4 = HEAP32[HEAP32[$s + 68 >> 2] + ($feat << 2) >> 2];
	  var $8 = HEAP32[HEAP32[$s + 40 >> 2] + ($feat << 2) >> 2];
	  var $9 = $s + 56 | 0;
	  var $11 = HEAP16[$9 >> 1] << 16 >> 16 > 0;
	  $_$57 : do {
	    if ($11) {
	      var $12 = $s + 16 | 0;
	      var $13 = $s + 20 | 0;
	      var $14 = $s + 24 | 0;
	      var $15 = ($8 | 0) > 0;
	      var $i_013 = 0;
	      while (1) {
	        var $i_013;
	        var $18 = HEAP32[$4 + ($i_013 << 3) + 4 >> 2];
	        var $19 = $18 * $8 | 0;
	        var $24 = HEAPF32[HEAP32[HEAP32[$14 >> 2] + ($feat << 2) >> 2] + ($18 << 2) >> 2];
	        $_$61 : do {
	          if ($15) {
	            var $mean_06 = ($19 << 2) + HEAP32[HEAP32[HEAP32[$12 >> 2] + ($feat << 2) >> 2] >> 2] | 0;
	            var $var_07 = ($19 << 2) + HEAP32[HEAP32[HEAP32[$13 >> 2] + ($feat << 2) >> 2] >> 2] | 0;
	            var $d_08 = $24;
	            var $obs_09 = $z;
	            var $j_010 = 0;
	            while (1) {
	              var $j_010;
	              var $obs_09;
	              var $d_08;
	              var $var_07;
	              var $mean_06;
	              var $40 = HEAPF32[$obs_09 >> 2] - HEAPF32[$mean_06 >> 2];
	              var $44 = $d_08 - $40 * $40 * HEAPF32[$var_07 >> 2];
	              var $46 = $j_010 + 1 | 0;
	              if (($46 | 0) == ($8 | 0)) {
	                var $d_0_lcssa = $44;
	                break $_$61;
	              }
	              var $mean_06 = $mean_06 + 4 | 0;
	              var $var_07 = $var_07 + 4 | 0;
	              var $d_08 = $44;
	              var $obs_09 = $obs_09 + 4 | 0;
	              var $j_010 = $46;
	            }
	          } else {
	            var $d_0_lcssa = $24;
	          }
	        } while (0);
	        var $d_0_lcssa;
	        var $47 = $d_0_lcssa & -1;
	        var $48 = ($i_013 << 3) + $4 | 0;
	        HEAP32[$48 >> 2] = $47;
	        if (($i_013 | 0) != 0) {
	          var $j_1_in = $i_013;
	          while (1) {
	            var $j_1_in;
	            var $j_1 = $j_1_in - 1 | 0;
	            if (($j_1_in | 0) <= 0) {
	              var $62 = ($j_1_in << 3) + $4 | 0;
	              break;
	            }
	            var $56 = ($j_1_in << 3) + $4 | 0;
	            if (($47 | 0) <= (HEAP32[$4 + ($j_1 << 3) >> 2] | 0)) {
	              var $62 = $56;
	              break;
	            }
	            var $59 = ($j_1 << 3) + $4 | 0;
	            var $60 = $56;
	            var $61$0 = HEAP32[$59 >> 2];
	            var $61$1 = HEAP32[$59 + 4 >> 2];
	            var $st$7$0 = $60 | 0;
	            HEAP32[$st$7$0 >> 2] = $61$0;
	            var $st$7$1 = $60 + 4 | 0;
	            HEAP32[$st$7$1 >> 2] = $61$1;
	            var $j_1_in = $j_1;
	          }
	          var $62;
	          HEAP32[$62 >> 2] = $47;
	          var $_1 = ($j_1_in << 3) + $4 + 4 | 0;
	          HEAP32[$_1 >> 2] = $18;
	        }
	        var $64 = $i_013 + 1 | 0;
	        if (($64 | 0) >= (HEAP16[$9 >> 1] << 16 >> 16 | 0)) {
	          break $_$57;
	        }
	        var $i_013 = $64;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_eval_topn1176["X"] = 1;

	function _eval_cb1177($s, $feat, $z) {
	  var __label__;
	  var $4 = HEAPU32[HEAP32[$s + 68 >> 2] + ($feat << 2) >> 2];
	  var $5 = $s + 56 | 0;
	  var $7 = HEAP16[$5 >> 1] << 16 >> 16;
	  var $11 = HEAP32[HEAP32[$s + 24 >> 2] + ($feat << 2) >> 2];
	  var $13 = HEAP16[$s + 46 >> 1];
	  var $15 = ($13 << 16 >> 16 << 2) + $11 | 0;
	  var $19 = HEAPU32[HEAP32[$s + 40 >> 2] + ($feat << 2) >> 2];
	  var $20 = $13 << 16 >> 16 > 0;
	  $_$77 : do {
	    if ($20) {
	      var $32 = $11;
	      var $33 = ($7 - 1 << 3) + $4 | 0;
	      var $34 = ($7 - 2 << 3) + $4 | 0;
	      var $var_08 = HEAP32[HEAP32[HEAP32[$s + 20 >> 2] + ($feat << 2) >> 2] >> 2];
	      var $mean_09 = HEAP32[HEAP32[HEAP32[$s + 16 >> 2] + ($feat << 2) >> 2] >> 2];
	      var $detP_010 = $11;
	      while (1) {
	        var $detP_010;
	        var $mean_09;
	        var $var_08;
	        var $39 = $detP_010 - $32 >> 2;
	        var $j_0 = 0;
	        var $obs_0 = $z;
	        var $d_0 = HEAPF32[$detP_010 >> 2];
	        var $mean_1 = $mean_09;
	        var $var_1 = $var_08;
	        while (1) {
	          var $var_1;
	          var $mean_1;
	          var $d_0;
	          var $obs_0;
	          var $j_0;
	          if (($j_0 | 0) >= ($19 | 0)) {
	            __label__ = 9;
	            break;
	          }
	          if ($d_0 < (HEAP32[$33 >> 2] | 0)) {
	            var $59 = $19 - $j_0 | 0;
	            var $mean_2 = ($59 << 2) + $mean_1 | 0;
	            var $var_2 = ($59 << 2) + $var_1 | 0;
	            __label__ = 18;
	            break;
	          }
	          var $51 = HEAPF32[$obs_0 >> 2] - HEAPF32[$mean_1 >> 2];
	          var $55 = $d_0 - $51 * $51 * HEAPF32[$var_1 >> 2];
	          var $j_0 = $j_0 + 1 | 0;
	          var $obs_0 = $obs_0 + 4 | 0;
	          var $d_0 = $55;
	          var $mean_1 = $mean_1 + 4 | 0;
	          var $var_1 = $var_1 + 4 | 0;
	        }
	        $_$87 : do {
	          if (__label__ == 9) {
	            var $62 = $d_0 & -1;
	            if (($62 | 0) < (HEAP32[$33 >> 2] | 0)) {
	              var $mean_2 = $mean_1;
	              var $var_2 = $var_1;
	              break;
	            }
	            var $66 = HEAP16[$5 >> 1] << 16 >> 16;
	            var $i_0 = 0;
	            while (1) {
	              var $i_0;
	              if (($i_0 | 0) >= ($66 | 0)) {
	                var $cur_0 = $34;
	                break;
	              }
	              if ((HEAP32[$4 + ($i_0 << 3) + 4 >> 2] | 0) == ($39 | 0)) {
	                var $mean_2 = $mean_1;
	                var $var_2 = $var_1;
	                break $_$87;
	              }
	              var $i_0 = $i_0 + 1 | 0;
	            }
	            while (1) {
	              var $cur_0;
	              if ($cur_0 >>> 0 < $4 >>> 0) {
	                var $86 = $cur_0 + 8 | 0;
	                break;
	              }
	              var $80 = $cur_0 + 8 | 0;
	              if (($62 | 0) < (HEAP32[$cur_0 >> 2] | 0)) {
	                var $86 = $80;
	                break;
	              }
	              var $82 = $cur_0;
	              var $83 = $80;
	              var $84$0 = HEAP32[$82 >> 2];
	              var $84$1 = HEAP32[$82 + 4 >> 2];
	              HEAP32[$83 >> 2] = $84$0;
	              HEAP32[$83 + 4 >> 2] = $84$1;
	              var $cur_0 = $cur_0 - 8 | 0;
	            }
	            var $86;
	            HEAP32[$cur_0 + 12 >> 2] = $39;
	            HEAP32[$86 >> 2] = $62;
	            var $mean_2 = $mean_1;
	            var $var_2 = $var_1;
	          }
	        } while (0);
	        var $var_2;
	        var $mean_2;
	        var $89 = $detP_010 + 4 | 0;
	        if ($89 >>> 0 >= $15 >>> 0) {
	          break $_$77;
	        }
	        var $var_08 = $var_2;
	        var $mean_09 = $mean_2;
	        var $detP_010 = $89;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_eval_cb1177["X"] = 1;

	function _get_scores_4b_feat_4($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $38$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 64;
	  var $w_den = __stackBase__;
	  var $2 = HEAP32[$s + 36 >> 2];
	  var $6$s2 = HEAPU32[HEAP32[$s + 68 >> 2] + ($i << 2) >> 2] >> 2;
	  var $8 = HEAP32[$6$s2];
	  var $10 = HEAP32[$6$s2 + 2];
	  var $12 = HEAP32[$6$s2 + 4];
	  var $14 = HEAP32[$6$s2 + 6];
	  var $j_08 = 0;
	  while (1) {
	    var $j_08;
	    var $18 = HEAPU8[$2 + $j_08 | 0] & 255;
	    HEAP8[$w_den + $j_08 | 0] = $8 + $18 & 255;
	    HEAP8[$w_den + ($j_08 + 16) | 0] = $10 + $18 & 255;
	    HEAP8[$w_den + ($j_08 + 32) | 0] = $12 + $18 & 255;
	    HEAP8[$w_den + ($j_08 + 48) | 0] = $14 + $18 & 255;
	    var $31 = $j_08 + 1 | 0;
	    if (($31 | 0) == 16) {
	      break;
	    }
	    var $j_08 = $31;
	  }
	  var $38$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $40 = HEAP32[(HEAP32[$6$s2 + 1] << 2 >> 2) + $38$s2];
	  var $44 = HEAPU32[(HEAP32[$6$s2 + 3] << 2 >> 2) + $38$s2];
	  var $48 = HEAPU32[(HEAP32[$6$s2 + 5] << 2 >> 2) + $38$s2];
	  var $52 = HEAPU32[(HEAP32[$6$s2 + 7] << 2 >> 2) + $38$s2];
	  var $53 = ($n_senone_active | 0) > 0;
	  $_$5 : do {
	    if ($53) {
	      var $54 = $s + 76 | 0;
	      var $j_16 = 0;
	      var $l_07 = 0;
	      while (1) {
	        var $l_07;
	        var $j_16;
	        var $59 = (HEAPU8[$senone_active + $j_16 | 0] & 255) + $l_07 | 0;
	        var $62 = ($59 | 0) / 2 & -1;
	        var $65 = HEAPU8[$40 + $62 | 0] & 255;
	        if (($59 & 1 | 0) == 0) {
	          var $100 = HEAPU8[$w_den + ($65 & 15) | 0] & 255;
	          var $108 = HEAPU8[$w_den + (HEAPU8[$44 + $62 | 0] & 255 & 15) + 16 | 0] & 255;
	          var $_idx2_val = HEAPU32[HEAP32[$54 >> 2] >> 2];
	          var $109 = _fast_logmath_add1175($_idx2_val, $100, $108);
	          var $116 = HEAPU8[$w_den + (HEAPU8[$48 + $62 | 0] & 255 & 15) + 32 | 0] & 255;
	          var $117 = _fast_logmath_add1175($_idx2_val, $109, $116);
	          var $124 = HEAPU8[$w_den + (HEAPU8[$52 + $62 | 0] & 255 & 15) + 48 | 0] & 255;
	          var $125 = _fast_logmath_add1175($_idx2_val, $117, $124);
	          var $tmp_0 = $125;
	        } else {
	          var $70 = HEAPU8[$w_den + ($65 >>> 4) | 0] & 255;
	          var $78 = HEAPU8[$w_den + ((HEAPU8[$44 + $62 | 0] & 255) >>> 4) + 16 | 0] & 255;
	          var $_idx5_val = HEAPU32[HEAP32[$54 >> 2] >> 2];
	          var $79 = _fast_logmath_add1175($_idx5_val, $70, $78);
	          var $86 = HEAPU8[$w_den + ((HEAPU8[$48 + $62 | 0] & 255) >>> 4) + 32 | 0] & 255;
	          var $87 = _fast_logmath_add1175($_idx5_val, $79, $86);
	          var $94 = HEAPU8[$w_den + ((HEAPU8[$52 + $62 | 0] & 255) >>> 4) + 48 | 0] & 255;
	          var $95 = _fast_logmath_add1175($_idx5_val, $87, $94);
	          var $tmp_0 = $95;
	        }
	        var $tmp_0;
	        var $127 = ($59 << 1) + $senone_scores | 0;
	        HEAP16[$127 >> 1] = (HEAPU16[$127 >> 1] & 65535) + $tmp_0 & 65535;
	        var $132 = $j_16 + 1 | 0;
	        if (($132 | 0) == ($n_senone_active | 0)) {
	          break $_$5;
	        }
	        var $j_16 = $132;
	        var $l_07 = $59;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_4["X"] = 1;

	function _get_scores_4b_feat_3($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $33$s2;
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 48;
	  var $w_den = __stackBase__;
	  var $2 = HEAP32[$s + 36 >> 2];
	  var $6$s2 = HEAPU32[HEAP32[$s + 68 >> 2] + ($i << 2) >> 2] >> 2;
	  var $8 = HEAP32[$6$s2];
	  var $10 = HEAP32[$6$s2 + 2];
	  var $12 = HEAP32[$6$s2 + 4];
	  var $j_06 = 0;
	  while (1) {
	    var $j_06;
	    var $16 = HEAPU8[$2 + $j_06 | 0] & 255;
	    HEAP8[$w_den + $j_06 | 0] = $8 + $16 & 255;
	    HEAP8[$w_den + ($j_06 + 16) | 0] = $10 + $16 & 255;
	    HEAP8[$w_den + ($j_06 + 32) | 0] = $12 + $16 & 255;
	    var $26 = $j_06 + 1 | 0;
	    if (($26 | 0) == 16) {
	      break;
	    }
	    var $j_06 = $26;
	  }
	  var $33$s2 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2] >> 2;
	  var $35 = HEAP32[(HEAP32[$6$s2 + 1] << 2 >> 2) + $33$s2];
	  var $39 = HEAPU32[(HEAP32[$6$s2 + 3] << 2 >> 2) + $33$s2];
	  var $43 = HEAPU32[(HEAP32[$6$s2 + 5] << 2 >> 2) + $33$s2];
	  var $44 = ($n_senone_active | 0) > 0;
	  $_$18 : do {
	    if ($44) {
	      var $45 = $s + 76 | 0;
	      var $j_14 = 0;
	      var $l_05 = 0;
	      while (1) {
	        var $l_05;
	        var $j_14;
	        var $50 = (HEAPU8[$senone_active + $j_14 | 0] & 255) + $l_05 | 0;
	        var $53 = ($50 | 0) / 2 & -1;
	        var $56 = HEAPU8[$35 + $53 | 0] & 255;
	        if (($50 & 1 | 0) == 0) {
	          var $83 = HEAPU8[$w_den + ($56 & 15) | 0] & 255;
	          var $91 = HEAPU8[$w_den + (HEAPU8[$39 + $53 | 0] & 255 & 15) + 16 | 0] & 255;
	          var $_idx1_val = HEAPU32[HEAP32[$45 >> 2] >> 2];
	          var $92 = _fast_logmath_add1175($_idx1_val, $83, $91);
	          var $99 = HEAPU8[$w_den + (HEAPU8[$43 + $53 | 0] & 255 & 15) + 32 | 0] & 255;
	          var $100 = _fast_logmath_add1175($_idx1_val, $92, $99);
	          var $tmp_0 = $100;
	        } else {
	          var $61 = HEAPU8[$w_den + ($56 >>> 4) | 0] & 255;
	          var $69 = HEAPU8[$w_den + ((HEAPU8[$39 + $53 | 0] & 255) >>> 4) + 16 | 0] & 255;
	          var $_idx3_val = HEAPU32[HEAP32[$45 >> 2] >> 2];
	          var $70 = _fast_logmath_add1175($_idx3_val, $61, $69);
	          var $77 = HEAPU8[$w_den + ((HEAPU8[$43 + $53 | 0] & 255) >>> 4) + 32 | 0] & 255;
	          var $78 = _fast_logmath_add1175($_idx3_val, $70, $77);
	          var $tmp_0 = $78;
	        }
	        var $tmp_0;
	        var $102 = ($50 << 1) + $senone_scores | 0;
	        HEAP16[$102 >> 1] = (HEAPU16[$102 >> 1] & 65535) + $tmp_0 & 65535;
	        var $107 = $j_14 + 1 | 0;
	        if (($107 | 0) == ($n_senone_active | 0)) {
	          break $_$18;
	        }
	        var $j_14 = $107;
	        var $l_05 = $50;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_3["X"] = 1;

	function _get_scores_4b_feat_2($s, $i, $senone_scores, $senone_active, $n_senone_active) {
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 32;
	  var $w_den = __stackBase__;
	  var $2 = HEAP32[$s + 36 >> 2];
	  var $6$s2 = HEAPU32[HEAP32[$s + 68 >> 2] + ($i << 2) >> 2] >> 2;
	  var $8 = HEAP32[$6$s2];
	  var $10 = HEAP32[$6$s2 + 2];
	  var $j_04 = 0;
	  while (1) {
	    var $j_04;
	    var $14 = HEAPU8[$2 + $j_04 | 0] & 255;
	    HEAP8[$w_den + $j_04 | 0] = $8 + $14 & 255;
	    HEAP8[$w_den + ($j_04 + 16) | 0] = $10 + $14 & 255;
	    var $21 = $j_04 + 1 | 0;
	    if (($21 | 0) == 16) {
	      break;
	    }
	    var $j_04 = $21;
	  }
	  var $28 = HEAP32[HEAP32[$s + 28 >> 2] + ($i << 2) >> 2];
	  var $30 = HEAP32[$28 + (HEAP32[$6$s2 + 1] << 2) >> 2];
	  var $34 = HEAPU32[$28 + (HEAP32[$6$s2 + 3] << 2) >> 2];
	  var $35 = ($n_senone_active | 0) > 0;
	  $_$31 : do {
	    if ($35) {
	      var $36 = $s + 76 | 0;
	      var $j_12 = 0;
	      var $l_03 = 0;
	      while (1) {
	        var $l_03;
	        var $j_12;
	        var $41 = (HEAPU8[$senone_active + $j_12 | 0] & 255) + $l_03 | 0;
	        var $44 = ($41 | 0) / 2 & -1;
	        var $47 = HEAPU8[$30 + $44 | 0] & 255;
	        if (($41 & 1 | 0) == 0) {
	          var $66 = HEAPU8[$w_den + ($47 & 15) | 0] & 255;
	          var $74 = HEAPU8[$w_den + (HEAPU8[$34 + $44 | 0] & 255 & 15) + 16 | 0] & 255;
	          var $_idx_val = HEAP32[HEAP32[$36 >> 2] >> 2];
	          var $75 = _fast_logmath_add1175($_idx_val, $66, $74);
	          var $tmp_0 = $75;
	        } else {
	          var $52 = HEAPU8[$w_den + ($47 >>> 4) | 0] & 255;
	          var $60 = HEAPU8[$w_den + ((HEAPU8[$34 + $44 | 0] & 255) >>> 4) + 16 | 0] & 255;
	          var $_idx1_val = HEAP32[HEAP32[$36 >> 2] >> 2];
	          var $61 = _fast_logmath_add1175($_idx1_val, $52, $60);
	          var $tmp_0 = $61;
	        }
	        var $tmp_0;
	        var $77 = ($41 << 1) + $senone_scores | 0;
	        HEAP16[$77 >> 1] = (HEAPU16[$77 >> 1] & 65535) + $tmp_0 & 65535;
	        var $82 = $j_12 + 1 | 0;
	        if (($82 | 0) == ($n_senone_active | 0)) {
	          break $_$31;
	        }
	        var $j_12 = $82;
	        var $l_03 = $41;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_get_scores_4b_feat_2["X"] = 1;

	function _get_scores_4b_feat_any($s, $i, $topn, $senone_scores, $senone_active, $n_senone_active) {
	  var $14$s2;
	  var $1 = ($n_senone_active | 0) > 0;
	  $_$46 : do {
	    if ($1) {
	      var $2 = $s + 68 | 0;
	      var $3 = $s + 28 | 0;
	      var $4 = $s + 36 | 0;
	      var $5 = ($topn | 0) > 1;
	      var $6 = $s + 76 | 0;
	      var $j_03 = 0;
	      var $l_04 = 0;
	      while (1) {
	        var $l_04;
	        var $j_03;
	        var $11 = (HEAPU8[$senone_active + $j_03 | 0] & 255) + $l_04 | 0;
	        var $14$s2 = HEAPU32[HEAP32[$2 >> 2] + ($i << 2) >> 2] >> 2;
	        var $19 = HEAPU32[HEAP32[$3 >> 2] + ($i << 2) >> 2];
	        var $23 = ($11 & 1 | 0) != 0;
	        var $24 = ($11 | 0) / 2 & -1;
	        var $27 = HEAPU8[HEAP32[$19 + (HEAP32[$14$s2 + 1] << 2) >> 2] + $24 | 0] & 255;
	        var $cw_0 = $23 ? $27 >>> 4 : $27 & 15;
	        var $30 = HEAPU32[$4 >> 2];
	        var $36 = (HEAPU8[$30 + $cw_0 | 0] & 255) + HEAP32[$14$s2] | 0;
	        $_$50 : do {
	          if ($5) {
	            var $_idx_val = HEAP32[HEAP32[$6 >> 2] >> 2];
	            var $k_01 = 1;
	            var $tmp_02 = $36;
	            while (1) {
	              var $tmp_02;
	              var $k_01;
	              var $45 = HEAPU8[HEAP32[$19 + (HEAP32[(($k_01 << 3) + 4 >> 2) + $14$s2] << 2) >> 2] + $24 | 0] & 255;
	              var $cw_1 = $23 ? $45 >>> 4 : $45 & 15;
	              var $53 = (HEAPU8[$30 + $cw_1 | 0] & 255) + HEAP32[($k_01 << 3 >> 2) + $14$s2] | 0;
	              var $54 = _fast_logmath_add1175($_idx_val, $tmp_02, $53);
	              var $55 = $k_01 + 1 | 0;
	              if (($55 | 0) == ($topn | 0)) {
	                var $tmp_0_lcssa = $54;
	                break $_$50;
	              }
	              var $k_01 = $55;
	              var $tmp_02 = $54;
	            }
	          } else {
	            var $tmp_0_lcssa = $36;
	          }
	        } while (0);
	        var $tmp_0_lcssa;
	        var $56 = ($11 << 1) + $senone_scores | 0;
	        HEAP16[$56 >> 1] = (HEAPU16[$56 >> 1] & 65535) + $tmp_0_lcssa & 65535;
	        var $61 = $j_03 + 1 | 0;
	        if (($61 | 0) == ($n_senone_active | 0)) {
	          break $_$46;
	        }
	        var $j_03 = $61;
	        var $l_04 = $11;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_get_scores_4b_feat_any["X"] = 1;

	function _vector_sum_norm($vec, $len) {
	  var $1 = ($len | 0) > 0;
	  $_$102 : do {
	    if ($1) {
	      var $sum_02 = 0;
	      var $i_03 = 0;
	      while (1) {
	        var $i_03;
	        var $sum_02;
	        var $5 = $sum_02 + HEAPF32[$vec + ($i_03 << 2) >> 2];
	        var $6 = $i_03 + 1 | 0;
	        if (($6 | 0) == ($len | 0)) {
	          break;
	        }
	        var $sum_02 = $5;
	        var $i_03 = $6;
	      }
	      if ($5 == 0) {
	        var $sum_0_lcssa6 = $5;
	        break;
	      }
	      var $8 = 1 / $5;
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $9 = ($i_11 << 2) + $vec | 0;
	        var $13 = HEAPF32[$9 >> 2] * $8;
	        HEAPF32[$9 >> 2] = $13;
	        var $14 = $i_11 + 1 | 0;
	        if (($14 | 0) == ($len | 0)) {
	          var $sum_0_lcssa6 = $5;
	          break $_$102;
	        }
	        var $i_11 = $14;
	      }
	    } else {
	      var $sum_0_lcssa6 = 0;
	    }
	  } while (0);
	  var $sum_0_lcssa6;
	  return $sum_0_lcssa6;
	  return null;
	}

	function _vector_floor($vec, $len, $flr) {
	  var $1 = ($len | 0) > 0;
	  $_$111 : do {
	    if ($1) {
	      var $2 = $flr;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $4 = ($i_01 << 2) + $vec | 0;
	        if (HEAPF32[$4 >> 2] < $flr) {
	          HEAPF32[$4 >> 2] = $2;
	        }
	        var $10 = $i_01 + 1 | 0;
	        if (($10 | 0) == ($len | 0)) {
	          break $_$111;
	        }
	        var $i_01 = $10;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _vector_nz_floor($vec, $len, $flr) {
	  var $1 = ($len | 0) > 0;
	  $_$120 : do {
	    if ($1) {
	      var $2 = $flr;
	      var $i_02 = 0;
	      while (1) {
	        var $i_02;
	        var $4 = ($i_02 << 2) + $vec | 0;
	        var $5 = HEAPF32[$4 >> 2];
	        if ($5 != 0 & $5 < $flr) {
	          HEAPF32[$4 >> 2] = $2;
	        }
	        var $11 = $i_02 + 1 | 0;
	        if (($11 | 0) == ($len | 0)) {
	          break $_$120;
	        }
	        var $i_02 = $11;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _tmat_chk_uppertri($tmat) {
	  var __stackBase__ = STACKTOP;
	  var $3 = HEAP16[$tmat + 4 >> 1] << 16 >> 16;
	  var $4 = $tmat + 6 | 0;
	  var $5 = $tmat | 0;
	  var $i_0 = 0;
	  $_$65 : while (1) {
	    var $i_0;
	    if (($i_0 | 0) >= ($3 | 0)) {
	      var $_0 = 0;
	      break;
	    }
	    var $9 = HEAP16[$4 >> 1] << 16 >> 16;
	    var $dst_0 = 0;
	    $_$68 : while (1) {
	      var $dst_0;
	      if (($dst_0 | 0) < ($9 | 0)) {
	        var $12 = $dst_0 + 1 | 0;
	        var $src_0 = $12;
	        while (1) {
	          var $src_0;
	          if (($src_0 | 0) >= ($9 | 0)) {
	            var $dst_0 = $12;
	            continue $_$68;
	          }
	          if (HEAP8[HEAP32[HEAP32[HEAP32[$5 >> 2] + ($i_0 << 2) >> 2] + ($src_0 << 2) >> 2] + $dst_0 | 0] << 24 >> 24 != -1) {
	            break;
	          }
	          var $src_0 = $src_0 + 1 | 0;
	        }
	        __E__pr_header(STRING_TABLE.__str31192 | 0, 161, STRING_TABLE.__str102579 | 0);
	        var $33 = HEAPU8[HEAP32[HEAP32[HEAP32[$5 >> 2] + ($i_0 << 2) >> 2] + ($src_0 << 2) >> 2] + $dst_0 | 0] & 255;
	        __E__pr_warn(STRING_TABLE.__str281217 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $i_0, HEAP32[tempInt + 4 >> 2] = $src_0, HEAP32[tempInt + 8 >> 2] = $dst_0, HEAP32[tempInt + 12 >> 2] = $33, tempInt));
	        var $_0 = -1;
	        break $_$65;
	      }
	      var $i_0 = $i_0 + 1 | 0;
	      continue $_$65;
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _tmat_chk_1skip($tmat) {
	  var __stackBase__ = STACKTOP;
	  var $3 = HEAP16[$tmat + 4 >> 1] << 16 >> 16;
	  var $4 = $tmat + 6 | 0;
	  var $5 = $tmat | 0;
	  var $i_0 = 0;
	  $_$79 : while (1) {
	    var $i_0;
	    if (($i_0 | 0) >= ($3 | 0)) {
	      var $_0 = 0;
	      break;
	    }
	    var $9 = HEAP16[$4 >> 1] << 16 >> 16;
	    var $src_0 = 0;
	    $_$82 : while (1) {
	      var $src_0;
	      if (($src_0 | 0) >= ($9 | 0)) {
	        var $i_0 = $i_0 + 1 | 0;
	        continue $_$79;
	      }
	      var $dst_0 = $src_0 + 3 | 0;
	      while (1) {
	        var $dst_0;
	        if (($dst_0 | 0) > ($9 | 0)) {
	          var $src_0 = $src_0 + 1 | 0;
	          continue $_$82;
	        }
	        if (HEAP8[HEAP32[HEAP32[HEAP32[$5 >> 2] + ($i_0 << 2) >> 2] + ($src_0 << 2) >> 2] + $dst_0 | 0] << 24 >> 24 == -1) {
	          var $dst_0 = $dst_0 + 1 | 0;
	          continue;
	        }
	        __E__pr_header(STRING_TABLE.__str31192 | 0, 180, STRING_TABLE.__str102579 | 0);
	        var $34 = HEAPU8[HEAP32[HEAP32[HEAP32[$5 >> 2] + ($i_0 << 2) >> 2] + ($src_0 << 2) >> 2] + $dst_0 | 0] & 255;
	        __E__pr_warn(STRING_TABLE.__str281217 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $i_0, HEAP32[tempInt + 4 >> 2] = $src_0, HEAP32[tempInt + 8 >> 2] = $dst_0, HEAP32[tempInt + 12 >> 2] = $34, tempInt));
	        var $_0 = -1;
	        break $_$79;
	      }
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _tmat_free($t) {
	  if (($t | 0) != 0) {
	    var $4 = HEAP32[$t >> 2];
	    if (($4 | 0) != 0) {
	      var $7 = $4;
	      _ckd_free_3d($7);
	    }
	    var $9 = $t;
	    _ckd_free($9);
	  }
	  return;
	  return;
	}

	function _fe_parse_general_params($config, $fe) {
	  var $21$s2;
	  var $4$s2;
	  var $config_idx10$s2;
	  var __stackBase__ = STACKTOP;
	  HEAP32[$fe >> 2] = $config;
	  var $config_idx10$s2 = ($config + 4 | 0) >> 2;
	  var $config_idx10_val = HEAP32[$config_idx10$s2];
	  var $2 = _cmd_ln_float_r($config_idx10_val, STRING_TABLE.__str302599 | 0);
	  var $4$s2 = ($fe + 8 | 0) >> 2;
	  HEAPF32[$4$s2] = $2;
	  var $config_idx7_val = HEAP32[$config_idx10$s2];
	  var $5 = _cmd_ln_int_r($config_idx7_val, STRING_TABLE.__str332602 | 0);
	  HEAP16[$fe + 12 >> 1] = $5 & 65535;
	  var $config_idx6_val = HEAP32[$config_idx10$s2];
	  var $8 = _cmd_ln_int_r($config_idx6_val, STRING_TABLE.__str722641 | 0);
	  if (($8 | 0) != 0) {
	    HEAP8[$fe + 30 | 0] = 1;
	    var $config_idx5_val = HEAP32[$config_idx10$s2];
	    var $12 = _cmd_ln_int_r($config_idx5_val, STRING_TABLE.__str742643 | 0);
	    HEAP32[$fe + 36 >> 2] = $12;
	  }
	  var $config_idx14_val = HEAP32[$config_idx10$s2];
	  var $15 = _cmd_ln_str_r($config_idx14_val, STRING_TABLE.__str642633 | 0);
	  var $16 = _strcmp(STRING_TABLE.__str652634 | 0, $15);
	  HEAP8[$fe + 29 | 0] = ($16 | 0) != 0 & 1;
	  var $config_idx9_val = HEAP32[$config_idx10$s2];
	  var $19 = _cmd_ln_float_r($config_idx9_val, STRING_TABLE.__str362605 | 0);
	  var $21$s2 = ($fe + 16 | 0) >> 2;
	  HEAPF32[$21$s2] = $19;
	  var $config_idx8_val = HEAP32[$config_idx10$s2];
	  var $22 = _cmd_ln_float_r($config_idx8_val, STRING_TABLE.__str272596 | 0);
	  HEAPF32[$fe + 32 >> 2] = $22;
	  var $config_idx4_val = HEAP32[$config_idx10$s2];
	  var $25 = _cmd_ln_int_r($config_idx4_val, STRING_TABLE.__str562625 | 0);
	  HEAP8[$fe + 26 | 0] = $25 & 255;
	  var $config_idx3_val = HEAP32[$config_idx10$s2];
	  var $28 = _cmd_ln_int_r($config_idx3_val, STRING_TABLE.__str392608 | 0);
	  var $29 = $28 & 65535;
	  var $30 = $fe + 22 | 0;
	  HEAP16[$30 >> 1] = $29;
	  var $31 = $29 << 16 >> 16;
	  var $32 = $fe + 24 | 0;
	  var $33 = $29 << 16 >> 16 < 1;
	  var $j_0 = $31;
	  var $storemerge = 0;
	  while (1) {
	    var $storemerge;
	    var $j_0;
	    if (($j_0 | 0) > 1) {
	      if (($j_0 & 1 | 0) != 0 | $33) {
	        HEAP8[$32] = $storemerge;
	        __E__pr_header(STRING_TABLE.__str101240 | 0, 94, STRING_TABLE.__str102579 | 0);
	        var $41 = HEAP16[$30 >> 1] << 16 >> 16;
	        __E__pr_warn(STRING_TABLE.__str121242 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $41, tempInt));
	        var $_0 = -1;
	        break;
	      }
	      var $j_0 = $j_0 >> 1;
	      var $storemerge = $storemerge + 1 & 255;
	    } else {
	      HEAP8[$32] = $storemerge;
	      if (($31 | 0) < (HEAPF32[$21$s2] * HEAPF32[$4$s2] & -1 | 0)) {
	        __E__pr_header(STRING_TABLE.__str101240 | 0, 101, STRING_TABLE.__str102579 | 0);
	        var $55 = HEAPF32[$21$s2] * HEAPF32[$4$s2] & -1;
	        __E__pr_warn(STRING_TABLE.__str131243 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $55, tempInt));
	        var $_0 = -1;
	        break;
	      }
	      var $config_idx2_val = HEAP32[$config_idx10$s2];
	      var $57 = _cmd_ln_int_r($config_idx2_val, STRING_TABLE.__str772646 | 0);
	      HEAP8[$fe + 27 | 0] = ($57 | 0) != 0 & 1;
	      var $config_idx13_val = HEAP32[$config_idx10$s2];
	      var $61 = _cmd_ln_str_r($config_idx13_val, STRING_TABLE.__str242593 | 0);
	      var $62 = _strcmp($61, STRING_TABLE.__str161246 | 0);
	      if (($62 | 0) == 0) {
	        HEAP8[$fe + 31 | 0] = 1;
	      } else {
	        var $config_idx12_val = HEAP32[$config_idx10$s2];
	        var $67 = _cmd_ln_str_r($config_idx12_val, STRING_TABLE.__str242593 | 0);
	        var $68 = _strcmp($67, STRING_TABLE.__str252594 | 0);
	        if (($68 | 0) == 0) {
	          HEAP8[$fe + 31 | 0] = 0;
	        } else {
	          var $config_idx11_val = HEAP32[$config_idx10$s2];
	          var $73 = _cmd_ln_str_r($config_idx11_val, STRING_TABLE.__str242593 | 0);
	          var $74 = _strcmp($73, STRING_TABLE.__str181248 | 0);
	          if (($74 | 0) != 0) {
	            __E__pr_header(STRING_TABLE.__str101240 | 0, 115, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str191249 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            var $_0 = -1;
	            break;
	          }
	          HEAP8[$fe + 31 | 0] = 2;
	        }
	      }
	      var $config_idx1_val = HEAP32[$config_idx10$s2];
	      var $80 = _cmd_ln_int_r($config_idx1_val, STRING_TABLE.__str192588 | 0);
	      if (($80 | 0) != 0) {
	        HEAP8[$fe + 28 | 0] = 1;
	      }
	      var $config_idx_val = HEAP32[$config_idx10$s2];
	      var $85 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str222591 | 0);
	      if (($85 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      HEAP8[$fe + 28 | 0] = 2;
	      var $_0 = 0;
	      break;
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fe_parse_general_params["X"] = 1;

	function _fe_print_current($fe) {
	  var $13$s2;
	  var __stackBase__ = STACKTOP;
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 163);
	  __E__pr_info(STRING_TABLE.__str231253 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 164);
	  var $3 = HEAPF32[$fe + 8 >> 2];
	  __E__pr_info(STRING_TABLE.__str241254 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $3, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 165);
	  var $6 = HEAP16[$fe + 20 >> 1] << 16 >> 16;
	  __E__pr_info(STRING_TABLE.__str251255 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $6, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 166);
	  var $9 = HEAP16[$fe + 14 >> 1] << 16 >> 16;
	  __E__pr_info(STRING_TABLE.__str261256 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $9, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 167);
	  var $12 = HEAP16[$fe + 22 >> 1] << 16 >> 16;
	  __E__pr_info(STRING_TABLE.__str271257 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $12, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 168);
	  var $13$s2 = ($fe + 52 | 0) >> 2;
	  var $17 = HEAPF32[HEAP32[$13$s2] + 16 >> 2];
	  __E__pr_info(STRING_TABLE.__str281258 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $17, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 170);
	  var $21 = HEAPF32[HEAP32[$13$s2] + 20 >> 2];
	  __E__pr_info(STRING_TABLE.__str291259 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $21, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 172);
	  var $24 = HEAP32[HEAP32[$13$s2] + 8 >> 2];
	  __E__pr_info(STRING_TABLE.__str301260 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $24, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 173);
	  var $27 = HEAP16[$fe + 80 >> 1] << 16 >> 16;
	  __E__pr_info(STRING_TABLE.__str311261 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $27, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 174);
	  var $30 = HEAPU8[$fe + 42 | 0] & 255;
	  __E__pr_info(STRING_TABLE.__str321262 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $30, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 175);
	  var $34 = HEAP8[$fe + 27 | 0] << 24 >> 24 != 0 ? __str302067 | 0 : STRING_TABLE.__str351265 | 0;
	  __E__pr_info(STRING_TABLE.__str331263 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $34, tempInt));
	  if (HEAP8[$fe + 30 | 0] << 24 >> 24 == 0) {
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 182);
	    __E__pr_info(STRING_TABLE.__str381268 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  } else {
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 178);
	    __E__pr_info(STRING_TABLE.__str361266 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 179);
	    var $40 = HEAP32[$fe + 36 >> 2];
	    __E__pr_info(STRING_TABLE.__str371267 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $40, tempInt));
	  }
	  if ((HEAP32[HEAP32[$13$s2] + 68 >> 2] | 0) != 0) {
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 185);
	    var $50 = HEAP32[HEAP32[$13$s2] + 68 >> 2];
	    __E__pr_info(STRING_TABLE.__str391269 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $50, tempInt));
	  }
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 188);
	  var $56 = (HEAP32[HEAP32[$13$s2] + 76 >> 2] | 0) != 0 ? __str302067 | 0 : STRING_TABLE.__str351265 | 0;
	  __E__pr_info(STRING_TABLE.__str401270 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $56, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 190);
	  var $61 = (HEAP32[HEAP32[$13$s2] + 80 >> 2] | 0) != 0 ? __str302067 | 0 : STRING_TABLE.__str351265 | 0;
	  __E__pr_info(STRING_TABLE.__str411271 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $61, tempInt));
	  __E__pr_info_header(STRING_TABLE.__str101240 | 0, 192);
	  var $66 = (HEAP32[HEAP32[$13$s2] + 44 >> 2] | 0) != 0 ? __str302067 | 0 : STRING_TABLE.__str351265 | 0;
	  __E__pr_info(STRING_TABLE.__str421272 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $66, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fe_print_current["X"] = 1;

	function _tmat_init($file_name, $lmath, $tpfloor) {
	  var $93$s2;
	  var $56$s1;
	  var $i$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 36;
	  var $tmp = __stackBase__;
	  var $n_src = __stackBase__ + 4;
	  var $n_dst = __stackBase__ + 8;
	  var $n_tmat = __stackBase__ + 12;
	  var $byteswap = __stackBase__ + 16;
	  var $chksum = __stackBase__ + 20;
	  var $i = __stackBase__ + 24, $i$s2 = $i >> 2;
	  var $argname = __stackBase__ + 28;
	  var $argval = __stackBase__ + 32;
	  __E__pr_info_header(STRING_TABLE.__str31192 | 0, 205);
	  __E__pr_info(STRING_TABLE.__str51194 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  var $1 = ___ckd_calloc__(1, 8, STRING_TABLE.__str31192 | 0, 209);
	  var $2 = $1;
	  var $3 = _fopen($file_name, STRING_TABLE.__str92578 | 0);
	  if (($3 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str31192 | 0, 212, STRING_TABLE.__str232533 | 0);
	    __E__fatal_sys_error(STRING_TABLE.__str81197 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	  } else {
	    var $7 = _bio_readhdr($3, $argname, $argval, $byteswap);
	    if (($7 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str31192 | 0, 216, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str101199 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    } else {
	      HEAP32[$i$s2] = 0;
	      var $9 = HEAP32[$argname >> 2];
	      var $10 = HEAP32[$9 >> 2];
	      var $_pre = HEAP32[$argval >> 2];
	      if (($10 | 0) == 0) {
	        var $chksum_present_0_lcssa = 0;
	      } else {
	        var $chksum_present_09 = 0;
	        var $14 = $10;
	        var $13 = 0;
	        while (1) {
	          var $13;
	          var $14;
	          var $chksum_present_09;
	          var $15 = _strcmp($14, STRING_TABLE.__str82348 | 0);
	          var $16 = ($15 | 0) == 0;
	          do {
	            if ($16) {
	              var $18 = ($13 << 2) + $_pre | 0;
	              var $19 = HEAP32[$18 >> 2];
	              var $20 = _strcmp($19, STRING_TABLE.__str2392808 | 0);
	              if (($20 | 0) == 0) {
	                var $chksum_present_1 = $chksum_present_09;
	                break;
	              }
	              __E__pr_header(STRING_TABLE.__str31192 | 0, 223, STRING_TABLE.__str212436 | 0);
	              var $23 = HEAP32[$18 >> 2];
	              __E__pr_warn(STRING_TABLE.__str141203 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str2392808 | 0, tempInt));
	              var $chksum_present_1 = $chksum_present_09;
	            } else {
	              var $25 = _strcmp($14, STRING_TABLE.__str92349 | 0);
	              var $_chksum_present_0 = ($25 | 0) == 0 ? 1 : $chksum_present_09;
	              var $chksum_present_1 = $_chksum_present_0;
	            }
	          } while (0);
	          var $chksum_present_1;
	          var $28 = $13 + 1 | 0;
	          var $30 = HEAP32[$9 + ($28 << 2) >> 2];
	          if (($30 | 0) == 0) {
	            break;
	          }
	          var $chksum_present_09 = $chksum_present_1;
	          var $14 = $30;
	          var $13 = $28;
	        }
	        HEAP32[$i$s2] = $28;
	        var $chksum_present_0_lcssa = $chksum_present_1;
	      }
	      var $chksum_present_0_lcssa;
	      _bio_hdrarg_free($9, $_pre);
	      HEAP32[$argval >> 2] = 0;
	      HEAP32[$argname >> 2] = 0;
	      HEAP32[$chksum >> 2] = 0;
	      var $32 = $n_tmat;
	      var $33 = HEAP32[$byteswap >> 2];
	      var $34 = _bio_fread($32, 1, $3, $33, $chksum);
	      var $35 = ($34 | 0) == 1;
	      do {
	        if ($35) {
	          var $37 = $n_src;
	          var $38 = _bio_fread($37, 1, $3, $33, $chksum);
	          if (($38 | 0) != 1) {
	            break;
	          }
	          var $41 = $n_dst;
	          var $42 = _bio_fread($41, 1, $3, $33, $chksum);
	          if (($42 | 0) != 1) {
	            break;
	          }
	          var $45 = $i;
	          var $46 = _bio_fread($45, 1, $3, $33, $chksum);
	          if (($46 | 0) != 1) {
	            break;
	          }
	          var $50 = HEAP32[$n_tmat >> 2];
	          if (($50 | 0) > 32766) {
	            __E__pr_header(STRING_TABLE.__str31192 | 0, 246, STRING_TABLE.__str72422 | 0);
	            __E__die_error(STRING_TABLE.__str171206 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $50, HEAP32[tempInt + 8 >> 2] = 32767, tempInt));
	          } else {
	            var $54 = $50 & 65535;
	            var $56$s1 = ($1 + 4 | 0) >> 1;
	            HEAP16[$56$s1] = $54;
	            var $57 = HEAP32[$n_dst >> 2];
	            var $58 = HEAP32[$n_src >> 2];
	            if (($57 | 0) == ($58 + 1 | 0)) {
	              HEAP16[$1 + 6 >> 1] = $58 & 65535;
	              var $66 = HEAP32[$i$s2];
	              var $67 = $54 << 16 >> 16;
	              if (($66 | 0) == ($67 * $58 * $57 | 0)) {
	                var $75 = ___ckd_calloc_3d__($67, $58, $57, 1, STRING_TABLE.__str31192 | 0, 262);
	                var $76 = $75;
	                var $77 = $1;
	                HEAP32[$77 >> 2] = $76;
	                var $78 = ___ckd_calloc_2d__($58, $57, 4, STRING_TABLE.__str31192 | 0, 265);
	                var $79 = $78;
	                var $80 = $57 * $58 | 0;
	                var $81 = ($58 | 0) > 0;
	                var $82 = ($57 | 0) > 0;
	                var $storemerge1 = 0;
	                while (1) {
	                  var $storemerge1;
	                  if (($storemerge1 | 0) < (HEAP16[$56$s1] << 16 >> 16 | 0)) {
	                    var $89 = HEAP32[$79 >> 2];
	                    var $90 = _bio_fread($89, $80, $3, $33, $chksum);
	                    if (($90 | 0) == ($80 | 0)) {
	                      $_$37 : do {
	                        if ($81) {
	                          var $j_03 = 0;
	                          while (1) {
	                            var $j_03;
	                            var $93$s2 = (($j_03 << 2) + $79 | 0) >> 2;
	                            var $94 = HEAP32[$93$s2];
	                            var $95 = _vector_sum_norm($94, $57);
	                            if ($95 == 0) {
	                              __E__pr_header(STRING_TABLE.__str31192 | 0, 278, STRING_TABLE.__str212436 | 0);
	                              __E__pr_warn(STRING_TABLE.__str211210 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $storemerge1, HEAP32[tempInt + 4 >> 2] = $j_03, tempInt));
	                            }
	                            var $99 = HEAP32[$93$s2];
	                            _vector_nz_floor($99, $57, $tpfloor);
	                            var $100 = HEAP32[$93$s2];
	                            var $101 = _vector_sum_norm($100, $57);
	                            $_$43 : do {
	                              if ($82) {
	                                var $k_02 = 0;
	                                while (1) {
	                                  var $k_02;
	                                  var $105 = HEAPF32[HEAP32[$93$s2] + ($k_02 << 2) >> 2];
	                                  var $106 = _logmath_log($lmath, $105);
	                                  var $108 = -$106 >> 10;
	                                  var $111 = ($108 | 0) > 255 ? -1 : $108 & 255;
	                                  HEAP8[HEAP32[HEAP32[HEAP32[$77 >> 2] + ($storemerge1 << 2) >> 2] + ($j_03 << 2) >> 2] + $k_02 | 0] = $111;
	                                  var $118 = $k_02 + 1 | 0;
	                                  if (($118 | 0) == ($57 | 0)) {
	                                    break $_$43;
	                                  }
	                                  var $k_02 = $118;
	                                }
	                              }
	                            } while (0);
	                            var $119 = $j_03 + 1 | 0;
	                            if (($119 | 0) == ($58 | 0)) {
	                              break $_$37;
	                            }
	                            var $j_03 = $119;
	                          }
	                        }
	                      } while (0);
	                      var $storemerge1 = $storemerge1 + 1 | 0;
	                    } else {
	                      __E__pr_header(STRING_TABLE.__str31192 | 0, 272, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str201209 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $storemerge1, HEAP32[tempInt + 4 >> 2] = $file_name, tempInt));
	                    }
	                  } else {
	                    HEAP32[$i$s2] = $storemerge1;
	                    _ckd_free_2d($78);
	                    if (($chksum_present_0_lcssa | 0) != 0) {
	                      var $124 = HEAP32[$chksum >> 2];
	                      _bio_verify_chksum($3, $33, $124);
	                    }
	                    var $126 = _fread($tmp, 1, 1, $3);
	                    if (($126 | 0) == 1) {
	                      __E__pr_header(STRING_TABLE.__str31192 | 0, 306, STRING_TABLE.__str102579 | 0);
	                      __E__pr_warn(STRING_TABLE.__str231212 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    }
	                    var $130 = _fclose($3);
	                    var $131 = _tmat_chk_uppertri($2);
	                    if (($131 | 0) < 0) {
	                      __E__pr_header(STRING_TABLE.__str31192 | 0, 311, STRING_TABLE.__str72422 | 0);
	                      __E__die_error(STRING_TABLE.__str241213 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    } else {
	                      var $135 = _tmat_chk_1skip($2);
	                      if (($135 | 0) < 0) {
	                        __E__pr_header(STRING_TABLE.__str31192 | 0, 313, STRING_TABLE.__str72422 | 0);
	                        __E__die_error(STRING_TABLE.__str251214 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                      } else {
	                        STACKTOP = __stackBase__;
	                        return $2;
	                      }
	                    }
	                  }
	                }
	              } else {
	                __E__pr_header(STRING_TABLE.__str31192 | 0, 256, STRING_TABLE.__str72422 | 0);
	                var $73 = HEAP16[$56$s1] << 16 >> 16;
	                __E__die_error(STRING_TABLE.__str191208 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $66, HEAP32[tempInt + 8 >> 2] = $73, HEAP32[tempInt + 12 >> 2] = $58, HEAP32[tempInt + 16 >> 2] = $57, tempInt));
	              }
	            } else {
	              __E__pr_header(STRING_TABLE.__str31192 | 0, 251, STRING_TABLE.__str72422 | 0);
	              __E__die_error(STRING_TABLE.__str181207 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $file_name, HEAP32[tempInt + 4 >> 2] = $58, HEAP32[tempInt + 8 >> 2] = $57, tempInt));
	            }
	          }
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str31192 | 0, 243, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str161205 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    }
	  }
	  return null;
	}

	_tmat_init["X"] = 1;

	function _fe_get_output_size($fe_0_9_val) {
	  return $fe_0_9_val & 255;
	  return null;
	}

	function _fe_init_auto_r($config) {
	  var $71$s2;
	  var $38$s1;
	  var $32$s1;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(1, 84, STRING_TABLE.__str101240 | 0, 207);
	  var $2 = $1;
	  HEAP32[$1 + 4 >> 2] = 1;
	  var $5 = _fe_parse_general_params($config, $2);
	  if (($5 | 0) < 0) {
	    _fe_free($2);
	    var $_0 = 0;
	  } else {
	    var $11 = HEAPF32[$1 + 8 >> 2];
	    var $20 = $11 / (HEAP16[$1 + 12 >> 1] << 16 >> 16) + .5 & -1 & 65535;
	    HEAP16[$1 + 14 >> 1] = $20;
	    var $30 = HEAPF32[$1 + 16 >> 2] * $11 + .5 & -1 & 65535;
	    var $32$s1 = ($1 + 20 | 0) >> 1;
	    HEAP16[$32$s1] = $30;
	    HEAP16[$1 + 82 >> 1] = 0;
	    HEAP16[$1 + 40 >> 1] = 0;
	    var $38$s1 = ($1 + 22 | 0) >> 1;
	    if ($30 << 16 >> 16 > HEAP16[$38$s1] << 16 >> 16) {
	      __E__pr_header(STRING_TABLE.__str101240 | 0, 226, STRING_TABLE.__str212436 | 0);
	      var $43 = HEAP16[$32$s1] << 16 >> 16;
	      __E__pr_warn(STRING_TABLE.__str441274 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $43, tempInt));
	      _fe_free($2);
	      var $_0 = 0;
	    } else {
	      if (HEAP8[$1 + 30 | 0] << 24 >> 24 == 0) {
	        var $53 = $30;
	      } else {
	        var $51 = HEAP32[$1 + 36 >> 2];
	        _fe_init_dither($51);
	        var $53 = HEAP16[$32$s1];
	      }
	      var $53;
	      var $55 = ___ckd_calloc__($53 << 16 >> 16, 2, STRING_TABLE.__str101240 | 0, 237);
	      HEAP32[$1 + 76 >> 2] = $55;
	      var $61 = (HEAP16[$32$s1] << 16 >> 16 | 0) / 2 & -1;
	      var $62 = ___ckd_calloc__($61, 8, STRING_TABLE.__str101240 | 0, 238);
	      var $63 = $62;
	      HEAP32[$1 + 56 >> 2] = $63;
	      var $67 = HEAP16[$32$s1] << 16 >> 16;
	      _fe_create_hamming($63, $67);
	      var $68 = ___ckd_calloc__(1, 84, STRING_TABLE.__str101240 | 0, 244);
	      var $69 = $68;
	      var $71$s2 = ($1 + 52 | 0) >> 2;
	      HEAP32[$71$s2] = $69;
	      _fe_parse_melfb_params($config, $2, $69);
	      var $72 = HEAP32[$71$s2];
	      _fe_build_melfilters($72);
	      var $73 = HEAP32[$71$s2];
	      _fe_compute_melcosine($73);
	      var $75 = HEAP16[$32$s1] << 16 >> 16;
	      var $76 = ___ckd_calloc__($75, 2, STRING_TABLE.__str101240 | 0, 253);
	      HEAP32[$1 + 60 >> 2] = $76;
	      var $81 = HEAP16[$38$s1] << 16 >> 16;
	      var $82 = ___ckd_calloc__($81, 8, STRING_TABLE.__str101240 | 0, 254);
	      HEAP32[$1 + 64 >> 2] = $82;
	      var $87 = HEAP16[$38$s1] << 16 >> 16;
	      var $88 = ___ckd_calloc__($87, 8, STRING_TABLE.__str101240 | 0, 255);
	      HEAP32[$1 + 68 >> 2] = $88;
	      var $94 = HEAP32[HEAP32[$71$s2] + 8 >> 2];
	      var $95 = ___ckd_calloc__($94, 8, STRING_TABLE.__str101240 | 0, 256);
	      var $96 = $95;
	      HEAP32[$1 + 72 >> 2] = $96;
	      var $101 = (HEAP16[$38$s1] << 16 >> 16 | 0) / 4 & -1;
	      var $102 = ___ckd_calloc__($101, 8, STRING_TABLE.__str101240 | 0, 259);
	      HEAP32[$1 + 44 >> 2] = $102;
	      var $108 = (HEAP16[$38$s1] << 16 >> 16 | 0) / 4 & -1;
	      var $109 = ___ckd_calloc__($108, 8, STRING_TABLE.__str101240 | 0, 260);
	      HEAP32[$1 + 48 >> 2] = $109;
	      _fe_create_twiddle($2);
	      var $config_idx_val = HEAP32[$config + 4 >> 2];
	      var $113 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str792648 | 0);
	      if (($113 | 0) != 0) {
	        _fe_print_current($2);
	      }
	      _fe_start_utt($2);
	      var $_0 = $2;
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fe_init_auto_r["X"] = 1;

	function _fe_free($fe) {
	  var $8$s2;
	  var $fe$s2 = $fe >> 2;
	  var $1 = ($fe | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $fe + 4 | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $8$s2 = ($fe + 52 | 0) >> 2;
	      var $9 = HEAP32[$8$s2];
	      if (($9 | 0) != 0) {
	        var $13 = HEAP32[$9 + 24 >> 2];
	        if (($13 | 0) == 0) {
	          var $18 = $9;
	        } else {
	          var $16 = $13;
	          _fe_free_2d($16);
	          var $18 = HEAP32[$8$s2];
	        }
	        var $18;
	        var $21 = HEAP32[$18 + 72 >> 2];
	        _ckd_free($21);
	        var $25 = HEAP32[HEAP32[$8$s2] + 32 >> 2];
	        _ckd_free($25);
	        var $29 = HEAP32[HEAP32[$8$s2] + 36 >> 2];
	        _ckd_free($29);
	        var $33 = HEAP32[HEAP32[$8$s2] + 40 >> 2];
	        _ckd_free($33);
	        var $37 = HEAP32[HEAP32[$8$s2] + 28 >> 2];
	        _ckd_free($37);
	        var $39 = HEAP32[$8$s2];
	        _ckd_free($39);
	      }
	      var $43 = HEAP32[$fe$s2 + 15];
	      _ckd_free($43);
	      var $46 = HEAP32[$fe$s2 + 16];
	      _ckd_free($46);
	      var $49 = HEAP32[$fe$s2 + 11];
	      _ckd_free($49);
	      var $52 = HEAP32[$fe$s2 + 12];
	      _ckd_free($52);
	      var $55 = HEAP32[$fe$s2 + 17];
	      _ckd_free($55);
	      var $58 = HEAP32[$fe$s2 + 18];
	      _ckd_free($58);
	      var $61 = HEAP32[$fe$s2 + 19];
	      _ckd_free($61);
	      var $64 = HEAP32[$fe$s2 + 14];
	      _ckd_free($64);
	      var $66 = HEAP32[$fe$s2];
	      _cmd_ln_free_r($66);
	      var $67 = $fe;
	      _ckd_free($67);
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_free["X"] = 1;

	function _fe_init_dither($seed) {
	  var __stackBase__ = STACKTOP;
	  if (($seed | 0) < 0) {
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 289);
	    __E__pr_info(STRING_TABLE.__str461276 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $3 = _time(0);
	    _genrand_seed($3);
	  } else {
	    __E__pr_info_header(STRING_TABLE.__str101240 | 0, 297);
	    __E__pr_info(STRING_TABLE.__str471277 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $seed, tempInt));
	    _genrand_seed($seed);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fe_parse_melfb_params($config, $fe, $mel) {
	  var $config_idx4$s2;
	  var $mel$s2 = $mel >> 2;
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPF32[$fe + 8 >> 2];
	  var $3 = $mel | 0;
	  HEAPF32[$3 >> 2] = $2;
	  HEAP32[$mel$s2 + 3] = HEAP16[$fe + 22 >> 1] << 16 >> 16;
	  var $8 = $fe + 26 | 0;
	  HEAP32[$mel$s2 + 1] = HEAPU8[$8] & 255;
	  var $config_idx4$s2 = ($config + 4 | 0) >> 2;
	  var $config_idx4_val = HEAP32[$config_idx4$s2];
	  var $12 = _cmd_ln_int_r($config_idx4_val, STRING_TABLE.__str422611 | 0);
	  HEAP32[$mel$s2 + 2] = $12;
	  if (HEAP8[$fe + 28 | 0] << 24 >> 24 == 0) {
	    var $21 = HEAP8[$8];
	    HEAP8[$fe + 25 | 0] = $21;
	  } else {
	    HEAP8[$fe + 25 | 0] = $12 & 255;
	  }
	  var $config_idx6_val = HEAP32[$config_idx4$s2];
	  var $24 = _cmd_ln_float_r($config_idx6_val, STRING_TABLE.__str482617 | 0);
	  HEAPF32[$mel$s2 + 5] = $24;
	  var $config_idx5_val = HEAP32[$config_idx4$s2];
	  var $27 = _cmd_ln_float_r($config_idx5_val, STRING_TABLE.__str452614 | 0);
	  HEAPF32[$mel$s2 + 4] = $27;
	  var $config_idx3_val = HEAP32[$config_idx4$s2];
	  var $30 = _cmd_ln_int_r($config_idx3_val, STRING_TABLE.__str592628 | 0);
	  var $32 = ($30 | 0) != 0 & 1;
	  HEAP32[$mel$s2 + 11] = $32;
	  var $config_idx8_val = HEAP32[$config_idx4$s2];
	  var $34 = _cmd_ln_str_r($config_idx8_val, STRING_TABLE.__str672636 | 0);
	  var $35 = $mel + 48 | 0;
	  HEAP32[$35 >> 2] = $34;
	  var $config_idx7_val = HEAP32[$config_idx4$s2];
	  var $36 = _cmd_ln_str_r($config_idx7_val, STRING_TABLE.__str702639 | 0);
	  var $37 = $mel + 52 | 0;
	  HEAP32[$37 >> 2] = $36;
	  var $config_idx2_val = HEAP32[$config_idx4$s2];
	  var $38 = _cmd_ln_int_r($config_idx2_val, STRING_TABLE.__str612630 | 0);
	  HEAP32[$mel$s2 + 17] = $38;
	  var $config_idx1_val = HEAP32[$config_idx4$s2];
	  var $40 = _cmd_ln_int_r($config_idx1_val, STRING_TABLE.__str512620 | 0);
	  var $42 = ($40 | 0) != 0 & 1;
	  HEAP32[$mel$s2 + 19] = $42;
	  var $config_idx_val = HEAP32[$config_idx4$s2];
	  var $44 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str542623 | 0);
	  var $46 = ($44 | 0) != 0 & 1;
	  HEAP32[$mel$s2 + 20] = $46;
	  var $48 = HEAP32[$35 >> 2];
	  var $49 = _fe_warp_set($mel, $48);
	  if (($49 | 0) == 0) {
	    var $53 = HEAP32[$37 >> 2];
	    var $54 = HEAPF32[$3 >> 2];
	    _fe_warp_set_parameters($mel, $53, $54);
	  } else {
	    __E__pr_header(STRING_TABLE.__str101240 | 0, 153, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str961326 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fe_parse_melfb_params["X"] = 1;

	function _fe_start_utt($fe) {
	  HEAP16[$fe + 80 >> 1] = 0;
	  var $4 = HEAP32[$fe + 76 >> 2];
	  var $8 = HEAP16[$fe + 20 >> 1] << 16 >> 16 << 1;
	  _memset($4, 0, $8, 2);
	  HEAP8[$fe + 42 | 0] = 1;
	  HEAP16[$fe + 82 >> 1] = 0;
	  return;
	  return;
	}

	function _fe_process_frames($fe, $inout_spch, $inout_nsamps, $buf_cep, $inout_nframes) {
	  var $47$s1;
	  var $7$s1;
	  var $3$s1;
	  var $inout_nframes$s2 = $inout_nframes >> 2;
	  var $inout_nsamps$s2 = $inout_nsamps >> 2;
	  var $inout_spch$s2 = $inout_spch >> 2;
	  var $2 = HEAPU32[$inout_nsamps$s2];
	  var $3$s1 = ($fe + 80 | 0) >> 1;
	  var $4 = HEAPU16[$3$s1];
	  var $5 = $4 << 16 >> 16;
	  var $6 = $5 + $2 | 0;
	  var $7$s1 = ($fe + 20 | 0) >> 1;
	  var $9 = HEAP16[$7$s1] << 16 >> 16;
	  var $10 = $6 >>> 0 < $9 >>> 0;
	  if (($buf_cep | 0) == 0) {
	    if ($10) {
	      var $storemerge = 0;
	    } else {
	      var $13 = $6 - $9 | 0;
	      var $16 = HEAP16[$fe + 14 >> 1] << 16 >> 16;
	      var $17 = Math.floor(($13 >>> 0) / ($16 >>> 0));
	      var $storemerge = $17 + 1 | 0;
	    }
	    var $storemerge;
	    HEAP32[$inout_nframes$s2] = $storemerge;
	    var $_0 = $storemerge;
	  } else {
	    if ($10) {
	      if (($2 | 0) != 0) {
	        var $27 = ($5 << 1) + HEAP32[$fe + 76 >> 2] | 0;
	        var $29 = HEAP32[$inout_spch$s2];
	        var $30 = $2 << 1;
	        _memcpy($27, $29, $30, 2);
	        HEAP16[$3$s1] = (HEAPU16[$3$s1] & 65535) + HEAP32[$inout_nsamps$s2] & 65535;
	        var $38 = (HEAP32[$inout_nsamps$s2] << 1) + HEAP32[$inout_spch$s2] | 0;
	        HEAP32[$inout_spch$s2] = $38;
	        HEAP32[$inout_nsamps$s2] = 0;
	      }
	      HEAP32[$inout_nframes$s2] = 0;
	      var $_0 = 0;
	    } else {
	      var $41 = HEAPU32[$inout_nframes$s2];
	      if (($41 | 0) < 1) {
	        HEAP32[$inout_nframes$s2] = 0;
	        var $_0 = 0;
	      } else {
	        var $45 = HEAPU32[$inout_spch$s2];
	        var $46 = $6 - $9 | 0;
	        var $47$s1 = ($fe + 14 | 0) >> 1;
	        var $49 = HEAP16[$47$s1] << 16 >> 16;
	        var $50 = Math.floor(($46 >>> 0) / ($49 >>> 0));
	        var $51 = $50 + 1 | 0;
	        var $_ = ($51 | 0) > ($41 | 0) ? $41 : $51;
	        if ($4 << 16 >> 16 == 0) {
	          _fe_read_frame($fe, $45, $9);
	          if (($_ | 0) <= 0) {
	            ___assert_func(STRING_TABLE.__str101240 | 0, 412, STRING_TABLE.___func___fe_process_frames | 0, STRING_TABLE.__str481278 | 0);
	          }
	          var $80 = HEAP32[$buf_cep >> 2];
	          _fe_write_frame($fe, $80);
	          var $84 = (HEAP16[$7$s1] << 16 >> 16 << 1) + HEAP32[$inout_spch$s2] | 0;
	          HEAP32[$inout_spch$s2] = $84;
	          var $88 = HEAP32[$inout_nsamps$s2] - (HEAP16[$7$s1] << 16 >> 16) | 0;
	          HEAP32[$inout_nsamps$s2] = $88;
	        } else {
	          var $55 = $9 - $5 | 0;
	          var $56 = $fe + 76 | 0;
	          var $59 = ($5 << 1) + HEAP32[$56 >> 2] | 0;
	          var $60 = $45;
	          var $61 = $55 << 1;
	          _memcpy($59, $60, $61, 2);
	          var $62 = HEAP32[$56 >> 2];
	          var $64 = HEAP16[$7$s1] << 16 >> 16;
	          _fe_read_frame($fe, $62, $64);
	          if (($_ | 0) <= 0) {
	            ___assert_func(STRING_TABLE.__str101240 | 0, 401, STRING_TABLE.___func___fe_process_frames | 0, STRING_TABLE.__str481278 | 0);
	          }
	          var $68 = HEAP32[$buf_cep >> 2];
	          _fe_write_frame($fe, $68);
	          var $70 = ($55 << 1) + HEAP32[$inout_spch$s2] | 0;
	          HEAP32[$inout_spch$s2] = $70;
	          var $72 = HEAP32[$inout_nsamps$s2] - $55 | 0;
	          HEAP32[$inout_nsamps$s2] = $72;
	          var $75 = HEAP16[$3$s1] - HEAP16[$47$s1] & 65535;
	          HEAP16[$3$s1] = $75;
	        }
	        var $89 = ($_ | 0) > 1;
	        $_$68 : do {
	          if ($89) {
	            var $90 = $41 ^ -1;
	            var $91 = -2 - $50 | 0;
	            var $smax = ($91 | 0) < ($90 | 0) ? $90 : $91;
	            var $93 = $smax ^ -1;
	            var $i_04 = 1;
	            while (1) {
	              var $i_04;
	              var $95 = HEAPU16[$47$s1];
	              if (HEAPU32[$inout_nsamps$s2] >>> 0 < $95 << 16 >> 16 >>> 0) {
	                ___assert_func(STRING_TABLE.__str101240 | 0, 423, STRING_TABLE.___func___fe_process_frames | 0, STRING_TABLE.__str491279 | 0);
	                var $100 = HEAP16[$47$s1];
	              } else {
	                var $100 = $95;
	              }
	              var $100;
	              var $101 = HEAP32[$inout_spch$s2];
	              _fe_shift_frame($fe, $101, $100 << 16 >> 16);
	              var $104 = HEAP32[$buf_cep + ($i_04 << 2) >> 2];
	              _fe_write_frame($fe, $104);
	              var $105 = $i_04 + 1 | 0;
	              var $109 = (HEAP16[$47$s1] << 16 >> 16 << 1) + HEAP32[$inout_spch$s2] | 0;
	              HEAP32[$inout_spch$s2] = $109;
	              var $113 = HEAP32[$inout_nsamps$s2] - (HEAP16[$47$s1] << 16 >> 16) | 0;
	              HEAP32[$inout_nsamps$s2] = $113;
	              var $114 = HEAP16[$3$s1];
	              if ($114 << 16 >> 16 > 0) {
	                var $118 = $114 - HEAP16[$47$s1] & 65535;
	                HEAP16[$3$s1] = $118;
	                var $120 = $118;
	              } else {
	                var $120 = $114;
	              }
	              var $120;
	              if (($105 | 0) == ($93 | 0)) {
	                var $outidx_1_lcssa = $93;
	                var $121 = $120;
	                break $_$68;
	              }
	              var $i_04 = $105;
	            }
	          } else {
	            var $outidx_1_lcssa = 1;
	            var $121 = HEAP16[$3$s1];
	          }
	        } while (0);
	        var $121;
	        var $outidx_1_lcssa;
	        var $122 = $121 << 16 >> 16;
	        var $123 = $121 << 16 >> 16 < 1;
	        do {
	          if ($123) {
	            var $125 = HEAP32[$inout_nsamps$s2];
	            var $126 = HEAP16[$47$s1];
	            var $127 = $126 << 16 >> 16;
	            var $_1 = ($125 | 0) > ($127 | 0) ? $127 : $125;
	            var $129 = HEAPU16[$7$s1];
	            var $130 = $129 - $126 & 65535;
	            HEAP16[$3$s1] = $130;
	            var $136 = HEAP32[$inout_spch$s2] - $45 >> 1;
	            if (($130 << 16 >> 16 | 0) > ($136 | 0)) {
	              var $139 = $136 & 65535;
	              HEAP16[$3$s1] = $139;
	              var $141 = $139;
	            } else {
	              var $141 = $130;
	            }
	            var $141;
	            var $144 = ($141 & 65535) + $_1 & 65535;
	            HEAP16[$3$s1] = $144;
	            if ($144 << 16 >> 16 <= 0) {
	              break;
	            }
	            var $150 = HEAP32[$fe + 76 >> 2];
	            var $155 = ($127 - ($129 << 16 >> 16) << 1) + HEAP32[$inout_spch$s2] | 0;
	            var $156 = $144 << 16 >> 16 << 1;
	            _memcpy($150, $155, $156, 2);
	            var $158 = ($_1 << 1) + HEAP32[$inout_spch$s2] | 0;
	            HEAP32[$inout_spch$s2] = $158;
	            var $160 = HEAP32[$inout_nsamps$s2] - $_1 | 0;
	            HEAP32[$inout_nsamps$s2] = $160;
	          } else {
	            var $162 = $fe + 76 | 0;
	            var $163 = HEAP32[$162 >> 2];
	            var $164 = $163;
	            var $166 = ($5 - $122 << 1) + $163 | 0;
	            _llvm_memmove_p0i8_p0i8_i32($164, $166, $122 << 1, 2, 0);
	            var $170 = $45;
	            var $174 = (HEAP32[$inout_spch$s2] - $170 >> 1) + HEAP32[$inout_nsamps$s2] | 0;
	            var $178 = HEAP16[$3$s1] << 16 >> 16;
	            var $179 = (HEAP16[$7$s1] << 16 >> 16) - $178 | 0;
	            var $_2 = ($174 | 0) > ($179 | 0) ? $179 : $174;
	            var $183 = ($178 << 1) + HEAP32[$162 >> 2] | 0;
	            var $184 = $45;
	            var $185 = $_2 << 1;
	            _memcpy($183, $184, $185, 2);
	            var $189 = (HEAPU16[$3$s1] & 65535) + $_2 & 65535;
	            HEAP16[$3$s1] = $189;
	            var $190 = HEAPU32[$inout_spch$s2];
	            var $193 = $190 - $170 >> 1;
	            if (($_2 | 0) <= ($193 | 0)) {
	              break;
	            }
	            var $196 = $_2 - $193 | 0;
	            var $197 = ($196 << 1) + $190 | 0;
	            HEAP32[$inout_spch$s2] = $197;
	            var $199 = HEAP32[$inout_nsamps$s2] - $196 | 0;
	            HEAP32[$inout_nsamps$s2] = $199;
	          }
	        } while (0);
	        HEAP32[$inout_nframes$s2] = $outidx_1_lcssa;
	        var $_0 = 0;
	      }
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_fe_process_frames["X"] = 1;

	function _fe_end_utt($fe, $cepvector, $nframes) {
	  var $1 = $fe + 80 | 0;
	  var $2 = HEAP16[$1 >> 1];
	  if ($2 << 16 >> 16 > 0) {
	    var $5 = $2 << 16 >> 16;
	    var $7 = HEAP32[$fe + 76 >> 2];
	    _fe_read_frame($fe, $7, $5);
	    _fe_write_frame($fe, $cepvector);
	    var $storemerge = 1;
	  } else {
	    var $storemerge = 0;
	  }
	  var $storemerge;
	  HEAP32[$nframes >> 2] = $storemerge;
	  HEAP16[$1 >> 1] = 0;
	  HEAP8[$fe + 42 | 0] = 0;
	  return;
	  return;
	}

	function _fe_spec2cep($fe, $mflogspec, $mfcep) {
	  var $28$s2;
	  var $4$s2;
	  var $1 = (tempDoubleI32[0] = HEAP32[$mflogspec >> 2], tempDoubleI32[1] = HEAP32[$mflogspec + 4 >> 2], tempDoubleF64[0]);
	  var $3 = $1 * .5;
	  HEAPF32[$mfcep >> 2] = $3;
	  var $4$s2 = ($fe + 52 | 0) >> 2;
	  var $7 = HEAP32[HEAP32[$4$s2] + 8 >> 2];
	  var $8 = ($7 | 0) > 1;
	  $_$133 : do {
	    if ($8) {
	      var $j_08 = 1;
	      var $9 = $3;
	      while (1) {
	        var $9;
	        var $j_08;
	        var $10 = ($j_08 << 3) + $mflogspec | 0;
	        var $11 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleI32[1] = HEAP32[$10 + 4 >> 2], tempDoubleF64[0]);
	        var $14 = $9 + $11;
	        HEAPF32[$mfcep >> 2] = $14;
	        var $15 = $j_08 + 1 | 0;
	        var $18 = HEAP32[HEAP32[$4$s2] + 8 >> 2];
	        if (($15 | 0) >= ($18 | 0)) {
	          var $_lcssa7 = $18;
	          var $20 = $14;
	          break $_$133;
	        }
	        var $j_08 = $15;
	        var $9 = $14;
	      }
	    } else {
	      var $_lcssa7 = $7;
	      var $20 = $3;
	    }
	  } while (0);
	  var $20;
	  var $_lcssa7;
	  HEAPF32[$mfcep >> 2] = $20 / ($_lcssa7 | 0);
	  var $25 = $fe + 26 | 0;
	  var $27 = (HEAPU8[$25] & 255) > 1;
	  $_$137 : do {
	    if ($27) {
	      var $i_02 = 1;
	      while (1) {
	        var $i_02;
	        var $28$s2 = (($i_02 << 2) + $mfcep | 0) >> 2;
	        HEAPF32[$28$s2] = 0;
	        var $29 = HEAPU32[$4$s2];
	        var $31 = HEAPU32[$29 + 8 >> 2];
	        if (($31 | 0) > 0) {
	          var $j_11 = 0;
	          var $34 = $29;
	          var $33 = 0;
	          while (1) {
	            var $33;
	            var $34;
	            var $j_11;
	            var $_ = ($j_11 | 0) == 0 ? 1 : 2;
	            var $36 = ($j_11 << 3) + $mflogspec | 0;
	            var $37 = (tempDoubleI32[0] = HEAP32[$36 >> 2], tempDoubleI32[1] = HEAP32[$36 + 4 >> 2], tempDoubleF64[0]);
	            var $49 = $33 + $37 * HEAPF32[HEAP32[HEAP32[$34 + 24 >> 2] + ($i_02 << 2) >> 2] + ($j_11 << 2) >> 2] * $_;
	            HEAPF32[$28$s2] = $49;
	            var $50 = $j_11 + 1 | 0;
	            var $51 = HEAPU32[$4$s2];
	            var $53 = HEAP32[$51 + 8 >> 2];
	            if (($50 | 0) >= ($53 | 0)) {
	              break;
	            }
	            var $j_11 = $50;
	            var $34 = $51;
	            var $33 = $49;
	          }
	          var $_lcssa = $53;
	          var $56 = $49;
	        } else {
	          var $_lcssa = $31;
	          var $56 = 0;
	        }
	        var $56;
	        var $_lcssa;
	        HEAPF32[$28$s2] = $56 / (($_lcssa | 0) * 2);
	        var $61 = $i_02 + 1 | 0;
	        if (($61 | 0) >= (HEAPU8[$25] & 255 | 0)) {
	          break $_$137;
	        }
	        var $i_02 = $61;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_spec2cep["X"] = 1;

	function _fe_mel($mel, $x) {
	  var $1 = _fe_warp_unwarped_to_warped($mel, $x);
	  var $4 = $1 / 700 + 1;
	  var $5 = _log10($4);
	  return $5 * 2595;
	  return null;
	}

	function _fe_melinv($mel, $x) {
	  var $2 = $x / 2595;
	  var $3 = _llvm_pow_f64(10, $2);
	  var $6 = ($3 - 1) * 700;
	  var $7 = _fe_warp_warped_to_unwarped($mel, $6);
	  return $7;
	  return null;
	}

	function _fe_compute_melcosine($mel_fb) {
	  var $3$s2;
	  var $1$s2;
	  var $1$s2 = ($mel_fb + 4 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3$s2 = ($mel_fb + 8 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $5 = ___ckd_calloc_2d__($2, $4, 4, STRING_TABLE.__str1341 | 0, 439);
	  var $6 = $5;
	  var $7 = $mel_fb + 24 | 0;
	  HEAP32[$7 >> 2] = $6;
	  var $8 = HEAP32[$3$s2];
	  var $10 = 3.141592653589793 / ($8 | 0);
	  var $11 = HEAP32[$1$s2];
	  var $12 = ($11 | 0) > 0;
	  $_$74 : do {
	    if ($12) {
	      var $i_04 = 0;
	      var $14 = $8;
	      var $13 = $11;
	      while (1) {
	        var $13;
	        var $14;
	        var $i_04;
	        if (($14 | 0) > 0) {
	          var $17 = $10 * ($i_04 | 0);
	          var $j_02 = 0;
	          while (1) {
	            var $j_02;
	            var $20 = $17 * (($j_02 | 0) + .5);
	            var $21 = _cos($20);
	            HEAPF32[HEAP32[HEAP32[$7 >> 2] + ($i_04 << 2) >> 2] + ($j_02 << 2) >> 2] = $21;
	            var $27 = $j_02 + 1 | 0;
	            var $28 = HEAP32[$3$s2];
	            if (($27 | 0) >= ($28 | 0)) {
	              break;
	            }
	            var $j_02 = $27;
	          }
	          var $32 = $28;
	          var $31 = HEAP32[$1$s2];
	        } else {
	          var $32 = $14;
	          var $31 = $13;
	        }
	        var $31;
	        var $32;
	        var $33 = $i_04 + 1 | 0;
	        if (($33 | 0) >= ($31 | 0)) {
	          var $36 = $32;
	          var $35 = $31;
	          break $_$74;
	        }
	        var $i_04 = $33;
	        var $14 = $32;
	        var $13 = $31;
	      }
	    } else {
	      var $36 = $8;
	      var $35 = $11;
	    }
	  } while (0);
	  var $35;
	  var $36;
	  var $37 = $36 | 0;
	  var $39 = _sqrt(1 / $37);
	  HEAPF32[$mel_fb + 60 >> 2] = $39;
	  var $43 = _sqrt(2 / $37);
	  HEAPF32[$mel_fb + 64 >> 2] = $43;
	  var $46 = $mel_fb + 68 | 0;
	  var $48 = (HEAP32[$46 >> 2] | 0) == 0;
	  $_$84 : do {
	    if (!$48) {
	      var $50 = _calloc($35, 4);
	      var $51 = $50;
	      var $52 = $mel_fb + 72 | 0;
	      HEAP32[$52 >> 2] = $51;
	      if ((HEAP32[$1$s2] | 0) <= 0) {
	        break;
	      }
	      var $i_11 = 0;
	      var $55 = $51;
	      while (1) {
	        var $55;
	        var $i_11;
	        var $56 = HEAP32[$46 >> 2];
	        var $58 = ($56 | 0) / 2 & -1 | 0;
	        var $62 = ($i_11 | 0) * 3.141592653589793 / ($56 | 0);
	        var $63 = _sin($62);
	        HEAPF32[$55 + ($i_11 << 2) >> 2] = $58 * $63 + 1;
	        var $68 = $i_11 + 1 | 0;
	        if (($68 | 0) >= (HEAP32[$1$s2] | 0)) {
	          break $_$84;
	        }
	        var $i_11 = $68;
	        var $55 = HEAP32[$52 >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_compute_melcosine["X"] = 1;

	function _fe_create_hamming($in, $in_len) {
	  var $1 = ($in_len | 0) / 2 & -1;
	  var $2 = ($in_len | 0) > 1;
	  $_$91 : do {
	    if ($2) {
	      var $4 = ($in_len | 0) - 1;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $8 = ($i_01 | 0) * 6.283185307179586 / $4;
	        var $9 = _cos($8);
	        var $12 = ($i_01 << 3) + $in | 0;
	        tempDoubleF64[0] = .54 - $9 * .46, HEAP32[$12 >> 2] = tempDoubleI32[0], HEAP32[$12 + 4 >> 2] = tempDoubleI32[1];
	        var $13 = $i_01 + 1 | 0;
	        if (($13 | 0) >= ($1 | 0)) {
	          break $_$91;
	        }
	        var $i_01 = $13;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_read_frame($fe, $in, $len) {
	  var $5$s2;
	  var $3 = HEAP16[$fe + 20 >> 1] << 16 >> 16;
	  var $_len = ($3 | 0) < ($len | 0) ? $3 : $len;
	  var $5$s2 = ($fe + 60 | 0) >> 2;
	  var $7 = HEAP32[$5$s2];
	  var $8 = $in;
	  var $9 = $_len << 1;
	  _memcpy($7, $8, $9, 2);
	  var $13 = ($_len | 0) > 0;
	  var $or_cond = HEAP8[$fe + 29 | 0] << 24 >> 24 != 0 & $13;
	  $_$97 : do {
	    if ($or_cond) {
	      var $14 = $len ^ -1;
	      var $15 = $3 ^ -1;
	      var $smax = ($14 | 0) > ($15 | 0) ? $14 : $15;
	      var $17 = $smax ^ -1;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $20 = ($i_01 << 1) + HEAP32[$5$s2] | 0;
	        var $22 = HEAP16[$20 >> 1] << 16 >> 16;
	        var $27 = ($22 >>> 8 & 255 | $22 << 8) & 65535;
	        HEAP16[$20 >> 1] = $27;
	        var $28 = $i_01 + 1 | 0;
	        if (($28 | 0) == ($17 | 0)) {
	          break $_$97;
	        }
	        var $i_01 = $28;
	      }
	    }
	  } while (0);
	  var $or_cond8 = HEAP8[$fe + 30 | 0] << 24 >> 24 != 0 & $13;
	  $_$102 : do {
	    if ($or_cond8) {
	      var $32 = $len ^ -1;
	      var $33 = $3 ^ -1;
	      var $smax6 = ($32 | 0) > ($33 | 0) ? $32 : $33;
	      var $35 = $smax6 ^ -1;
	      var $i_14 = 0;
	      while (1) {
	        var $i_14;
	        var $37 = _genrand_int31();
	        var $42 = ($i_14 << 1) + HEAP32[$5$s2] | 0;
	        var $44 = (($37 & 3 | 0) == 0 & 1) + HEAP16[$42 >> 1] & 65535;
	        HEAP16[$42 >> 1] = $44;
	        var $45 = $i_14 + 1 | 0;
	        if (($45 | 0) == ($35 | 0)) {
	          break $_$102;
	        }
	        var $i_14 = $45;
	      }
	    }
	  } while (0);
	  _fe_spch_to_frame($fe, $_len);
	  return;
	  return;
	}

	_fe_read_frame["X"] = 1;

	function _fe_spch_to_frame($fe, $len) {
	  var $9$s1;
	  var $6$s2;
	  var $4$s2;
	  var $2 = HEAPF32[$fe + 32 >> 2];
	  var $4$s2 = ($fe + 60 | 0) >> 2;
	  var $5 = HEAP32[$4$s2];
	  var $6$s2 = ($fe + 64 | 0) >> 2;
	  var $7 = HEAP32[$6$s2];
	  if ($2 != 0) {
	    var $9$s1 = ($fe + 82 | 0) >> 1;
	    var $10 = HEAP16[$9$s1];
	    _fe_pre_emphasis($5, $7, $len, $2, $10);
	    var $13 = HEAP16[$fe + 14 >> 1] << 16 >> 16;
	    if (($13 | 0) > ($len | 0)) {
	      var $24 = HEAP16[HEAP32[$4$s2] + ($len - 1 << 1) >> 1];
	      HEAP16[$9$s1] = $24;
	    } else {
	      var $19 = HEAP16[HEAP32[$4$s2] + ($13 - 1 << 1) >> 1];
	      HEAP16[$9$s1] = $19;
	    }
	  } else {
	    _fe_short_to_frame($5, $7, $len);
	  }
	  var $29 = ($len << 3) + HEAP32[$6$s2] | 0;
	  var $34 = (HEAP16[$fe + 22 >> 1] << 16 >> 16) - $len << 3;
	  _memset($29, 0, $34, 4);
	  var $35 = HEAP32[$6$s2];
	  var $37 = HEAP32[$fe + 56 >> 2];
	  var $40 = HEAP16[$fe + 20 >> 1] << 16 >> 16;
	  var $43 = HEAPU8[$fe + 27 | 0] & 255;
	  _fe_hamming_window($35, $37, $40, $43);
	  return;
	  return;
	}

	_fe_spch_to_frame["X"] = 1;

	function _fe_shift_frame($fe, $in, $len) {
	  var $9$s2;
	  var $3 = HEAP16[$fe + 14 >> 1] << 16 >> 16;
	  var $_len = ($3 | 0) < ($len | 0) ? $3 : $len;
	  var $8 = (HEAP16[$fe + 20 >> 1] << 16 >> 16) - $3 | 0;
	  var $9$s2 = ($fe + 60 | 0) >> 2;
	  var $10 = HEAP32[$9$s2];
	  var $11 = $10;
	  var $13 = ($3 << 1) + $10 | 0;
	  var $14 = $8 << 1;
	  _llvm_memmove_p0i8_p0i8_i32($11, $13, $14, 2, 0);
	  var $17 = ($8 << 1) + HEAP32[$9$s2] | 0;
	  var $18 = $in;
	  var $19 = $_len << 1;
	  _memcpy($17, $18, $19, 2);
	  var $23 = ($_len | 0) > 0;
	  var $or_cond = HEAP8[$fe + 29 | 0] << 24 >> 24 != 0 & $23;
	  $_$116 : do {
	    if ($or_cond) {
	      var $24 = $len ^ -1;
	      var $25 = $3 ^ -1;
	      var $smax = ($24 | 0) > ($25 | 0) ? $24 : $25;
	      var $27 = $smax ^ -1;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $31 = ($i_01 + $8 << 1) + HEAP32[$9$s2] | 0;
	        var $33 = HEAP16[$31 >> 1] << 16 >> 16;
	        var $38 = ($33 >>> 8 & 255 | $33 << 8) & 65535;
	        HEAP16[$31 >> 1] = $38;
	        var $39 = $i_01 + 1 | 0;
	        if (($39 | 0) == ($27 | 0)) {
	          break $_$116;
	        }
	        var $i_01 = $39;
	      }
	    }
	  } while (0);
	  var $or_cond8 = HEAP8[$fe + 30 | 0] << 24 >> 24 != 0 & $23;
	  $_$121 : do {
	    if ($or_cond8) {
	      var $43 = $len ^ -1;
	      var $44 = $3 ^ -1;
	      var $smax6 = ($43 | 0) > ($44 | 0) ? $43 : $44;
	      var $46 = $smax6 ^ -1;
	      var $i_14 = 0;
	      while (1) {
	        var $i_14;
	        var $48 = _genrand_int31();
	        var $54 = ($i_14 + $8 << 1) + HEAP32[$9$s2] | 0;
	        var $56 = (($48 & 3 | 0) == 0 & 1) + HEAP16[$54 >> 1] & 65535;
	        HEAP16[$54 >> 1] = $56;
	        var $57 = $i_14 + 1 | 0;
	        if (($57 | 0) == ($46 | 0)) {
	          break $_$121;
	        }
	        var $i_14 = $57;
	      }
	    }
	  } while (0);
	  var $58 = $8 + $_len | 0;
	  _fe_spch_to_frame($fe, $58);
	  return;
	  return;
	}

	_fe_shift_frame["X"] = 1;

	function _fe_create_twiddle($fe) {
	  var $1 = $fe + 22 | 0;
	  var $2 = HEAP16[$1 >> 1];
	  var $3 = $2 << 16 >> 16 > 3;
	  $_$127 : do {
	    if ($3) {
	      var $4 = $fe + 44 | 0;
	      var $5 = $fe + 48 | 0;
	      var $i_01 = 0;
	      var $7 = $2;
	      while (1) {
	        var $7;
	        var $i_01;
	        var $11 = ($i_01 | 0) * 6.283185307179586 / ($7 << 16 >> 16);
	        var $12 = _cos($11);
	        var $14 = ($i_01 << 3) + HEAP32[$4 >> 2] | 0;
	        tempDoubleF64[0] = $12, HEAP32[$14 >> 2] = tempDoubleI32[0], HEAP32[$14 + 4 >> 2] = tempDoubleI32[1];
	        var $15 = _sin($11);
	        var $17 = ($i_01 << 3) + HEAP32[$5 >> 2] | 0;
	        tempDoubleF64[0] = $15, HEAP32[$17 >> 2] = tempDoubleI32[0], HEAP32[$17 + 4 >> 2] = tempDoubleI32[1];
	        var $18 = $i_01 + 1 | 0;
	        var $19 = HEAP16[$1 >> 1];
	        if (($18 | 0) >= (($19 << 16 >> 16 | 0) / 4 & -1 | 0)) {
	          break $_$127;
	        }
	        var $i_01 = $18;
	        var $7 = $19;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_build_melfilters($mel_fb) {
	  var $58$s2;
	  var $28$s2;
	  var $16$s2;
	  var $6$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1$s2 = ($mel_fb + 8 | 0) >> 2;
	  var $3 = HEAP32[$1$s2] << 1;
	  var $4 = ___ckd_malloc__($3, STRING_TABLE.__str1341 | 0, 310);
	  var $5 = $4;
	  var $6$s2 = ($mel_fb + 32 | 0) >> 2;
	  HEAP32[$6$s2] = $5;
	  var $8 = HEAP32[$1$s2] << 1;
	  var $9 = ___ckd_malloc__($8, STRING_TABLE.__str1341 | 0, 311);
	  var $10 = $9;
	  var $11 = $mel_fb + 36 | 0;
	  HEAP32[$11 >> 2] = $10;
	  var $13 = HEAP32[$1$s2] << 1;
	  var $14 = ___ckd_malloc__($13, STRING_TABLE.__str1341 | 0, 312);
	  var $15 = $14;
	  var $16$s2 = ($mel_fb + 40 | 0) >> 2;
	  HEAP32[$16$s2] = $15;
	  var $18 = HEAPF32[$mel_fb + 16 >> 2];
	  var $19 = _fe_mel($mel_fb, $18);
	  var $21 = HEAPF32[$mel_fb + 20 >> 2];
	  var $22 = _fe_mel($mel_fb, $21);
	  var $24 = HEAP32[$1$s2];
	  var $27 = ($22 - $19) / ($24 + 1 | 0);
	  var $28$s2 = ($mel_fb + 44 | 0) >> 2;
	  var $30 = (HEAP32[$28$s2] | 0) == 0;
	  $_$2 : do {
	    if ($30) {
	      var $melmin_0 = $19;
	      var $52 = HEAPF32[$mel_fb >> 2];
	      var $51 = $24;
	      __label__ = 9;
	      break;
	    }
	    var $32 = $19 - $27;
	    var $33 = $22 + $27;
	    var $34 = _fe_melinv($mel_fb, $32);
	    var $35 = $34 < 0;
	    do {
	      if (!$35) {
	        var $37 = _fe_melinv($mel_fb, $33);
	        var $38 = $mel_fb | 0;
	        var $39 = HEAPF32[$38 >> 2];
	        if ($37 > $39 * .5) {
	          var $_pre_phi22 = $38;
	          break;
	        }
	        var $melmin_0 = $32;
	        var $52 = $39;
	        var $51 = HEAP32[$1$s2];
	        __label__ = 9;
	        break $_$2;
	      }
	      var $_pre_phi22 = $mel_fb | 0;
	    } while (0);
	    var $_pre_phi22;
	    __E__pr_header(STRING_TABLE.__str1341 | 0, 326, STRING_TABLE.__str212436 | 0);
	    var $43 = _fe_melinv($mel_fb, $32);
	    var $44 = $43;
	    __E__pr_warn(STRING_TABLE.__str21343 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $44, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = 0, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	    __E__pr_header(STRING_TABLE.__str1341 | 0, 329, STRING_TABLE.__str212436 | 0);
	    var $45 = _fe_melinv($mel_fb, $33);
	    var $46 = $45;
	    var $49 = HEAPF32[$_pre_phi22 >> 2] * .5;
	    __E__pr_warn(STRING_TABLE.__str31344 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $46, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $49, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	    __label__ = 33;
	    break;
	  } while (0);
	  $_$10 : do {
	    if (__label__ == 9) {
	      var $51;
	      var $52;
	      var $melmin_0;
	      var $53 = $mel_fb + 12 | 0;
	      var $56 = $52 / (HEAP32[$53 >> 2] | 0);
	      var $57 = ($51 | 0) > 0;
	      var $58$s2 = ($mel_fb + 80 | 0) >> 2;
	      $_$12 : do {
	        if ($57) {
	          var $i_010 = 0;
	          var $n_coeffs_011 = 0;
	          while (1) {
	            var $n_coeffs_011;
	            var $i_010;
	            var $61 = ($i_010 | 0) * $27 + $melmin_0;
	            var $62 = _fe_melinv($mel_fb, $61);
	            if ((HEAP32[$58$s2] | 0) == 0) {
	              var $73 = $62;
	            } else {
	              var $73 = ($62 / $56 + .5 & -1 | 0) * $56;
	            }
	            var $73;
	            if ((HEAP32[$28$s2] | 0) == 0) {
	              var $242 = ($i_010 + 1 | 0) * $27 + $melmin_0;
	              var $243 = _fe_melinv($mel_fb, $242);
	            } else {
	              var $236 = ($i_010 + 2 | 0) * $27 + $melmin_0;
	              var $237 = _fe_melinv($mel_fb, $236);
	            }
	            if ((HEAP32[$28$s2] | 0) == 0) {
	              var $257 = ($i_010 + 2 | 0) * $27 + $melmin_0;
	              var $258 = _fe_melinv($mel_fb, $257);
	              var $260 = $258;
	            } else {
	              var $251 = ($i_010 + 4 | 0) * $27 + $melmin_0;
	              var $252 = _fe_melinv($mel_fb, $251);
	              var $260 = $252;
	            }
	            var $260;
	            if ((HEAP32[$58$s2] | 0) == 0) {
	              var $271 = $260;
	            } else {
	              var $271 = ($260 / $56 + .5 & -1 | 0) * $56;
	            }
	            var $271;
	            HEAP16[HEAP32[$6$s2] + ($i_010 << 1) >> 1] = -1;
	            var $j_1 = 0;
	            $_$29 : while (1) {
	              var $j_1;
	              var $78 = (HEAP32[$53 >> 2] | 0) / 2 & -1;
	              if (($j_1 | 0) >= ($78 + 1 | 0)) {
	                var $n_coeffs_1 = $n_coeffs_011;
	                break;
	              }
	              var $83 = ($j_1 | 0) * $56;
	              var $84 = $83 < $73;
	              do {
	                if (!$84) {
	                  var $89 = ($i_010 << 1) + HEAP32[$6$s2] | 0;
	                  var $90 = HEAPU16[$89 >> 1];
	                  if ($83 > $271 | ($j_1 | 0) == ($78 | 0)) {
	                    HEAP16[HEAP32[$16$s2] + ($i_010 << 1) >> 1] = $j_1 - ($90 & 65535) & 65535;
	                    HEAP16[HEAP32[$11 >> 2] + ($i_010 << 1) >> 1] = $n_coeffs_011 & 65535;
	                    var $n_coeffs_1 = (HEAP16[HEAP32[$16$s2] + ($i_010 << 1) >> 1] << 16 >> 16) + $n_coeffs_011 | 0;
	                    break $_$29;
	                  }
	                  if ($90 << 16 >> 16 != -1) {
	                    break;
	                  }
	                  HEAP16[$89 >> 1] = $j_1 & 65535;
	                }
	              } while (0);
	              var $j_1 = $j_1 + 1 | 0;
	            }
	            var $n_coeffs_1;
	            var $111 = $i_010 + 1 | 0;
	            if (($111 | 0) >= (HEAP32[$1$s2] | 0)) {
	              var $n_coeffs_0_lcssa = $n_coeffs_1;
	              break $_$12;
	            }
	            var $i_010 = $111;
	            var $n_coeffs_011 = $n_coeffs_1;
	          }
	        } else {
	          var $n_coeffs_0_lcssa = 0;
	        }
	      } while (0);
	      var $n_coeffs_0_lcssa;
	      var $115 = ___ckd_malloc__($n_coeffs_0_lcssa << 2, STRING_TABLE.__str1341 | 0, 376);
	      var $117 = $mel_fb + 28 | 0;
	      HEAP32[$117 >> 2] = $115;
	      var $118 = $mel_fb + 76 | 0;
	      var $n_coeffs_2 = 0;
	      var $i_1 = 0;
	      $_$41 : while (1) {
	        var $i_1;
	        var $n_coeffs_2;
	        if (($i_1 | 0) >= (HEAP32[$1$s2] | 0)) {
	          break $_$10;
	        }
	        var $124 = ($i_1 | 0) * $27 + $melmin_0;
	        var $125 = _fe_melinv($mel_fb, $124);
	        if ((HEAP32[$58$s2] | 0) == 0) {
	          var $136 = $125;
	        } else {
	          var $136 = ($125 / $56 + .5 & -1 | 0) * $56;
	        }
	        var $136;
	        if ((HEAP32[$28$s2] | 0) == 0) {
	          var $187 = ($i_1 + 1 | 0) * $27 + $melmin_0;
	          var $188 = _fe_melinv($mel_fb, $187);
	          var $190 = $188;
	        } else {
	          var $181 = ($i_1 + 2 | 0) * $27 + $melmin_0;
	          var $182 = _fe_melinv($mel_fb, $181);
	          var $190 = $182;
	        }
	        var $190;
	        if ((HEAP32[$58$s2] | 0) == 0) {
	          var $201 = $190;
	        } else {
	          var $201 = ($190 / $56 + .5 & -1 | 0) * $56;
	        }
	        var $201;
	        if ((HEAP32[$28$s2] | 0) == 0) {
	          var $214 = ($i_1 + 2 | 0) * $27 + $melmin_0;
	          var $215 = _fe_melinv($mel_fb, $214);
	          var $217 = $215;
	        } else {
	          var $208 = ($i_1 + 4 | 0) * $27 + $melmin_0;
	          var $209 = _fe_melinv($mel_fb, $208);
	          var $217 = $209;
	        }
	        var $217;
	        if ((HEAP32[$58$s2] | 0) == 0) {
	          var $227 = $217;
	        } else {
	          var $227 = ($217 / $56 + .5 & -1 | 0) * $56;
	        }
	        var $227;
	        var $228 = $201 - $136;
	        var $229 = $227 - $201;
	        var $231 = 2 / ($227 - $136);
	        var $j_3 = 0;
	        var $n_coeffs_3 = $n_coeffs_2;
	        while (1) {
	          var $n_coeffs_3;
	          var $j_3;
	          if (($j_3 | 0) >= (HEAP16[HEAP32[$16$s2] + ($i_1 << 1) >> 1] << 16 >> 16 | 0)) {
	            break;
	          }
	          var $152 = ((HEAP16[HEAP32[$6$s2] + ($i_1 << 1) >> 1] << 16 >> 16) + $j_3 | 0) * $56;
	          if ($152 < $136 | $152 > $227) {
	            break $_$41;
	          }
	          var $161 = ($152 - $136) / $228;
	          var $163 = ($227 - $152) / $229;
	          if ((HEAP32[$118 >> 2] | 0) == 0) {
	            var $hislope_0 = $163;
	            var $loslope_0 = $161;
	          } else {
	            var $hislope_0 = $163 * $231;
	            var $loslope_0 = $161 * $231;
	          }
	          var $loslope_0;
	          var $hislope_0;
	          var $loslope_0_hislope_0 = $loslope_0 < $hislope_0 ? $loslope_0 : $hislope_0;
	          HEAPF32[HEAP32[$117 >> 2] + ($n_coeffs_3 << 2) >> 2] = $loslope_0_hislope_0;
	          var $j_3 = $j_3 + 1 | 0;
	          var $n_coeffs_3 = $n_coeffs_3 + 1 | 0;
	        }
	        var $n_coeffs_2 = $n_coeffs_3;
	        var $i_1 = $i_1 + 1 | 0;
	      }
	      __E__pr_header(STRING_TABLE.__str1341 | 0, 399, STRING_TABLE.__str72422 | 0);
	      var $157 = $152;
	      __E__die_error(STRING_TABLE.__str51346 | 0, (tempInt = STACKTOP, STACKTOP += 24, tempDoubleF64[0] = $136, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $157, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $227, HEAP32[tempInt + 16 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 20 >> 2] = tempDoubleI32[1], tempInt));
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fe_build_melfilters["X"] = 1;

	function _fe_warp_affine_doc() {
	  return STRING_TABLE.__str1393 | 0;
	  return null;
	}

	function _fe_warp_affine_id() {
	  return 1;
	  return null;
	}

	function _fe_warp_affine_n_param() {
	  return 2;
	  return null;
	}

	function _fe_warp_inverse_linear_doc() {
	  return STRING_TABLE.__str1417 | 0;
	  return null;
	}

	function _fe_warp_inverse_linear_id() {
	  return 0;
	  return null;
	}

	function _fe_warp_inverse_linear_n_param() {
	  return 1;
	  return null;
	}

	function _fe_warp_affine_unwarped_to_warped($linear) {
	  if (HEAPU8[_is_neutral_b]) {
	    var $_0 = HEAPF32[_params >> 2] * $linear + HEAPF32[_params + 4 >> 2];
	  } else {
	    var $_0 = $linear;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fe_dct2($fe, $mflogspec, $mfcep, $htk) {
	  var $26$s2;
	  var $3$s2;
	  var $1 = (tempDoubleI32[0] = HEAP32[$mflogspec >> 2], tempDoubleI32[1] = HEAP32[$mflogspec + 4 >> 2], tempDoubleF64[0]);
	  var $2 = $1;
	  HEAPF32[$mfcep >> 2] = $2;
	  var $3$s2 = ($fe + 52 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $7 = (HEAP32[$4 + 8 >> 2] | 0) > 1;
	  $_$2 : do {
	    if ($7) {
	      var $j_08 = 1;
	      var $8 = $2;
	      while (1) {
	        var $8;
	        var $j_08;
	        var $9 = ($j_08 << 3) + $mflogspec | 0;
	        var $10 = (tempDoubleI32[0] = HEAP32[$9 >> 2], tempDoubleI32[1] = HEAP32[$9 + 4 >> 2], tempDoubleF64[0]);
	        var $13 = $8 + $10;
	        HEAPF32[$mfcep >> 2] = $13;
	        var $14 = $j_08 + 1 | 0;
	        var $15 = HEAP32[$3$s2];
	        if (($14 | 0) >= (HEAP32[$15 + 8 >> 2] | 0)) {
	          var $_lcssa7 = $15;
	          var $19 = $13;
	          break $_$2;
	        }
	        var $j_08 = $14;
	        var $8 = $13;
	      }
	    } else {
	      var $_lcssa7 = $4;
	      var $19 = $2;
	    }
	  } while (0);
	  var $19;
	  var $_lcssa7;
	  var $_pn_in = ($htk | 0) == 0 ? $_lcssa7 + 60 | 0 : $_lcssa7 + 64 | 0;
	  var $storemerge = $19 * HEAPF32[$_pn_in >> 2];
	  HEAPF32[$mfcep >> 2] = $storemerge;
	  var $23 = $fe + 26 | 0;
	  var $25 = (HEAPU8[$23] & 255) > 1;
	  $_$6 : do {
	    if ($25) {
	      var $i_02 = 1;
	      while (1) {
	        var $i_02;
	        var $26$s2 = (($i_02 << 2) + $mfcep | 0) >> 2;
	        HEAPF32[$26$s2] = 0;
	        var $27 = HEAPU32[$3$s2];
	        var $30 = (HEAP32[$27 + 8 >> 2] | 0) > 0;
	        $_$9 : do {
	          if ($30) {
	            var $j_11 = 0;
	            var $32 = $27;
	            var $31 = 0;
	            while (1) {
	              var $31;
	              var $32;
	              var $j_11;
	              var $33 = ($j_11 << 3) + $mflogspec | 0;
	              var $34 = (tempDoubleI32[0] = HEAP32[$33 >> 2], tempDoubleI32[1] = HEAP32[$33 + 4 >> 2], tempDoubleF64[0]);
	              var $45 = $31 + $34 * HEAPF32[HEAP32[HEAP32[$32 + 24 >> 2] + ($i_02 << 2) >> 2] + ($j_11 << 2) >> 2];
	              HEAPF32[$26$s2] = $45;
	              var $46 = $j_11 + 1 | 0;
	              var $47 = HEAPU32[$3$s2];
	              if (($46 | 0) >= (HEAP32[$47 + 8 >> 2] | 0)) {
	                var $_lcssa = $47;
	                var $51 = $45;
	                break $_$9;
	              }
	              var $j_11 = $46;
	              var $32 = $47;
	              var $31 = $45;
	            }
	          } else {
	            var $_lcssa = $27;
	            var $51 = 0;
	          }
	        } while (0);
	        var $51;
	        var $_lcssa;
	        var $54 = $51 * HEAPF32[$_lcssa + 64 >> 2];
	        HEAPF32[$26$s2] = $54;
	        var $55 = $i_02 + 1 | 0;
	        if (($55 | 0) >= (HEAPU8[$23] & 255 | 0)) {
	          break $_$6;
	        }
	        var $i_02 = $55;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_dct2["X"] = 1;

	function _fe_lifter($fe, $mfcep) {
	  var $1 = $fe + 52 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $5 = (HEAP32[$2 + 68 >> 2] | 0) == 0;
	  $_$15 : do {
	    if (!$5) {
	      var $6 = $fe + 26 | 0;
	      if (HEAP8[$6] << 24 >> 24 == 0) {
	        break;
	      }
	      var $i_01 = 0;
	      var $9 = $2;
	      while (1) {
	        var $9;
	        var $i_01;
	        var $10 = ($i_01 << 2) + $mfcep | 0;
	        var $16 = HEAPF32[$10 >> 2] * HEAPF32[HEAP32[$9 + 72 >> 2] + ($i_01 << 2) >> 2];
	        HEAPF32[$10 >> 2] = $16;
	        var $17 = $i_01 + 1 | 0;
	        if (($17 | 0) >= (HEAPU8[$6] & 255 | 0)) {
	          break $_$15;
	        }
	        var $i_01 = $17;
	        var $9 = HEAP32[$1 >> 2];
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_dct3($fe, $mfcep, $mflogspec) {
	  var $11$s2;
	  var $1$s2;
	  var $1$s2 = ($fe + 52 | 0) >> 2;
	  var $5 = (HEAP32[HEAP32[$1$s2] + 8 >> 2] | 0) > 0;
	  $_$22 : do {
	    if ($5) {
	      var $6 = $fe + 26 | 0;
	      var $i_02 = 0;
	      while (1) {
	        var $i_02;
	        var $10 = HEAPF32[$mfcep >> 2] * .707106781186548;
	        var $11$s2 = (($i_02 << 3) + $mflogspec | 0) >> 2;
	        tempDoubleF64[0] = $10, HEAP32[$11$s2] = tempDoubleI32[0], HEAP32[$11$s2 + 1] = tempDoubleI32[1];
	        var $13 = (HEAPU8[$6] & 255) > 1;
	        $_$26 : do {
	          if ($13) {
	            var $j_01 = 1;
	            var $14 = $10;
	            while (1) {
	              var $14;
	              var $j_01;
	              var $26 = $14 + HEAPF32[$mfcep + ($j_01 << 2) >> 2] * HEAPF32[HEAP32[HEAP32[HEAP32[$1$s2] + 24 >> 2] + ($j_01 << 2) >> 2] + ($i_02 << 2) >> 2];
	              tempDoubleF64[0] = $26, HEAP32[$11$s2] = tempDoubleI32[0], HEAP32[$11$s2 + 1] = tempDoubleI32[1];
	              var $27 = $j_01 + 1 | 0;
	              if (($27 | 0) >= (HEAPU8[$6] & 255 | 0)) {
	                var $31 = $26;
	                break $_$26;
	              }
	              var $j_01 = $27;
	              var $14 = $26;
	            }
	          } else {
	            var $31 = $10;
	          }
	        } while (0);
	        var $31;
	        tempDoubleF64[0] = $31 * HEAPF32[HEAP32[$1$s2] + 64 >> 2], HEAP32[$11$s2] = tempDoubleI32[0], HEAP32[$11$s2 + 1] = tempDoubleI32[1];
	        var $37 = $i_02 + 1 | 0;
	        if (($37 | 0) >= (HEAP32[HEAP32[$1$s2] + 8 >> 2] | 0)) {
	          break $_$22;
	        }
	        var $i_02 = $37;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_dct3["X"] = 1;

	function _fe_mel_spec($fe) {
	  var $21$s2;
	  var $5$s2;
	  var $2 = HEAP32[$fe + 68 >> 2];
	  var $4 = HEAP32[$fe + 72 >> 2];
	  var $5$s2 = ($fe + 52 | 0) >> 2;
	  var $6 = HEAP32[$5$s2];
	  var $9 = (HEAP32[$6 + 8 >> 2] | 0) > 0;
	  $_$38 : do {
	    if ($9) {
	      var $whichfilt_02 = 0;
	      var $10 = $6;
	      while (1) {
	        var $10;
	        var $whichfilt_02;
	        var $15 = HEAP16[HEAP32[$10 + 32 >> 2] + ($whichfilt_02 << 1) >> 1] << 16 >> 16;
	        var $20 = HEAP16[HEAP32[$10 + 36 >> 2] + ($whichfilt_02 << 1) >> 1] << 16 >> 16;
	        var $21$s2 = (($whichfilt_02 << 3) + $4 | 0) >> 2;
	        tempDoubleF64[0] = 0, HEAP32[$21$s2] = tempDoubleI32[0], HEAP32[$21$s2 + 1] = tempDoubleI32[1];
	        var $22 = HEAP32[$5$s2];
	        var $27 = HEAP16[HEAP32[$22 + 40 >> 2] + ($whichfilt_02 << 1) >> 1] << 16 >> 16 > 0;
	        $_$41 : do {
	          if ($27) {
	            var $i_01 = 0;
	            var $29 = $22;
	            var $28 = 0;
	            while (1) {
	              var $28;
	              var $29;
	              var $i_01;
	              var $31 = ($i_01 + $15 << 3) + $2 | 0;
	              var $32 = (tempDoubleI32[0] = HEAP32[$31 >> 2], tempDoubleI32[1] = HEAP32[$31 + 4 >> 2], tempDoubleF64[0]);
	              var $40 = $28 + $32 * HEAPF32[HEAP32[$29 + 28 >> 2] + ($i_01 + $20 << 2) >> 2];
	              tempDoubleF64[0] = $40, HEAP32[$21$s2] = tempDoubleI32[0], HEAP32[$21$s2 + 1] = tempDoubleI32[1];
	              var $41 = $i_01 + 1 | 0;
	              var $42 = HEAP32[$5$s2];
	              if (($41 | 0) >= (HEAP16[HEAP32[$42 + 40 >> 2] + ($whichfilt_02 << 1) >> 1] << 16 >> 16 | 0)) {
	                var $49 = $42;
	                break $_$41;
	              }
	              var $i_01 = $41;
	              var $29 = $42;
	              var $28 = $40;
	            }
	          } else {
	            var $49 = $22;
	          }
	        } while (0);
	        var $49;
	        var $50 = $whichfilt_02 + 1 | 0;
	        if (($50 | 0) >= (HEAP32[$49 + 8 >> 2] | 0)) {
	          break $_$38;
	        }
	        var $whichfilt_02 = $50;
	        var $10 = $49;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_mel_spec["X"] = 1;

	function _fe_fft_real($fe) {
	  var $86$s2;
	  var $80$s2;
	  var $73$s2;
	  var $70$s2;
	  var $54$s2;
	  var $48$s2;
	  var $45$s2;
	  var $29$s2;
	  var $26$s2;
	  var $16$s2;
	  var $14$s2;
	  var __label__;
	  var $2 = HEAPU32[$fe + 64 >> 2];
	  var $4 = HEAPU8[$fe + 24 | 0];
	  var $5 = $4 & 255;
	  var $7 = HEAPU16[$fe + 22 >> 1];
	  var $8 = $7 << 16 >> 16;
	  var $9 = $8 - 1 | 0;
	  var $10 = ($9 | 0) > 0;
	  $_$69 : do {
	    if ($10) {
	      var $j_012 = 0;
	      var $i_013 = 0;
	      while (1) {
	        var $i_013;
	        var $j_012;
	        if (($i_013 | 0) < ($j_012 | 0)) {
	          var $14$s2 = (($j_012 << 3) + $2 | 0) >> 2;
	          var $15 = (tempDoubleI32[0] = HEAP32[$14$s2], tempDoubleI32[1] = HEAP32[$14$s2 + 1], tempDoubleF64[0]);
	          var $16$s2 = (($i_013 << 3) + $2 | 0) >> 2;
	          var $17 = (tempDoubleI32[0] = HEAP32[$16$s2], tempDoubleI32[1] = HEAP32[$16$s2 + 1], tempDoubleF64[0]);
	          tempDoubleF64[0] = $17, HEAP32[$14$s2] = tempDoubleI32[0], HEAP32[$14$s2 + 1] = tempDoubleI32[1];
	          tempDoubleF64[0] = $15, HEAP32[$16$s2] = tempDoubleI32[0], HEAP32[$16$s2 + 1] = tempDoubleI32[1];
	          var $j_1 = $j_012;
	          var $k_0_in = $8;
	        } else {
	          var $j_1 = $j_012;
	          var $k_0_in = $8;
	          __label__ = 6;
	        }
	        while (1) {
	          var $k_0_in;
	          var $j_1;
	          var $k_0 = ($k_0_in | 0) / 2 & -1;
	          if (($k_0 | 0) > ($j_1 | 0)) {
	            break;
	          }
	          var $j_1 = $j_1 - $k_0 | 0;
	          var $k_0_in = $k_0;
	        }
	        var $22 = $i_013 + 1 | 0;
	        if (($22 | 0) == ($9 | 0)) {
	          break $_$69;
	        }
	        var $j_012 = $k_0 + $j_1 | 0;
	        var $i_013 = $22;
	      }
	    }
	  } while (0);
	  var $11 = $7 << 16 >> 16 > 0;
	  $_$78 : do {
	    if ($11) {
	      var $i_19 = 0;
	      while (1) {
	        var $i_19;
	        var $26$s2 = (($i_19 << 3) + $2 | 0) >> 2;
	        var $27 = (tempDoubleI32[0] = HEAP32[$26$s2], tempDoubleI32[1] = HEAP32[$26$s2 + 1], tempDoubleF64[0]);
	        var $29$s2 = ((($i_19 | 1) << 3) + $2 | 0) >> 2;
	        var $30 = (tempDoubleI32[0] = HEAP32[$29$s2], tempDoubleI32[1] = HEAP32[$29$s2 + 1], tempDoubleF64[0]);
	        var $31 = $27 + $30;
	        tempDoubleF64[0] = $31, HEAP32[$26$s2] = tempDoubleI32[0], HEAP32[$26$s2 + 1] = tempDoubleI32[1];
	        var $32 = $27 - $30;
	        tempDoubleF64[0] = $32, HEAP32[$29$s2] = tempDoubleI32[0], HEAP32[$29$s2 + 1] = tempDoubleI32[1];
	        var $33 = $i_19 + 2 | 0;
	        if (($33 | 0) >= ($8 | 0)) {
	          break $_$78;
	        }
	        var $i_19 = $33;
	      }
	    }
	  } while (0);
	  var $23 = ($4 & 255) > 1;
	  $_$82 : do {
	    if ($23) {
	      var $24 = $fe + 44 | 0;
	      var $25 = $fe + 48 | 0;
	      var $k_15 = 1;
	      while (1) {
	        var $k_15;
	        var $37 = $k_15 + 1 | 0;
	        $_$86 : do {
	          if ($11) {
	            var $39 = 1 << $k_15;
	            var $40 = 1 << $k_15 - 1;
	            var $41 = ($40 | 0) > 1;
	            var $42 = 1 << $37;
	            var $43 = $5 - $37 | 0;
	            var $i_22 = 0;
	            while (1) {
	              var $i_22;
	              var $45$s2 = (($i_22 << 3) + $2 | 0) >> 2;
	              var $46 = (tempDoubleI32[0] = HEAP32[$45$s2], tempDoubleI32[1] = HEAP32[$45$s2 + 1], tempDoubleF64[0]);
	              var $47 = $i_22 + $39 | 0;
	              var $48$s2 = (($47 << 3) + $2 | 0) >> 2;
	              var $49 = (tempDoubleI32[0] = HEAP32[$48$s2], tempDoubleI32[1] = HEAP32[$48$s2 + 1], tempDoubleF64[0]);
	              var $50 = $46 + $49;
	              tempDoubleF64[0] = $50, HEAP32[$45$s2] = tempDoubleI32[0], HEAP32[$45$s2 + 1] = tempDoubleI32[1];
	              var $51 = (tempDoubleI32[0] = HEAP32[$48$s2], tempDoubleI32[1] = HEAP32[$48$s2 + 1], tempDoubleF64[0]);
	              var $52 = $46 - $51;
	              tempDoubleF64[0] = $52, HEAP32[$48$s2] = tempDoubleI32[0], HEAP32[$48$s2 + 1] = tempDoubleI32[1];
	              var $54$s2 = (($47 + $40 << 3) + $2 | 0) >> 2;
	              var $55 = (tempDoubleI32[0] = HEAP32[$54$s2], tempDoubleI32[1] = HEAP32[$54$s2 + 1], tempDoubleF64[0]);
	              var $56 = -$55;
	              tempDoubleF64[0] = $56, HEAP32[$54$s2] = tempDoubleI32[0], HEAP32[$54$s2 + 1] = tempDoubleI32[1];
	              $_$90 : do {
	                if ($41) {
	                  var $57 = $47 + $39 | 0;
	                  var $j_21 = 1;
	                  while (1) {
	                    var $j_21;
	                    var $63 = $j_21 << $43;
	                    var $65 = ($63 << 3) + HEAP32[$24 >> 2] | 0;
	                    var $66 = (tempDoubleI32[0] = HEAP32[$65 >> 2], tempDoubleI32[1] = HEAP32[$65 + 4 >> 2], tempDoubleF64[0]);
	                    var $68 = ($63 << 3) + HEAP32[$25 >> 2] | 0;
	                    var $69 = (tempDoubleI32[0] = HEAP32[$68 >> 2], tempDoubleI32[1] = HEAP32[$68 + 4 >> 2], tempDoubleF64[0]);
	                    var $70$s2 = (($j_21 + $47 << 3) + $2 | 0) >> 2;
	                    var $71 = (tempDoubleI32[0] = HEAP32[$70$s2], tempDoubleI32[1] = HEAP32[$70$s2 + 1], tempDoubleF64[0]);
	                    var $72 = $71 * $66;
	                    var $73$s2 = (($57 - $j_21 << 3) + $2 | 0) >> 2;
	                    var $74 = (tempDoubleI32[0] = HEAP32[$73$s2], tempDoubleI32[1] = HEAP32[$73$s2 + 1], tempDoubleF64[0]);
	                    var $76 = $72 + $74 * $69;
	                    var $79 = $71 * $69 - $74 * $66;
	                    var $80$s2 = (($47 - $j_21 << 3) + $2 | 0) >> 2;
	                    var $81 = (tempDoubleI32[0] = HEAP32[$80$s2], tempDoubleI32[1] = HEAP32[$80$s2 + 1], tempDoubleF64[0]);
	                    var $82 = $81 - $79;
	                    tempDoubleF64[0] = $82, HEAP32[$73$s2] = tempDoubleI32[0], HEAP32[$73$s2 + 1] = tempDoubleI32[1];
	                    var $83 = (tempDoubleI32[0] = HEAP32[$80$s2], tempDoubleI32[1] = HEAP32[$80$s2 + 1], tempDoubleF64[0]);
	                    var $85 = -$83 - $79;
	                    tempDoubleF64[0] = $85, HEAP32[$70$s2] = tempDoubleI32[0], HEAP32[$70$s2 + 1] = tempDoubleI32[1];
	                    var $86$s2 = (($j_21 + $i_22 << 3) + $2 | 0) >> 2;
	                    var $87 = (tempDoubleI32[0] = HEAP32[$86$s2], tempDoubleI32[1] = HEAP32[$86$s2 + 1], tempDoubleF64[0]);
	                    var $88 = $87 - $76;
	                    tempDoubleF64[0] = $88, HEAP32[$80$s2] = tempDoubleI32[0], HEAP32[$80$s2 + 1] = tempDoubleI32[1];
	                    var $89 = (tempDoubleI32[0] = HEAP32[$86$s2], tempDoubleI32[1] = HEAP32[$86$s2 + 1], tempDoubleF64[0]);
	                    var $90 = $89 + $76;
	                    tempDoubleF64[0] = $90, HEAP32[$86$s2] = tempDoubleI32[0], HEAP32[$86$s2 + 1] = tempDoubleI32[1];
	                    var $91 = $j_21 + 1 | 0;
	                    if (($91 | 0) == ($40 | 0)) {
	                      break $_$90;
	                    }
	                    var $j_21 = $91;
	                  }
	                }
	              } while (0);
	              var $92 = $i_22 + $42 | 0;
	              if (($92 | 0) >= ($8 | 0)) {
	                break $_$86;
	              }
	              var $i_22 = $92;
	            }
	          }
	        } while (0);
	        if (($37 | 0) >= ($5 | 0)) {
	          break $_$82;
	        }
	        var $k_15 = $37;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_fft_real["X"] = 1;

	function _fe_pre_emphasis($in, $out, $len, $factor, $prior) {
	  var $4 = $factor;
	  tempDoubleF64[0] = (HEAP16[$in >> 1] << 16 >> 16) - ($prior << 16 >> 16) * $4, HEAP32[$out >> 2] = tempDoubleI32[0], HEAP32[$out + 4 >> 2] = tempDoubleI32[1];
	  var $7 = ($len | 0) > 1;
	  $_$98 : do {
	    if ($7) {
	      var $i_01 = 1;
	      while (1) {
	        var $i_01;
	        var $17 = ($i_01 << 3) + $out | 0;
	        tempDoubleF64[0] = (HEAP16[$in + ($i_01 << 1) >> 1] << 16 >> 16) - (HEAP16[$in + ($i_01 - 1 << 1) >> 1] << 16 >> 16) * $4, HEAP32[$17 >> 2] = tempDoubleI32[0], HEAP32[$17 + 4 >> 2] = tempDoubleI32[1];
	        var $18 = $i_01 + 1 | 0;
	        if (($18 | 0) == ($len | 0)) {
	          break $_$98;
	        }
	        var $i_01 = $18;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_short_to_frame($in, $out, $len) {
	  var $1 = ($len | 0) > 0;
	  $_$103 : do {
	    if ($1) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $5 = ($i_01 << 3) + $out | 0;
	        tempDoubleF64[0] = HEAP16[$in + ($i_01 << 1) >> 1] << 16 >> 16, HEAP32[$5 >> 2] = tempDoubleI32[0], HEAP32[$5 + 4 >> 2] = tempDoubleI32[1];
	        var $6 = $i_01 + 1 | 0;
	        if (($6 | 0) == ($len | 0)) {
	          break $_$103;
	        }
	        var $i_01 = $6;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_hamming_window($in, $window, $in_len, $remove_dc) {
	  var $23$s2;
	  var $19$s2;
	  var $17$s2;
	  var $9$s2;
	  var __label__;
	  var $1 = ($remove_dc | 0) == 0;
	  $_$108 : do {
	    if ($1) {
	      __label__ = 7;
	    } else {
	      if (($in_len | 0) <= 0) {
	        __label__ = 10;
	        break;
	      }
	      var $i_02 = 0;
	      var $mean_03 = 0;
	      while (1) {
	        var $mean_03;
	        var $i_02;
	        var $3 = ($i_02 << 3) + $in | 0;
	        var $4 = (tempDoubleI32[0] = HEAP32[$3 >> 2], tempDoubleI32[1] = HEAP32[$3 + 4 >> 2], tempDoubleF64[0]);
	        var $5 = $mean_03 + $4;
	        var $6 = $i_02 + 1 | 0;
	        if (($6 | 0) == ($in_len | 0)) {
	          break;
	        }
	        var $i_02 = $6;
	        var $mean_03 = $5;
	      }
	      var $8 = $5 / ($in_len | 0);
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $9$s2 = (($i_11 << 3) + $in | 0) >> 2;
	        var $10 = (tempDoubleI32[0] = HEAP32[$9$s2], tempDoubleI32[1] = HEAP32[$9$s2 + 1], tempDoubleF64[0]);
	        var $11 = $10 - $8;
	        tempDoubleF64[0] = $11, HEAP32[$9$s2] = tempDoubleI32[0], HEAP32[$9$s2 + 1] = tempDoubleI32[1];
	        var $12 = $i_11 + 1 | 0;
	        if (($12 | 0) == ($in_len | 0)) {
	          __label__ = 7;
	          break $_$108;
	        }
	        var $i_11 = $12;
	      }
	    }
	  } while (0);
	  $_$115 : do {
	    if (__label__ == 7) {
	      var $13 = ($in_len | 0) / 2 & -1;
	      if (($in_len | 0) <= 1) {
	        break;
	      }
	      var $15 = $in_len - 1 | 0;
	      var $i_26 = 0;
	      while (1) {
	        var $i_26;
	        var $17$s2 = (($i_26 << 3) + $in | 0) >> 2;
	        var $18 = (tempDoubleI32[0] = HEAP32[$17$s2], tempDoubleI32[1] = HEAP32[$17$s2 + 1], tempDoubleF64[0]);
	        var $19$s2 = (($i_26 << 3) + $window | 0) >> 2;
	        var $20 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	        var $21 = $18 * $20;
	        tempDoubleF64[0] = $21, HEAP32[$17$s2] = tempDoubleI32[0], HEAP32[$17$s2 + 1] = tempDoubleI32[1];
	        var $23$s2 = (($15 - $i_26 << 3) + $in | 0) >> 2;
	        var $24 = (tempDoubleI32[0] = HEAP32[$23$s2], tempDoubleI32[1] = HEAP32[$23$s2 + 1], tempDoubleF64[0]);
	        var $25 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	        var $26 = $24 * $25;
	        tempDoubleF64[0] = $26, HEAP32[$23$s2] = tempDoubleI32[0], HEAP32[$23$s2 + 1] = tempDoubleI32[1];
	        var $27 = $i_26 + 1 | 0;
	        if (($27 | 0) >= ($13 | 0)) {
	          break $_$115;
	        }
	        var $i_26 = $27;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_write_frame($fe, $fea) {
	  _fe_spec_magnitude($fe);
	  _fe_mel_spec($fe);
	  _fe_mel_cep($fe, $fea);
	  _fe_lifter($fe, $fea);
	  return;
	  return;
	}

	function _fe_spec_magnitude($fe) {
	  _fe_fft_real($fe);
	  var $2 = HEAP32[$fe + 64 >> 2];
	  var $4 = HEAP32[$fe + 68 >> 2];
	  var $6 = HEAP16[$fe + 22 >> 1];
	  var $7 = $6 << 16 >> 16;
	  var $8 = (tempDoubleI32[0] = HEAP32[$2 >> 2], tempDoubleI32[1] = HEAP32[$2 + 4 >> 2], tempDoubleF64[0]);
	  var $9 = $8 * $8;
	  tempDoubleF64[0] = $9, HEAP32[$4 >> 2] = tempDoubleI32[0], HEAP32[$4 + 4 >> 2] = tempDoubleI32[1];
	  var $10 = ($7 | 0) / 2 & -1;
	  var $11 = $6 << 16 >> 16 < 2;
	  $_$33 : do {
	    if (!$11) {
	      var $j_01 = 1;
	      while (1) {
	        var $j_01;
	        var $12 = ($j_01 << 3) + $2 | 0;
	        var $13 = (tempDoubleI32[0] = HEAP32[$12 >> 2], tempDoubleI32[1] = HEAP32[$12 + 4 >> 2], tempDoubleF64[0]);
	        var $14 = $13 * $13;
	        var $16 = ($7 - $j_01 << 3) + $2 | 0;
	        var $17 = (tempDoubleI32[0] = HEAP32[$16 >> 2], tempDoubleI32[1] = HEAP32[$16 + 4 >> 2], tempDoubleF64[0]);
	        var $19 = $14 + $17 * $17;
	        var $20 = ($j_01 << 3) + $4 | 0;
	        tempDoubleF64[0] = $19, HEAP32[$20 >> 2] = tempDoubleI32[0], HEAP32[$20 + 4 >> 2] = tempDoubleI32[1];
	        var $21 = $j_01 + 1 | 0;
	        if (($21 | 0) > ($10 | 0)) {
	          break $_$33;
	        }
	        var $j_01 = $21;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fe_mel_cep($fe, $mfcep) {
	  var $8$s2;
	  var $2 = HEAPU32[$fe + 72 >> 2];
	  var $3 = $fe + 52 | 0;
	  var $7 = (HEAP32[HEAP32[$3 >> 2] + 8 >> 2] | 0) > 0;
	  $_$47 : do {
	    if ($7) {
	      var $i_05 = 0;
	      while (1) {
	        var $i_05;
	        var $8$s2 = (($i_05 << 3) + $2 | 0) >> 2;
	        var $9 = (tempDoubleI32[0] = HEAP32[$8$s2], tempDoubleI32[1] = HEAP32[$8$s2 + 1], tempDoubleF64[0]);
	        if ($9 > 0) {
	          var $12 = _log($9);
	          var $storemerge = $12;
	        } else {
	          var $storemerge = -10;
	        }
	        var $storemerge;
	        tempDoubleF64[0] = $storemerge, HEAP32[$8$s2] = tempDoubleI32[0], HEAP32[$8$s2 + 1] = tempDoubleI32[1];
	        var $14 = $i_05 + 1 | 0;
	        if (($14 | 0) >= (HEAP32[HEAP32[$3 >> 2] + 8 >> 2] | 0)) {
	          break $_$47;
	        }
	        var $i_05 = $14;
	      }
	    }
	  } while (0);
	  var $20 = HEAP8[$fe + 28 | 0];
	  $_$54 : do {
	    if ($20 << 24 >> 24 == 1) {
	      var $21 = $fe + 25 | 0;
	      if (HEAP8[$21] << 24 >> 24 == 0) {
	        break;
	      }
	      var $i_13 = 0;
	      while (1) {
	        var $i_13;
	        var $24 = ($i_13 << 3) + $2 | 0;
	        var $25 = (tempDoubleI32[0] = HEAP32[$24 >> 2], tempDoubleI32[1] = HEAP32[$24 + 4 >> 2], tempDoubleF64[0]);
	        HEAPF32[$mfcep + ($i_13 << 2) >> 2] = $25;
	        var $28 = $i_13 + 1 | 0;
	        if (($28 | 0) >= (HEAPU8[$21] & 255 | 0)) {
	          break $_$54;
	        }
	        var $i_13 = $28;
	      }
	    } else if ($20 << 24 >> 24 == 2) {
	      _fe_dct2($fe, $2, $mfcep, 0);
	      _fe_dct3($fe, $mfcep, $2);
	      var $33 = $fe + 25 | 0;
	      if (HEAP8[$33] << 24 >> 24 == 0) {
	        break;
	      }
	      var $i_21 = 0;
	      while (1) {
	        var $i_21;
	        var $36 = ($i_21 << 3) + $2 | 0;
	        var $37 = (tempDoubleI32[0] = HEAP32[$36 >> 2], tempDoubleI32[1] = HEAP32[$36 + 4 >> 2], tempDoubleF64[0]);
	        HEAPF32[$mfcep + ($i_21 << 2) >> 2] = $37;
	        var $40 = $i_21 + 1 | 0;
	        if (($40 | 0) >= (HEAPU8[$33] & 255 | 0)) {
	          break $_$54;
	        }
	        var $i_21 = $40;
	      }
	    } else {
	      var $46 = HEAP8[$fe + 31 | 0];
	      if ($46 << 24 >> 24 == 1) {
	        _fe_dct2($fe, $2, $mfcep, 0);
	      } else if ($46 << 24 >> 24 == 2) {
	        _fe_dct2($fe, $2, $mfcep, 1);
	      } else {
	        _fe_spec2cep($fe, $2, $mfcep);
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_fe_mel_cep["X"] = 1;

	function _fe_free_2d($arr) {
	  _ckd_free_2d($arr);
	  return;
	  return;
	}

	function _fe_warp_set($mel, $id_name) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) == 3) {
	      var $i_1 = 0;
	      __label__ = 6;
	      break;
	    }
	    var $4 = HEAP32[_name2id + ($i_0 << 2) >> 2];
	    var $5 = _strcmp($id_name, $4);
	    if (($5 | 0) != 0) {
	      var $i_0 = $i_0 + 1 | 0;
	      continue;
	    }
	    HEAP32[$mel + 56 >> 2] = $i_0;
	    var $_0 = 0;
	    __label__ = 10;
	    break;
	  }
	  $_$126 : do {
	    if (__label__ == 6) {
	      while (1) {
	        var $i_1;
	        if (($i_1 | 0) == 3) {
	          __E__pr_header(STRING_TABLE.__str1369 | 0, 120, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str21371 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $id_name, tempInt));
	          __E__pr_header(STRING_TABLE.__str1369 | 0, 121, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str31372 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $19 = HEAP32[_stderr >> 2];
	          var $20 = _fprintf($19, STRING_TABLE.__str41373 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str682637 | 0, tempInt));
	          var $21 = HEAP32[_stderr >> 2];
	          var $22 = _fprintf($21, STRING_TABLE.__str41373 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str141383 | 0, tempInt));
	          var $23 = HEAP32[_stderr >> 2];
	          var $24 = _fprintf($23, STRING_TABLE.__str41373 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str151384 | 0, tempInt));
	          HEAP32[$mel + 56 >> 2] = -1;
	          var $_0 = -2;
	          break $_$126;
	        }
	        var $12 = HEAP32[___name2id + ($i_1 << 2) >> 2];
	        var $13 = _strcmp($id_name, $12);
	        if (($13 | 0) != 0) {
	          var $i_1 = $i_1 + 1 | 0;
	          continue;
	        }
	        HEAP32[$mel + 56 >> 2] = $i_1;
	        var $_0 = 0;
	        break $_$126;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fe_warp_affine_set_parameters($param_str, $sampling_rate) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 256;
	  var $temp_param_str = __stackBase__;
	  HEAPF32[_nyquist_frequency >> 2] = $sampling_rate * .5;
	  var $2 = ($param_str | 0) == 0;
	  do {
	    if ($2) {
	      HEAP8[_is_neutral_b] = 0;
	    } else {
	      var $5 = _strcmp($param_str, _p_str | 0);
	      if (($5 | 0) == 0) {
	        break;
	      }
	      HEAP8[_is_neutral_b] = 1;
	      var $8 = $temp_param_str | 0;
	      var $9 = _strcpy($8, $param_str);
	      var $$emscripten$temp$1 = _params;
	      HEAP32[$$emscripten$temp$1 >> 2] = 0;
	      HEAP32[$$emscripten$temp$1 + 4 >> 2] = 0;
	      var $10 = _strcpy(_p_str | 0, $param_str);
	      var $11 = _strtok($8, STRING_TABLE.__str11447 | 0);
	      var $12 = ($11 | 0) == 0;
	      do {
	        if (!$12) {
	          var $14 = _atof_c($11);
	          HEAPF32[_params >> 2] = $14;
	          var $16 = _strtok(0, STRING_TABLE.__str11447 | 0);
	          if (($16 | 0) == 0) {
	            break;
	          }
	          var $24 = _atof_c($16);
	          HEAPF32[_params + 4 >> 2] = $24;
	          var $26 = _strtok(0, STRING_TABLE.__str11447 | 0);
	          if (($26 | 0) == 0) {
	            break;
	          }
	          __E__pr_info_header(STRING_TABLE.__str21395 | 0, 128);
	          __E__pr_info(STRING_TABLE.__str41397 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $26, tempInt));
	        }
	      } while (0);
	      if (HEAPF32[_params >> 2] != 0) {
	        break;
	      }
	      HEAP8[_is_neutral_b] = 0;
	      __E__pr_info_header(STRING_TABLE.__str21395 | 0, 134);
	      __E__pr_info(STRING_TABLE.__str51398 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fe_warp_affine_warped_to_unwarped($nonlinear) {
	  var __stackBase__ = STACKTOP;
	  var $_b = HEAPU8[_is_neutral_b];
	  do {
	    if ($_b) {
	      var $5 = ($nonlinear - HEAPF32[_params + 4 >> 2]) / HEAPF32[_params >> 2];
	      if ($5 <= HEAPF32[_nyquist_frequency >> 2]) {
	        var $_0 = $5;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str21395 | 0, 150, STRING_TABLE.__str212436 | 0);
	      var $10 = HEAPF32[_params >> 2];
	      var $11 = $5;
	      var $13 = HEAPF32[_nyquist_frequency >> 2];
	      __E__pr_warn(STRING_TABLE.__str71457 | 0, (tempInt = STACKTOP, STACKTOP += 24, tempDoubleF64[0] = $10, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $11, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $13, HEAP32[tempInt + 16 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 20 >> 2] = tempDoubleI32[1], tempInt));
	      var $_0 = $5;
	    } else {
	      var $_0 = $nonlinear;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fe_warp_affine_print($label) {
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPF32[_params >> 2];
	  var $3 = _printf(STRING_TABLE.__str81458 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $label, HEAP32[tempInt + 4 >> 2] = 0, tempDoubleF64[0] = $2, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  var $5 = HEAPF32[_params + 4 >> 2];
	  var $6 = _printf(STRING_TABLE.__str81458 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $label, HEAP32[tempInt + 4 >> 2] = 1, tempDoubleF64[0] = $5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  var $putchar = _putchar(10);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fe_warp_set_parameters($mel, $param_str, $sampling_rate) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $mel + 56 | 0;
	  var $2 = HEAPU32[$1 >> 2];
	  if ($2 >>> 0 < 3) {
	    var $11 = HEAP32[(_fe_warp_conf >> 2) + ($2 * 7 | 0)];
	    FUNCTION_TABLE[$11]($param_str, $sampling_rate);
	    STACKTOP = __stackBase__;
	    return;
	  } else {
	    if (($2 | 0) == -1) {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 141, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str61375 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    } else {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 144, STRING_TABLE.__str72422 | 0);
	      var $8 = HEAP32[$1 >> 2];
	      __E__die_error(STRING_TABLE.__str71376 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	    }
	  }
	  return;
	}

	function _fe_warp_warped_to_unwarped($mel, $nonlinear) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $mel + 56 | 0;
	  var $2 = HEAPU32[$1 >> 2];
	  if ($2 >>> 0 < 3) {
	    var $11 = HEAP32[(_fe_warp_conf + 16 >> 2) + ($2 * 7 | 0)];
	    var $12 = FUNCTION_TABLE[$11]($nonlinear);
	    STACKTOP = __stackBase__;
	    return $12;
	  } else {
	    if (($2 | 0) == -1) {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 209, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str81377 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    } else {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 212, STRING_TABLE.__str72422 | 0);
	      var $8 = HEAP32[$1 >> 2];
	      __E__die_error(STRING_TABLE.__str71376 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	    }
	  }
	  return null;
	}

	function _fe_warp_unwarped_to_warped($mel, $linear) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $mel + 56 | 0;
	  var $2 = HEAPU32[$1 >> 2];
	  if ($2 >>> 0 < 3) {
	    var $11 = HEAP32[(_fe_warp_conf + 20 >> 2) + ($2 * 7 | 0)];
	    var $12 = FUNCTION_TABLE[$11]($linear);
	    STACKTOP = __stackBase__;
	    return $12;
	  } else {
	    if (($2 | 0) == -1) {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 227, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str81377 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    } else {
	      __E__pr_header(STRING_TABLE.__str1369 | 0, 230, STRING_TABLE.__str72422 | 0);
	      var $8 = HEAP32[$1 >> 2];
	      __E__die_error(STRING_TABLE.__str71376 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	    }
	  }
	  return null;
	}

	function _fe_warp_piecewise_linear_doc() {
	  return STRING_TABLE.__str1446 | 0;
	  return null;
	}

	function _fe_warp_piecewise_linear_id() {
	  return 2;
	  return null;
	}

	function _fe_warp_piecewise_linear_n_param() {
	  return 2;
	  return null;
	}

	function _fe_warp_inverse_linear_unwarped_to_warped($linear) {
	  if (HEAPU8[_is_neutral1421_b]) {
	    var $_0 = $linear / HEAPF32[_params1423 >> 2];
	  } else {
	    var $_0 = $linear;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fe_warp_piecewise_linear_unwarped_to_warped($linear) {
	  if (HEAPU8[_is_neutral1449_b]) {
	    if (HEAPF32[_params1451 + 4 >> 2] > $linear) {
	      var $_0 = HEAPF32[_params1451 >> 2] * $linear;
	    } else {
	      var $_0 = HEAPF32[_final_piece >> 2] * $linear + HEAPF32[_final_piece + 4 >> 2];
	    }
	  } else {
	    var $_0 = $linear;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _agc_emax($agc, $mfc, $n_frame) {
	  var $1 = ($n_frame | 0) > 1;
	  $_$86 : do {
	    if ($1) {
	      var $2 = $agc + 4 | 0;
	      var $3 = $agc + 8 | 0;
	      var $4 = $agc | 0;
	      var $i_01 = 1;
	      while (1) {
	        var $i_01;
	        var $6 = ($i_01 << 2) + $mfc | 0;
	        var $7 = HEAP32[$6 >> 2];
	        var $8 = HEAPF32[$7 >> 2];
	        if ($8 > HEAPF32[$2 >> 2]) {
	          HEAPF32[$2 >> 2] = $8;
	          HEAP32[$3 >> 2] = 1;
	          var $_pre = HEAP32[$6 >> 2];
	          var $14 = $_pre;
	          var $13 = HEAPF32[$_pre >> 2];
	        } else {
	          var $14 = $7;
	          var $13 = $8;
	        }
	        var $13;
	        var $14;
	        var $16 = $13 - HEAPF32[$4 >> 2];
	        HEAPF32[$14 >> 2] = $16;
	        var $17 = $i_01 + 1 | 0;
	        if (($17 | 0) == ($n_frame | 0)) {
	          break $_$86;
	        }
	        var $i_01 = $17;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _agc_set_threshold($agc, $threshold) {
	  HEAPF32[$agc + 20 >> 2] = $threshold;
	  return;
	  return;
	}

	function _fe_warp_inverse_linear_set_parameters($param_str, $sampling_rate) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 256;
	  var $temp_param_str = __stackBase__;
	  HEAPF32[_nyquist_frequency1420 >> 2] = $sampling_rate * .5;
	  var $2 = ($param_str | 0) == 0;
	  do {
	    if ($2) {
	      HEAP8[_is_neutral1421_b] = 0;
	    } else {
	      var $5 = _strcmp($param_str, _p_str1422 | 0);
	      if (($5 | 0) == 0) {
	        break;
	      }
	      HEAP8[_is_neutral1421_b] = 1;
	      var $8 = $temp_param_str | 0;
	      var $9 = _strcpy($8, $param_str);
	      HEAP32[_params1423 >> 2] = 0;
	      var $10 = _strcpy(_p_str1422 | 0, $param_str);
	      var $11 = _strtok($8, STRING_TABLE.__str11447 | 0);
	      var $12 = ($11 | 0) == 0;
	      do {
	        if (!$12) {
	          var $14 = _atof_c($11);
	          HEAPF32[_params1423 >> 2] = $14;
	          var $16 = _strtok(0, STRING_TABLE.__str11447 | 0);
	          if (($16 | 0) == 0) {
	            break;
	          }
	          __E__pr_info_header(STRING_TABLE.__str21424 | 0, 127);
	          __E__pr_info(STRING_TABLE.__str41426 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $16, tempInt));
	        }
	      } while (0);
	      if (HEAPF32[_params1423 >> 2] != 0) {
	        break;
	      }
	      HEAP8[_is_neutral1421_b] = 0;
	      __E__pr_info_header(STRING_TABLE.__str21424 | 0, 133);
	      __E__pr_info(STRING_TABLE.__str51427 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fe_warp_inverse_linear_warped_to_unwarped($nonlinear) {
	  var __stackBase__ = STACKTOP;
	  var $_b = HEAPU8[_is_neutral1421_b];
	  do {
	    if ($_b) {
	      var $3 = HEAPF32[_params1423 >> 2] * $nonlinear;
	      if ($3 <= HEAPF32[_nyquist_frequency1420 >> 2]) {
	        var $_0 = $3;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str21424 | 0, 148, STRING_TABLE.__str212436 | 0);
	      var $8 = HEAPF32[_params1423 >> 2];
	      var $9 = $3;
	      var $11 = HEAPF32[_nyquist_frequency1420 >> 2];
	      __E__pr_warn(STRING_TABLE.__str71457 | 0, (tempInt = STACKTOP, STACKTOP += 24, tempDoubleF64[0] = $8, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $9, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $11, HEAP32[tempInt + 16 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 20 >> 2] = tempDoubleI32[1], tempInt));
	      var $_0 = $3;
	    } else {
	      var $_0 = $nonlinear;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fe_warp_inverse_linear_print($label) {
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPF32[_params1423 >> 2];
	  var $3 = _printf(STRING_TABLE.__str81458 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $label, HEAP32[tempInt + 4 >> 2] = 0, tempDoubleF64[0] = $2, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  var $putchar = _putchar(10);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fe_warp_piecewise_linear_set_parameters($param_str, $sampling_rate) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 256;
	  var $temp_param_str = __stackBase__;
	  HEAPF32[_nyquist_frequency1448 >> 2] = $sampling_rate * .5;
	  var $2 = ($param_str | 0) == 0;
	  do {
	    if ($2) {
	      HEAP8[_is_neutral1449_b] = 0;
	    } else {
	      var $5 = _strcmp($param_str, _p_str1450 | 0);
	      if (($5 | 0) == 0) {
	        break;
	      }
	      HEAP8[_is_neutral1449_b] = 1;
	      var $8 = $temp_param_str | 0;
	      var $9 = _strcpy($8, $param_str);
	      var $$emscripten$temp$1 = _params1451;
	      HEAP32[$$emscripten$temp$1 >> 2] = 0;
	      HEAP32[$$emscripten$temp$1 + 4 >> 2] = 0;
	      var $$emscripten$temp$3 = _final_piece;
	      HEAP32[$$emscripten$temp$3 >> 2] = 0;
	      HEAP32[$$emscripten$temp$3 + 4 >> 2] = 0;
	      var $10 = _strcpy(_p_str1450 | 0, $param_str);
	      var $11 = _strtok($8, STRING_TABLE.__str11447 | 0);
	      var $12 = ($11 | 0) == 0;
	      do {
	        if (!$12) {
	          var $14 = _atof_c($11);
	          HEAPF32[_params1451 >> 2] = $14;
	          var $16 = _strtok(0, STRING_TABLE.__str11447 | 0);
	          if (($16 | 0) == 0) {
	            break;
	          }
	          var $44 = _atof_c($16);
	          HEAPF32[_params1451 + 4 >> 2] = $44;
	          var $46 = _strtok(0, STRING_TABLE.__str11447 | 0);
	          if (($46 | 0) == 0) {
	            break;
	          }
	          __E__pr_info_header(STRING_TABLE.__str21452 | 0, 139);
	          __E__pr_info(STRING_TABLE.__str41454 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $46, tempInt));
	        }
	      } while (0);
	      var $19 = HEAPF32[_params1451 + 4 >> 2];
	      if ($19 < $sampling_rate) {
	        if ($19 == 0) {
	          var $24 = $sampling_rate * .8500000238418579;
	          HEAPF32[_params1451 + 4 >> 2] = $24;
	          var $26 = $24;
	        } else {
	          var $26 = $19;
	        }
	        var $26;
	        var $27 = HEAPF32[_nyquist_frequency1448 >> 2];
	        var $28 = HEAPF32[_params1451 >> 2];
	        var $31 = $27 - $26;
	        var $32 = ($27 - $28 * $26) / $31;
	        HEAPF32[_final_piece >> 2] = $32;
	        var $36 = $27 * $26 * ($28 - 1) / $31;
	        HEAPF32[_final_piece + 4 >> 2] = $36;
	        var $39 = $28;
	      } else {
	        var $$emscripten$temp$5 = _final_piece;
	        HEAP32[$$emscripten$temp$5 >> 2] = 0;
	        HEAP32[$$emscripten$temp$5 + 4 >> 2] = 0;
	        var $39 = HEAPF32[_params1451 >> 2];
	      }
	      var $39;
	      if ($39 != 0) {
	        break;
	      }
	      HEAP8[_is_neutral1449_b] = 0;
	      __E__pr_info_header(STRING_TABLE.__str21452 | 0, 165);
	      __E__pr_info(STRING_TABLE.__str51455 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_fe_warp_piecewise_linear_set_parameters["X"] = 1;

	function _fe_warp_piecewise_linear_warped_to_unwarped($nonlinear) {
	  var __stackBase__ = STACKTOP;
	  var $_b = HEAPU8[_is_neutral1449_b];
	  do {
	    if ($_b) {
	      var $2 = HEAPF32[_params1451 >> 2];
	      if ($2 * HEAPF32[_params1451 + 4 >> 2] > $nonlinear) {
	        var $temp_0 = $nonlinear / $2;
	      } else {
	        var $temp_0 = ($nonlinear - HEAPF32[_final_piece + 4 >> 2]) / HEAPF32[_final_piece >> 2];
	      }
	      var $temp_0;
	      if ($temp_0 <= HEAPF32[_nyquist_frequency1448 >> 2]) {
	        var $_0 = $temp_0;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str21452 | 0, 187, STRING_TABLE.__str212436 | 0);
	      var $18 = HEAPF32[_params1451 >> 2];
	      var $21 = HEAPF32[_nyquist_frequency1448 >> 2];
	      __E__pr_warn(STRING_TABLE.__str71457 | 0, (tempInt = STACKTOP, STACKTOP += 24, tempDoubleF64[0] = $18, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $temp_0, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $21, HEAP32[tempInt + 16 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 20 >> 2] = tempDoubleI32[1], tempInt));
	      var $_0 = $temp_0;
	    } else {
	      var $_0 = $nonlinear;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fe_warp_piecewise_linear_print($label) {
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPF32[_params1451 >> 2];
	  var $3 = _printf(STRING_TABLE.__str81458 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $label, HEAP32[tempInt + 4 >> 2] = 0, tempDoubleF64[0] = $2, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  var $5 = HEAPF32[_params1451 + 4 >> 2];
	  var $6 = _printf(STRING_TABLE.__str81458 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $label, HEAP32[tempInt + 4 >> 2] = 1, tempDoubleF64[0] = $5, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  var $putchar = _putchar(10);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _agc_init() {
	  var $1 = ___ckd_calloc__(1, 24, STRING_TABLE.__str41479 | 0, 94);
	  var $2 = $1;
	  HEAPF32[$1 + 20 >> 2] = 2;
	  return $2;
	  return null;
	}

	function _agc_free($agc) {
	  var $1 = $agc;
	  _ckd_free($1);
	  return;
	  return;
	}

	function _agc_max($agc, $mfc, $n_frame) {
	  var $5$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ($n_frame | 0) < 1;
	  $_$71 : do {
	    if (!$1) {
	      var $4 = HEAPF32[HEAP32[$mfc >> 2] >> 2];
	      var $5$s2 = ($agc + 4 | 0) >> 2;
	      HEAPF32[$5$s2] = $4;
	      var $6 = ($n_frame | 0) > 1;
	      $_$73 : do {
	        if ($6) {
	          var $7 = $agc + 8 | 0;
	          var $i_02 = 1;
	          var $9 = $4;
	          while (1) {
	            var $9;
	            var $i_02;
	            var $12 = HEAPF32[HEAP32[$mfc + ($i_02 << 2) >> 2] >> 2];
	            if ($12 > $9) {
	              HEAPF32[$5$s2] = $12;
	              HEAP32[$7 >> 2] = 1;
	              var $16 = $12;
	            } else {
	              var $16 = $9;
	            }
	            var $16;
	            var $17 = $i_02 + 1 | 0;
	            if (($17 | 0) == ($n_frame | 0)) {
	              break $_$73;
	            }
	            var $i_02 = $17;
	            var $9 = $16;
	          }
	        }
	      } while (0);
	      __E__pr_info_header(STRING_TABLE.__str41479 | 0, 123);
	      var $19 = HEAPF32[$5$s2];
	      __E__pr_info(STRING_TABLE.__str81483 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $19, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	      if (($n_frame | 0) <= 0) {
	        break;
	      }
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $23 = HEAP32[$mfc + ($i_11 << 2) >> 2];
	        var $25 = HEAPF32[$23 >> 2] - HEAPF32[$5$s2];
	        HEAPF32[$23 >> 2] = $25;
	        var $26 = $i_11 + 1 | 0;
	        if (($26 | 0) == ($n_frame | 0)) {
	          break $_$71;
	        }
	        var $i_11 = $26;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _agc_emax_set($agc, $m) {
	  var __stackBase__ = STACKTOP;
	  HEAPF32[$agc >> 2] = $m;
	  __E__pr_info_header(STRING_TABLE.__str41479 | 0, 132);
	  var $2 = $m;
	  __E__pr_info(STRING_TABLE.__str91484 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $2, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _agc_emax_update($agc) {
	  var $9$s2;
	  var $6$s2;
	  var $_pre$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $agc + 8 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) == 0;
	  var $_pre$s2 = ($agc + 4 | 0) >> 2;
	  do {
	    if ($3) {
	      var $_pre_phi2 = $agc | 0;
	    } else {
	      var $6$s2 = ($agc + 16 | 0) >> 2;
	      var $8 = HEAPF32[$6$s2] + HEAPF32[$_pre$s2];
	      HEAPF32[$6$s2] = $8;
	      var $9$s2 = ($agc + 12 | 0) >> 2;
	      var $11 = HEAP32[$9$s2] + 1 | 0;
	      HEAP32[$9$s2] = $11;
	      var $13 = $8 / ($11 | 0);
	      var $14 = $agc | 0;
	      HEAPF32[$14 >> 2] = $13;
	      if (($11 | 0) != 8) {
	        var $_pre_phi2 = $14;
	        break;
	      }
	      var $17 = $8 * .5;
	      HEAPF32[$6$s2] = $17;
	      HEAP32[$9$s2] = 4;
	      var $_pre_phi2 = $14;
	    }
	  } while (0);
	  var $_pre_phi2;
	  __E__pr_info_header(STRING_TABLE.__str41479 | 0, 172);
	  var $20 = HEAPF32[$_pre$s2];
	  var $22 = HEAPF32[$_pre_phi2 >> 2];
	  __E__pr_info(STRING_TABLE.__str101485 | 0, (tempInt = STACKTOP, STACKTOP += 16, tempDoubleF64[0] = $20, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $22, HEAP32[tempInt + 8 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 12 >> 2] = tempDoubleI32[1], tempInt));
	  HEAP32[$1 >> 2] = 0;
	  HEAPF32[$_pre$s2] = -1e3;
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _agc_noise($agc, $cep, $nfr) {
	  var __stackBase__ = STACKTOP;
	  var $2 = HEAPF32[HEAP32[$cep >> 2] >> 2];
	  var $3 = ($nfr | 0) > 0;
	  $_$101 : do {
	    if ($3) {
	      var $min_energy_09 = $2;
	      var $i_010 = 1;
	      var $4 = $2;
	      while (1) {
	        var $4;
	        var $i_010;
	        var $min_energy_09;
	        var $min_energy_1 = $4 < $min_energy_09 ? $4 : $min_energy_09;
	        if (($i_010 | 0) == ($nfr | 0)) {
	          break;
	        }
	        var $_pre22 = HEAPF32[HEAP32[$cep + ($i_010 << 2) >> 2] >> 2];
	        var $min_energy_09 = $min_energy_1;
	        var $i_010 = $i_010 + 1 | 0;
	        var $4 = $_pre22;
	      }
	      var $8 = $min_energy_1 + HEAPF32[$agc + 20 >> 2];
	      var $noise_level_02 = 0;
	      var $i_13 = 1;
	      var $noise_frames_04 = 0;
	      var $9 = $2;
	      while (1) {
	        var $9;
	        var $noise_frames_04;
	        var $i_13;
	        var $noise_level_02;
	        if ($9 < $8) {
	          var $noise_frames_1 = $noise_frames_04 + 1 | 0;
	          var $noise_level_1 = $noise_level_02 + $9;
	        } else {
	          var $noise_frames_1 = $noise_frames_04;
	          var $noise_level_1 = $noise_level_02;
	        }
	        var $noise_level_1;
	        var $noise_frames_1;
	        if (($i_13 | 0) == ($nfr | 0)) {
	          var $noise_level_0_lcssa = $noise_level_1;
	          var $noise_frames_0_lcssa = $noise_frames_1;
	          break $_$101;
	        }
	        var $_pre19 = HEAPF32[HEAP32[$cep + ($i_13 << 2) >> 2] >> 2];
	        var $noise_level_02 = $noise_level_1;
	        var $i_13 = $i_13 + 1 | 0;
	        var $noise_frames_04 = $noise_frames_1;
	        var $9 = $_pre19;
	      }
	    } else {
	      var $noise_level_0_lcssa = 0;
	      var $noise_frames_0_lcssa = 0;
	    }
	  } while (0);
	  var $noise_frames_0_lcssa;
	  var $noise_level_0_lcssa;
	  var $16 = $noise_level_0_lcssa / ($noise_frames_0_lcssa | 0);
	  __E__pr_info_header(STRING_TABLE.__str41479 | 0, 208);
	  __E__pr_info(STRING_TABLE.__str111486 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $16, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	  $_$113 : do {
	    if ($3) {
	      var $i_21 = 0;
	      while (1) {
	        var $i_21;
	        var $19 = HEAP32[$cep + ($i_21 << 2) >> 2];
	        var $21 = HEAPF32[$19 >> 2] - $16;
	        HEAPF32[$19 >> 2] = $21;
	        var $22 = $i_21 + 1 | 0;
	        if (($22 | 0) == ($nfr | 0)) {
	          break $_$113;
	        }
	        var $i_21 = $22;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_agc_noise["X"] = 1;

	function _cmn_init($veclen) {
	  var $7$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ___ckd_calloc__(1, 20, STRING_TABLE.__str31494 | 0, 134), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  HEAP32[$1$s2 + 4] = $veclen;
	  var $5 = ___ckd_calloc__($veclen, 4, STRING_TABLE.__str31494 | 0, 136);
	  var $7$s2 = $1 >> 2;
	  HEAP32[$7$s2] = $5;
	  var $8 = ___ckd_calloc__($veclen, 4, STRING_TABLE.__str31494 | 0, 137);
	  HEAP32[$1$s2 + 1] = $8;
	  var $12 = ___ckd_calloc__($veclen, 4, STRING_TABLE.__str31494 | 0, 138);
	  HEAP32[$1$s2 + 2] = $12;
	  HEAPF32[HEAP32[$7$s2] >> 2] = 12;
	  HEAP32[$1$s2 + 3] = 0;
	  __E__pr_info_header(STRING_TABLE.__str31494 | 0, 142);
	  var $21 = HEAPF32[HEAP32[$7$s2] >> 2];
	  var $22 = $veclen - 1 | 0;
	  __E__pr_info(STRING_TABLE.__str71498 | 0, (tempInt = STACKTOP, STACKTOP += 12, tempDoubleF64[0] = $21, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], HEAP32[tempInt + 8 >> 2] = $22, tempInt));
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	function _cmn($cmn, $mfc, $varnorm, $n_frame) {
	  var $63$s2;
	  var $8$s2;
	  var $5$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  if (($mfc | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str31494 | 0, 156, STRING_TABLE.___func___cmn | 0, STRING_TABLE.__str81499 | 0);
	  }
	  var $4 = ($n_frame | 0) < 1;
	  $_$130 : do {
	    if (!$4) {
	      var $5$s2 = ($cmn | 0) >> 2;
	      var $7 = HEAP32[$5$s2];
	      var $8$s2 = ($cmn + 16 | 0) >> 2;
	      var $10 = HEAP32[$8$s2] << 2;
	      _memset($7, 0, $10, 4);
	      var $f_034 = 0;
	      var $14 = HEAP32[$8$s2];
	      while (1) {
	        var $14;
	        var $f_034;
	        var $16 = HEAP32[$mfc + ($f_034 << 2) >> 2];
	        var $17 = ($14 | 0) > 0;
	        $_$134 : do {
	          if ($17) {
	            var $i_030 = 0;
	            while (1) {
	              var $i_030;
	              var $21 = ($i_030 << 2) + HEAP32[$5$s2] | 0;
	              var $23 = HEAPF32[$21 >> 2] + HEAPF32[$16 + ($i_030 << 2) >> 2];
	              HEAPF32[$21 >> 2] = $23;
	              var $24 = $i_030 + 1 | 0;
	              var $25 = HEAP32[$8$s2];
	              if (($24 | 0) >= ($25 | 0)) {
	                var $27 = $25;
	                break $_$134;
	              }
	              var $i_030 = $24;
	            }
	          } else {
	            var $27 = $14;
	          }
	        } while (0);
	        var $27;
	        var $28 = $f_034 + 1 | 0;
	        if (($28 | 0) == ($n_frame | 0)) {
	          break;
	        }
	        var $f_034 = $28;
	        var $14 = $27;
	      }
	      var $11 = ($27 | 0) > 0;
	      $_$139 : do {
	        if ($11) {
	          var $12 = $n_frame | 0;
	          var $i_127 = 0;
	          while (1) {
	            var $i_127;
	            var $31 = ($i_127 << 2) + HEAP32[$5$s2] | 0;
	            var $33 = HEAPF32[$31 >> 2] / $12;
	            HEAPF32[$31 >> 2] = $33;
	            var $34 = $i_127 + 1 | 0;
	            if (($34 | 0) >= (HEAP32[$8$s2] | 0)) {
	              break $_$139;
	            }
	            var $i_127 = $34;
	          }
	        }
	      } while (0);
	      __E__pr_info_header(STRING_TABLE.__str31494 | 0, 175);
	      __E__pr_info(STRING_TABLE.__str91500 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $38 = (HEAP32[$8$s2] | 0) > 0;
	      $_$144 : do {
	        if ($38) {
	          var $i_222 = 0;
	          while (1) {
	            var $i_222;
	            var $42 = HEAPF32[HEAP32[$5$s2] + ($i_222 << 2) >> 2];
	            __E__pr_info(STRING_TABLE.__str31508 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $42, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	            var $43 = $i_222 + 1 | 0;
	            if (($43 | 0) >= (HEAP32[$8$s2] | 0)) {
	              break $_$144;
	            }
	            var $i_222 = $43;
	          }
	        }
	      } while (0);
	      __E__pr_info(STRING_TABLE.__str411556 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      if (($varnorm | 0) == 0) {
	        var $f_120 = 0;
	        var $48 = HEAP32[$8$s2];
	        while (1) {
	          var $48;
	          var $f_120;
	          var $50 = HEAP32[$mfc + ($f_120 << 2) >> 2];
	          var $51 = ($48 | 0) > 0;
	          $_$152 : do {
	            if ($51) {
	              var $i_314 = 0;
	              while (1) {
	                var $i_314;
	                var $55 = ($i_314 << 2) + $50 | 0;
	                var $57 = HEAPF32[$55 >> 2] - HEAPF32[HEAP32[$5$s2] + ($i_314 << 2) >> 2];
	                HEAPF32[$55 >> 2] = $57;
	                var $58 = $i_314 + 1 | 0;
	                var $59 = HEAP32[$8$s2];
	                if (($58 | 0) >= ($59 | 0)) {
	                  var $61 = $59;
	                  break $_$152;
	                }
	                var $i_314 = $58;
	              }
	            } else {
	              var $61 = $48;
	            }
	          } while (0);
	          var $61;
	          var $62 = $f_120 + 1 | 0;
	          if (($62 | 0) == ($n_frame | 0)) {
	            break $_$130;
	          }
	          var $f_120 = $62;
	          var $48 = $61;
	        }
	      } else {
	        var $63$s2 = ($cmn + 4 | 0) >> 2;
	        var $65 = HEAP32[$63$s2];
	        var $67 = HEAP32[$8$s2] << 2;
	        _memset($65, 0, $67, 4);
	        var $f_211 = 0;
	        var $71 = HEAP32[$8$s2];
	        while (1) {
	          var $71;
	          var $f_211;
	          var $73 = HEAP32[$mfc + ($f_211 << 2) >> 2];
	          var $74 = ($71 | 0) > 0;
	          $_$159 : do {
	            if ($74) {
	              var $i_47 = 0;
	              while (1) {
	                var $i_47;
	                var $80 = HEAPF32[$73 + ($i_47 << 2) >> 2] - HEAPF32[HEAP32[$5$s2] + ($i_47 << 2) >> 2];
	                var $83 = ($i_47 << 2) + HEAP32[$63$s2] | 0;
	                var $85 = HEAPF32[$83 >> 2] + $80 * $80;
	                HEAPF32[$83 >> 2] = $85;
	                var $86 = $i_47 + 1 | 0;
	                var $87 = HEAP32[$8$s2];
	                if (($86 | 0) >= ($87 | 0)) {
	                  var $89 = $87;
	                  break $_$159;
	                }
	                var $i_47 = $86;
	              }
	            } else {
	              var $89 = $71;
	            }
	          } while (0);
	          var $89;
	          var $90 = $f_211 + 1 | 0;
	          if (($90 | 0) == ($n_frame | 0)) {
	            break;
	          }
	          var $f_211 = $90;
	          var $71 = $89;
	        }
	        var $68 = ($89 | 0) > 0;
	        $_$164 : do {
	          if ($68) {
	            var $69 = $n_frame | 0;
	            var $i_55 = 0;
	            while (1) {
	              var $i_55;
	              var $93 = ($i_55 << 2) + HEAP32[$63$s2] | 0;
	              var $96 = $69 / HEAPF32[$93 >> 2];
	              var $97 = _sqrt($96);
	              var $98 = $97;
	              HEAPF32[$93 >> 2] = $98;
	              var $99 = $i_55 + 1 | 0;
	              var $100 = HEAP32[$8$s2];
	              if (($99 | 0) >= ($100 | 0)) {
	                var $f_32 = 0;
	                var $102 = $100;
	                break $_$164;
	              }
	              var $i_55 = $99;
	            }
	          } else {
	            var $f_32 = 0;
	            var $102 = $89;
	            __label__ = 26;
	          }
	        } while (0);
	        while (1) {
	          var $102;
	          var $f_32;
	          var $104 = HEAP32[$mfc + ($f_32 << 2) >> 2];
	          var $105 = ($102 | 0) > 0;
	          $_$170 : do {
	            if ($105) {
	              var $i_61 = 0;
	              while (1) {
	                var $i_61;
	                var $106 = ($i_61 << 2) + $104 | 0;
	                var $115 = (HEAPF32[$106 >> 2] - HEAPF32[HEAP32[$5$s2] + ($i_61 << 2) >> 2]) * HEAPF32[HEAP32[$63$s2] + ($i_61 << 2) >> 2];
	                HEAPF32[$106 >> 2] = $115;
	                var $116 = $i_61 + 1 | 0;
	                var $117 = HEAP32[$8$s2];
	                if (($116 | 0) >= ($117 | 0)) {
	                  var $119 = $117;
	                  break $_$170;
	                }
	                var $i_61 = $116;
	              }
	            } else {
	              var $119 = $102;
	            }
	          } while (0);
	          var $119;
	          var $120 = $f_32 + 1 | 0;
	          if (($120 | 0) == ($n_frame | 0)) {
	            break $_$130;
	          }
	          var $f_32 = $120;
	          var $102 = $119;
	        }
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_cmn["X"] = 1;

	function _cmn_free($cmn) {
	  if (($cmn | 0) != 0) {
	    var $4 = HEAP32[$cmn + 4 >> 2];
	    if (($4 | 0) != 0) {
	      var $7 = $4;
	      _ckd_free($7);
	    }
	    var $10 = HEAP32[$cmn >> 2];
	    if (($10 | 0) != 0) {
	      var $13 = $10;
	      _ckd_free($13);
	    }
	    var $16 = HEAP32[$cmn + 8 >> 2];
	    if (($16 | 0) != 0) {
	      var $19 = $16;
	      _ckd_free($19);
	    }
	    var $21 = $cmn;
	    _ckd_free($21);
	  }
	  return;
	  return;
	}

	function _agc_type_from_str($str) {
	  var __stackBase__ = STACKTOP;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) < 4) {
	      var $5 = HEAP32[_agc_type_str + ($i_0 << 2) >> 2];
	      var $6 = _strcmp($str, $5);
	      if (($6 | 0) != 0) {
	        var $i_0 = $i_0 + 1 | 0;
	        continue;
	      }
	      STACKTOP = __stackBase__;
	      return $i_0;
	    } else {
	      __E__pr_header(STRING_TABLE.__str41479 | 0, 87, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str61481 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $str, tempInt));
	    }
	  }
	  return null;
	}

	function _cmn_type_from_str($str) {
	  var __stackBase__ = STACKTOP;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) < 3) {
	      var $5 = HEAP32[_cmn_type_str + ($i_0 << 2) >> 2];
	      var $6 = _strcmp($str, $5);
	      if (($6 | 0) != 0) {
	        var $i_0 = $i_0 + 1 | 0;
	        continue;
	      }
	      STACKTOP = __stackBase__;
	      return $i_0;
	    } else {
	      __E__pr_header(STRING_TABLE.__str31494 | 0, 126, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str51496 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $str, tempInt));
	    }
	  }
	  return null;
	}

	function _cmn_prior_shiftwin($cmn) {
	  var $6$s2;
	  var $1$s2;
	  var $1$s2 = ($cmn + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $5 = 1 / ($2 | 0);
	  var $6$s2 = ($cmn + 16 | 0) >> 2;
	  var $7 = HEAP32[$6$s2];
	  var $8 = ($7 | 0) > 0;
	  $_$45 : do {
	    if ($8) {
	      var $9 = $cmn + 8 | 0;
	      var $10 = $cmn | 0;
	      var $i_02 = 0;
	      var $11 = $2;
	      while (1) {
	        var $11;
	        var $i_02;
	        var $16 = HEAPF32[HEAP32[$9 >> 2] + ($i_02 << 2) >> 2] / ($11 | 0);
	        HEAPF32[HEAP32[$10 >> 2] + ($i_02 << 2) >> 2] = $16;
	        var $19 = $i_02 + 1 | 0;
	        var $20 = HEAP32[$6$s2];
	        var $_pre7 = HEAP32[$1$s2];
	        if (($19 | 0) >= ($20 | 0)) {
	          var $23 = $_pre7;
	          var $22 = $20;
	          break $_$45;
	        }
	        var $i_02 = $19;
	        var $11 = $_pre7;
	      }
	    } else {
	      var $23 = $2;
	      var $22 = $7;
	    }
	  } while (0);
	  var $22;
	  var $23;
	  if (($23 | 0) > 799) {
	    var $26 = $5 * 500;
	    var $27 = ($22 | 0) > 0;
	    $_$52 : do {
	      if ($27) {
	        var $28 = $cmn + 8 | 0;
	        var $i_11 = 0;
	        while (1) {
	          var $i_11;
	          var $31 = ($i_11 << 2) + HEAP32[$28 >> 2] | 0;
	          var $33 = HEAPF32[$31 >> 2] * $26;
	          HEAPF32[$31 >> 2] = $33;
	          var $34 = $i_11 + 1 | 0;
	          if (($34 | 0) >= (HEAP32[$6$s2] | 0)) {
	            break $_$52;
	          }
	          var $i_11 = $34;
	        }
	      }
	    } while (0);
	    HEAP32[$1$s2] = 500;
	  }
	  return;
	  return;
	}

	function _cmn_prior_update($cmn) {
	  var $5$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var $1$s2 = ($cmn + 12 | 0) >> 2;
	  if ((HEAP32[$1$s2] | 0) >= 1) {
	    __E__pr_info_header(STRING_TABLE.__str1505 | 0, 121);
	    __E__pr_info(STRING_TABLE.__str61511 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $5$s2 = ($cmn + 16 | 0) >> 2;
	    var $7 = (HEAP32[$5$s2] | 0) > 0;
	    $_$4 : do {
	      if ($7) {
	        var $8 = $cmn | 0;
	        var $i_010 = 0;
	        while (1) {
	          var $i_010;
	          var $13 = HEAPF32[HEAP32[$8 >> 2] + ($i_010 << 2) >> 2];
	          __E__pr_info(STRING_TABLE.__str31508 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $13, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	          var $14 = $i_010 + 1 | 0;
	          if (($14 | 0) >= (HEAP32[$5$s2] | 0)) {
	            break $_$4;
	          }
	          var $i_010 = $14;
	        }
	      }
	    } while (0);
	    __E__pr_info(STRING_TABLE.__str41509 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $17 = HEAP32[$1$s2];
	    var $20 = 1 / ($17 | 0);
	    var $21 = HEAP32[$5$s2];
	    var $22 = ($21 | 0) > 0;
	    $_$9 : do {
	      if ($22) {
	        var $23 = $cmn + 8 | 0;
	        var $24 = $cmn | 0;
	        var $i_16 = 0;
	        var $25 = $17;
	        while (1) {
	          var $25;
	          var $i_16;
	          var $30 = HEAPF32[HEAP32[$23 >> 2] + ($i_16 << 2) >> 2] / ($25 | 0);
	          HEAPF32[HEAP32[$24 >> 2] + ($i_16 << 2) >> 2] = $30;
	          var $33 = $i_16 + 1 | 0;
	          var $34 = HEAP32[$5$s2];
	          var $_pre15 = HEAP32[$1$s2];
	          if (($33 | 0) >= ($34 | 0)) {
	            var $37 = $_pre15;
	            var $36 = $34;
	            break $_$9;
	          }
	          var $i_16 = $33;
	          var $25 = $_pre15;
	        }
	      } else {
	        var $37 = $17;
	        var $36 = $21;
	      }
	    } while (0);
	    var $36;
	    var $37;
	    if (($37 | 0) > 800) {
	      var $40 = $20 * 500;
	      var $41 = ($36 | 0) > 0;
	      $_$16 : do {
	        if ($41) {
	          var $42 = $cmn + 8 | 0;
	          var $i_22 = 0;
	          while (1) {
	            var $i_22;
	            var $45 = ($i_22 << 2) + HEAP32[$42 >> 2] | 0;
	            var $47 = HEAPF32[$45 >> 2] * $40;
	            HEAPF32[$45 >> 2] = $47;
	            var $48 = $i_22 + 1 | 0;
	            if (($48 | 0) >= (HEAP32[$5$s2] | 0)) {
	              break $_$16;
	            }
	            var $i_22 = $48;
	          }
	        }
	      } while (0);
	      HEAP32[$1$s2] = 500;
	    }
	    __E__pr_info_header(STRING_TABLE.__str1505 | 0, 139);
	    __E__pr_info(STRING_TABLE.__str71512 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $53 = (HEAP32[$5$s2] | 0) > 0;
	    $_$22 : do {
	      if ($53) {
	        var $54 = $cmn | 0;
	        var $i_31 = 0;
	        while (1) {
	          var $i_31;
	          var $59 = HEAPF32[HEAP32[$54 >> 2] + ($i_31 << 2) >> 2];
	          __E__pr_info(STRING_TABLE.__str31508 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $59, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	          var $60 = $i_31 + 1 | 0;
	          if (($60 | 0) >= (HEAP32[$5$s2] | 0)) {
	            break $_$22;
	          }
	          var $i_31 = $60;
	        }
	      }
	    } while (0);
	    __E__pr_info(STRING_TABLE.__str41509 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_cmn_prior_update["X"] = 1;

	function _subvecs_free($subvecs) {
	  var $sv_0 = $subvecs;
	  while (1) {
	    var $sv_0;
	    if (($sv_0 | 0) == 0) {
	      break;
	    }
	    var $4 = HEAP32[$sv_0 >> 2];
	    if (($4 | 0) == 0) {
	      break;
	    }
	    var $7 = $4;
	    _ckd_free($7);
	    var $sv_0 = $sv_0 + 4 | 0;
	  }
	  var $9 = $subvecs;
	  _ckd_free($9);
	  return;
	  return;
	}

	function _feat_set_subvecs($fcb, $subvecs) {
	  var $12$s2;
	  var $fcb$s2 = $fcb >> 2;
	  var __stackBase__ = STACKTOP;
	  var $1 = ($subvecs | 0) == 0;
	  $_$124 : do {
	    if ($1) {
	      var $4 = HEAP32[$fcb$s2 + 8];
	      _subvecs_free($4);
	      var $7 = HEAP32[$fcb$s2 + 9];
	      _ckd_free($7);
	      var $10 = HEAP32[$fcb$s2 + 7];
	      _ckd_free($10);
	      var $12$s2 = ($fcb + 24 | 0) >> 2;
	      HEAP32[$12$s2] = 0;
	      HEAP32[$12$s2 + 1] = 0;
	      HEAP32[$12$s2 + 2] = 0;
	      HEAP32[$12$s2 + 3] = 0;
	      HEAP32[$12$s2 + 4] = 0;
	      var $_0 = 0;
	    } else {
	      if ((HEAP32[$fcb$s2 + 3] | 0) == 1) {
	        var $sv_0 = $subvecs;
	        var $n_dim_0 = 0;
	        var $indvars_iv = 0;
	        while (1) {
	          var $indvars_iv;
	          var $n_dim_0;
	          var $sv_0;
	          if (($sv_0 | 0) == 0) {
	            break;
	          }
	          var $20 = HEAP32[$sv_0 >> 2];
	          if (($20 | 0) == 0) {
	            break;
	          }
	          var $d_0 = $20;
	          var $n_dim_1 = $n_dim_0;
	          while (1) {
	            var $n_dim_1;
	            var $d_0;
	            if (($d_0 | 0) == 0) {
	              break;
	            }
	            if ((HEAP32[$d_0 >> 2] | 0) == -1) {
	              break;
	            }
	            var $d_0 = $d_0 + 4 | 0;
	            var $n_dim_1 = $n_dim_1 + 1 | 0;
	          }
	          var $sv_0 = $sv_0 + 4 | 0;
	          var $n_dim_0 = $n_dim_1;
	          var $indvars_iv = $indvars_iv + 1 | 0;
	        }
	        var $30 = $fcb + 92 | 0;
	        if ($n_dim_0 >>> 0 > HEAPU32[$30 >> 2] >>> 0) {
	          __E__pr_header(STRING_TABLE.__str11516 | 0, 310, STRING_TABLE.__str102579 | 0);
	          var $34 = HEAP32[$30 >> 2];
	          __E__pr_warn(STRING_TABLE.__str131528 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n_dim_0, HEAP32[tempInt + 4 >> 2] = $34, tempInt));
	          var $_0 = -1;
	        } else {
	          HEAP32[$fcb$s2 + 6] = $indvars_iv;
	          HEAP32[$fcb$s2 + 8] = $subvecs;
	          var $38 = ___ckd_calloc__($indvars_iv, 4, STRING_TABLE.__str11516 | 0, 317);
	          var $40 = $fcb + 28 | 0;
	          HEAP32[$40 >> 2] = $38;
	          var $41 = ___ckd_calloc__($n_dim_0, 4, STRING_TABLE.__str11516 | 0, 318);
	          HEAP32[$fcb$s2 + 9] = $41;
	          HEAP32[$fcb$s2 + 10] = $n_dim_0;
	          if (($indvars_iv | 0) <= 0) {
	            var $_0 = 0;
	            break;
	          }
	          var $i_03 = 0;
	          while (1) {
	            var $i_03;
	            var $d1_0 = HEAP32[$subvecs + ($i_03 << 2) >> 2];
	            while (1) {
	              var $d1_0;
	              if (($d1_0 | 0) == 0) {
	                break;
	              }
	              if ((HEAP32[$d1_0 >> 2] | 0) == -1) {
	                break;
	              }
	              var $55 = ($i_03 << 2) + HEAP32[$40 >> 2] | 0;
	              var $57 = HEAP32[$55 >> 2] + 1 | 0;
	              HEAP32[$55 >> 2] = $57;
	              var $d1_0 = $d1_0 + 4 | 0;
	            }
	            var $59 = $i_03 + 1 | 0;
	            if (($59 | 0) == ($indvars_iv | 0)) {
	              var $_0 = 0;
	              break $_$124;
	            }
	            var $i_03 = $59;
	          }
	        }
	      } else {
	        __E__pr_header(STRING_TABLE.__str11516 | 0, 295, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str121527 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = -1;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_feat_set_subvecs["X"] = 1;

	function _feat_array_alloc($fcb, $nfr) {
	  var $11$s2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 361, STRING_TABLE.___func___feat_array_alloc | 0, STRING_TABLE.__str141529 | 0);
	  }
	  var $4 = ($nfr | 0) > 0;
	  if (!$4) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 362, STRING_TABLE.___func___feat_array_alloc | 0, STRING_TABLE.__str151530 | 0);
	  }
	  var $7 = $fcb + 92 | 0;
	  if ((HEAP32[$7 >> 2] | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 363, STRING_TABLE.___func___feat_array_alloc | 0, STRING_TABLE.__str161531 | 0);
	  }
	  var $11$s2 = ($fcb + 12 | 0) >> 2;
	  var $12 = HEAP32[$11$s2];
	  var $13 = ($12 | 0) > 0;
	  $_$159 : do {
	    if ($13) {
	      var $15 = HEAP32[$fcb + 16 >> 2];
	      var $i_02 = 0;
	      var $k_03 = 0;
	      while (1) {
	        var $k_03;
	        var $i_02;
	        var $19 = HEAP32[$15 + ($i_02 << 2) >> 2] + $k_03 | 0;
	        var $20 = $i_02 + 1 | 0;
	        if (($20 | 0) >= ($12 | 0)) {
	          var $k_0_lcssa = $19;
	          break $_$159;
	        }
	        var $i_02 = $20;
	        var $k_03 = $19;
	      }
	    } else {
	      var $k_0_lcssa = 0;
	    }
	  } while (0);
	  var $k_0_lcssa;
	  if ($k_0_lcssa >>> 0 < HEAPU32[$7 >> 2] >>> 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 370, STRING_TABLE.___func___feat_array_alloc | 0, STRING_TABLE.__str171532 | 0);
	  }
	  if (($k_0_lcssa | 0) < (HEAP32[$fcb + 40 >> 2] | 0)) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 371, STRING_TABLE.___func___feat_array_alloc | 0, STRING_TABLE.__str181533 | 0);
	  }
	  var $31 = $fcb + 24 | 0;
	  var $32 = HEAP32[$31 >> 2];
	  if (($32 | 0) == 0) {
	    var $37 = HEAP32[$11$s2];
	  } else {
	    var $37 = $32;
	  }
	  var $37;
	  var $38 = ___ckd_calloc_2d__($nfr, $37, 4, STRING_TABLE.__str11516 | 0, 374);
	  var $39 = $38;
	  var $40 = $k_0_lcssa * $nfr | 0;
	  var $41 = ___ckd_calloc__($40, 4, STRING_TABLE.__str11516 | 0, 375);
	  var $42 = $41;
	  $_$173 : do {
	    if ($4) {
	      var $43 = $fcb + 28 | 0;
	      var $44 = $fcb + 16 | 0;
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $48 = ($i_11 << 2) + $39 | 0;
	        var $d_0 = ($i_11 * $k_0_lcssa << 2) + $42 | 0;
	        var $j_0 = 0;
	        while (1) {
	          var $j_0;
	          var $d_0;
	          var $50 = HEAP32[$31 >> 2];
	          if (($50 | 0) == 0) {
	            var $55 = HEAP32[$11$s2];
	          } else {
	            var $55 = $50;
	          }
	          var $55;
	          if (($j_0 | 0) >= ($55 | 0)) {
	            break;
	          }
	          var $59 = ($j_0 << 2) + HEAP32[$48 >> 2] | 0;
	          HEAP32[$59 >> 2] = $d_0;
	          var $60 = HEAP32[$43 >> 2];
	          if (($60 | 0) == 0) {
	            var $_pn = HEAP32[$44 >> 2];
	          } else {
	            var $_pn = $60;
	          }
	          var $_pn;
	          var $d_0 = (HEAP32[$_pn + ($j_0 << 2) >> 2] << 2) + $d_0 | 0;
	          var $j_0 = $j_0 + 1 | 0;
	        }
	        var $69 = $i_11 + 1 | 0;
	        if (($69 | 0) == ($nfr | 0)) {
	          break $_$173;
	        }
	        var $i_11 = $69;
	      }
	    }
	  } while (0);
	  return $39;
	  return null;
	}

	_feat_array_alloc["X"] = 1;

	function _feat_array_free($feat) {
	  var $3 = HEAP32[HEAP32[$feat >> 2] >> 2];
	  _ckd_free($3);
	  var $4 = $feat;
	  _ckd_free_2d($4);
	  return;
	  return;
	}

	function _cmn_prior($cmn, $incep, $varnorm, $nfr) {
	  var __stackBase__ = STACKTOP;
	  if (($varnorm | 0) == 0) {
	    var $4 = ($nfr | 0) < 1;
	    do {
	      if (!$4) {
	        var $5 = $cmn + 16 | 0;
	        var $6 = $cmn + 12 | 0;
	        var $7 = $cmn + 8 | 0;
	        var $8 = $cmn | 0;
	        var $i_03 = 0;
	        var $9 = HEAP32[$5 >> 2];
	        while (1) {
	          var $9;
	          var $i_03;
	          var $10 = ($9 | 0) > 0;
	          $_$36 : do {
	            if ($10) {
	              var $11 = ($i_03 << 2) + $incep | 0;
	              var $j_01 = 0;
	              while (1) {
	                var $j_01;
	                var $17 = ($j_01 << 2) + HEAP32[$7 >> 2] | 0;
	                var $19 = HEAPF32[$17 >> 2] + HEAPF32[HEAP32[$11 >> 2] + ($j_01 << 2) >> 2];
	                HEAPF32[$17 >> 2] = $19;
	                var $24 = ($j_01 << 2) + HEAP32[$11 >> 2] | 0;
	                var $26 = HEAPF32[$24 >> 2] - HEAPF32[HEAP32[$8 >> 2] + ($j_01 << 2) >> 2];
	                HEAPF32[$24 >> 2] = $26;
	                var $27 = $j_01 + 1 | 0;
	                var $28 = HEAP32[$5 >> 2];
	                if (($27 | 0) >= ($28 | 0)) {
	                  var $30 = $28;
	                  break $_$36;
	                }
	                var $j_01 = $27;
	              }
	            } else {
	              var $30 = $9;
	            }
	          } while (0);
	          var $30;
	          var $32 = HEAP32[$6 >> 2] + 1 | 0;
	          HEAP32[$6 >> 2] = $32;
	          var $33 = $i_03 + 1 | 0;
	          if (($33 | 0) == ($nfr | 0)) {
	            break;
	          }
	          var $i_03 = $33;
	          var $9 = $30;
	        }
	        if (($32 | 0) <= 800) {
	          break;
	        }
	        _cmn_prior_shiftwin($cmn);
	      }
	    } while (0);
	    STACKTOP = __stackBase__;
	    return;
	  } else {
	    __E__pr_header(STRING_TABLE.__str1505 | 0, 151, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str91514 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  return;
	}

	_cmn_prior["X"] = 1;

	function _parse_subvecs($str) {
	  var $n2$s2;
	  var $n$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var $n = __stackBase__, $n$s2 = $n >> 2;
	  var $n2 = __stackBase__ + 4, $n2$s2 = $n2 >> 2;
	  var $l = __stackBase__ + 8;
	  var $strp_0 = $str;
	  var $veclist_0 = 0;
	  $_$59 : while (1) {
	    var $veclist_0;
	    var $strp_0;
	    var $strp_1 = $strp_0;
	    var $dimlist_0 = 0;
	    $_$61 : while (1) {
	      var $dimlist_0;
	      var $strp_1;
	      var $3 = _sscanf($strp_1, STRING_TABLE.__str1515 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n, HEAP32[tempInt + 4 >> 2] = $l, tempInt));
	      if (($3 | 0) == 1) {
	        var $10 = HEAP32[$l >> 2];
	        var $11 = $strp_1 + $10 | 0;
	        if (HEAP8[$11] << 24 >> 24 == 45) {
	          var $_sum = $10 + 1 | 0;
	          var $15 = $strp_1 + $_sum | 0;
	          var $16 = _sscanf($15, STRING_TABLE.__str1515 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $n2, HEAP32[tempInt + 4 >> 2] = $l, tempInt));
	          if (($16 | 0) == 1) {
	            var $strp_2 = $strp_1 + HEAP32[$l >> 2] + $_sum | 0;
	            var $28 = HEAP32[$n$s2];
	          } else {
	            __E__pr_header(STRING_TABLE.__str11516 | 0, 194, STRING_TABLE.__str72422 | 0);
	            var $21 = $15 - $str | 0;
	            __E__die_error(STRING_TABLE.__str31518 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $str, HEAP32[tempInt + 4 >> 2] = $21, tempInt));
	          }
	        } else {
	          var $26 = HEAP32[$n$s2];
	          HEAP32[$n2$s2] = $26;
	          var $strp_2 = $11;
	          var $28 = $26;
	        }
	        var $28;
	        var $strp_2;
	        var $29 = ($28 | 0) < 0;
	        do {
	          if (!$29) {
	            var $31 = HEAP32[$n2$s2];
	            if (($28 | 0) > ($31 | 0)) {
	              break;
	            }
	            var $dimlist_1 = $dimlist_0;
	            var $38 = $28;
	            var $37 = $31;
	            $_$75 : while (1) {
	              var $37;
	              var $38;
	              var $dimlist_1;
	              if (($38 | 0) > ($37 | 0)) {
	                var $56 = HEAP8[$strp_2];
	                if ($56 << 24 >> 24 == 0 || $56 << 24 >> 24 == 47) {
	                  var $65 = _glist_add_ptr($veclist_0, $dimlist_1);
	                  var $66 = HEAP8[$strp_2];
	                  if ($66 << 24 >> 24 == 0) {
	                    break $_$59;
	                  } else if ($66 << 24 >> 24 != 47) {
	                    ___assert_func(STRING_TABLE.__str11516 | 0, 231, STRING_TABLE.___func___parse_subvecs | 0, STRING_TABLE.__str71522 | 0);
	                  }
	                  var $strp_0 = $strp_2 + 1 | 0;
	                  var $veclist_0 = $65;
	                  continue $_$59;
	                } else if ($56 << 24 >> 24 == 44) {
	                  var $strp_1 = $strp_2 + 1 | 0;
	                  var $dimlist_0 = $dimlist_1;
	                  continue $_$61;
	                } else {
	                  __E__pr_header(STRING_TABLE.__str11516 | 0, 221, STRING_TABLE.__str72422 | 0);
	                  var $60 = $strp_2 - $str | 0;
	                  __E__die_error(STRING_TABLE.__str61521 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $str, HEAP32[tempInt + 4 >> 2] = $60, tempInt));
	                }
	              } else {
	                var $gn1_0 = $dimlist_1;
	                while (1) {
	                  var $gn1_0;
	                  if (($gn1_0 | 0) == 0) {
	                    var $52 = _glist_add_int32($dimlist_1, $38);
	                    var $54 = HEAP32[$n$s2] + 1 | 0;
	                    HEAP32[$n$s2] = $54;
	                    var $dimlist_1 = $52;
	                    var $38 = $54;
	                    var $37 = HEAP32[$n2$s2];
	                    continue $_$75;
	                  }
	                  if ((HEAP32[$gn1_0 >> 2] | 0) == ($38 | 0)) {
	                    __E__pr_header(STRING_TABLE.__str11516 | 0, 211, STRING_TABLE.__str72422 | 0);
	                    var $51 = $strp_2 - $str | 0;
	                    __E__die_error(STRING_TABLE.__str51520 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $str, HEAP32[tempInt + 4 >> 2] = $51, tempInt));
	                  } else {
	                    var $gn1_0 = HEAP32[$gn1_0 + 8 >> 2];
	                  }
	                }
	              }
	            }
	          }
	        } while (0);
	        __E__pr_header(STRING_TABLE.__str11516 | 0, 202, STRING_TABLE.__str72422 | 0);
	        var $36 = $strp_2 - $str | 0;
	        __E__die_error(STRING_TABLE.__str41519 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $str, HEAP32[tempInt + 4 >> 2] = $36, tempInt));
	      } else {
	        __E__pr_header(STRING_TABLE.__str11516 | 0, 186, STRING_TABLE.__str72422 | 0);
	        var $8 = $strp_1 - $str | 0;
	        __E__die_error(STRING_TABLE.__str31518 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $str, HEAP32[tempInt + 4 >> 2] = $8, tempInt));
	      }
	    }
	  }
	  var $71 = _glist_count($65);
	  HEAP32[$n$s2] = $71;
	  var $72 = $71 + 1 | 0;
	  var $73 = ___ckd_calloc__($72, 4, STRING_TABLE.__str11516 | 0, 237);
	  var $74 = $73;
	  var $76 = (HEAP32[$n$s2] << 2) + $74 | 0;
	  HEAP32[$76 >> 2] = 0;
	  var $gn_0 = $65;
	  while (1) {
	    var $gn_0;
	    var $storemerge_in = HEAP32[$n$s2];
	    var $storemerge = $storemerge_in - 1 | 0;
	    HEAP32[$n$s2] = $storemerge;
	    var $79 = ($gn_0 | 0) == 0;
	    if (($storemerge_in | 0) < 1 | $79) {
	      break;
	    }
	    var $82 = HEAP32[$gn_0 >> 2];
	    var $83 = $82;
	    var $84 = _glist_count($83);
	    HEAP32[$n2$s2] = $84;
	    if (($84 | 0) < 1) {
	      __E__pr_header(STRING_TABLE.__str11516 | 0, 245, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str81523 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $str, tempInt));
	    } else {
	      var $88 = $84 + 1 | 0;
	      var $89 = ___ckd_calloc__($88, 4, STRING_TABLE.__str11516 | 0, 247);
	      var $90 = $89;
	      var $92 = (HEAP32[$n$s2] << 2) + $74 | 0;
	      HEAP32[$92 >> 2] = $90;
	      var $97 = (HEAP32[$n2$s2] << 2) + HEAP32[$74 + (HEAP32[$n$s2] << 2) >> 2] | 0;
	      HEAP32[$97 >> 2] = -1;
	      var $storemerge2_in9 = HEAP32[$n2$s2];
	      var $storemerge210 = $storemerge2_in9 - 1 | 0;
	      HEAP32[$n2$s2] = $storemerge210;
	      var $99 = ($82 | 0) == 0;
	      var $or_cond511 = ($storemerge2_in9 | 0) < 1 | $99;
	      $_$102 : do {
	        if ($or_cond511) {
	          var $storemerge2_lcssa = $storemerge210;
	          var $_lcssa = $99;
	        } else {
	          var $gn2_012 = $83;
	          var $storemerge213 = $storemerge210;
	          while (1) {
	            var $storemerge213;
	            var $gn2_012;
	            var $101 = HEAP32[$gn2_012 >> 2];
	            var $105 = ($storemerge213 << 2) + HEAP32[$74 + (HEAP32[$n$s2] << 2) >> 2] | 0;
	            HEAP32[$105 >> 2] = $101;
	            var $107 = HEAP32[$gn2_012 + 8 >> 2];
	            var $storemerge2_in = HEAP32[$n2$s2];
	            var $storemerge2 = $storemerge2_in - 1 | 0;
	            HEAP32[$n2$s2] = $storemerge2;
	            var $109 = ($107 | 0) == 0;
	            if (($storemerge2_in | 0) < 1 | $109) {
	              var $storemerge2_lcssa = $storemerge2;
	              var $_lcssa = $109;
	              break $_$102;
	            }
	            var $gn2_012 = $107;
	            var $storemerge213 = $storemerge2;
	          }
	        }
	      } while (0);
	      var $_lcssa;
	      var $storemerge2_lcssa;
	      if (!(($storemerge2_lcssa | 0) < 0 & $_lcssa)) {
	        ___assert_func(STRING_TABLE.__str11516 | 0, 252, STRING_TABLE.___func___parse_subvecs | 0, STRING_TABLE.__str91524 | 0);
	      }
	      var $gn_0 = HEAP32[$gn_0 + 8 >> 2];
	    }
	  }
	  if (!(($storemerge | 0) < 0 & $79)) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 254, STRING_TABLE.___func___parse_subvecs | 0, STRING_TABLE.__str101525 | 0);
	  }
	  var $117 = ($65 | 0) == 0;
	  $_$113 : do {
	    if (!$117) {
	      var $gn_18 = $65;
	      while (1) {
	        var $gn_18;
	        var $120 = HEAP32[$gn_18 >> 2];
	        _glist_free($120);
	        var $122 = HEAP32[$gn_18 + 8 >> 2];
	        if (($122 | 0) == 0) {
	          break $_$113;
	        }
	        var $gn_18 = $122;
	      }
	    }
	  } while (0);
	  _glist_free($65);
	  STACKTOP = __stackBase__;
	  return $74;
	  return null;
	}

	_parse_subvecs["X"] = 1;

	function _feat_s2_4x_cep2feat($fcb, $mfc, $feat) {
	  var $114$s2;
	  var $14$s2;
	  var $4$s2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 404, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str141529 | 0);
	  }
	  var $4$s2 = ($fcb + 8 | 0) >> 2;
	  if ((HEAP32[$4$s2] | 0) != 13) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 405, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str801595 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 4) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 406, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str831598 | 0);
	  }
	  var $14$s2 = ($fcb + 16 | 0) >> 2;
	  var $15 = HEAP32[$14$s2];
	  if ((HEAP32[$15 >> 2] | 0) == 12) {
	    var $20 = $15;
	  } else {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 407, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str841599 | 0);
	    var $20 = HEAP32[$14$s2];
	  }
	  var $20;
	  if ((HEAP32[$20 + 4 >> 2] | 0) == 24) {
	    var $26 = $20;
	  } else {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 408, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str851600 | 0);
	    var $26 = HEAP32[$14$s2];
	  }
	  var $26;
	  if ((HEAP32[$26 + 8 >> 2] | 0) == 3) {
	    var $32 = $26;
	  } else {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 409, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str861601 | 0);
	    var $32 = HEAP32[$14$s2];
	  }
	  var $32;
	  if ((HEAP32[$32 + 12 >> 2] | 0) != 12) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 410, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str871602 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 4) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 411, STRING_TABLE.___func___feat_s2_4x_cep2feat | 0, STRING_TABLE.__str881603 | 0);
	  }
	  var $43 = HEAP32[$feat >> 2];
	  var $46 = HEAP32[$mfc >> 2] + 4 | 0;
	  var $49 = (HEAP32[$4$s2] << 2) - 4 | 0;
	  _memcpy($43, $46, $49, 4);
	  var $50 = $mfc + 8 | 0;
	  var $51 = HEAP32[$50 >> 2];
	  var $52 = $mfc - 8 | 0;
	  var $53 = HEAP32[$52 >> 2];
	  var $55 = HEAP32[$feat + 4 >> 2];
	  var $56 = HEAP32[$4$s2];
	  var $58 = ($56 - 1 | 0) > 0;
	  $_$96 : do {
	    if ($58) {
	      var $i_014 = 0;
	      while (1) {
	        var $i_014;
	        var $_sum6 = $i_014 + 1 | 0;
	        var $63 = HEAPF32[$51 + ($_sum6 << 2) >> 2] - HEAPF32[$53 + ($_sum6 << 2) >> 2];
	        HEAPF32[$55 + ($i_014 << 2) >> 2] = $63;
	        var $65 = HEAP32[$4$s2];
	        if (($_sum6 | 0) >= ($65 - 1 | 0)) {
	          var $i_0_lcssa = $_sum6;
	          var $68 = $65;
	          break $_$96;
	        }
	        var $i_014 = $_sum6;
	      }
	    } else {
	      var $i_0_lcssa = 0;
	      var $68 = $56;
	    }
	  } while (0);
	  var $68;
	  var $i_0_lcssa;
	  var $70 = HEAP32[$mfc + 16 >> 2];
	  var $72 = HEAP32[$mfc - 16 >> 2];
	  var $74 = ($68 - 1 | 0) > 0;
	  $_$100 : do {
	    if ($74) {
	      var $i_19 = $i_0_lcssa;
	      var $j_010 = 0;
	      while (1) {
	        var $j_010;
	        var $i_19;
	        var $_sum4 = $j_010 + 1 | 0;
	        var $79 = HEAPF32[$70 + ($_sum4 << 2) >> 2] - HEAPF32[$72 + ($_sum4 << 2) >> 2];
	        HEAPF32[$55 + ($i_19 << 2) >> 2] = $79;
	        var $82 = HEAP32[$4$s2];
	        if (($_sum4 | 0) >= ($82 - 1 | 0)) {
	          var $85 = $82;
	          break $_$100;
	        }
	        var $i_19 = $i_19 + 1 | 0;
	        var $j_010 = $_sum4;
	      }
	    } else {
	      var $85 = $68;
	    }
	  } while (0);
	  var $85;
	  var $86 = $mfc + 12 | 0;
	  var $87 = HEAP32[$86 >> 2];
	  var $88 = $mfc - 4 | 0;
	  var $89 = HEAP32[$88 >> 2];
	  var $90 = $mfc + 4 | 0;
	  var $91 = HEAP32[$90 >> 2];
	  var $92 = $mfc - 12 | 0;
	  var $93 = HEAP32[$92 >> 2];
	  var $95 = HEAP32[$feat + 12 >> 2];
	  var $97 = ($85 - 1 | 0) > 0;
	  $_$104 : do {
	    if ($97) {
	      var $i_28 = 0;
	      while (1) {
	        var $i_28;
	        var $_sum = $i_28 + 1 | 0;
	        var $108 = HEAPF32[$87 + ($_sum << 2) >> 2] - HEAPF32[$89 + ($_sum << 2) >> 2] - (HEAPF32[$91 + ($_sum << 2) >> 2] - HEAPF32[$93 + ($_sum << 2) >> 2]);
	        HEAPF32[$95 + ($i_28 << 2) >> 2] = $108;
	        if (($_sum | 0) >= (HEAP32[$4$s2] - 1 | 0)) {
	          break $_$104;
	        }
	        var $i_28 = $_sum;
	      }
	    }
	  } while (0);
	  var $114$s2 = HEAP32[$feat + 8 >> 2] >> 2;
	  var $116 = HEAPF32[HEAP32[$mfc >> 2] >> 2];
	  HEAPF32[$114$s2] = $116;
	  var $121 = HEAPF32[HEAP32[$50 >> 2] >> 2] - HEAPF32[HEAP32[$52 >> 2] >> 2];
	  HEAPF32[$114$s2 + 1] = $121;
	  var $133 = HEAPF32[HEAP32[$86 >> 2] >> 2] - HEAPF32[HEAP32[$88 >> 2] >> 2] - (HEAPF32[HEAP32[$90 >> 2] >> 2] - HEAPF32[HEAP32[$92 >> 2] >> 2]);
	  HEAPF32[$114$s2 + 2] = $133;
	  return;
	  return;
	}

	_feat_s2_4x_cep2feat["X"] = 1;

	function _feat_s3_1x39_cep2feat($fcb, $mfc, $feat) {
	  var $32$s2;
	  var $4$s2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 467, STRING_TABLE.___func___feat_s3_1x39_cep2feat | 0, STRING_TABLE.__str141529 | 0);
	  }
	  var $4$s2 = ($fcb + 8 | 0) >> 2;
	  if ((HEAP32[$4$s2] | 0) != 13) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 468, STRING_TABLE.___func___feat_s3_1x39_cep2feat | 0, STRING_TABLE.__str801595 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 1) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 469, STRING_TABLE.___func___feat_s3_1x39_cep2feat | 0, STRING_TABLE.__str721587 | 0);
	  }
	  if ((HEAP32[HEAP32[$fcb + 16 >> 2] >> 2] | 0) != 39) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 470, STRING_TABLE.___func___feat_s3_1x39_cep2feat | 0, STRING_TABLE.__str811596 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 3) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 471, STRING_TABLE.___func___feat_s3_1x39_cep2feat | 0, STRING_TABLE.__str821597 | 0);
	  }
	  var $25 = HEAP32[$feat >> 2];
	  var $28 = HEAP32[$mfc >> 2] + 4 | 0;
	  var $31 = (HEAP32[$4$s2] << 2) - 4 | 0;
	  _memcpy($25, $28, $31, 4);
	  var $32$s2 = HEAP32[$feat >> 2] >> 2;
	  var $33 = HEAP32[$4$s2];
	  var $_sum = $33 - 1 | 0;
	  var $34 = $mfc + 8 | 0;
	  var $35 = HEAP32[$34 >> 2];
	  var $36 = $mfc - 8 | 0;
	  var $37 = HEAP32[$36 >> 2];
	  var $38 = ($_sum | 0) > 0;
	  $_$124 : do {
	    if ($38) {
	      var $i_015 = 0;
	      while (1) {
	        var $i_015;
	        var $_sum10 = $i_015 + 1 | 0;
	        var $43 = HEAPF32[$35 + ($_sum10 << 2) >> 2] - HEAPF32[$37 + ($_sum10 << 2) >> 2];
	        HEAPF32[($i_015 + $_sum << 2 >> 2) + $32$s2] = $43;
	        var $45 = HEAP32[$4$s2];
	        var $46 = $45 - 1 | 0;
	        if (($_sum10 | 0) >= ($46 | 0)) {
	          var $_lcssa = $45;
	          var $_lcssa14 = $46;
	          break $_$124;
	        }
	        var $i_015 = $_sum10;
	      }
	    } else {
	      var $_lcssa = $33;
	      var $_lcssa14 = $_sum;
	    }
	  } while (0);
	  var $_lcssa14;
	  var $_lcssa;
	  var $_sum1 = $_lcssa14 + $_sum | 0;
	  var $50 = HEAPF32[HEAP32[$mfc >> 2] >> 2];
	  HEAPF32[($_sum1 << 2 >> 2) + $32$s2] = $50;
	  var $55 = HEAPF32[HEAP32[$34 >> 2] >> 2] - HEAPF32[HEAP32[$36 >> 2] >> 2];
	  HEAPF32[($_lcssa + $_sum << 2 >> 2) + $32$s2] = $55;
	  var $57 = $mfc + 12 | 0;
	  var $60 = $mfc - 4 | 0;
	  var $64 = $mfc + 4 | 0;
	  var $67 = $mfc - 12 | 0;
	  var $71 = HEAPF32[HEAP32[$57 >> 2] >> 2] - HEAPF32[HEAP32[$60 >> 2] >> 2] - (HEAPF32[HEAP32[$64 >> 2] >> 2] - HEAPF32[HEAP32[$67 >> 2] >> 2]);
	  HEAPF32[($_sum1 + 2 << 2 >> 2) + $32$s2] = $71;
	  var $73 = HEAP32[$57 >> 2];
	  var $74 = HEAP32[$60 >> 2];
	  var $75 = HEAP32[$64 >> 2];
	  var $76 = HEAP32[$67 >> 2];
	  var $79 = (HEAP32[$4$s2] - 1 | 0) > 0;
	  $_$128 : do {
	    if ($79) {
	      var $_sum4 = $_sum1 + 3 | 0;
	      var $i_113 = 0;
	      while (1) {
	        var $i_113;
	        var $_sum5 = $i_113 + 1 | 0;
	        var $91 = HEAPF32[$73 + ($_sum5 << 2) >> 2] - HEAPF32[$74 + ($_sum5 << 2) >> 2] - (HEAPF32[$75 + ($_sum5 << 2) >> 2] - HEAPF32[$76 + ($_sum5 << 2) >> 2]);
	        HEAPF32[($_sum4 + $i_113 << 2 >> 2) + $32$s2] = $91;
	        if (($_sum5 | 0) >= (HEAP32[$4$s2] - 1 | 0)) {
	          break $_$128;
	        }
	        var $i_113 = $_sum5;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_s3_1x39_cep2feat["X"] = 1;

	function _feat_1s_c_d_dd_cep2feat($fcb, $mfc, $feat) {
	  var $12$s2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 558, STRING_TABLE.___func___feat_1s_c_d_dd_cep2feat | 0, STRING_TABLE.__str141529 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 1) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 559, STRING_TABLE.___func___feat_1s_c_d_dd_cep2feat | 0, STRING_TABLE.__str721587 | 0);
	  }
	  var $12$s2 = ($fcb + 8 | 0) >> 2;
	  if ((HEAP32[HEAP32[$fcb + 16 >> 2] >> 2] | 0) != (HEAP32[$12$s2] * 3 | 0)) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 560, STRING_TABLE.___func___feat_1s_c_d_dd_cep2feat | 0, STRING_TABLE.__str781593 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 3) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 561, STRING_TABLE.___func___feat_1s_c_d_dd_cep2feat | 0, STRING_TABLE.__str791594 | 0);
	  }
	  var $23 = HEAP32[$feat >> 2];
	  var $25 = HEAP32[$mfc >> 2];
	  var $27 = HEAP32[$12$s2] << 2;
	  _memcpy($23, $25, $27, 4);
	  var $28 = HEAP32[$feat >> 2];
	  var $29 = HEAP32[$12$s2];
	  var $31 = HEAP32[$mfc + 8 >> 2];
	  var $33 = HEAP32[$mfc - 8 >> 2];
	  var $34 = ($29 | 0) > 0;
	  $_$146 : do {
	    if ($34) {
	      var $i_04 = 0;
	      while (1) {
	        var $i_04;
	        var $39 = HEAPF32[$31 + ($i_04 << 2) >> 2] - HEAPF32[$33 + ($i_04 << 2) >> 2];
	        HEAPF32[$28 + ($i_04 + $29 << 2) >> 2] = $39;
	        var $41 = $i_04 + 1 | 0;
	        var $42 = HEAP32[$12$s2];
	        if (($41 | 0) >= ($42 | 0)) {
	          var $44 = $42;
	          break $_$146;
	        }
	        var $i_04 = $41;
	      }
	    } else {
	      var $44 = $29;
	    }
	  } while (0);
	  var $44;
	  var $46 = HEAP32[$mfc + 12 >> 2];
	  var $48 = HEAP32[$mfc - 4 >> 2];
	  var $50 = HEAP32[$mfc + 4 >> 2];
	  var $52 = HEAP32[$mfc - 12 >> 2];
	  var $53 = ($44 | 0) > 0;
	  $_$150 : do {
	    if ($53) {
	      var $_sum = $44 + $29 | 0;
	      var $i_13 = 0;
	      while (1) {
	        var $i_13;
	        var $65 = HEAPF32[$46 + ($i_13 << 2) >> 2] - HEAPF32[$48 + ($i_13 << 2) >> 2] - (HEAPF32[$50 + ($i_13 << 2) >> 2] - HEAPF32[$52 + ($i_13 << 2) >> 2]);
	        HEAPF32[$28 + ($_sum + $i_13 << 2) >> 2] = $65;
	        var $67 = $i_13 + 1 | 0;
	        if (($67 | 0) >= (HEAP32[$12$s2] | 0)) {
	          break $_$150;
	        }
	        var $i_13 = $67;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_1s_c_d_dd_cep2feat["X"] = 1;

	function _feat_init($type, $cmn, $varnorm, $agc, $cepsize) {
	  var $226$s2;
	  var $210$s2;
	  var $208$s2;
	  var $206$s2;
	  var $202$s2;
	  var $27$s2;
	  var $8$s2;
	  var $l$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $l = __stackBase__, $l$s2 = $l >> 2;
	  var $_cepsize = ($cepsize | 0) == 0 ? 13 : $cepsize;
	  __E__pr_info_header(STRING_TABLE.__str11516 | 0, 684);
	  var $3 = HEAP32[_cmn_type_str + ($cmn << 2) >> 2];
	  var $5 = ($varnorm | 0) != 0 ? STRING_TABLE.__str522621 | 0 : STRING_TABLE.__str202589 | 0;
	  var $7 = HEAP32[_agc_type_str + ($agc << 2) >> 2];
	  __E__pr_info(STRING_TABLE.__str201535 | 0, (tempInt = STACKTOP, STACKTOP += 20, HEAP32[tempInt >> 2] = $type, HEAP32[tempInt + 4 >> 2] = $_cepsize, HEAP32[tempInt + 8 >> 2] = $3, HEAP32[tempInt + 12 >> 2] = $5, HEAP32[tempInt + 16 >> 2] = $7, tempInt));
	  var $8 = ___ckd_calloc__(1, 96, STRING_TABLE.__str11516 | 0, 688), $8$s2 = $8 >> 2;
	  var $9 = $8;
	  HEAP32[$8$s2] = 1;
	  var $11 = ___ckd_salloc__($type, STRING_TABLE.__str11516 | 0, 690);
	  HEAP32[$8$s2 + 1] = $11;
	  var $14 = _strcmp($type, STRING_TABLE.__str231538 | 0);
	  var $15 = ($14 | 0) == 0;
	  $_$2 : do {
	    if ($15) {
	      if (($_cepsize | 0) == 13) {
	        HEAP32[$8$s2 + 2] = 13;
	        HEAP32[$8$s2 + 3] = 4;
	        var $24 = ___ckd_calloc__(4, 4, STRING_TABLE.__str11516 | 0, 700);
	        var $25 = $24;
	        var $27$s2 = ($8 + 16 | 0) >> 2;
	        HEAP32[$27$s2] = $25;
	        HEAP32[$25 >> 2] = 12;
	        var $29 = HEAP32[$27$s2] + 4 | 0;
	        HEAP32[$29 >> 2] = 24;
	        var $31 = HEAP32[$27$s2] + 8 | 0;
	        HEAP32[$31 >> 2] = 3;
	        var $33 = HEAP32[$27$s2] + 12 | 0;
	        HEAP32[$33 >> 2] = 12;
	        HEAP32[$8$s2 + 23] = 51;
	        HEAP32[$8$s2 + 5] = 4;
	        HEAP32[$8$s2 + 14] = 2;
	        __label__ = 45;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str11516 | 0, 694, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str241539 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      _ckd_free($8);
	      var $_0 = 0;
	      __label__ = 50;
	      break;
	    } else {
	      var $41 = _strcmp($type, STRING_TABLE.__str251540 | 0);
	      var $42 = ($41 | 0) == 0;
	      do {
	        if (!$42) {
	          var $44 = _strcmp($type, STRING_TABLE.__str261541 | 0);
	          if (($44 | 0) == 0) {
	            break;
	          }
	          var $65 = _strncmp($type, STRING_TABLE.__str822651 | 0, 9);
	          if (($65 | 0) == 0) {
	            HEAP32[$8$s2 + 2] = $_cepsize;
	            HEAP32[$8$s2 + 3] = 1;
	            var $72 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 727);
	            var $73 = $72;
	            HEAP32[$8$s2 + 4] = $73;
	            var $76 = $_cepsize * 3 | 0;
	            HEAP32[$73 >> 2] = $76;
	            HEAP32[$8$s2 + 23] = $76;
	            HEAP32[$8$s2 + 5] = 3;
	            HEAP32[$8$s2 + 14] = 6;
	            __label__ = 45;
	            break $_$2;
	          }
	          var $84 = _strncmp($type, STRING_TABLE.__str281543 | 0, 12);
	          if (($84 | 0) == 0) {
	            HEAP32[$8$s2 + 2] = $_cepsize;
	            HEAP32[$8$s2 + 3] = 1;
	            var $91 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 736);
	            var $92 = $91;
	            HEAP32[$8$s2 + 4] = $92;
	            var $95 = $_cepsize << 2;
	            HEAP32[$92 >> 2] = $95;
	            HEAP32[$8$s2 + 23] = $95;
	            HEAP32[$8$s2 + 5] = 4;
	            HEAP32[$8$s2 + 14] = 8;
	            __label__ = 45;
	            break $_$2;
	          }
	          var $103 = _strncmp($type, STRING_TABLE.__str291544 | 0, 8);
	          var $104 = ($103 | 0) == 0;
	          do {
	            if (!$104) {
	              var $106 = _strncmp($type, STRING_TABLE.__str301545 | 0, 6);
	              if (($106 | 0) == 0) {
	                break;
	              }
	              var $128 = _strncmp($type, STRING_TABLE.__str311546 | 0, 3);
	              var $129 = ($128 | 0) == 0;
	              do {
	                if (!$129) {
	                  var $131 = _strncmp($type, STRING_TABLE.__str321547 | 0, 4);
	                  if (($131 | 0) == 0) {
	                    break;
	                  }
	                  var $152 = _strncmp($type, STRING_TABLE.__str331548 | 0, 5);
	                  var $153 = ($152 | 0) == 0;
	                  do {
	                    if (!$153) {
	                      var $155 = _strncmp($type, STRING_TABLE.__str341549 | 0, 5);
	                      if (($155 | 0) == 0) {
	                        break;
	                      }
	                      var $180 = ___ckd_salloc__($type, STRING_TABLE.__str11516 | 0, 779);
	                      var $181 = ___ckd_salloc__($type, STRING_TABLE.__str11516 | 0, 780);
	                      var $182 = _strlen($180);
	                      HEAP32[$l$s2] = $182;
	                      var $k_0 = 0;
	                      var $i_0 = 1;
	                      var $184 = $182;
	                      while (1) {
	                        var $184;
	                        var $i_0;
	                        var $k_0;
	                        if (($i_0 | 0) >= ($184 - 1 | 0)) {
	                          var $_pre_phi15 = $8 + 20 | 0;
	                          break;
	                        }
	                        var $188 = $180 + $i_0 | 0;
	                        var $189 = HEAP8[$188];
	                        if ($189 << 24 >> 24 == 44) {
	                          HEAP8[$188] = 32;
	                          var $k_1 = $k_0 + 1 | 0;
	                          var $_pre = HEAP32[$l$s2];
	                        } else if ($189 << 24 >> 24 == 58) {
	                          HEAP8[$188] = 0;
	                          var $193 = $i_0 + ($180 + 1) | 0;
	                          var $194 = _atoi($193);
	                          var $196 = $8 + 20 | 0;
	                          HEAP32[$196 >> 2] = $194;
	                          var $_pre_phi15 = $196;
	                          break;
	                        } else {
	                          var $k_1 = $k_0;
	                          var $_pre = $184;
	                        }
	                        var $_pre;
	                        var $k_1;
	                        var $k_0 = $k_1;
	                        var $i_0 = $i_0 + 1 | 0;
	                        var $184 = $_pre;
	                      }
	                      var $_pre_phi15;
	                      var $200 = $k_0 + 1 | 0;
	                      var $202$s2 = ($8 + 12 | 0) >> 2;
	                      HEAP32[$202$s2] = $200;
	                      var $203 = ___ckd_calloc__($200, 4, STRING_TABLE.__str11516 | 0, 803);
	                      var $206$s2 = ($8 + 16 | 0) >> 2;
	                      HEAP32[$206$s2] = $203;
	                      var $208$s2 = ($8 + 92 | 0) >> 2;
	                      HEAP32[$208$s2] = 0;
	                      var $210$s2 = ($8 + 8 | 0) >> 2;
	                      HEAP32[$210$s2] = 0;
	                      var $strp_0 = $180;
	                      var $i_1 = 0;
	                      $_$36 : while (1) {
	                        var $i_1;
	                        var $strp_0;
	                        var $212 = _sscanf($strp_0, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $181, HEAP32[tempInt + 4 >> 2] = $l, tempInt));
	                        if (($212 | 0) == 1) {
	                          var $216 = $strp_0 + HEAP32[$l$s2] | 0;
	                          var $218 = ($i_1 | 0) < (HEAP32[$202$s2] | 0);
	                          do {
	                            if ($218) {
	                              var $221 = ($i_1 << 2) + HEAP32[$206$s2] | 0;
	                              var $222 = _sscanf($181, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $221, tempInt));
	                              if (($222 | 0) != 1) {
	                                break;
	                              }
	                              var $225 = HEAP32[$206$s2];
	                              var $226$s2 = (($i_1 << 2) + $225 | 0) >> 2;
	                              var $227 = HEAP32[$226$s2];
	                              if (($227 | 0) < 1) {
	                                break;
	                              }
	                              var $232 = HEAP32[$210$s2] + $227 | 0;
	                              HEAP32[$210$s2] = $232;
	                              var $233 = HEAP32[$_pre_phi15 >> 2];
	                              if (($233 | 0) > 0) {
	                                var $239 = HEAP32[$226$s2] * ($233 << 1 | 1) | 0;
	                                HEAP32[$226$s2] = $239;
	                                var $241 = HEAP32[$206$s2];
	                              } else {
	                                var $241 = $225;
	                              }
	                              var $241;
	                              var $245 = HEAP32[$208$s2] + HEAP32[$241 + ($i_1 << 2) >> 2] | 0;
	                              HEAP32[$208$s2] = $245;
	                              var $strp_0 = $216;
	                              var $i_1 = $i_1 + 1 | 0;
	                              continue $_$36;
	                            }
	                          } while (0);
	                          __E__pr_header(STRING_TABLE.__str11516 | 0, 815, STRING_TABLE.__str72422 | 0);
	                          __E__die_error(STRING_TABLE.__str371552 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                        } else {
	                          if (($i_1 | 0) == (HEAP32[$202$s2] | 0)) {
	                            if ((HEAP32[$210$s2] | 0) == ($_cepsize | 0)) {
	                              HEAP32[$8$s2 + 14] = 14;
	                              _ckd_free($180);
	                              _ckd_free($181);
	                              __label__ = 45;
	                              break $_$2;
	                            }
	                            __E__pr_header(STRING_TABLE.__str11516 | 0, 827, STRING_TABLE.__str72422 | 0);
	                            __E__die_error(STRING_TABLE.__str371552 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                          } else {
	                            __E__pr_header(STRING_TABLE.__str11516 | 0, 825, STRING_TABLE.__str72422 | 0);
	                            __E__die_error(STRING_TABLE.__str371552 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                          }
	                        }
	                      }
	                    }
	                  } while (0);
	                  var $159 = $8 + 20 | 0;
	                  var $_ = $153 ? 3 : 4;
	                  HEAP32[$159 >> 2] = $_;
	                  var $161 = $8 + 8 | 0;
	                  HEAP32[$161 >> 2] = $_cepsize;
	                  HEAP32[$8$s2 + 3] = 1;
	                  var $164 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 771);
	                  var $165 = $164;
	                  var $167 = $8 + 16 | 0;
	                  HEAP32[$167 >> 2] = $165;
	                  var $172 = (HEAP32[$159 >> 2] << 1 | 1) * HEAP32[$161 >> 2] | 0;
	                  HEAP32[$165 >> 2] = $172;
	                  var $174 = HEAP32[HEAP32[$167 >> 2] >> 2];
	                  HEAP32[$8$s2 + 23] = $174;
	                  HEAP32[$8$s2 + 14] = 14;
	                  __label__ = 45;
	                  break $_$2;
	                }
	              } while (0);
	              var $135 = $8 + 8 | 0;
	              HEAP32[$135 >> 2] = $_cepsize;
	              HEAP32[$8$s2 + 3] = 1;
	              var $138 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 756);
	              var $139 = $138;
	              var $141 = $8 + 16 | 0;
	              HEAP32[$141 >> 2] = $139;
	              var $142 = HEAP32[$135 >> 2];
	              HEAP32[$139 >> 2] = $142;
	              var $144 = HEAP32[HEAP32[$141 >> 2] >> 2];
	              HEAP32[$8$s2 + 23] = $144;
	              HEAP32[$8$s2 + 5] = 0;
	              HEAP32[$8$s2 + 14] = 12;
	              __label__ = 45;
	              break $_$2;
	            }
	          } while (0);
	          var $110 = $8 + 8 | 0;
	          HEAP32[$110 >> 2] = $_cepsize;
	          HEAP32[$8$s2 + 3] = 1;
	          var $113 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 746);
	          var $114 = $113;
	          var $116 = $8 + 16 | 0;
	          HEAP32[$116 >> 2] = $114;
	          var $118 = HEAP32[$110 >> 2] << 1;
	          HEAP32[$114 >> 2] = $118;
	          var $120 = HEAP32[HEAP32[$116 >> 2] >> 2];
	          HEAP32[$8$s2 + 23] = $120;
	          HEAP32[$8$s2 + 5] = 2;
	          HEAP32[$8$s2 + 14] = 10;
	          __label__ = 45;
	          break $_$2;
	        }
	      } while (0);
	      if (($_cepsize | 0) == 13) {
	        HEAP32[$8$s2 + 2] = 13;
	        HEAP32[$8$s2 + 3] = 1;
	        var $54 = ___ckd_calloc__(1, 4, STRING_TABLE.__str11516 | 0, 718);
	        var $55 = $54;
	        HEAP32[$8$s2 + 4] = $55;
	        HEAP32[$55 >> 2] = 39;
	        HEAP32[$8$s2 + 23] = 39;
	        HEAP32[$8$s2 + 5] = 3;
	        HEAP32[$8$s2 + 14] = 4;
	        __label__ = 45;
	        break;
	      }
	      __E__pr_header(STRING_TABLE.__str11516 | 0, 712, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str241539 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      _ckd_free($8);
	      var $_0 = 0;
	      __label__ = 50;
	      break;
	    }
	  } while (0);
	  if (__label__ == 45) {
	    var $259 = ($cmn | 0) != 0;
	    if ($259) {
	      var $263 = HEAP32[$8$s2 + 2];
	      var $264 = _cmn_init($263);
	      HEAP32[$8$s2 + 15] = $264;
	    }
	    HEAP32[$8$s2 + 11] = $cmn;
	    HEAP32[$8$s2 + 12] = $varnorm;
	    if (($agc | 0) != 0) {
	      var $274 = _agc_init();
	      HEAP32[$8$s2 + 16] = $274;
	      var $277 = $259 ? 5 : 10;
	      _agc_emax_set($274, $277);
	    }
	    HEAP32[$8$s2 + 13] = $agc;
	    var $281 = $8 + 20 | 0;
	    var $283 = HEAP32[$281 >> 2] << 1;
	    var $_2 = ($283 | 0) > 256 ? $283 : 256;
	    var $287 = HEAP32[$8$s2 + 2];
	    var $288 = ___ckd_calloc_2d__($_2, $287, 4, STRING_TABLE.__str11516 | 0, 855);
	    var $289 = $288;
	    HEAP32[$8$s2 + 17] = $289;
	    var $294 = HEAP32[$281 >> 2] << 1 | 1;
	    var $295 = ___ckd_calloc__($294, 4, STRING_TABLE.__str11516 | 0, 859);
	    var $296 = $295;
	    HEAP32[$8$s2 + 18] = $296;
	    var $_0 = $9;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_feat_init["X"] = 1;

	function _feat_1s_c_d_ld_dd_cep2feat($fcb, $mfc, $feat) {
	  var $28$s2;
	  var $12$s2;
	  var $mfc$s2 = $mfc >> 2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 604, STRING_TABLE.___func___feat_1s_c_d_ld_dd_cep2feat | 0, STRING_TABLE.__str141529 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 1) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 605, STRING_TABLE.___func___feat_1s_c_d_ld_dd_cep2feat | 0, STRING_TABLE.__str721587 | 0);
	  }
	  var $12$s2 = ($fcb + 8 | 0) >> 2;
	  if ((HEAP32[HEAP32[$fcb + 16 >> 2] >> 2] | 0) != (HEAP32[$12$s2] << 2 | 0)) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 606, STRING_TABLE.___func___feat_1s_c_d_ld_dd_cep2feat | 0, STRING_TABLE.__str761591 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 4) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 607, STRING_TABLE.___func___feat_1s_c_d_ld_dd_cep2feat | 0, STRING_TABLE.__str771592 | 0);
	  }
	  var $23 = HEAP32[$feat >> 2];
	  var $25 = HEAP32[$mfc$s2];
	  var $27 = HEAP32[$12$s2] << 2;
	  _memcpy($23, $25, $27, 4);
	  var $28$s2 = HEAP32[$feat >> 2] >> 2;
	  var $29 = HEAP32[$12$s2];
	  var $31 = HEAP32[$mfc$s2 + 2];
	  var $33 = HEAP32[$mfc - 8 >> 2];
	  var $34 = ($29 | 0) > 0;
	  $_$14 : do {
	    if ($34) {
	      var $i_011 = 0;
	      while (1) {
	        var $i_011;
	        var $39 = HEAPF32[$31 + ($i_011 << 2) >> 2] - HEAPF32[$33 + ($i_011 << 2) >> 2];
	        HEAPF32[($i_011 + $29 << 2 >> 2) + $28$s2] = $39;
	        var $41 = $i_011 + 1 | 0;
	        var $42 = HEAP32[$12$s2];
	        if (($41 | 0) >= ($42 | 0)) {
	          break;
	        }
	        var $i_011 = $41;
	      }
	      var $_sum = $42 + $29 | 0;
	      var $45 = HEAP32[$mfc$s2 + 4];
	      var $47 = HEAP32[$mfc - 16 >> 2];
	      if (($42 | 0) <= 0) {
	        var $58 = $42;
	        var $_sum20 = $_sum;
	        break;
	      }
	      var $i_16 = 0;
	      while (1) {
	        var $i_16;
	        var $53 = HEAPF32[$45 + ($i_16 << 2) >> 2] - HEAPF32[$47 + ($i_16 << 2) >> 2];
	        HEAPF32[($i_16 + $_sum << 2 >> 2) + $28$s2] = $53;
	        var $55 = $i_16 + 1 | 0;
	        var $56 = HEAP32[$12$s2];
	        if (($55 | 0) >= ($56 | 0)) {
	          var $58 = $56;
	          var $_sum20 = $_sum;
	          break $_$14;
	        }
	        var $i_16 = $55;
	      }
	    } else {
	      var $58 = $29;
	      var $_sum20 = $29 << 1;
	    }
	  } while (0);
	  var $_sum20;
	  var $58;
	  var $60 = HEAP32[$mfc$s2 + 3];
	  var $62 = HEAP32[$mfc - 4 >> 2];
	  var $64 = HEAP32[$mfc$s2 + 1];
	  var $66 = HEAP32[$mfc - 12 >> 2];
	  var $67 = ($58 | 0) > 0;
	  $_$22 : do {
	    if ($67) {
	      var $_sum1 = $58 + $_sum20 | 0;
	      var $i_25 = 0;
	      while (1) {
	        var $i_25;
	        var $79 = HEAPF32[$60 + ($i_25 << 2) >> 2] - HEAPF32[$62 + ($i_25 << 2) >> 2] - (HEAPF32[$64 + ($i_25 << 2) >> 2] - HEAPF32[$66 + ($i_25 << 2) >> 2]);
	        HEAPF32[($_sum1 + $i_25 << 2 >> 2) + $28$s2] = $79;
	        var $81 = $i_25 + 1 | 0;
	        if (($81 | 0) >= (HEAP32[$12$s2] | 0)) {
	          break $_$22;
	        }
	        var $i_25 = $81;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_1s_c_d_ld_dd_cep2feat["X"] = 1;

	function _feat_s3_cep_dcep($fcb, $mfc, $feat) {
	  var $12$s2;
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 530, STRING_TABLE.___func___feat_s3_cep_dcep | 0, STRING_TABLE.__str141529 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 1) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 531, STRING_TABLE.___func___feat_s3_cep_dcep | 0, STRING_TABLE.__str721587 | 0);
	  }
	  var $12$s2 = ($fcb + 8 | 0) >> 2;
	  if ((HEAP32[HEAP32[$fcb + 16 >> 2] >> 2] | 0) != (HEAP32[$12$s2] << 1 | 0)) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 532, STRING_TABLE.___func___feat_s3_cep_dcep | 0, STRING_TABLE.__str741589 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 2) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 533, STRING_TABLE.___func___feat_s3_cep_dcep | 0, STRING_TABLE.__str751590 | 0);
	  }
	  var $23 = HEAP32[$feat >> 2];
	  var $25 = HEAP32[$mfc >> 2];
	  var $27 = HEAP32[$12$s2] << 2;
	  _memcpy($23, $25, $27, 4);
	  var $28 = HEAP32[$feat >> 2];
	  var $29 = HEAP32[$12$s2];
	  var $31 = HEAP32[$mfc + 8 >> 2];
	  var $33 = HEAP32[$mfc - 8 >> 2];
	  var $34 = ($29 | 0) > 0;
	  $_$40 : do {
	    if ($34) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $39 = HEAPF32[$31 + ($i_01 << 2) >> 2] - HEAPF32[$33 + ($i_01 << 2) >> 2];
	        HEAPF32[$28 + ($i_01 + $29 << 2) >> 2] = $39;
	        var $41 = $i_01 + 1 | 0;
	        if (($41 | 0) >= (HEAP32[$12$s2] | 0)) {
	          break $_$40;
	        }
	        var $i_01 = $41;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_s3_cep_dcep["X"] = 1;

	function _feat_s3_cep($fcb, $mfc, $feat) {
	  if (($fcb | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 515, STRING_TABLE.___func___feat_s3_cep | 0, STRING_TABLE.__str141529 | 0);
	  }
	  if ((HEAP32[$fcb + 12 >> 2] | 0) != 1) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 516, STRING_TABLE.___func___feat_s3_cep | 0, STRING_TABLE.__str721587 | 0);
	  }
	  if ((HEAP32[$fcb + 20 >> 2] | 0) != 0) {
	    ___assert_func(STRING_TABLE.__str11516 | 0, 517, STRING_TABLE.___func___feat_s3_cep | 0, STRING_TABLE.__str731588 | 0);
	  }
	  var $15 = HEAP32[$feat >> 2];
	  var $17 = HEAP32[$mfc >> 2];
	  var $20 = HEAP32[$fcb + 8 >> 2] << 2;
	  _memcpy($15, $17, $20, 4);
	  return;
	  return;
	}

	function _feat_copy($fcb, $mfc, $feat) {
	  var $2 = HEAP32[$fcb + 20 >> 2];
	  var $3 = -$2 | 0;
	  var $4 = ($2 | 0) < ($3 | 0);
	  $_$55 : do {
	    if (!$4) {
	      var $5 = $fcb + 12 | 0;
	      var $6 = $fcb + 16 | 0;
	      var $8 = $2 << 1 | 1;
	      var $i_03 = $3;
	      var $9 = HEAP32[$5 >> 2];
	      while (1) {
	        var $9;
	        var $i_03;
	        var $10 = ($9 | 0) > 0;
	        $_$59 : do {
	          if ($10) {
	            var $11 = $i_03 + $2 | 0;
	            var $12 = ($i_03 << 2) + $mfc | 0;
	            var $j_01 = 0;
	            var $spos_02 = 0;
	            while (1) {
	              var $spos_02;
	              var $j_01;
	              var $17 = (HEAP32[HEAP32[$6 >> 2] + ($j_01 << 2) >> 2] | 0) / ($8 | 0) & -1;
	              var $22 = ($17 * $11 << 2) + HEAP32[$feat + ($j_01 << 2) >> 2] | 0;
	              var $25 = ($spos_02 << 2) + HEAP32[$12 >> 2] | 0;
	              var $26 = $17 << 2;
	              _memcpy($22, $25, $26, 4);
	              var $27 = $17 + $spos_02 | 0;
	              var $28 = $j_01 + 1 | 0;
	              var $29 = HEAP32[$5 >> 2];
	              if (($28 | 0) >= ($29 | 0)) {
	                var $31 = $29;
	                break $_$59;
	              }
	              var $j_01 = $28;
	              var $spos_02 = $27;
	            }
	          } else {
	            var $31 = $9;
	          }
	        } while (0);
	        var $31;
	        var $32 = $i_03 + 1 | 0;
	        if (($32 | 0) > ($2 | 0)) {
	          break $_$55;
	        }
	        var $i_03 = $32;
	        var $9 = $31;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _feat_compute_utt($fcb, $mfc, $nfr, $win, $feat) {
	  var $1 = $nfr - $win | 0;
	  var $2 = ($1 | 0) > ($win | 0);
	  $_$66 : do {
	    if ($2) {
	      var $3 = $fcb + 56 | 0;
	      var $i_01 = $win;
	      while (1) {
	        var $i_01;
	        var $5 = HEAP32[$3 >> 2];
	        var $6 = ($i_01 << 2) + $mfc | 0;
	        var $9 = HEAP32[$feat + ($i_01 - $win << 2) >> 2];
	        FUNCTION_TABLE[$5]($fcb, $6, $9);
	        var $10 = $i_01 + 1 | 0;
	        if (($10 | 0) == ($1 | 0)) {
	          break $_$66;
	        }
	        var $i_01 = $10;
	      }
	    }
	  } while (0);
	  if ((HEAP32[$fcb + 84 >> 2] | 0) != 0) {
	    var $16 = $nfr - ($win << 1) | 0;
	    _feat_lda_transform($fcb, $feat, $16);
	  }
	  if ((HEAP32[$fcb + 32 >> 2] | 0) != 0) {
	    var $23 = $nfr - ($win << 1) | 0;
	    _feat_subvec_project($fcb, $feat, $23);
	  }
	  return;
	  return;
	}

	function _feat_s2mfc2feat_live($fcb, $uttcep, $inout_ncep, $beginutt, $endutt, $ofeat) {
	  var $23$s2;
	  var $22$s2;
	  var $zero_inout_ncep$s2;
	  var $fcb$s2 = $fcb >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $zero = __stackBase__;
	  HEAP32[$zero >> 2] = 0;
	  var $zero_inout_ncep = ($inout_ncep | 0) == 0 ? $zero : $inout_ncep, $zero_inout_ncep$s2 = $zero_inout_ncep >> 2;
	  var $2 = ($beginutt | 0) != 0;
	  var $3 = ($endutt | 0) == 0;
	  var $or_cond = $3 | $2 ^ 1;
	  do {
	    if (!$or_cond) {
	      var $5 = HEAP32[$zero_inout_ncep$s2];
	      if (($5 | 0) <= 0) {
	        __label__ = 5;
	        break;
	      }
	      var $8 = _feat_s2mfc2feat_block_utt($fcb, $uttcep, $5, $ofeat);
	      var $_0 = $8;
	      __label__ = 40;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  do {
	    if (__label__ == 5) {
	      var $11 = HEAP32[$fcb$s2 + 5];
	      var $12 = -$11 | 0;
	      var $14 = HEAP32[$fcb$s2 + 2];
	      if ($2) {
	        var $17 = HEAP32[$fcb$s2 + 20];
	        HEAP32[$fcb$s2 + 19] = $17;
	        var $21 = $17;
	        var $20 = $17;
	      } else {
	        var $21 = HEAP32[$fcb$s2 + 19];
	        var $20 = HEAP32[$fcb$s2 + 20];
	      }
	      var $20;
	      var $21;
	      var $22$s2 = ($fcb + 76 | 0) >> 2;
	      var $23$s2 = ($fcb + 80 | 0) >> 2;
	      var $24 = $21 - $20 | 0;
	      if (($24 | 0) < 0) {
	        var $nbufcep_0 = $21 + 256 - $20 | 0;
	      } else {
	        var $nbufcep_0 = $24;
	      }
	      var $nbufcep_0;
	      var $29 = HEAP32[$zero_inout_ncep$s2];
	      if ($2) {
	        var $32 = ($29 | 0) > 0 ? $11 : 0;
	        var $nbufcep_1 = $32 + $nbufcep_0 | 0;
	      } else {
	        var $nbufcep_1 = $nbufcep_0;
	      }
	      var $nbufcep_1;
	      var $33 = $3 ? 0 : $11;
	      var $nbufcep_2 = $nbufcep_1 + $33 | 0;
	      if (($nbufcep_2 + $29 | 0) > 256) {
	        var $38 = 256 - $11 - $nbufcep_2 | 0;
	        HEAP32[$zero_inout_ncep$s2] = $38;
	        var $_02 = 0;
	        var $40 = $38;
	      } else {
	        var $_02 = $endutt;
	        var $40 = $29;
	      }
	      var $40;
	      var $_02;
	      _feat_cmn($fcb, $uttcep, $40, $beginutt, $_02);
	      var $41 = HEAP32[$zero_inout_ncep$s2];
	      _feat_agc($fcb, $uttcep, $41, $beginutt, $_02);
	      do {
	        if ($2) {
	          if ((HEAP32[$zero_inout_ncep$s2] | 0) <= 0) {
	            var $nbufcep_4_lcssa = $nbufcep_2;
	            __label__ = 23;
	            break;
	          }
	          var $45 = ($11 | 0) > 0;
	          var $46 = HEAP32[$22$s2];
	          $_$99 : do {
	            if ($45) {
	              var $47 = $fcb + 68 | 0;
	              var $48 = $14 << 2;
	              var $i_017 = 0;
	              var $50 = $46;
	              while (1) {
	                var $50;
	                var $i_017;
	                HEAP32[$22$s2] = $50 + 1 | 0;
	                var $55 = HEAP32[HEAP32[$47 >> 2] + ($50 << 2) >> 2];
	                var $57 = HEAP32[$uttcep >> 2];
	                _memcpy($55, $57, $48, 4);
	                var $59 = (HEAP32[$22$s2] | 0) % 256;
	                HEAP32[$22$s2] = $59;
	                var $60 = $i_017 + 1 | 0;
	                if (($60 | 0) == ($11 | 0)) {
	                  var $_lcssa = $59;
	                  break $_$99;
	                }
	                var $i_017 = $60;
	                var $50 = $59;
	              }
	            } else {
	              var $_lcssa = $46;
	            }
	          } while (0);
	          var $_lcssa;
	          HEAP32[$23$s2] = $_lcssa;
	          var $nbufcep_4_ph_ph = $nbufcep_2 - $11 | 0;
	          __label__ = 20;
	          break;
	        }
	        var $nbufcep_4_ph_ph = $nbufcep_2;
	        __label__ = 20;
	      } while (0);
	      $_$104 : do {
	        if (__label__ == 20) {
	          var $nbufcep_4_ph_ph;
	          if ((HEAP32[$zero_inout_ncep$s2] | 0) <= 0) {
	            var $nbufcep_4_lcssa = $nbufcep_4_ph_ph;
	            break;
	          }
	          var $63 = $fcb + 68 | 0;
	          var $64 = $14 << 2;
	          var $nbufcep_412 = $nbufcep_4_ph_ph;
	          var $i_113 = 0;
	          var $66 = HEAP32[$22$s2];
	          while (1) {
	            var $66;
	            var $i_113;
	            var $nbufcep_412;
	            HEAP32[$22$s2] = $66 + 1 | 0;
	            var $71 = HEAP32[HEAP32[$63 >> 2] + ($66 << 2) >> 2];
	            var $74 = HEAP32[$uttcep + ($i_113 << 2) >> 2];
	            _memcpy($71, $74, $64, 4);
	            var $76 = (HEAP32[$22$s2] | 0) % 256;
	            HEAP32[$22$s2] = $76;
	            var $77 = $nbufcep_412 + 1 | 0;
	            var $78 = $i_113 + 1 | 0;
	            if (($78 | 0) >= (HEAP32[$zero_inout_ncep$s2] | 0)) {
	              var $nbufcep_4_lcssa = $77;
	              break $_$104;
	            }
	            var $nbufcep_412 = $77;
	            var $i_113 = $78;
	            var $66 = $76;
	          }
	        }
	      } while (0);
	      var $nbufcep_4_lcssa;
	      var $81 = ($_02 | 0) == 0;
	      $_$110 : do {
	        if (!$81) {
	          var $83 = HEAP32[$22$s2];
	          var $tpos_0 = ($83 | 0) == 0 ? 255 : $83 - 1 | 0;
	          if (($11 | 0) <= 0) {
	            break;
	          }
	          var $87 = $fcb + 68 | 0;
	          var $88 = $14 << 2;
	          var $i_25 = 0;
	          var $90 = $83;
	          while (1) {
	            var $90;
	            var $i_25;
	            HEAP32[$22$s2] = $90 + 1 | 0;
	            var $92 = HEAP32[$87 >> 2];
	            var $95 = HEAP32[$92 + ($90 << 2) >> 2];
	            var $98 = HEAP32[$92 + ($tpos_0 << 2) >> 2];
	            _memcpy($95, $98, $88, 4);
	            var $100 = (HEAP32[$22$s2] | 0) % 256;
	            HEAP32[$22$s2] = $100;
	            var $101 = $i_25 + 1 | 0;
	            if (($101 | 0) == ($11 | 0)) {
	              break $_$110;
	            }
	            var $i_25 = $101;
	            var $90 = $100;
	          }
	        }
	      } while (0);
	      var $102 = $nbufcep_4_lcssa - $11 | 0;
	      if (($102 | 0) < 1) {
	        var $_0 = 0;
	        break;
	      }
	      var $104 = ($11 | 0) < ($12 | 0);
	      var $105 = $fcb + 56 | 0;
	      var $106 = $fcb + 72 | 0;
	      var $107 = $fcb + 68 | 0;
	      var $i_38 = 0;
	      var $109 = HEAP32[$23$s2];
	      while (1) {
	        var $109;
	        var $i_38;
	        if (($109 - $11 | 0) < 0 | ($109 + $11 | 0) > 255) {
	          $_$121 : do {
	            if (!$104) {
	              var $j_06 = $12;
	              var $115 = $109;
	              while (1) {
	                var $115;
	                var $j_06;
	                var $121 = HEAP32[HEAP32[$107 >> 2] + (($115 + ($j_06 + 256)) % 256 << 2) >> 2];
	                var $124 = ($j_06 + $11 << 2) + HEAP32[$106 >> 2] | 0;
	                HEAP32[$124 >> 2] = $121;
	                var $125 = $j_06 + 1 | 0;
	                if (($125 | 0) > ($11 | 0)) {
	                  break $_$121;
	                }
	                var $j_06 = $125;
	                var $115 = HEAP32[$23$s2];
	              }
	            }
	          } while (0);
	          var $127 = HEAP32[$105 >> 2];
	          var $129 = ($11 << 2) + HEAP32[$106 >> 2] | 0;
	          var $131 = HEAP32[$ofeat + ($i_38 << 2) >> 2];
	          FUNCTION_TABLE[$127]($fcb, $129, $131);
	        } else {
	          var $133 = HEAP32[$105 >> 2];
	          var $135 = ($109 << 2) + HEAP32[$107 >> 2] | 0;
	          var $137 = HEAP32[$ofeat + ($i_38 << 2) >> 2];
	          FUNCTION_TABLE[$133]($fcb, $135, $137);
	        }
	        var $141 = (HEAP32[$23$s2] + 1 | 0) % 256;
	        HEAP32[$23$s2] = $141;
	        var $142 = $i_38 + 1 | 0;
	        if (($142 | 0) == ($102 | 0)) {
	          break;
	        }
	        var $i_38 = $142;
	        var $109 = $141;
	      }
	      if ((HEAP32[$fcb$s2 + 21] | 0) != 0) {
	        _feat_lda_transform($fcb, $ofeat, $102);
	      }
	      if ((HEAP32[$fcb$s2 + 8] | 0) == 0) {
	        var $_0 = $102;
	        break;
	      }
	      _feat_subvec_project($fcb, $ofeat, $102);
	      var $_0 = $102;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_feat_s2mfc2feat_live["X"] = 1;

	function _feat_s2mfc2feat_block_utt($fcb, $uttcep, $nfr, $ofeat) {
	  var $2 = HEAP32[$fcb + 20 >> 2];
	  var $4 = HEAP32[$fcb + 8 >> 2];
	  var $6 = ($2 << 1) + $nfr | 0;
	  var $7 = ___ckd_calloc__($6, 4, STRING_TABLE.__str11516 | 0, 1257);
	  var $8 = $7;
	  var $9 = ($2 << 2) + $8 | 0;
	  var $10 = $9;
	  var $11 = $uttcep;
	  var $12 = $nfr << 2;
	  _memcpy($10, $11, $12, 4);
	  _feat_cmn($fcb, $9, $nfr, 1, 1);
	  _feat_agc($fcb, $9, $nfr, 1, 1);
	  var $13 = ($2 | 0) > 0;
	  $_$135 : do {
	    if ($13) {
	      var $14 = $fcb + 68 | 0;
	      var $15 = $4 << 2;
	      var $16 = $2 + $nfr | 0;
	      var $18 = ($nfr - 1 << 2) + $uttcep | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $22 = HEAP32[HEAP32[$14 >> 2] + ($i_01 << 2) >> 2];
	        var $23 = ($i_01 << 2) + $8 | 0;
	        HEAP32[$23 >> 2] = $22;
	        var $24 = $22;
	        var $26 = HEAP32[$uttcep >> 2];
	        _memcpy($24, $26, $15, 4);
	        var $30 = HEAP32[HEAP32[$14 >> 2] + ($i_01 + $2 << 2) >> 2];
	        var $32 = ($16 + $i_01 << 2) + $8 | 0;
	        HEAP32[$32 >> 2] = $30;
	        var $33 = $30;
	        var $35 = HEAP32[$18 >> 2];
	        _memcpy($33, $35, $15, 4);
	        var $36 = $i_01 + 1 | 0;
	        if (($36 | 0) == ($2 | 0)) {
	          break $_$135;
	        }
	        var $i_01 = $36;
	      }
	    }
	  } while (0);
	  _feat_compute_utt($fcb, $8, $6, $2, $ofeat);
	  _ckd_free($7);
	  return $nfr;
	  return null;
	}

	_feat_s2mfc2feat_block_utt["X"] = 1;

	function _feat_cmn($fcb, $mfc, $nfr, $beginutt, $endutt) {
	  var $2 = HEAP32[$fcb + 44 >> 2];
	  var $4 = ($endutt | 0) == 0;
	  var $cmn_type_0 = ($2 | 0) == 0 | (($beginutt | 0) == 0 | $4) ^ 1 ? $2 : 2;
	  do {
	    if (($cmn_type_0 | 0) == 1) {
	      var $8 = HEAP32[$fcb + 60 >> 2];
	      var $10 = HEAP32[$fcb + 48 >> 2];
	      _cmn($8, $mfc, $10, $nfr);
	    } else if (($cmn_type_0 | 0) == 2) {
	      var $12 = $fcb + 60 | 0;
	      var $13 = HEAP32[$12 >> 2];
	      var $15 = HEAP32[$fcb + 48 >> 2];
	      _cmn_prior($13, $mfc, $15, $nfr);
	      if ($4) {
	        break;
	      }
	      var $17 = HEAP32[$12 >> 2];
	      _cmn_prior_update($17);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _feat_agc($fcb, $mfc, $nfr, $beginutt, $endutt) {
	  var $2 = HEAP32[$fcb + 52 >> 2];
	  var $4 = ($endutt | 0) == 0;
	  var $agc_type_0 = ($2 | 0) == 0 | (($beginutt | 0) == 0 | $4) ^ 1 ? $2 : 2;
	  do {
	    if (($agc_type_0 | 0) == 1) {
	      var $8 = HEAP32[$fcb + 64 >> 2];
	      _agc_max($8, $mfc, $nfr);
	    } else if (($agc_type_0 | 0) == 2) {
	      var $10 = $fcb + 64 | 0;
	      var $11 = HEAP32[$10 >> 2];
	      _agc_emax($11, $mfc, $nfr);
	      if ($4) {
	        break;
	      }
	      var $13 = HEAP32[$10 >> 2];
	      _agc_emax_update($13);
	    } else if (($agc_type_0 | 0) == 3) {
	      var $16 = HEAP32[$fcb + 64 >> 2];
	      _agc_noise($16, $mfc, $nfr);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _feat_subvec_project($fcb, $inout_feat, $nfr) {
	  var $1 = $fcb + 32 | 0;
	  var $or_cond = (HEAP32[$1 >> 2] | 0) == 0 | ($nfr | 0) == 0;
	  $_$154 : do {
	    if (!$or_cond) {
	      var $5 = $fcb + 36 | 0;
	      var $6 = $fcb + 24 | 0;
	      var $7 = $fcb + 40 | 0;
	      var $i_03 = 0;
	      while (1) {
	        var $i_03;
	        var $10 = (HEAP32[$6 >> 2] | 0) > 0;
	        $_$158 : do {
	          if ($10) {
	            var $12 = ($i_03 << 2) + $inout_feat | 0;
	            var $out_01 = HEAP32[$5 >> 2];
	            var $j_02 = 0;
	            while (1) {
	              var $j_02;
	              var $out_01;
	              var $d_0 = HEAP32[HEAP32[$1 >> 2] + ($j_02 << 2) >> 2];
	              var $out_1 = $out_01;
	              while (1) {
	                var $out_1;
	                var $d_0;
	                if (($d_0 | 0) == 0) {
	                  break;
	                }
	                var $19 = HEAP32[$d_0 >> 2];
	                if (($19 | 0) == -1) {
	                  break;
	                }
	                var $25 = HEAPF32[HEAP32[HEAP32[$12 >> 2] >> 2] + ($19 << 2) >> 2];
	                HEAPF32[$out_1 >> 2] = $25;
	                var $d_0 = $d_0 + 4 | 0;
	                var $out_1 = $out_1 + 4 | 0;
	              }
	              var $28 = $j_02 + 1 | 0;
	              if (($28 | 0) >= (HEAP32[$6 >> 2] | 0)) {
	                var $_pre_phi = $12;
	                break $_$158;
	              }
	              var $out_01 = $out_1;
	              var $j_02 = $28;
	            }
	          } else {
	            var $_pre_phi = ($i_03 << 2) + $inout_feat | 0;
	          }
	        } while (0);
	        var $_pre_phi;
	        var $33 = HEAP32[HEAP32[$_pre_phi >> 2] >> 2];
	        var $35 = HEAP32[$5 >> 2];
	        var $37 = HEAP32[$7 >> 2] << 2;
	        _memcpy($33, $35, $37, 4);
	        var $38 = $i_03 + 1 | 0;
	        if (($38 | 0) == ($nfr | 0)) {
	          break $_$154;
	        }
	        var $i_03 = $38;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_subvec_project["X"] = 1;

	function _feat_free($f) {
	  var $f$s2 = $f >> 2;
	  var $1 = ($f | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $f | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$f$s2 + 17];
	      if (($9 | 0) != 0) {
	        var $12 = $9;
	        _ckd_free_2d($12);
	      }
	      var $16 = HEAP32[$f$s2 + 18];
	      _ckd_free($16);
	      var $18 = HEAP32[$f$s2 + 1];
	      if (($18 | 0) != 0) {
	        _ckd_free($18);
	      }
	      var $23 = HEAP32[$f$s2 + 21];
	      if (($23 | 0) != 0) {
	        var $26 = $23;
	        _ckd_free_3d($26);
	      }
	      var $30 = HEAP32[$f$s2 + 4];
	      _ckd_free($30);
	      var $33 = HEAP32[$f$s2 + 7];
	      _ckd_free($33);
	      var $36 = HEAP32[$f$s2 + 9];
	      _ckd_free($36);
	      var $38 = HEAP32[$f$s2 + 8];
	      _subvecs_free($38);
	      var $40 = HEAP32[$f$s2 + 15];
	      _cmn_free($40);
	      var $42 = HEAP32[$f$s2 + 16];
	      _agc_free($42);
	      var $43 = $f;
	      _ckd_free($43);
	    }
	  } while (0);
	  return;
	  return;
	}

	_feat_free["X"] = 1;

	function _fsg_arciter_get($itor) {
	  var $2 = HEAP32[$itor + 8 >> 2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $10 = HEAP32[$itor + 4 >> 2];
	      if (($10 | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_0 = HEAP32[HEAP32[$10 + 4 >> 2] + 8 >> 2];
	    } else {
	      var $_0 = HEAP32[$2 >> 2];
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _feat_lda_transform($fcb, $inout_feat, $nfr) {
	  var $1$s2;
	  var $1$s2 = ($fcb + 16 | 0) >> 2;
	  var $3 = HEAP32[HEAP32[$1$s2] >> 2];
	  var $4 = ___ckd_calloc__($3, 4, STRING_TABLE.__str1620 | 0, 148);
	  var $5 = $4;
	  var $6 = ($nfr | 0) == 0;
	  $_$33 : do {
	    if (!$6) {
	      var $7 = $fcb + 92 | 0;
	      var $8 = $fcb + 84 | 0;
	      var $i_04 = 0;
	      while (1) {
	        var $i_04;
	        var $12 = HEAP32[HEAP32[$1$s2] >> 2] << 2;
	        _memset($4, 0, $12, 4);
	        var $13 = HEAP32[$7 >> 2];
	        var $14 = ($13 | 0) == 0;
	        $_$37 : do {
	          if ($14) {
	            var $43 = HEAP32[HEAP32[$1$s2] >> 2];
	            var $_pre_phi = ($i_04 << 2) + $inout_feat | 0;
	          } else {
	            var $15 = ($i_04 << 2) + $inout_feat | 0;
	            var $j_02 = 0;
	            var $17 = HEAP32[HEAP32[$1$s2] >> 2];
	            var $16 = $13;
	            while (1) {
	              var $16;
	              var $17;
	              var $j_02;
	              if (($17 | 0) == 0) {
	                var $40 = 0;
	                var $39 = $16;
	              } else {
	                var $19 = ($j_02 << 2) + $5 | 0;
	                var $k_01 = 0;
	                var $21 = HEAPF32[$19 >> 2];
	                while (1) {
	                  var $21;
	                  var $k_01;
	                  var $33 = $21 + HEAPF32[HEAP32[HEAP32[$15 >> 2] >> 2] + ($k_01 << 2) >> 2] * HEAPF32[HEAP32[HEAP32[HEAP32[$8 >> 2] >> 2] + ($j_02 << 2) >> 2] + ($k_01 << 2) >> 2];
	                  HEAPF32[$19 >> 2] = $33;
	                  var $34 = $k_01 + 1 | 0;
	                  var $36 = HEAPU32[HEAP32[$1$s2] >> 2];
	                  if ($34 >>> 0 >= $36 >>> 0) {
	                    break;
	                  }
	                  var $k_01 = $34;
	                  var $21 = $33;
	                }
	                var $40 = $36;
	                var $39 = HEAP32[$7 >> 2];
	              }
	              var $39;
	              var $40;
	              var $41 = $j_02 + 1 | 0;
	              if ($41 >>> 0 >= $39 >>> 0) {
	                var $43 = $40;
	                var $_pre_phi = $15;
	                break $_$37;
	              }
	              var $j_02 = $41;
	              var $17 = $40;
	              var $16 = $39;
	            }
	          }
	        } while (0);
	        var $_pre_phi;
	        var $43;
	        var $46 = HEAP32[HEAP32[$_pre_phi >> 2] >> 2];
	        _memcpy($46, $4, $43 << 2, 4);
	        var $48 = $i_04 + 1 | 0;
	        if (($48 | 0) == ($nfr | 0)) {
	          break $_$33;
	        }
	        var $i_04 = $48;
	      }
	    }
	  } while (0);
	  _ckd_free($4);
	  return;
	  return;
	}

	_feat_lda_transform["X"] = 1;

	function _fsg_model_trans_add($fsg, $from, $to, $logp, $wid) {
	  var $1$s2;
	  var $1$s2 = ($fsg + 48 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if ((HEAP32[$2 + ($from << 3) + 4 >> 2] | 0) == 0) {
	    var $7 = _hash_table_new(5, 0);
	    var $9 = ($from << 3) + HEAP32[$1$s2] + 4 | 0;
	    HEAP32[$9 >> 2] = $7;
	    var $fsg_idx_val = HEAP32[$1$s2];
	  } else {
	    var $fsg_idx_val = $2;
	  }
	  var $fsg_idx_val;
	  var $11 = _fsg_model_trans($fsg_idx_val, $from, $to);
	  var $gn_0 = $11;
	  while (1) {
	    var $gn_0;
	    if (($gn_0 | 0) == 0) {
	      var $32 = HEAP32[$fsg + 52 >> 2];
	      var $33 = ___listelem_malloc__($32, STRING_TABLE.__str1640 | 0, 141);
	      var $34 = $33;
	      HEAP32[$34 >> 2] = $from;
	      var $35 = $33 + 4 | 0;
	      var $36 = $35;
	      HEAP32[$36 >> 2] = $to;
	      var $38 = $33 + 8 | 0;
	      HEAP32[$38 >> 2] = $logp;
	      var $40 = $33 + 12 | 0;
	      HEAP32[$40 >> 2] = $wid;
	      var $41 = _glist_add_ptr($11, $33);
	      var $44 = HEAP32[HEAP32[$1$s2] + ($from << 3) + 4 >> 2];
	      var $45 = $41;
	      _hash_table_replace_bkey($44, $35, $45);
	      break;
	    }
	    var $16 = HEAP32[$gn_0 >> 2];
	    if ((HEAP32[$16 + 12 >> 2] | 0) == ($wid | 0)) {
	      var $23 = $16 + 8 | 0;
	      if ((HEAP32[$23 >> 2] | 0) >= ($logp | 0)) {
	        break;
	      }
	      HEAP32[$23 >> 2] = $logp;
	      break;
	    }
	    var $gn_0 = HEAP32[$gn_0 + 8 >> 2];
	  }
	  return;
	  return;
	}

	_fsg_model_trans_add["X"] = 1;

	function _fsg_model_trans($fsg_0_12_val, $i, $j) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $1 = __stackBase__;
	  var $val = __stackBase__ + 4;
	  HEAP32[$1 >> 2] = $j;
	  var $3 = HEAP32[$fsg_0_12_val + ($i << 3) + 4 >> 2];
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = 0;
	    } else {
	      var $6 = $1;
	      var $7 = _hash_table_lookup_bkey($3, $6, $val);
	      if (($7 | 0) < 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_0 = HEAP32[$val >> 2];
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_model_null_trans($fsg_0_12_val, $i, $j) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $1 = __stackBase__;
	  var $val = __stackBase__ + 4;
	  HEAP32[$1 >> 2] = $j;
	  var $3 = HEAP32[$fsg_0_12_val + ($i << 3) >> 2];
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = 0;
	    } else {
	      var $6 = $1;
	      var $7 = _hash_table_lookup_bkey($3, $6, $val);
	      if (($7 | 0) < 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $_0 = HEAP32[$val >> 2];
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_model_null_trans_add($fsg, $from, $to, $logp) {
	  var $1 = _fsg_model_tag_trans_add($fsg, $from, $to, $logp);
	  return $1;
	  return null;
	}

	function _fsg_model_null_trans_closure($fsg, $nulls) {
	  var __stackBase__ = STACKTOP;
	  __E__pr_info_header(STRING_TABLE.__str1640 | 0, 213);
	  __E__pr_info(STRING_TABLE.__str51645 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  var $1 = ($nulls | 0) == 0;
	  $_$91 : do {
	    if ($1) {
	      var $2 = $fsg + 32 | 0;
	      var $3 = HEAP32[$2 >> 2];
	      if (($3 | 0) <= 0) {
	        var $gn1_0_ph8_ph = 0;
	        break;
	      }
	      var $fsg_idx1 = $fsg + 48 | 0;
	      var $i_019 = 0;
	      var $_020 = 0;
	      var $5 = $3;
	      while (1) {
	        var $5;
	        var $_020;
	        var $i_019;
	        var $6 = ($5 | 0) > 0;
	        $_$96 : do {
	          if ($6) {
	            var $_113 = $_020;
	            var $j_014 = 0;
	            while (1) {
	              var $j_014;
	              var $_113;
	              var $fsg_idx1_val = HEAP32[$fsg_idx1 >> 2];
	              var $7 = _fsg_model_null_trans($fsg_idx1_val, $i_019, $j_014);
	              if (($7 | 0) == 0) {
	                var $_2 = $_113;
	              } else {
	                var $10 = $7;
	                var $11 = _glist_add_ptr($_113, $10);
	                var $_2 = $11;
	              }
	              var $_2;
	              var $13 = $j_014 + 1 | 0;
	              var $14 = HEAP32[$2 >> 2];
	              if (($13 | 0) >= ($14 | 0)) {
	                var $_1_lcssa = $_2;
	                var $16 = $14;
	                break $_$96;
	              }
	              var $_113 = $_2;
	              var $j_014 = $13;
	            }
	          } else {
	            var $_1_lcssa = $_020;
	            var $16 = $5;
	          }
	        } while (0);
	        var $16;
	        var $_1_lcssa;
	        var $17 = $i_019 + 1 | 0;
	        if (($17 | 0) >= ($16 | 0)) {
	          var $gn1_0_ph8_ph = $_1_lcssa;
	          break $_$91;
	        }
	        var $i_019 = $17;
	        var $_020 = $_1_lcssa;
	        var $5 = $16;
	      }
	    } else {
	      var $gn1_0_ph8_ph = $nulls;
	    }
	  } while (0);
	  var $gn1_0_ph8_ph;
	  var $fsg_idx = $fsg + 48 | 0;
	  var $_5_ph9 = $gn1_0_ph8_ph;
	  var $gn1_0_ph8 = $gn1_0_ph8_ph;
	  var $updated_0_ph = 0;
	  var $n_1_ph = 0;
	  $_$104 : while (1) {
	    var $n_1_ph;
	    var $updated_0_ph;
	    var $gn1_0_ph8;
	    var $_5_ph9;
	    var $gn1_0 = $gn1_0_ph8;
	    var $updated_0 = $updated_0_ph;
	    while (1) {
	      var $updated_0;
	      var $gn1_0;
	      if (($gn1_0 | 0) != 0) {
	        break;
	      }
	      if (($updated_0 | 0) == 0) {
	        break $_$104;
	      }
	      var $gn1_0 = $_5_ph9;
	      var $updated_0 = 0;
	    }
	    var $23 = HEAP32[$gn1_0 >> 2];
	    if ((HEAP32[$23 + 12 >> 2] | 0) >= 0) {
	      ___assert_func(STRING_TABLE.__str1640 | 0, 237, STRING_TABLE.___func___fsg_model_null_trans_closure | 0, STRING_TABLE.__str61646 | 0);
	    }
	    var $29 = ($_5_ph9 | 0) == 0;
	    $_$113 : do {
	      if ($29) {
	        var $n_2_lcssa = $n_1_ph;
	        var $updated_1_lcssa = $updated_0;
	        var $_6_lcssa = 0;
	      } else {
	        var $31 = $23 + 4 | 0;
	        var $32 = $23;
	        var $34 = $23 + 8 | 0;
	        var $n_21 = $n_1_ph;
	        var $updated_12 = $updated_0;
	        var $gn2_03 = $_5_ph9;
	        var $_64 = $_5_ph9;
	        while (1) {
	          var $_64;
	          var $gn2_03;
	          var $updated_12;
	          var $n_21;
	          var $36 = HEAP32[$gn2_03 >> 2];
	          var $40 = (HEAP32[$31 >> 2] | 0) == (HEAP32[$36 >> 2] | 0);
	          do {
	            if ($40) {
	              var $42 = HEAP32[$32 >> 2];
	              var $44 = $36 + 4 | 0;
	              var $45 = HEAP32[$44 >> 2];
	              var $50 = HEAP32[$36 + 8 >> 2] + HEAP32[$34 >> 2] | 0;
	              var $51 = _fsg_model_null_trans_add($fsg, $42, $45, $50);
	              if (($51 | 0) <= -1) {
	                var $_7 = $_64;
	                var $updated_2 = $updated_12;
	                var $n_3 = $n_21;
	                break;
	              }
	              if (($51 | 0) <= 0) {
	                var $_7 = $_64;
	                var $updated_2 = 1;
	                var $n_3 = $n_21;
	                break;
	              }
	              var $56 = HEAP32[$32 >> 2];
	              var $57 = HEAP32[$44 >> 2];
	              var $fsg_idx_val = HEAP32[$fsg_idx >> 2];
	              var $58 = _fsg_model_null_trans($fsg_idx_val, $56, $57);
	              var $59 = $58;
	              var $60 = _glist_add_ptr($_64, $59);
	              var $_7 = $60;
	              var $updated_2 = 1;
	              var $n_3 = $n_21 + 1 | 0;
	            } else {
	              var $_7 = $_64;
	              var $updated_2 = $updated_12;
	              var $n_3 = $n_21;
	            }
	          } while (0);
	          var $n_3;
	          var $updated_2;
	          var $_7;
	          var $64 = HEAP32[$gn2_03 + 8 >> 2];
	          if (($64 | 0) == 0) {
	            var $n_2_lcssa = $n_3;
	            var $updated_1_lcssa = $updated_2;
	            var $_6_lcssa = $_7;
	            break $_$113;
	          }
	          var $n_21 = $n_3;
	          var $updated_12 = $updated_2;
	          var $gn2_03 = $64;
	          var $_64 = $_7;
	        }
	      }
	    } while (0);
	    var $_6_lcssa;
	    var $updated_1_lcssa;
	    var $n_2_lcssa;
	    var $_5_ph9 = $_6_lcssa;
	    var $gn1_0_ph8 = HEAP32[$gn1_0 + 8 >> 2];
	    var $updated_0_ph = $updated_1_lcssa;
	    var $n_1_ph = $n_2_lcssa;
	  }
	  __E__pr_info_header(STRING_TABLE.__str1640 | 0, 264);
	  __E__pr_info(STRING_TABLE.__str71647 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_1_ph, tempInt));
	  STACKTOP = __stackBase__;
	  return $_5_ph9;
	  return null;
	}

	_fsg_model_null_trans_closure["X"] = 1;

	function _fsg_model_arcs($fsg, $i) {
	  var $11$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($fsg + 48 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $5 = (HEAP32[$2 + ($i << 3) + 4 >> 2] | 0) == 0;
	  do {
	    if ($5) {
	      if ((HEAP32[$2 + ($i << 3) >> 2] | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 11;
	        break;
	      }
	      __label__ = 4;
	      break;
	    } else {
	      __label__ = 4;
	    }
	  } while (0);
	  do {
	    if (__label__ == 4) {
	      var $11 = ___ckd_calloc__(1, 12, STRING_TABLE.__str1640 | 0, 302), $11$s2 = $11 >> 2;
	      var $12 = $11;
	      var $13 = HEAP32[$1$s2];
	      var $15 = HEAP32[$13 + ($i << 3) >> 2];
	      if (($15 | 0) == 0) {
	        var $22 = $13;
	      } else {
	        var $18 = _hash_table_iter($15);
	        HEAP32[$11$s2 + 1] = $18;
	        var $22 = HEAP32[$1$s2];
	      }
	      var $22;
	      var $24 = HEAP32[$22 + ($i << 3) + 4 >> 2];
	      if (($24 | 0) == 0) {
	        var $30 = HEAP32[$11$s2];
	      } else {
	        var $27 = _hash_table_iter($24);
	        HEAP32[$11$s2] = $27;
	        var $30 = $27;
	      }
	      var $30;
	      if (($30 | 0) == 0) {
	        var $_0 = $12;
	        break;
	      }
	      var $37 = HEAP32[HEAP32[$30 + 4 >> 2] + 8 >> 2];
	      HEAP32[$11$s2 + 2] = $37;
	      var $_0 = $12;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_arciter_next($itor) {
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($itor + 8 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $24 = $itor + 4 | 0;
	      var $25 = HEAP32[$24 >> 2];
	      if (($25 | 0) == 0) {
	        __label__ = 9;
	        break;
	      }
	      var $28 = _hash_table_iter_next($25);
	      HEAP32[$24 >> 2] = $28;
	      if (($28 | 0) == 0) {
	        __label__ = 9;
	        break;
	      }
	      var $_0 = $itor;
	      __label__ = 10;
	      break;
	    } else {
	      var $6 = HEAP32[$2 + 8 >> 2];
	      HEAP32[$1$s2] = $6;
	      if (($6 | 0) != 0) {
	        var $_0 = $itor;
	        __label__ = 10;
	        break;
	      }
	      var $9 = $itor | 0;
	      var $10 = HEAP32[$9 >> 2];
	      var $11 = _hash_table_iter_next($10);
	      HEAP32[$9 >> 2] = $11;
	      if (($11 | 0) != 0) {
	        var $18 = HEAP32[HEAP32[$11 + 4 >> 2] + 8 >> 2];
	        HEAP32[$1$s2] = $18;
	        var $_0 = $itor;
	        __label__ = 10;
	        break;
	      }
	      if ((HEAP32[$itor + 4 >> 2] | 0) == 0) {
	        __label__ = 9;
	        break;
	      }
	      var $_0 = $itor;
	      __label__ = 10;
	      break;
	    }
	  } while (0);
	  if (__label__ == 9) {
	    _fsg_arciter_free($itor);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _fsg_arciter_free($itor) {
	  if (($itor | 0) != 0) {
	    var $4 = HEAP32[$itor + 4 >> 2];
	    _hash_table_iter_free($4);
	    var $6 = HEAP32[$itor >> 2];
	    _hash_table_iter_free($6);
	    var $7 = $itor;
	    _ckd_free($7);
	  }
	  return;
	  return;
	}

	function _fsg_model_word_id($fsg, $word) {
	  var $1 = $fsg + 16 | 0;
	  var $3 = HEAP32[$fsg + 8 >> 2];
	  var $wid_0 = 0;
	  while (1) {
	    var $wid_0;
	    if (($wid_0 | 0) >= ($3 | 0)) {
	      break;
	    }
	    var $9 = HEAP32[HEAP32[$1 >> 2] + ($wid_0 << 2) >> 2];
	    var $10 = _strcmp($9, $word);
	    if (($10 | 0) == 0) {
	      break;
	    }
	    var $wid_0 = $wid_0 + 1 | 0;
	  }
	  var $_wid_0 = ($wid_0 | 0) == ($3 | 0) ? -1 : $wid_0;
	  return $_wid_0;
	  return null;
	}

	function _fsg_model_word_add($fsg, $word) {
	  var $6$s2;
	  var $4$s2;
	  var $1 = _fsg_model_word_id($fsg, $word);
	  if (($1 | 0) == -1) {
	    var $4$s2 = ($fsg + 8 | 0) >> 2;
	    var $5 = HEAP32[$4$s2];
	    var $6$s2 = ($fsg + 12 | 0) >> 2;
	    var $8 = ($5 | 0) == (HEAP32[$6$s2] | 0);
	    do {
	      if ($8) {
	        var $10 = $5 + 10 | 0;
	        HEAP32[$6$s2] = $10;
	        var $11 = $fsg + 16 | 0;
	        var $13 = HEAP32[$11 >> 2];
	        var $14 = $10 << 2;
	        var $15 = ___ckd_realloc__($13, $14, STRING_TABLE.__str1640 | 0, 392);
	        var $16 = $15;
	        HEAP32[$11 >> 2] = $16;
	        var $17 = $fsg + 20 | 0;
	        var $18 = HEAP32[$17 >> 2];
	        if (($18 | 0) != 0) {
	          var $21 = $18;
	          var $25 = ((HEAP32[$6$s2] + 31 | 0) / 32 & -1) << 2;
	          var $26 = ___ckd_realloc__($21, $25, STRING_TABLE.__str1640 | 0, 394);
	          var $27 = $26;
	          HEAP32[$17 >> 2] = $27;
	        }
	        var $29 = $fsg + 24 | 0;
	        var $30 = HEAP32[$29 >> 2];
	        if (($30 | 0) == 0) {
	          var $_pre_phi = $11;
	          break;
	        }
	        var $33 = $30;
	        var $37 = ((HEAP32[$6$s2] + 31 | 0) / 32 & -1) << 2;
	        var $38 = ___ckd_realloc__($33, $37, STRING_TABLE.__str1640 | 0, 396);
	        var $39 = $38;
	        HEAP32[$29 >> 2] = $39;
	        var $_pre_phi = $11;
	      } else {
	        var $_pre_phi = $fsg + 16 | 0;
	      }
	    } while (0);
	    var $_pre_phi;
	    var $41 = HEAP32[$4$s2] + 1 | 0;
	    HEAP32[$4$s2] = $41;
	    var $42 = ___ckd_salloc__($word, STRING_TABLE.__str1640 | 0, 399);
	    var $44 = ($5 << 2) + HEAP32[$_pre_phi >> 2] | 0;
	    HEAP32[$44 >> 2] = $42;
	    var $wid_0 = $5;
	  } else {
	    var $wid_0 = $1;
	  }
	  var $wid_0;
	  return $wid_0;
	  return null;
	}

	_fsg_model_word_add["X"] = 1;

	function _fsg_model_add_silence($fsg, $silword, $silprob) {
	  var __stackBase__ = STACKTOP;
	  __E__pr_info_header(STRING_TABLE.__str1640 | 0, 411);
	  __E__pr_info(STRING_TABLE.__str81648 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $silword, tempInt));
	  var $1 = _fsg_model_word_add($fsg, $silword);
	  var $3 = HEAP32[$fsg + 28 >> 2];
	  var $4 = $silprob;
	  var $5 = _logmath_log($3, $4);
	  var $10 = $5 * HEAPF32[$fsg + 44 >> 2] & -1;
	  var $11 = $fsg + 20 | 0;
	  var $12 = HEAP32[$11 >> 2];
	  if (($12 | 0) == 0) {
	    var $18 = (HEAP32[$fsg + 12 >> 2] + 31 | 0) / 32 & -1;
	    var $19 = ___ckd_calloc__($18, 4, STRING_TABLE.__str1640 | 0, 416);
	    var $20 = $19;
	    HEAP32[$11 >> 2] = $20;
	    var $21 = $20;
	  } else {
	    var $21 = $12;
	  }
	  var $21;
	  var $25 = ((($1 | 0) / 32 & -1) << 2) + $21 | 0;
	  var $27 = HEAP32[$25 >> 2] | 1 << ($1 & 31);
	  HEAP32[$25 >> 2] = $27;
	  var $28 = $fsg + 32 | 0;
	  var $30 = (HEAP32[$28 >> 2] | 0) > 0;
	  $_$181 : do {
	    if ($30) {
	      var $src_02 = 0;
	      while (1) {
	        var $src_02;
	        _fsg_model_trans_add($fsg, $src_02, $src_02, $10, $1);
	        var $31 = $src_02 + 1 | 0;
	        if (($31 | 0) >= (HEAP32[$28 >> 2] | 0)) {
	          var $n_trans_1 = $31;
	          break $_$181;
	        }
	        var $src_02 = $31;
	      }
	    } else {
	      var $n_trans_1 = 0;
	    }
	  } while (0);
	  var $n_trans_1;
	  __E__pr_info_header(STRING_TABLE.__str1640 | 0, 431);
	  __E__pr_info(STRING_TABLE.__str91649 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_trans_1, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _feat_read_lda($feat, $ldafile, $dim) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 28;
	  var $byteswap = __stackBase__;
	  var $chksum = __stackBase__ + 4;
	  var $m = __stackBase__ + 8;
	  var $n = __stackBase__ + 12;
	  var $argname = __stackBase__ + 16;
	  var $argval = __stackBase__ + 20;
	  var $outlda = __stackBase__ + 24;
	  if (($feat | 0) == 0) {
	    ___assert_func(STRING_TABLE.__str1620 | 0, 68, STRING_TABLE.___func___feat_read_lda | 0, STRING_TABLE.__str11621 | 0);
	  }
	  var $4 = $feat + 12 | 0;
	  if ((HEAP32[$4 >> 2] | 0) == 1) {
	    var $10 = _fopen($ldafile, STRING_TABLE.__str92578 | 0);
	    if (($10 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str1620 | 0, 76, STRING_TABLE.__str232533 | 0);
	      var $13 = ___errno();
	      var $14 = HEAP32[$13 >> 2];
	      var $15 = _strerror($14);
	      __E__sys_error(STRING_TABLE.__str61626 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $ldafile, HEAP32[tempInt + 4 >> 2] = $15, tempInt));
	      var $_0 = -1;
	    } else {
	      var $17 = _bio_readhdr($10, $argname, $argval, $byteswap);
	      if (($17 | 0) < 0) {
	        __E__pr_header(STRING_TABLE.__str1620 | 0, 81, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str71627 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $ldafile, tempInt));
	        var $23 = _fclose($10);
	        var $_0 = -1;
	      } else {
	        var $19 = HEAP32[$argname >> 2];
	        var $20 = HEAP32[$19 >> 2];
	        var $21 = ($20 | 0) == 0;
	        var $_pre = HEAP32[$argval >> 2];
	        $_$13 : do {
	          if (!$21) {
	            var $i_03 = 0;
	            var $24 = $20;
	            while (1) {
	              var $24;
	              var $i_03;
	              var $25 = _strcmp($24, STRING_TABLE.__str82348 | 0);
	              var $26 = ($25 | 0) == 0;
	              do {
	                if ($26) {
	                  var $28 = ($i_03 << 2) + $_pre | 0;
	                  var $29 = HEAP32[$28 >> 2];
	                  var $30 = _strcmp($29, STRING_TABLE.__str91629 | 0);
	                  if (($30 | 0) == 0) {
	                    break;
	                  }
	                  __E__pr_header(STRING_TABLE.__str1620 | 0, 90, STRING_TABLE.__str212436 | 0);
	                  var $33 = HEAP32[$28 >> 2];
	                  __E__pr_warn(STRING_TABLE.__str111631 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $ldafile, HEAP32[tempInt + 4 >> 2] = $33, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str91629 | 0, tempInt));
	                }
	              } while (0);
	              var $35 = $i_03 + 1 | 0;
	              var $37 = HEAP32[$19 + ($35 << 2) >> 2];
	              if (($37 | 0) == 0) {
	                break $_$13;
	              }
	              var $i_03 = $35;
	              var $24 = $37;
	            }
	          }
	        } while (0);
	        _bio_hdrarg_free($19, $_pre);
	        HEAP32[$argval >> 2] = 0;
	        HEAP32[$argname >> 2] = 0;
	        HEAP32[$chksum >> 2] = 0;
	        var $39 = $feat + 84 | 0;
	        var $40 = HEAP32[$39 >> 2];
	        if (($40 | 0) != 0) {
	          var $43 = $40;
	          _ckd_free_3d($43);
	        }
	        var $45 = $feat + 88 | 0;
	        var $46 = HEAP32[$byteswap >> 2];
	        var $47 = _bio_fread_3d($outlda, $45, $m, $n, $10, $46, $chksum);
	        if (($47 | 0) < 0) {
	          __E__pr_header(STRING_TABLE.__str1620 | 0, 113, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str131633 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $ldafile, tempInt));
	          var $50 = _fclose($10);
	          var $_0 = -1;
	        } else {
	          var $53 = HEAP32[$outlda >> 2];
	          HEAP32[$39 >> 2] = $53;
	          var $54 = _fclose($10);
	          var $55 = HEAP32[$n >> 2];
	          var $56 = $feat + 16 | 0;
	          if (($55 | 0) == (HEAP32[HEAP32[$56 >> 2] >> 2] | 0)) {
	            var $64 = HEAPU32[$m >> 2];
	            var $_dim = $64 >>> 0 < $dim >>> 0 | ($dim | 0) < 1 ? $64 : $dim;
	            HEAP32[$feat + 92 >> 2] = $_dim;
	            var $_0 = 0;
	          } else {
	            __E__pr_header(STRING_TABLE.__str1620 | 0, 131, STRING_TABLE.__str72422 | 0);
	            var $62 = HEAP32[HEAP32[$56 >> 2] >> 2];
	            __E__die_error(STRING_TABLE.__str151635 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $55, HEAP32[tempInt + 4 >> 2] = $62, tempInt));
	          }
	        }
	      }
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str1620 | 0, 70, STRING_TABLE.__str102579 | 0);
	    var $8 = HEAP32[$4 >> 2];
	    __E__pr_warn(STRING_TABLE.__str31623 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_feat_read_lda["X"] = 1;

	function _fsg_model_tag_trans_add($fsg, $from, $to, $logp) {
	  var $6$s2;
	  var __stackBase__ = STACKTOP;
	  if (($logp | 0) > 0) {
	    __E__pr_header(STRING_TABLE.__str1640 | 0, 161, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str21642 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $from, HEAP32[tempInt + 4 >> 2] = $to, tempInt));
	  } else {
	    var $4 = ($from | 0) == ($to | 0);
	    do {
	      if ($4) {
	        var $_0 = -1;
	      } else {
	        var $6$s2 = ($fsg + 48 | 0) >> 2;
	        var $7 = HEAP32[$6$s2];
	        if ((HEAP32[$7 + ($from << 3) >> 2] | 0) == 0) {
	          var $12 = _hash_table_new(5, 0);
	          var $14 = ($from << 3) + HEAP32[$6$s2] | 0;
	          HEAP32[$14 >> 2] = $12;
	          var $fsg_idx_val = HEAP32[$6$s2];
	        } else {
	          var $fsg_idx_val = $7;
	        }
	        var $fsg_idx_val;
	        var $16 = _fsg_model_null_trans($fsg_idx_val, $from, $to);
	        if (($16 | 0) == 0) {
	          var $25 = HEAP32[$fsg + 52 >> 2];
	          var $26 = ___listelem_malloc__($25, STRING_TABLE.__str1640 | 0, 184);
	          var $27 = $26;
	          HEAP32[$27 >> 2] = $from;
	          var $28 = $26 + 4 | 0;
	          var $29 = $28;
	          HEAP32[$29 >> 2] = $to;
	          var $31 = $26 + 8 | 0;
	          HEAP32[$31 >> 2] = $logp;
	          var $33 = $26 + 12 | 0;
	          HEAP32[$33 >> 2] = -1;
	          var $36 = HEAP32[HEAP32[$6$s2] + ($from << 3) >> 2];
	          var $37 = _hash_table_enter_bkey($36, $28, 4, $26);
	          if (($26 | 0) == ($37 | 0)) {
	            var $_0 = 1;
	            break;
	          }
	          ___assert_func(STRING_TABLE.__str1640 | 0, 194, STRING_TABLE.___func___fsg_model_tag_trans_add | 0, STRING_TABLE.__str31643 | 0);
	          var $_0 = 1;
	        } else {
	          var $19 = $16 + 8 | 0;
	          if ((HEAP32[$19 >> 2] | 0) >= ($logp | 0)) {
	            var $_0 = -1;
	            break;
	          }
	          HEAP32[$19 >> 2] = $logp;
	          var $_0 = 0;
	        }
	      }
	    } while (0);
	    var $_0;
	    STACKTOP = __stackBase__;
	    return $_0;
	  }
	  return null;
	}

	_fsg_model_tag_trans_add["X"] = 1;

	function _fsg_model_add_alt($fsg, $baseword, $altword) {
	  var $56$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = $fsg + 16 | 0;
	  var $3 = HEAP32[$fsg + 8 >> 2];
	  var $basewid_0 = 0;
	  while (1) {
	    var $basewid_0;
	    if (($basewid_0 | 0) >= ($3 | 0)) {
	      break;
	    }
	    var $9 = HEAP32[HEAP32[$1 >> 2] + ($basewid_0 << 2) >> 2];
	    var $10 = _strcmp($9, $baseword);
	    if (($10 | 0) == 0) {
	      break;
	    }
	    var $basewid_0 = $basewid_0 + 1 | 0;
	  }
	  var $14 = ($basewid_0 | 0) == ($3 | 0);
	  $_$6 : do {
	    if ($14) {
	      __E__pr_header(STRING_TABLE.__str1640 | 0, 447, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str111651 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $baseword, tempInt));
	      var $_0 = -1;
	    } else {
	      var $17 = _fsg_model_word_add($fsg, $altword);
	      var $18 = $fsg + 24 | 0;
	      var $19 = HEAP32[$18 >> 2];
	      if (($19 | 0) == 0) {
	        var $25 = (HEAP32[$fsg + 12 >> 2] + 31 | 0) / 32 & -1;
	        var $26 = ___ckd_calloc__($25, 4, STRING_TABLE.__str1640 | 0, 452);
	        var $27 = $26;
	        HEAP32[$18 >> 2] = $27;
	        var $29 = $27;
	      } else {
	        var $29 = $19;
	      }
	      var $29;
	      var $33 = ((($17 | 0) / 32 & -1) << 2) + $29 | 0;
	      var $35 = HEAP32[$33 >> 2] | 1 << ($17 & 31);
	      HEAP32[$33 >> 2] = $35;
	      var $36 = $fsg + 32 | 0;
	      var $37 = HEAP32[$36 >> 2];
	      if (($37 | 0) <= 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $39 = $fsg + 48 | 0;
	      var $40 = $fsg + 52 | 0;
	      var $ntrans_011 = 0;
	      var $i_012 = 0;
	      var $41 = $37;
	      while (1) {
	        var $41;
	        var $i_012;
	        var $ntrans_011;
	        var $44 = HEAP32[HEAP32[$39 >> 2] + ($i_012 << 3) + 4 >> 2];
	        if (($44 | 0) == 0) {
	          var $ntrans_4 = $ntrans_011;
	          var $92 = $41;
	        } else {
	          var $47 = _hash_table_iter($44);
	          var $48 = ($47 | 0) == 0;
	          $_$17 : do {
	            if ($48) {
	              var $ntrans_1_lcssa = $ntrans_011;
	            } else {
	              var $ntrans_15 = $ntrans_011;
	              var $itor_06 = $47;
	              while (1) {
	                var $itor_06;
	                var $ntrans_15;
	                var $49 = $itor_06 + 4 | 0;
	                var $50 = HEAP32[$49 >> 2];
	                var $52 = HEAP32[$50 + 8 >> 2];
	                var $53 = $52;
	                if (($52 | 0) == 0) {
	                  var $ntrans_2_lcssa = $ntrans_15;
	                  var $trans_0_lcssa = $53;
	                  var $86 = $50;
	                } else {
	                  var $ntrans_21 = $ntrans_15;
	                  var $trans_02 = $53;
	                  var $gn_03 = $53;
	                  while (1) {
	                    var $gn_03;
	                    var $trans_02;
	                    var $ntrans_21;
	                    var $56$s2 = HEAP32[$gn_03 >> 2] >> 2;
	                    if ((HEAP32[$56$s2 + 3] | 0) == ($basewid_0 | 0)) {
	                      var $62 = HEAP32[$40 >> 2];
	                      var $63 = ___listelem_malloc__($62, STRING_TABLE.__str1640 | 0, 477);
	                      var $65 = HEAP32[$56$s2];
	                      var $66 = $63;
	                      HEAP32[$66 >> 2] = $65;
	                      var $69 = HEAP32[$56$s2 + 1];
	                      var $71 = $63 + 4 | 0;
	                      HEAP32[$71 >> 2] = $69;
	                      var $74 = HEAP32[$56$s2 + 2];
	                      var $76 = $63 + 8 | 0;
	                      HEAP32[$76 >> 2] = $74;
	                      var $78 = $63 + 12 | 0;
	                      HEAP32[$78 >> 2] = $17;
	                      var $79 = _glist_add_ptr($trans_02, $63);
	                      var $trans_1 = $79;
	                      var $ntrans_3 = $ntrans_21 + 1 | 0;
	                    } else {
	                      var $trans_1 = $trans_02;
	                      var $ntrans_3 = $ntrans_21;
	                    }
	                    var $ntrans_3;
	                    var $trans_1;
	                    var $83 = HEAP32[$gn_03 + 8 >> 2];
	                    if (($83 | 0) == 0) {
	                      break;
	                    }
	                    var $ntrans_21 = $ntrans_3;
	                    var $trans_02 = $trans_1;
	                    var $gn_03 = $83;
	                  }
	                  var $ntrans_2_lcssa = $ntrans_3;
	                  var $trans_0_lcssa = $trans_1;
	                  var $86 = HEAP32[$49 >> 2];
	                }
	                var $86;
	                var $trans_0_lcssa;
	                var $ntrans_2_lcssa;
	                HEAP32[$86 + 8 >> 2] = $trans_0_lcssa;
	                var $89 = _hash_table_iter_next($itor_06);
	                if (($89 | 0) == 0) {
	                  var $ntrans_1_lcssa = $ntrans_2_lcssa;
	                  break $_$17;
	                }
	                var $ntrans_15 = $ntrans_2_lcssa;
	                var $itor_06 = $89;
	              }
	            }
	          } while (0);
	          var $ntrans_1_lcssa;
	          var $ntrans_4 = $ntrans_1_lcssa;
	          var $92 = HEAP32[$36 >> 2];
	        }
	        var $92;
	        var $ntrans_4;
	        var $93 = $i_012 + 1 | 0;
	        if (($93 | 0) >= ($92 | 0)) {
	          var $_0 = $ntrans_4;
	          break $_$6;
	        }
	        var $ntrans_011 = $ntrans_4;
	        var $i_012 = $93;
	        var $41 = $92;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_model_add_alt["X"] = 1;

	function _fsg_model_init($name, $lmath, $lw, $n_state) {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 56, STRING_TABLE.__str1640 | 0, 503), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  HEAP32[$1$s2] = 1;
	  var $4 = _listelem_alloc_init(16);
	  HEAP32[$1$s2 + 13] = $4;
	  HEAP32[$1$s2 + 7] = $lmath;
	  if (($name | 0) == 0) {
	    var $13 = 0;
	  } else {
	    var $11 = ___ckd_salloc__($name, STRING_TABLE.__str1640 | 0, 507);
	    var $13 = $11;
	  }
	  var $13;
	  HEAP32[$1$s2 + 1] = $13;
	  HEAP32[$1$s2 + 8] = $n_state;
	  HEAPF32[$1$s2 + 11] = $lw;
	  var $20 = ___ckd_calloc__($n_state, 8, STRING_TABLE.__str1640 | 0, 511);
	  HEAP32[$1$s2 + 12] = $20;
	  return $2;
	  return null;
	}

	function _fsg_model_read($fp, $lmath, $lw) {
	  var $102$s2;
	  var $65$s2;
	  var $j$s2;
	  var $i$s2;
	  var $lineno$s2;
	  var $lineptr$s2;
	  var $wordptr$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 28;
	  var __label__;
	  var $wordptr = __stackBase__, $wordptr$s2 = $wordptr >> 2;
	  var $lineptr = __stackBase__ + 4, $lineptr$s2 = $lineptr >> 2;
	  var $lineno = __stackBase__ + 8, $lineno$s2 = $lineno >> 2;
	  var $i = __stackBase__ + 12, $i$s2 = $i >> 2;
	  var $j = __stackBase__ + 16, $j$s2 = $j >> 2;
	  var $n_state = __stackBase__ + 20;
	  var $wid = __stackBase__ + 24;
	  HEAP32[$lineno$s2] = 0;
	  var $1 = _hash_table_new(32, 0);
	  HEAP32[$wordptr$s2] = 0;
	  HEAP32[$lineptr$s2] = 0;
	  while (1) {
	    var $3 = _nextline_str2words($fp, $lineno, $lineptr, $wordptr);
	    if (($3 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str1640 | 0, 544, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str121652 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str131653 | 0, tempInt));
	      var $nulls_1 = 0;
	      var $fsg_0 = 0;
	      var $fsgname_1 = 0;
	      __label__ = 58;
	      break;
	    }
	    var $7 = HEAP32[$wordptr$s2];
	    var $8 = HEAP32[$7 >> 2];
	    var $9 = _strcmp($8, STRING_TABLE.__str131653 | 0);
	    if (($9 | 0) == 0) {
	      __label__ = 6;
	      break;
	    }
	  }
	  $_$41 : do {
	    if (__label__ == 6) {
	      if (($3 | 0) > 2) {
	        __E__pr_header(STRING_TABLE.__str1640 | 0, 550, STRING_TABLE.__str102579 | 0);
	        var $14 = HEAP32[$lineno$s2];
	        __E__pr_warn(STRING_TABLE.__str141654 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $14, tempInt));
	        var $nulls_1 = 0;
	        var $fsg_0 = 0;
	        var $fsgname_1 = 0;
	        __label__ = 58;
	        break;
	      }
	      if (($3 | 0) == 2) {
	        var $19 = HEAP32[$7 + 4 >> 2];
	        var $20 = ___ckd_salloc__($19, STRING_TABLE.__str1640 | 0, 561);
	        var $fsgname_0 = $20;
	      } else {
	        __E__pr_header(STRING_TABLE.__str1640 | 0, 563, STRING_TABLE.__str212436 | 0);
	        __E__pr_warn(STRING_TABLE.__str161656 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $22 = ___ckd_salloc__(STRING_TABLE.__str171657 | 0, STRING_TABLE.__str1640 | 0, 564);
	        var $fsgname_0 = $22;
	      }
	      var $fsgname_0;
	      var $24 = _nextline_str2words($fp, $lineno, $lineptr, $wordptr);
	      var $25 = ($24 | 0) == 2;
	      do {
	        if ($25) {
	          var $27 = HEAP32[$wordptr$s2];
	          var $28 = HEAP32[$27 >> 2];
	          var $29 = _strcmp($28, STRING_TABLE.__str181658 | 0);
	          if (($29 | 0) != 0) {
	            var $32 = _strcmp($28, STRING_TABLE.__str191659 | 0);
	            if (($32 | 0) != 0) {
	              break;
	            }
	          }
	          var $36 = HEAP32[$27 + 4 >> 2];
	          var $37 = _sscanf($36, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $n_state, tempInt));
	          var $39 = HEAP32[$n_state >> 2];
	          if (($37 | 0) != 1 | ($39 | 0) < 1) {
	            break;
	          }
	          var $44 = _fsg_model_init($fsgname_0, $lmath, $lw, $39);
	          _ckd_free($fsgname_0);
	          var $45 = _nextline_str2words($fp, $lineno, $lineptr, $wordptr);
	          var $46 = ($45 | 0) == 2;
	          do {
	            if ($46) {
	              var $48 = HEAP32[$wordptr$s2];
	              var $49 = HEAP32[$48 >> 2];
	              var $50 = _strcmp($49, STRING_TABLE.__str221662 | 0);
	              if (($50 | 0) != 0) {
	                var $53 = _strcmp($49, STRING_TABLE.__str231663 | 0);
	                if (($53 | 0) != 0) {
	                  break;
	                }
	              }
	              var $57 = HEAP32[$48 + 4 >> 2];
	              var $58 = $44 + 36 | 0;
	              var $59 = _sscanf($57, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $58, tempInt));
	              if (($59 | 0) != 1) {
	                break;
	              }
	              var $62 = HEAP32[$58 >> 2];
	              if (($62 | 0) < 0) {
	                break;
	              }
	              var $65$s2 = ($44 + 32 | 0) >> 2;
	              if (($62 | 0) >= (HEAP32[$65$s2] | 0)) {
	                break;
	              }
	              var $71 = _nextline_str2words($fp, $lineno, $lineptr, $wordptr);
	              var $72 = ($71 | 0) == 2;
	              do {
	                if ($72) {
	                  var $74 = HEAP32[$wordptr$s2];
	                  var $75 = HEAP32[$74 >> 2];
	                  var $76 = _strcmp($75, STRING_TABLE.__str251665 | 0);
	                  if (($76 | 0) != 0) {
	                    var $79 = _strcmp($75, STRING_TABLE.__str261666 | 0);
	                    if (($79 | 0) != 0) {
	                      break;
	                    }
	                  }
	                  var $83 = HEAP32[$74 + 4 >> 2];
	                  var $84 = $44 + 40 | 0;
	                  var $85 = _sscanf($83, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $84, tempInt));
	                  if (($85 | 0) != 1) {
	                    break;
	                  }
	                  var $88 = HEAP32[$84 >> 2];
	                  if (($88 | 0) < 0) {
	                    break;
	                  }
	                  if (($88 | 0) >= (HEAP32[$65$s2] | 0)) {
	                    break;
	                  }
	                  var $93 = $44 + 44 | 0;
	                  var $_idx = $44 + 48 | 0;
	                  var $nulls_0_ph = 0;
	                  var $n_null_trans_0_ph = 0;
	                  var $n_trans_0_ph = 0;
	                  var $lastwid_0_ph = 0;
	                  $_$72 : while (1) {
	                    var $lastwid_0_ph;
	                    var $n_trans_0_ph;
	                    var $n_null_trans_0_ph;
	                    var $nulls_0_ph;
	                    var $nulls_0_ph9 = $nulls_0_ph;
	                    var $n_null_trans_0_ph8 = $n_null_trans_0_ph;
	                    $_$74 : while (1) {
	                      var $n_null_trans_0_ph8;
	                      var $nulls_0_ph9;
	                      $_$76 : while (1) {
	                        var $97 = _nextline_str2words($fp, $lineno, $lineptr, $wordptr);
	                        if (($97 | 0) < 1) {
	                          __E__pr_header(STRING_TABLE.__str1640 | 0, 621, STRING_TABLE.__str102579 | 0);
	                          var $100 = HEAP32[$lineno$s2];
	                          __E__pr_warn(STRING_TABLE.__str281668 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $100, tempInt));
	                          var $nulls_1 = $nulls_0_ph9;
	                          var $fsg_0 = $44;
	                          var $fsgname_1 = 0;
	                          __label__ = 58;
	                          break $_$41;
	                        }
	                        var $102 = HEAPU32[$wordptr$s2], $102$s2 = $102 >> 2;
	                        var $103 = HEAP32[$102$s2];
	                        var $104 = _strcmp($103, STRING_TABLE.__str291669 | 0);
	                        if (($104 | 0) == 0) {
	                          break $_$72;
	                        }
	                        var $107 = _strcmp($103, STRING_TABLE.__str301670 | 0);
	                        var $108 = ($107 | 0) == 0;
	                        do {
	                          if (!$108) {
	                            var $110 = _strcmp($103, STRING_TABLE.__str311671 | 0);
	                            if (($110 | 0) == 0) {
	                              break;
	                            }
	                            __E__pr_header(STRING_TABLE.__str1640 | 0, 654, STRING_TABLE.__str102579 | 0);
	                            var $146 = HEAP32[$lineno$s2];
	                            __E__pr_warn(STRING_TABLE.__str281668 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $146, tempInt));
	                            var $nulls_1 = $nulls_0_ph9;
	                            var $fsg_0 = $44;
	                            var $fsgname_1 = 0;
	                            __label__ = 58;
	                            break $_$41;
	                          }
	                        } while (0);
	                        var $113 = ($97 - 4 | 0) >>> 0 > 1;
	                        do {
	                          if (!$113) {
	                            var $116 = HEAP32[$102$s2 + 1];
	                            var $117 = _sscanf($116, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $i, tempInt));
	                            if (($117 | 0) != 1) {
	                              break;
	                            }
	                            var $121 = HEAP32[$102$s2 + 2];
	                            var $122 = _sscanf($121, STRING_TABLE.__str201660 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $j, tempInt));
	                            if (($122 | 0) != 1) {
	                              break;
	                            }
	                            var $125 = HEAP32[$i$s2];
	                            if (($125 | 0) < 0) {
	                              break;
	                            }
	                            var $128 = HEAP32[$65$s2];
	                            if (($125 | 0) >= ($128 | 0)) {
	                              break;
	                            }
	                            var $131 = HEAP32[$j$s2];
	                            if (!(($131 | 0) > -1 & ($131 | 0) < ($128 | 0))) {
	                              break;
	                            }
	                            var $138 = HEAP32[$102$s2 + 3];
	                            var $139 = _atof_c($138);
	                            var $140 = $139;
	                            if ($140 <= 0 | $140 > 1) {
	                              __E__pr_header(STRING_TABLE.__str1640 | 0, 647, STRING_TABLE.__str102579 | 0);
	                              var $144 = HEAP32[$lineno$s2];
	                              __E__pr_warn(STRING_TABLE.__str331673 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $144, tempInt));
	                              var $nulls_1 = $nulls_0_ph9;
	                              var $fsg_0 = $44;
	                              var $fsgname_1 = 0;
	                              __label__ = 58;
	                              break $_$41;
	                            }
	                            var $148 = $140;
	                            var $149 = _logmath_log($lmath, $148);
	                            var $153 = $149 * HEAPF32[$93 >> 2] & -1;
	                            if (($97 | 0) > 4) {
	                              var $156 = $102 + 16 | 0;
	                              var $157 = HEAP32[$156 >> 2];
	                              var $158 = _hash_table_lookup_int32($1, $157, $wid);
	                              if (($158 | 0) < 0) {
	                                var $161 = HEAP32[$156 >> 2];
	                                var $162 = ___ckd_salloc__($161, STRING_TABLE.__str1640 | 0, 663);
	                                var $164 = _hash_table_enter($1, $162, $lastwid_0_ph);
	                                HEAP32[$wid >> 2] = $lastwid_0_ph;
	                                var $lastwid_1 = $lastwid_0_ph + 1 | 0;
	                                var $167 = $lastwid_0_ph;
	                              } else {
	                                var $lastwid_1 = $lastwid_0_ph;
	                                var $167 = HEAP32[$wid >> 2];
	                              }
	                              var $167;
	                              var $lastwid_1;
	                              var $168 = HEAP32[$i$s2];
	                              var $169 = HEAP32[$j$s2];
	                              _fsg_model_trans_add($44, $168, $169, $153, $167);
	                              var $nulls_0_ph = $nulls_0_ph9;
	                              var $n_null_trans_0_ph = $n_null_trans_0_ph8;
	                              var $n_trans_0_ph = $n_trans_0_ph + 1 | 0;
	                              var $lastwid_0_ph = $lastwid_1;
	                              continue $_$72;
	                            }
	                            var $172 = HEAP32[$i$s2];
	                            var $173 = HEAP32[$j$s2];
	                            var $174 = _fsg_model_null_trans_add($44, $172, $173, $153);
	                            if (($174 | 0) != 1) {
	                              continue $_$76;
	                            }
	                            var $177 = $n_null_trans_0_ph8 + 1 | 0;
	                            var $178 = HEAP32[$i$s2];
	                            var $179 = HEAP32[$j$s2];
	                            var $_idx_val = HEAP32[$_idx >> 2];
	                            var $180 = _fsg_model_null_trans($_idx_val, $178, $179);
	                            var $181 = $180;
	                            var $182 = _glist_add_ptr($nulls_0_ph9, $181);
	                            var $nulls_0_ph9 = $182;
	                            var $n_null_trans_0_ph8 = $177;
	                            continue $_$74;
	                          }
	                        } while (0);
	                        __E__pr_header(STRING_TABLE.__str1640 | 0, 639, STRING_TABLE.__str102579 | 0);
	                        var $135 = HEAP32[$lineno$s2];
	                        __E__pr_warn(STRING_TABLE.__str321672 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $135, tempInt));
	                        var $nulls_1 = $nulls_0_ph9;
	                        var $fsg_0 = $44;
	                        var $fsgname_1 = 0;
	                        __label__ = 58;
	                        break $_$41;
	                      }
	                    }
	                  }
	                  __E__pr_info_header(STRING_TABLE.__str1640 | 0, 678);
	                  var $184 = HEAP32[$65$s2];
	                  var $185 = $1 + 8 | 0;
	                  var $186 = HEAP32[$185 >> 2];
	                  __E__pr_info(STRING_TABLE.__str341674 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $184, HEAP32[tempInt + 4 >> 2] = $186, HEAP32[tempInt + 8 >> 2] = $n_trans_0_ph, HEAP32[tempInt + 12 >> 2] = $n_null_trans_0_ph8, tempInt));
	                  var $187 = _fsg_model_null_trans_closure($44, $nulls_0_ph9);
	                  _glist_free($187);
	                  var $188 = HEAP32[$185 >> 2];
	                  var $189 = $44 + 8 | 0;
	                  HEAP32[$189 >> 2] = $188;
	                  var $190 = $188 + 10 | 0;
	                  var $191 = $44 + 12 | 0;
	                  HEAP32[$191 >> 2] = $190;
	                  var $192 = ___ckd_calloc__($190, 4, STRING_TABLE.__str1640 | 0, 688);
	                  var $193 = $192;
	                  var $194 = $44 + 16 | 0;
	                  HEAP32[$194 >> 2] = $193;
	                  var $195 = _hash_table_iter($1);
	                  var $196 = ($195 | 0) == 0;
	                  $_$106 : do {
	                    if (!$196) {
	                      var $itor_06 = $195;
	                      while (1) {
	                        var $itor_06;
	                        var $198 = HEAP32[$itor_06 + 4 >> 2];
	                        var $200 = HEAP32[$198 >> 2];
	                        var $205 = (HEAP32[$198 + 8 >> 2] << 2) + HEAP32[$194 >> 2] | 0;
	                        HEAP32[$205 >> 2] = $200;
	                        var $206 = _hash_table_iter_next($itor_06);
	                        if (($206 | 0) == 0) {
	                          break $_$106;
	                        }
	                        var $itor_06 = $206;
	                      }
	                    }
	                  } while (0);
	                  _hash_table_free($1);
	                  var $208 = HEAP32[$lineptr$s2];
	                  _ckd_free($208);
	                  var $209 = $102;
	                  _ckd_free($209);
	                  var $_0 = $44;
	                  __label__ = 61;
	                  break $_$41;
	                }
	              } while (0);
	              __E__pr_header(STRING_TABLE.__str1640 | 0, 607, STRING_TABLE.__str102579 | 0);
	              var $95 = HEAP32[$lineno$s2];
	              __E__pr_warn(STRING_TABLE.__str271667 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $95, tempInt));
	              var $nulls_1 = 0;
	              var $fsg_0 = $44;
	              var $fsgname_1 = 0;
	              __label__ = 58;
	              break $_$41;
	            }
	          } while (0);
	          __E__pr_header(STRING_TABLE.__str1640 | 0, 593, STRING_TABLE.__str102579 | 0);
	          var $69 = HEAP32[$lineno$s2];
	          __E__pr_warn(STRING_TABLE.__str241664 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $69, tempInt));
	          var $nulls_1 = 0;
	          var $fsg_0 = $44;
	          var $fsgname_1 = 0;
	          __label__ = 58;
	          break $_$41;
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str1640 | 0, 574, STRING_TABLE.__str102579 | 0);
	      var $42 = HEAP32[$lineno$s2];
	      __E__pr_warn(STRING_TABLE.__str211661 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $42, tempInt));
	      var $nulls_1 = 0;
	      var $fsg_0 = 0;
	      var $fsgname_1 = $fsgname_0;
	      __label__ = 58;
	      break;
	    }
	  } while (0);
	  if (__label__ == 58) {
	    var $fsgname_1;
	    var $fsg_0;
	    var $nulls_1;
	    var $211 = _hash_table_iter($1);
	    var $212 = ($211 | 0) == 0;
	    $_$115 : do {
	      if (!$212) {
	        var $itor_111 = $211;
	        while (1) {
	          var $itor_111;
	          var $216 = HEAP32[HEAP32[$itor_111 + 4 >> 2] >> 2];
	          _ckd_free($216);
	          var $217 = _hash_table_iter_next($itor_111);
	          if (($217 | 0) == 0) {
	            break $_$115;
	          }
	          var $itor_111 = $217;
	        }
	      }
	    } while (0);
	    _glist_free($nulls_1);
	    _hash_table_free($1);
	    _ckd_free($fsgname_1);
	    var $219 = HEAP32[$lineptr$s2];
	    _ckd_free($219);
	    var $221 = HEAP32[$wordptr$s2];
	    _ckd_free($221);
	    _fsg_model_free($fsg_0);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fsg_model_read["X"] = 1;

	function _nextline_str2words($fp, $lineno, $lineptr, $wordptr) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $len = __stackBase__;
	  while (1) {
	    var $1 = HEAP32[$lineptr >> 2];
	    _ckd_free($1);
	    var $2 = _fread_line($fp, $len);
	    HEAP32[$lineptr >> 2] = $2;
	    if (($2 | 0) == 0) {
	      var $_0 = -1;
	      break;
	    }
	    var $6 = HEAP32[$lineno >> 2] + 1 | 0;
	    HEAP32[$lineno >> 2] = $6;
	    var $7 = HEAP32[$lineptr >> 2];
	    if (HEAP8[$7] << 24 >> 24 == 35) {
	      continue;
	    }
	    var $11 = _str2words($7, 0, 0);
	    if (($11 | 0) == 0) {
	      continue;
	    }
	    var $14 = HEAP32[$wordptr >> 2];
	    if (($14 | 0) == 0) {
	      var $17 = ___ckd_calloc__($11, 4, STRING_TABLE.__str1640 | 0, 112);
	      var $storemerge_in = $17;
	    } else {
	      var $19 = $14;
	      var $20 = $11 << 2;
	      var $21 = ___ckd_realloc__($19, $20, STRING_TABLE.__str1640 | 0, 114);
	      var $storemerge_in = $21;
	    }
	    var $storemerge_in;
	    var $storemerge = $storemerge_in;
	    HEAP32[$wordptr >> 2] = $storemerge;
	    var $23 = HEAP32[$lineptr >> 2];
	    var $24 = _str2words($23, $storemerge, $11);
	    var $_0 = $24;
	    break;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _fsg_model_free($fsg) {
	  var $fsg$s2 = $fsg >> 2;
	  var $1 = ($fsg | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $fsg | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $7 = $fsg + 8 | 0;
	      var $9 = (HEAP32[$7 >> 2] | 0) > 0;
	      $_$135 : do {
	        if ($9) {
	          var $10 = $fsg + 16 | 0;
	          var $i_03 = 0;
	          while (1) {
	            var $i_03;
	            var $17 = HEAP32[HEAP32[$10 >> 2] + ($i_03 << 2) >> 2];
	            _ckd_free($17);
	            var $18 = $i_03 + 1 | 0;
	            if (($18 | 0) >= (HEAP32[$7 >> 2] | 0)) {
	              break $_$135;
	            }
	            var $i_03 = $18;
	          }
	        }
	      } while (0);
	      var $11 = $fsg + 32 | 0;
	      var $13 = (HEAP32[$11 >> 2] | 0) > 0;
	      $_$140 : do {
	        if ($13) {
	          var $i_11 = 0;
	          while (1) {
	            var $i_11;
	            _trans_list_free($fsg, $i_11);
	            var $21 = $i_11 + 1 | 0;
	            if (($21 | 0) >= (HEAP32[$11 >> 2] | 0)) {
	              break $_$140;
	            }
	            var $i_11 = $21;
	          }
	        }
	      } while (0);
	      var $26 = HEAP32[$fsg$s2 + 12];
	      _ckd_free($26);
	      var $29 = HEAP32[$fsg$s2 + 4];
	      _ckd_free($29);
	      var $31 = HEAP32[$fsg$s2 + 13];
	      _listelem_alloc_free($31);
	      var $34 = HEAP32[$fsg$s2 + 5];
	      _ckd_free($34);
	      var $37 = HEAP32[$fsg$s2 + 6];
	      _ckd_free($37);
	      var $39 = HEAP32[$fsg$s2 + 1];
	      _ckd_free($39);
	      var $40 = $fsg;
	      _ckd_free($40);
	    }
	  } while (0);
	  return;
	  return;
	}

	_fsg_model_free["X"] = 1;

	function _fsg_model_readfile($file, $lmath, $lw) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _fopen($file, STRING_TABLE.__str2415 | 0);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str1640 | 0, 720, STRING_TABLE.__str102579 | 0);
	    var $4 = ___errno();
	    var $5 = HEAP32[$4 >> 2];
	    var $6 = _strerror($5);
	    __E__pr_warn(STRING_TABLE.__str361676 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $file, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
	    var $_0 = 0;
	  } else {
	    var $8 = _fsg_model_read($1, $lmath, $lw);
	    var $9 = _fclose($1);
	    var $_0 = $8;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _trans_list_free($fsg, $i) {
	  var $1$s2;
	  var $1$s2 = ($fsg + 48 | 0) >> 2;
	  var $4 = HEAP32[HEAP32[$1$s2] + ($i << 3) + 4 >> 2];
	  if (($4 | 0) == 0) {
	    var $17 = 0;
	  } else {
	    var $7 = _hash_table_iter($4);
	    var $8 = ($7 | 0) == 0;
	    $_$153 : do {
	      if (!$8) {
	        var $itor_01 = $7;
	        while (1) {
	          var $itor_01;
	          var $13 = HEAP32[HEAP32[$itor_01 + 4 >> 2] + 8 >> 2];
	          _glist_free($13);
	          var $14 = _hash_table_iter_next($itor_01);
	          if (($14 | 0) == 0) {
	            break $_$153;
	          }
	          var $itor_01 = $14;
	        }
	      }
	    } while (0);
	    var $17 = HEAP32[HEAP32[$1$s2] + ($i << 3) + 4 >> 2];
	  }
	  var $17;
	  _hash_table_free($17);
	  var $20 = HEAP32[HEAP32[$1$s2] + ($i << 3) >> 2];
	  _hash_table_free($20);
	  return;
	  return;
	}

	function _jsgf_atom_new($name) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str1712 | 0, 64);
	  var $2 = $1;
	  var $3 = ___ckd_salloc__($name, STRING_TABLE.__str1712 | 0, 65);
	  HEAP32[$1 >> 2] = $3;
	  HEAPF32[$1 + 8 >> 2] = 1;
	  return $2;
	  return null;
	}

	function _jsgf_atom_free($atom) {
	  if (($atom | 0) != 0) {
	    var $4 = HEAP32[$atom >> 2];
	    _ckd_free($4);
	    var $5 = $atom;
	    _ckd_free($5);
	  }
	  return;
	  return;
	}

	function _jsgf_grammar_new($parent) {
	  var $_phi_trans_insert3$s2;
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 44, STRING_TABLE.__str1712 | 0, 85), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  if (($parent | 0) == 0) {
	    var $20 = _hash_table_new(64, 0);
	    HEAP32[$1$s2 + 4] = $20;
	    var $23 = _hash_table_new(16, 0);
	    HEAP32[$1$s2 + 5] = $23;
	    var $26 = _getenv(STRING_TABLE.__str11713 | 0);
	    if (($26 | 0) == 0) {
	      var $43 = $1 + 28 | 0;
	      var $44 = HEAP32[$43 >> 2];
	      var $45 = ___ckd_salloc__(STRING_TABLE.__str371877 | 0, STRING_TABLE.__str1712 | 0, 118);
	      var $46 = _glist_add_ptr($44, $45);
	      HEAP32[$43 >> 2] = $46;
	    } else {
	      var $29 = ___ckd_salloc__($26, STRING_TABLE.__str1712 | 0, 107);
	      var $30 = _strchr($29, 58);
	      var $31 = ($30 | 0) == 0;
	      var $_phi_trans_insert3$s2 = ($1 + 28 | 0) >> 2;
	      $_$169 : do {
	        if ($31) {
	          var $word_0_lcssa = $29;
	          var $38 = HEAP32[$_phi_trans_insert3$s2];
	        } else {
	          var $word_01 = $29;
	          var $32 = $30;
	          while (1) {
	            var $32;
	            var $word_01;
	            HEAP8[$32] = 0;
	            var $33 = HEAP32[$_phi_trans_insert3$s2];
	            var $34 = _glist_add_ptr($33, $word_01);
	            HEAP32[$_phi_trans_insert3$s2] = $34;
	            var $35 = $32 + 1 | 0;
	            var $36 = _strchr($35, 58);
	            if (($36 | 0) == 0) {
	              var $word_0_lcssa = $35;
	              var $38 = $34;
	              break $_$169;
	            }
	            var $word_01 = $35;
	            var $32 = $36;
	          }
	        }
	      } while (0);
	      var $38;
	      var $word_0_lcssa;
	      var $39 = _glist_add_ptr($38, $word_0_lcssa);
	      HEAP32[$_phi_trans_insert3$s2] = $39;
	      var $40 = _glist_reverse($39);
	      HEAP32[$_phi_trans_insert3$s2] = $40;
	    }
	  } else {
	    var $6 = HEAP32[$parent + 16 >> 2];
	    HEAP32[$1$s2 + 4] = $6;
	    var $10 = HEAP32[$parent + 20 >> 2];
	    HEAP32[$1$s2 + 5] = $10;
	    var $14 = HEAP32[$parent + 28 >> 2];
	    HEAP32[$1$s2 + 7] = $14;
	    HEAP32[$1$s2 + 6] = $parent;
	  }
	  return $2;
	  return null;
	}

	_jsgf_grammar_new["X"] = 1;

	function _jsgf_rule_public($rule_0_2_val) {
	  return $rule_0_2_val;
	  return null;
	}

	function _jsgf_rule_retain($rule) {
	  var $1 = $rule | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return $rule;
	  return null;
	}

	function _jsgf_grammar_free($jsgf) {
	  var $jsgf$s2 = $jsgf >> 2;
	  if ((HEAP32[$jsgf$s2 + 6] | 0) == 0) {
	    var $5 = $jsgf + 16 | 0;
	    var $6 = HEAP32[$5 >> 2];
	    var $7 = _hash_table_iter($6);
	    var $8 = ($7 | 0) == 0;
	    $_$4 : do {
	      if (!$8) {
	        var $itor_012 = $7;
	        while (1) {
	          var $itor_012;
	          var $9 = $itor_012 + 4 | 0;
	          var $12 = HEAP32[HEAP32[$9 >> 2] >> 2];
	          _ckd_free($12);
	          var $16 = HEAP32[HEAP32[$9 >> 2] + 8 >> 2];
	          _jsgf_rule_free($16);
	          var $17 = _hash_table_iter_next($itor_012);
	          if (($17 | 0) == 0) {
	            break $_$4;
	          }
	          var $itor_012 = $17;
	        }
	      }
	    } while (0);
	    var $19 = HEAP32[$5 >> 2];
	    _hash_table_free($19);
	    var $20 = $jsgf + 20 | 0;
	    var $21 = HEAP32[$20 >> 2];
	    var $22 = _hash_table_iter($21);
	    var $23 = ($22 | 0) == 0;
	    $_$8 : do {
	      if (!$23) {
	        var $itor_18 = $22;
	        while (1) {
	          var $itor_18;
	          var $24 = $itor_18 + 4 | 0;
	          var $27 = HEAP32[HEAP32[$24 >> 2] >> 2];
	          _ckd_free($27);
	          var $31 = HEAP32[HEAP32[$24 >> 2] + 8 >> 2];
	          _jsgf_grammar_free($31);
	          var $32 = _hash_table_iter_next($itor_18);
	          if (($32 | 0) == 0) {
	            break $_$8;
	          }
	          var $itor_18 = $32;
	        }
	      }
	    } while (0);
	    var $34 = HEAP32[$20 >> 2];
	    _hash_table_free($34);
	    var $35 = $jsgf + 28 | 0;
	    var $gn_03 = HEAP32[$35 >> 2];
	    if (($gn_03 | 0) == 0) {
	      var $42 = 0;
	    } else {
	      var $gn_04 = $gn_03;
	      while (1) {
	        var $gn_04;
	        var $38 = HEAP32[$gn_04 >> 2];
	        _ckd_free($38);
	        var $gn_0 = HEAP32[$gn_04 + 8 >> 2];
	        if (($gn_0 | 0) == 0) {
	          break;
	        }
	        var $gn_04 = $gn_0;
	      }
	      var $42 = HEAP32[$35 >> 2];
	    }
	    var $42;
	    _glist_free($42);
	    var $43 = $jsgf + 36 | 0;
	    var $gn_11 = HEAP32[$43 >> 2];
	    if (($gn_11 | 0) == 0) {
	      var $50 = 0;
	    } else {
	      var $gn_12 = $gn_11;
	      while (1) {
	        var $gn_12;
	        var $46 = HEAP32[$gn_12 >> 2];
	        _ckd_free($46);
	        var $gn_1 = HEAP32[$gn_12 + 8 >> 2];
	        if (($gn_1 | 0) == 0) {
	          break;
	        }
	        var $gn_12 = $gn_1;
	      }
	      var $50 = HEAP32[$43 >> 2];
	    }
	    var $50;
	    _glist_free($50);
	  }
	  var $53 = HEAP32[$jsgf$s2 + 3];
	  _ckd_free($53);
	  var $55 = HEAP32[$jsgf$s2];
	  _ckd_free($55);
	  var $57 = HEAP32[$jsgf$s2 + 1];
	  _ckd_free($57);
	  var $59 = HEAP32[$jsgf$s2 + 2];
	  _ckd_free($59);
	  var $60 = $jsgf;
	  _ckd_free($60);
	  return;
	  return;
	}

	_jsgf_grammar_free["X"] = 1;

	function _jsgf_rule_free($rule) {
	  var $1 = ($rule | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $rule | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$rule + 12 >> 2];
	      _jsgf_rhs_free($9);
	      var $11 = HEAP32[$rule + 4 >> 2];
	      _ckd_free($11);
	      var $12 = $rule;
	      _ckd_free($12);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _jsgf_kleene_new($jsgf, $atom, $plus) {
	  var $1 = ___ckd_calloc__(1, 8, STRING_TABLE.__str1712 | 0, 184);
	  var $2 = $1;
	  if (($plus | 0) == 0) {
	    var $12 = _jsgf_atom_new(STRING_TABLE.__str31715 | 0);
	    var $13 = $12;
	    var $14 = _glist_add_ptr(0, $13);
	    HEAP32[$1 >> 2] = $14;
	  } else {
	    var $6 = HEAP32[$atom >> 2];
	    var $7 = _jsgf_atom_new($6);
	    var $8 = $7;
	    var $9 = _glist_add_ptr(0, $8);
	    HEAP32[$1 >> 2] = $9;
	  }
	  var $17 = _jsgf_define_rule($jsgf, 0, $2, 0);
	  var $18 = $17 + 4 | 0;
	  var $19 = HEAP32[$18 >> 2];
	  var $20 = _jsgf_atom_new($19);
	  var $21 = ___ckd_calloc__(1, 8, STRING_TABLE.__str1712 | 0, 191);
	  var $22 = $21;
	  var $23 = $20;
	  var $24 = _glist_add_ptr(0, $23);
	  var $25 = $21;
	  HEAP32[$25 >> 2] = $24;
	  var $26 = $atom;
	  var $27 = _glist_add_ptr($24, $26);
	  HEAP32[$25 >> 2] = $27;
	  var $30 = HEAP32[$17 + 12 >> 2] + 4 | 0;
	  HEAP32[$30 >> 2] = $22;
	  var $31 = HEAP32[$18 >> 2];
	  var $32 = _jsgf_atom_new($31);
	  return $32;
	  return null;
	}

	function _jsgf_define_rule($jsgf, $name, $rhs, $public) {
	  var __stackBase__ = STACKTOP;
	  if (($name | 0) == 0) {
	    var $3 = $jsgf + 12 | 0;
	    var $4 = HEAP32[$3 >> 2];
	    var $5 = _strlen($4);
	    var $6 = $5 + 16 | 0;
	    var $7 = ___ckd_malloc__($6, STRING_TABLE.__str1712 | 0, 530);
	    var $8 = HEAP32[$3 >> 2];
	    var $9 = $jsgf + 16 | 0;
	    var $12 = HEAP32[HEAP32[$9 >> 2] + 8 >> 2];
	    var $13 = _sprintf($7, STRING_TABLE.__str41716 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $12, tempInt));
	    var $_0 = $7;
	    var $_pre_phi = $9;
	  } else {
	    var $15 = _jsgf_fullname($jsgf, $name);
	    var $_0 = $15;
	    var $_pre_phi = $jsgf + 16 | 0;
	  }
	  var $_pre_phi;
	  var $_0;
	  var $17 = ___ckd_calloc__(1, 24, STRING_TABLE.__str1712 | 0, 540);
	  var $18 = $17;
	  HEAP32[$17 >> 2] = 1;
	  var $20 = ___ckd_salloc__($_0, STRING_TABLE.__str1712 | 0, 542);
	  var $22 = $17 + 4 | 0;
	  HEAP32[$22 >> 2] = $20;
	  HEAP32[$17 + 12 >> 2] = $rhs;
	  var $26 = $17 + 8 | 0;
	  HEAP32[$26 >> 2] = $public;
	  __E__pr_info_header(STRING_TABLE.__str1712 | 0, 546);
	  var $29 = (HEAP32[$26 >> 2] | 0) != 0 ? STRING_TABLE.__str71719 | 0 : __str302067 | 0;
	  var $30 = HEAP32[$22 >> 2];
	  __E__pr_info(STRING_TABLE.__str61718 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $29, HEAP32[tempInt + 4 >> 2] = $30, tempInt));
	  var $31 = HEAP32[$_pre_phi >> 2];
	  var $32 = _hash_table_enter($31, $_0, $17);
	  if (($32 | 0) != ($17 | 0)) {
	    __E__pr_header(STRING_TABLE.__str1712 | 0, 551, STRING_TABLE.__str212436 | 0);
	    __E__pr_warn(STRING_TABLE.__str101722 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $_0, tempInt));
	  }
	  STACKTOP = __stackBase__;
	  return $18;
	  return null;
	}

	function _jsgf_optional_new($jsgf, $exp) {
	  var $1 = ___ckd_calloc__(1, 8, STRING_TABLE.__str1712 | 0, 202);
	  var $2 = $1;
	  var $3 = _jsgf_atom_new(STRING_TABLE.__str31715 | 0);
	  HEAP32[$1 + 4 >> 2] = $exp;
	  var $6 = $3;
	  var $7 = _glist_add_ptr(0, $6);
	  HEAP32[$1 >> 2] = $7;
	  var $9 = _jsgf_define_rule($jsgf, 0, $2, 0);
	  return $9;
	  return null;
	}

	function _jsgf_add_link($grammar, $atom, $from, $to) {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str1712 | 0, 214), $1$s2 = $1 >> 2;
	  HEAP32[$1$s2 + 1] = $from;
	  HEAP32[$1$s2 + 2] = $to;
	  HEAP32[$1$s2] = $atom;
	  var $7 = $grammar + 36 | 0;
	  var $8 = HEAP32[$7 >> 2];
	  var $9 = _glist_add_ptr($8, $1);
	  HEAP32[$7 >> 2] = $9;
	  return;
	  return;
	}

	function _jsgf_rule_iter($grammar_0_4_val) {
	  var $1 = _hash_table_iter($grammar_0_4_val);
	  return $1;
	  return null;
	}

	function _jsgf_get_rule($grammar_0_4_val, $name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $1 = _hash_table_lookup($grammar_0_4_val, $name, $val);
	  if (($1 | 0) < 0) {
	    var $_0 = 0;
	  } else {
	    var $_0 = HEAP32[$val >> 2];
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _jsgf_build_fsg($grammar, $rule, $lmath, $lw) {
	  var $1 = _jsgf_build_fsg_internal($grammar, $rule, $lmath, $lw);
	  return $1;
	  return null;
	}

	function _jsgf_build_fsg_internal($grammar, $rule, $lmath, $lw) {
	  var $25$s2;
	  var $1$s2;
	  var $1$s2 = ($grammar + 36 | 0) >> 2;
	  var $gn_02 = HEAP32[$1$s2];
	  if (($gn_02 | 0) == 0) {
	    var $8 = 0;
	  } else {
	    var $gn_03 = $gn_02;
	    while (1) {
	      var $gn_03;
	      var $4 = HEAP32[$gn_03 >> 2];
	      _ckd_free($4);
	      var $gn_0 = HEAP32[$gn_03 + 8 >> 2];
	      if (($gn_0 | 0) == 0) {
	        break;
	      }
	      var $gn_03 = $gn_0;
	    }
	    var $8 = HEAP32[$1$s2];
	  }
	  var $8;
	  _glist_free($8);
	  HEAP32[$1$s2] = 0;
	  var $9 = $rule + 20 | 0;
	  HEAP32[$9 >> 2] = 0;
	  var $10 = $rule + 16 | 0;
	  HEAP32[$10 >> 2] = 0;
	  var $11 = $grammar + 32 | 0;
	  HEAP32[$11 >> 2] = 0;
	  var $12 = _expand_rule($grammar, $rule);
	  var $14 = HEAP32[$rule + 4 >> 2];
	  var $15 = HEAP32[$11 >> 2];
	  var $16 = _fsg_model_init($14, $lmath, $lw, $15);
	  var $17 = HEAP32[$10 >> 2];
	  var $18 = $16 + 36 | 0;
	  HEAP32[$18 >> 2] = $17;
	  var $19 = HEAP32[$9 >> 2];
	  var $20 = $16 + 40 | 0;
	  HEAP32[$20 >> 2] = $19;
	  var $21 = HEAP32[$1$s2];
	  var $22 = _glist_reverse($21);
	  HEAP32[$1$s2] = $22;
	  var $23 = ($22 | 0) == 0;
	  $_$56 : do {
	    if (!$23) {
	      var $gn_11 = $22;
	      while (1) {
	        var $gn_11;
	        var $25 = HEAP32[$gn_11 >> 2], $25$s2 = $25 >> 2;
	        var $26 = $25;
	        var $27 = HEAP32[$26 >> 2];
	        if (($27 | 0) == 0) {
	          var $62 = HEAP32[$25$s2 + 1];
	          var $65 = HEAP32[$25$s2 + 2];
	          var $66 = _fsg_model_null_trans_add($16, $62, $65, 0);
	        } else {
	          var $31 = HEAP32[$27 >> 2];
	          if (HEAP8[$31] << 24 >> 24 == 60) {
	            var $37 = HEAP32[$25$s2 + 1];
	            var $40 = HEAP32[$25$s2 + 2];
	            var $43 = HEAPF32[$27 + 8 >> 2];
	            var $44 = _logmath_log($lmath, $43);
	            var $45 = _fsg_model_null_trans_add($16, $37, $40, $44);
	          } else {
	            var $47 = _fsg_model_word_add($16, $31);
	            var $50 = HEAP32[$25$s2 + 1];
	            var $53 = HEAP32[$25$s2 + 2];
	            var $57 = HEAPF32[HEAP32[$26 >> 2] + 8 >> 2];
	            var $58 = _logmath_log($lmath, $57);
	            _fsg_model_trans_add($16, $50, $53, $58, $47);
	          }
	        }
	        var $69 = HEAP32[$gn_11 + 8 >> 2];
	        if (($69 | 0) == 0) {
	          break $_$56;
	        }
	        var $gn_11 = $69;
	      }
	    }
	  } while (0);
	  var $71 = _fsg_model_null_trans_closure($16, 0);
	  _glist_free($71);
	  return $16;
	  return null;
	}

	_jsgf_build_fsg_internal["X"] = 1;

	function _jsgf_fullname($jsgf, $name) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $name + 1 | 0;
	  var $2 = _strchr($1, 46);
	  if (($2 | 0) == 0) {
	    var $7 = $jsgf + 12 | 0;
	    var $8 = HEAP32[$7 >> 2];
	    var $9 = _strlen($8);
	    var $10 = _strlen($name);
	    var $12 = $10 + ($9 + 4) | 0;
	    var $13 = ___ckd_malloc__($12, STRING_TABLE.__str1712 | 0, 244);
	    var $14 = HEAP32[$7 >> 2];
	    var $15 = _sprintf($13, STRING_TABLE.__str251737 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = $1, tempInt));
	    var $_0 = $13;
	  } else {
	    var $5 = ___ckd_salloc__($name, STRING_TABLE.__str1712 | 0, 241);
	    var $_0 = $5;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _jsgf_rhs_free($rhs) {
	  if (($rhs | 0) != 0) {
	    var $4 = HEAP32[$rhs + 4 >> 2];
	    _jsgf_rhs_free($4);
	    var $5 = $rhs | 0;
	    var $gn_01 = HEAP32[$5 >> 2];
	    if (($gn_01 | 0) == 0) {
	      var $13 = 0;
	    } else {
	      var $gn_02 = $gn_01;
	      while (1) {
	        var $gn_02;
	        var $9 = HEAP32[$gn_02 >> 2];
	        _jsgf_atom_free($9);
	        var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	        if (($gn_0 | 0) == 0) {
	          break;
	        }
	        var $gn_02 = $gn_0;
	      }
	      var $13 = HEAP32[$5 >> 2];
	    }
	    var $13;
	    _glist_free($13);
	    var $14 = $rhs;
	    _ckd_free($14);
	  }
	  return;
	  return;
	}

	function _jsgf_import_rule($jsgf, $name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $val = __stackBase__;
	  var $1 = _strlen($name);
	  var $2 = $1 + 4 | 0;
	  var $3 = ___ckd_malloc__($2, STRING_TABLE.__str1712 | 0, 610);
	  var $4 = $name + 1 | 0;
	  var $5 = _strcpy($3, $4);
	  var $6 = _strrchr($3, 46);
	  var $7 = ($6 | 0) == 0;
	  $_$83 : do {
	    if ($7) {
	      __E__pr_header(STRING_TABLE.__str1712 | 0, 615, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str121724 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
	      _ckd_free($3);
	    } else {
	      var $10 = $6;
	      var $11 = $3;
	      HEAP8[$6] = 0;
	      var $12 = _strlen($name);
	      if ($12 >>> 0 > 2) {
	        var $15 = $name + ($1 - 3) | 0;
	        var $16 = _strcmp($15, STRING_TABLE.__str131725 | 0);
	        var $19 = ($16 | 0) == 0;
	      } else {
	        var $19 = 0;
	      }
	      var $19;
	      var $c_0 = $3;
	      while (1) {
	        var $c_0;
	        var $21 = HEAP8[$c_0];
	        if ($21 << 24 >> 24 == 0) {
	          break;
	        } else if ($21 << 24 >> 24 == 46) {
	          HEAP8[$c_0] = 47;
	        }
	        var $c_0 = $c_0 + 1 | 0;
	      }
	      var $strlen = _strlen($3);
	      var $endptr = $3 + $strlen | 0;
	      HEAP8[$endptr] = HEAP8[STRING_TABLE.__str141726 | 0];
	      HEAP8[$endptr + 1] = HEAP8[(STRING_TABLE.__str141726 | 0) + 1];
	      HEAP8[$endptr + 2] = HEAP8[(STRING_TABLE.__str141726 | 0) + 2];
	      HEAP8[$endptr + 3] = HEAP8[(STRING_TABLE.__str141726 | 0) + 3];
	      HEAP8[$endptr + 4] = HEAP8[(STRING_TABLE.__str141726 | 0) + 4];
	      HEAP8[$endptr + 5] = HEAP8[(STRING_TABLE.__str141726 | 0) + 5];
	      var $27 = HEAP32[$jsgf + 28 >> 2];
	      var $28 = _path_list_search($27, $3);
	      _ckd_free($3);
	      if (($28 | 0) == 0) {
	        break;
	      }
	      __E__pr_info_header(STRING_TABLE.__str1712 | 0, 635);
	      var $32 = HEAP32[$jsgf + 12 >> 2];
	      __E__pr_info(STRING_TABLE.__str151727 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $name, HEAP32[tempInt + 4 >> 2] = $28, HEAP32[tempInt + 8 >> 2] = $32, tempInt));
	      var $33 = $jsgf + 20 | 0;
	      var $34 = HEAP32[$33 >> 2];
	      var $35 = _hash_table_lookup($34, $28, $val);
	      var $36 = ($35 | 0) == 0;
	      do {
	        if ($36) {
	          __E__pr_info_header(STRING_TABLE.__str1712 | 0, 641);
	          __E__pr_info(STRING_TABLE.__str161728 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $28, tempInt));
	          var $39 = HEAP32[$val >> 2];
	          _ckd_free($28);
	          var $imp_0 = $39;
	        } else {
	          var $41 = _jsgf_parse_file($28, $jsgf);
	          var $42 = HEAP32[$33 >> 2];
	          var $43 = $41;
	          var $44 = _hash_table_enter($42, $28, $43);
	          HEAP32[$val >> 2] = $44;
	          if (($44 | 0) == ($43 | 0)) {
	            var $imp_0 = $41;
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str1712 | 0, 650, STRING_TABLE.__str212436 | 0);
	          __E__pr_warn(STRING_TABLE.__str171729 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $28, tempInt));
	          var $imp_0 = $41;
	        }
	      } while (0);
	      var $imp_0;
	      if (($imp_0 | 0) == 0) {
	        break;
	      }
	      var $51 = HEAP32[$imp_0 + 16 >> 2];
	      var $52 = _hash_table_iter($51);
	      var $54 = 1 - $11 + $10 | 0;
	      var $55 = $jsgf + 16 | 0;
	      var $itor_0 = $52;
	      while (1) {
	        var $itor_0;
	        if (($itor_0 | 0) == 0) {
	          break $_$83;
	        }
	        var $62 = HEAPU32[HEAP32[$itor_0 + 4 >> 2] + 8 >> 2];
	        var $63 = $62;
	        var $64 = _importname2rulename($name);
	        var $66 = $62 + 4 | 0;
	        var $67 = HEAPU32[$66 >> 2];
	        if ($19) {
	          var $69 = _strncmp($64, $67, $54);
	          var $rule_matches_0 = ($69 | 0) == 0 & 1;
	        } else {
	          var $73 = _strcmp($64, $67);
	          var $rule_matches_0 = ($73 | 0) == 0 & 1;
	        }
	        var $rule_matches_0;
	        _ckd_free($64);
	        if (!((HEAP32[$62 + 8 >> 2] | 0) == 0 | ($rule_matches_0 | 0) == 0)) {
	          var $83 = HEAP32[$66 >> 2];
	          var $84 = _strrchr($83, 46);
	          if (($84 | 0) == 0) {
	            ___assert_func(STRING_TABLE.__str1712 | 0, 678, STRING_TABLE.___func___jsgf_import_rule | 0, STRING_TABLE.__str181730 | 0);
	          }
	          var $88 = _jsgf_fullname($jsgf, $84);
	          __E__pr_info_header(STRING_TABLE.__str1712 | 0, 681);
	          __E__pr_info(STRING_TABLE.__str191731 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $88, tempInt));
	          var $89 = HEAP32[$55 >> 2];
	          var $90 = _jsgf_rule_retain($63);
	          var $91 = $90;
	          var $92 = _hash_table_enter($89, $88, $91);
	          if (($92 | 0) == ($62 | 0)) {
	            __label__ = 26;
	          } else {
	            __E__pr_header(STRING_TABLE.__str1712 | 0, 685, STRING_TABLE.__str212436 | 0);
	            __E__pr_warn(STRING_TABLE.__str101722 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $88, tempInt));
	          }
	          if (!$19) {
	            break;
	          }
	        }
	        var $98 = _hash_table_iter_next($itor_0);
	        var $itor_0 = $98;
	      }
	      _hash_table_iter_free($itor_0);
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_jsgf_import_rule["X"] = 1;

	function _path_list_search($paths, $path) {
	  var __stackBase__ = STACKTOP;
	  var $gn_0 = $paths;
	  while (1) {
	    var $gn_0;
	    if (($gn_0 | 0) == 0) {
	      var $_0 = 0;
	      break;
	    }
	    var $5 = HEAP32[$gn_0 >> 2];
	    var $6 = _string_join($5, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str241736 | 0, HEAP32[tempInt + 4 >> 2] = $path, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	    var $7 = _fopen($6, STRING_TABLE.__str2415 | 0);
	    if (($7 | 0) != 0) {
	      var $10 = _fclose($7);
	      var $_0 = $6;
	      break;
	    }
	    _ckd_free($6);
	    var $gn_0 = HEAP32[$gn_0 + 8 >> 2];
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _jsgf_parse_file($filename, $parent) {
	  var $yyscanner$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $yyscanner = __stackBase__, $yyscanner$s2 = $yyscanner >> 2;
	  _yylex_init($yyscanner);
	  var $1 = ($filename | 0) == 0;
	  do {
	    if ($1) {
	      var $3 = HEAP32[_stdin >> 2];
	      var $4 = HEAP32[$yyscanner$s2];
	      _yyset_in($3, $4);
	      var $in_0 = 0;
	      __label__ = 7;
	      break;
	    }
	    var $6 = _fopen($filename, STRING_TABLE.__str2415 | 0);
	    if (($6 | 0) == 0) {
	      var $9 = HEAP32[_stderr >> 2];
	      var $10 = ___errno();
	      var $11 = HEAP32[$10 >> 2];
	      var $12 = _strerror($11);
	      var $13 = _fprintf($9, STRING_TABLE.__str211733 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $filename, HEAP32[tempInt + 4 >> 2] = $12, tempInt));
	      var $_0 = 0;
	      __label__ = 12;
	      break;
	    }
	    var $15 = HEAP32[$yyscanner$s2];
	    _yyset_in($6, $15);
	    var $in_0 = $6;
	    __label__ = 7;
	    break;
	  } while (0);
	  if (__label__ == 7) {
	    var $in_0;
	    var $17 = _jsgf_grammar_new($parent);
	    var $18 = HEAP32[$yyscanner$s2];
	    var $19 = _yyparse($18, $17);
	    if (($19 | 0) == 0) {
	      if (($in_0 | 0) != 0) {
	        var $30 = _fclose($in_0);
	      }
	      var $32 = HEAP32[$yyscanner$s2];
	      _yylex_destroy($32);
	      var $_0 = $17;
	    } else {
	      var $22 = HEAP32[_stderr >> 2];
	      var $24 = ($filename | 0) != 0 ? $filename : STRING_TABLE.__str231735 | 0;
	      var $25 = _fprintf($22, STRING_TABLE.__str221734 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $24, tempInt));
	      _jsgf_grammar_free($17);
	      var $26 = HEAP32[$yyscanner$s2];
	      _yylex_destroy($26);
	      var $_0 = 0;
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _importname2rulename($importname) {
	  var $1 = ___ckd_salloc__($importname, STRING_TABLE.__str1712 | 0, 273);
	  var $2 = $1 + 1 | 0;
	  var $3 = _strrchr($2, 46);
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = $1;
	    } else {
	      HEAP8[$3] = 0;
	      var $6 = _strrchr($2, 46);
	      var $7 = ($6 | 0) == 0;
	      HEAP8[$3] = 46;
	      if ($7) {
	        var $_0 = $1;
	        break;
	      }
	      HEAP8[$6] = 60;
	      var $9 = ___ckd_salloc__($6, STRING_TABLE.__str1712 | 0, 282);
	      _ckd_free($1);
	      var $_0 = $9;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _expand_rule($grammar, $rule) {
	  var $26$s2;
	  var $20$s2;
	  var $1$s2;
	  var $1$s2 = ($grammar + 40 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = $rule;
	  var $4 = _glist_add_ptr($2, $3);
	  HEAP32[$1$s2] = $4;
	  var $5 = $rule + 12 | 0;
	  var $rhs_01 = HEAP32[$5 >> 2];
	  var $6 = ($rhs_01 | 0) == 0;
	  $_$150 : do {
	    if ($6) {
	      var $norm_0_lcssa = 0;
	    } else {
	      var $norm_02 = 0;
	      var $rhs_03 = $rhs_01;
	      while (1) {
	        var $rhs_03;
	        var $norm_02;
	        var $8 = HEAP32[$rhs_03 >> 2];
	        if (($8 | 0) == 0) {
	          var $norm_1 = $norm_02;
	        } else {
	          var $norm_1 = $norm_02 + HEAPF32[HEAP32[$8 >> 2] + 8 >> 2];
	        }
	        var $norm_1;
	        var $rhs_0 = HEAP32[$rhs_03 + 4 >> 2];
	        if (($rhs_0 | 0) == 0) {
	          var $norm_0_lcssa = $norm_1;
	          break $_$150;
	        }
	        var $norm_02 = $norm_1;
	        var $rhs_03 = $rhs_0;
	      }
	    }
	  } while (0);
	  var $norm_0_lcssa;
	  var $20$s2 = ($grammar + 32 | 0) >> 2;
	  var $21 = HEAP32[$20$s2];
	  var $22 = $21 + 1 | 0;
	  HEAP32[$20$s2] = $22;
	  HEAP32[$rule + 16 >> 2] = $21;
	  var $24 = HEAP32[$20$s2];
	  var $25 = $24 + 1 | 0;
	  HEAP32[$20$s2] = $25;
	  var $26$s2 = ($rule + 20 | 0) >> 2;
	  HEAP32[$26$s2] = $24;
	  var $norm_2 = $norm_0_lcssa == 0 ? 1 : $norm_0_lcssa;
	  var $rhs_1_in = $5;
	  while (1) {
	    var $rhs_1_in;
	    var $rhs_1 = HEAP32[$rhs_1_in >> 2];
	    if (($rhs_1 | 0) == 0) {
	      var $48 = HEAP32[$1$s2];
	      var $49 = _gnode_free($48, 0);
	      HEAP32[$1$s2] = $49;
	      var $_0 = HEAP32[$26$s2];
	      break;
	    }
	    var $32 = HEAP32[$rhs_1 >> 2];
	    if (($32 | 0) != 0) {
	      var $38 = HEAP32[$32 >> 2] + 8 | 0;
	      var $40 = HEAPF32[$38 >> 2] / $norm_2;
	      HEAPF32[$38 >> 2] = $40;
	    }
	    var $42 = _expand_rhs($grammar, $rule, $rhs_1);
	    if (($42 | 0) == -1) {
	      var $_0 = -1;
	      break;
	    }
	    var $45 = HEAP32[$26$s2];
	    _jsgf_add_link($grammar, 0, $42, $45);
	    var $rhs_1_in = $rhs_1 + 4 | 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_expand_rule["X"] = 1;

	function _expand_rhs($grammar, $rule, $rhs) {
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $4$s2 = ($grammar + 32 | 0) >> 2;
	  var $5 = $grammar + 16 | 0;
	  var $6 = $grammar + 40 | 0;
	  var $lastnode_0 = HEAP32[$rule + 16 >> 2];
	  var $gn_0_in = $rhs | 0;
	  $_$2 : while (1) {
	    var $gn_0_in;
	    var $lastnode_0;
	    var $gn_0 = HEAP32[$gn_0_in >> 2];
	    if (($gn_0 | 0) == 0) {
	      var $_0 = $lastnode_0;
	      break;
	    }
	    var $11 = HEAP32[$gn_0 >> 2];
	    var $12 = $11;
	    var $13 = $11;
	    var $14 = HEAP32[$13 >> 2];
	    var $16 = HEAP8[$14] << 24 >> 24 == 60;
	    $_$5 : do {
	      if ($16) {
	        var $18 = _strcmp($14, STRING_TABLE.__str31715 | 0);
	        if (($18 | 0) == 0) {
	          var $21 = HEAP32[$4$s2];
	          _jsgf_add_link($grammar, $12, $lastnode_0, $21);
	          var $22 = HEAP32[$4$s2];
	          var $23 = $22 + 1 | 0;
	          HEAP32[$4$s2] = $23;
	          var $lastnode_1 = $22;
	        } else {
	          var $25 = _strcmp($14, STRING_TABLE.__str261738 | 0);
	          if (($25 | 0) == 0) {
	            var $_0 = -1;
	            break $_$2;
	          }
	          var $28 = _jsgf_fullname_from_rule($rule, $14);
	          var $29 = HEAP32[$5 >> 2];
	          var $30 = _hash_table_lookup($29, $28, $val);
	          if (($30 | 0) == -1) {
	            __E__pr_header(STRING_TABLE.__str1712 | 0, 331, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str271739 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $28, tempInt));
	            _ckd_free($28);
	            var $_0 = -1;
	            break $_$2;
	          }
	          _ckd_free($28);
	          var $34 = HEAP32[$val >> 2];
	          var $35 = $34;
	          var $subnode_0_in = $6;
	          while (1) {
	            var $subnode_0_in;
	            var $subnode_0 = HEAP32[$subnode_0_in >> 2];
	            if (($subnode_0 | 0) == 0) {
	              var $58 = _expand_rule($grammar, $35);
	              if (($58 | 0) == -1) {
	                var $_0 = -1;
	                break $_$2;
	              }
	              var $63 = HEAP32[$34 + 16 >> 2];
	              _jsgf_add_link($grammar, $12, $lastnode_0, $63);
	              var $lastnode_1 = HEAP32[$34 + 20 >> 2];
	              break $_$5;
	            }
	            if ((HEAP32[$subnode_0 >> 2] | 0) != ($34 | 0)) {
	              var $subnode_0_in = $subnode_0 + 8 | 0;
	              continue;
	            }
	            if ((HEAP32[$gn_0 + 8 >> 2] | 0) == 0) {
	              __E__pr_info_header(STRING_TABLE.__str1712 | 0, 349);
	              var $53 = HEAP32[$13 >> 2];
	              var $55 = $34 + 16 | 0;
	              var $56 = HEAP32[$55 >> 2];
	              __E__pr_info(STRING_TABLE.__str291741 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $53, HEAP32[tempInt + 4 >> 2] = $lastnode_0, HEAP32[tempInt + 8 >> 2] = $56, tempInt));
	              var $57 = HEAP32[$55 >> 2];
	              _jsgf_add_link($grammar, $12, $lastnode_0, $57);
	              var $lastnode_1 = $lastnode_0;
	              break $_$5;
	            }
	            __E__pr_header(STRING_TABLE.__str1712 | 0, 344, STRING_TABLE.__str102579 | 0);
	            var $49 = HEAP32[$grammar + 12 >> 2];
	            var $51 = HEAP32[$rule + 4 >> 2];
	            __E__pr_warn(STRING_TABLE.__str281740 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $49, HEAP32[tempInt + 4 >> 2] = $51, tempInt));
	            var $_0 = -1;
	            break $_$2;
	          }
	        }
	      } else {
	        var $68 = HEAP32[$4$s2];
	        _jsgf_add_link($grammar, $12, $lastnode_0, $68);
	        var $69 = HEAP32[$4$s2];
	        var $70 = $69 + 1 | 0;
	        HEAP32[$4$s2] = $70;
	        var $lastnode_1 = $69;
	      }
	    } while (0);
	    var $lastnode_1;
	    var $lastnode_0 = $lastnode_1;
	    var $gn_0_in = $gn_0 + 8 | 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_expand_rhs["X"] = 1;

	function _jsgf_fullname_from_rule($rule, $name) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $name + 1 | 0;
	  var $2 = _strchr($1, 46);
	  if (($2 | 0) == 0) {
	    var $8 = HEAP32[$rule + 4 >> 2];
	    var $9 = _extract_grammar_name($8);
	    if (($9 | 0) == 0) {
	      var $12 = ___ckd_salloc__($name, STRING_TABLE.__str1712 | 0, 260);
	      var $_0 = $12;
	    } else {
	      var $14 = _strlen($9);
	      var $15 = _strlen($name);
	      var $17 = $15 + ($14 + 4) | 0;
	      var $18 = ___ckd_malloc__($17, STRING_TABLE.__str1712 | 0, 261);
	      var $19 = _sprintf($18, STRING_TABLE.__str251737 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $9, HEAP32[tempInt + 4 >> 2] = $1, tempInt));
	      _ckd_free($9);
	      var $_0 = $18;
	    }
	  } else {
	    var $5 = ___ckd_salloc__($name, STRING_TABLE.__str1712 | 0, 256);
	    var $_0 = $5;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _extract_grammar_name($rule_name) {
	  var $1 = $rule_name + 1 | 0;
	  var $2 = ___ckd_salloc__($1, STRING_TABLE.__str1712 | 0, 225);
	  var $3 = $2 + 1 | 0;
	  var $4 = _strrchr($3, 46);
	  if (($4 | 0) == 0) {
	    _ckd_free($2);
	    var $_0 = 0;
	  } else {
	    HEAP8[$4] = 0;
	    var $_0 = $2;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _yyparse($yyscanner, $jsgf) {
	  var $yyvsp_2$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1204;
	  var __label__;
	  var $yylval = __stackBase__;
	  var $1 = __stackBase__ + 4 | 0;
	  var $2 = __stackBase__ + 404 | 0;
	  var $3 = $jsgf + 12 | 0;
	  var $4$s2 = ($jsgf | 0) >> 2;
	  var $5 = $jsgf + 4 | 0;
	  var $6 = $jsgf + 8 | 0;
	  var $7 = $yylval | 0;
	  var $yychar_1 = -2;
	  var $yystate_1 = 0;
	  var $yyss_0 = $1;
	  var $yyssp_1 = $1;
	  var $yyvs_0 = $2;
	  var $yyvsp_1 = $2;
	  var $yystacksize_0 = 200;
	  $_$41 : while (1) {
	    var $yystacksize_0;
	    var $yyvsp_1;
	    var $yyvs_0;
	    var $yyssp_1;
	    var $yyss_0;
	    var $yystate_1;
	    var $yychar_1;
	    HEAP16[$yyssp_1 >> 1] = $yystate_1 & 65535;
	    var $13 = (($yystacksize_0 - 1 << 1) + $yyss_0 | 0) >>> 0 > $yyssp_1 >>> 0;
	    $_$43 : do {
	      if (!$13) {
	        var $18 = $yyssp_1 - $yyss_0 >> 1;
	        var $19 = $18 + 1 | 0;
	        var $20 = $yystacksize_0 >>> 0 > 9999;
	        do {
	          if (!$20) {
	            var $22 = $yystacksize_0 << 1;
	            var $_ = $22 >>> 0 > 1e4 ? 1e4 : $22;
	            var $26 = _malloc($_ * 6 | 3);
	            if (($26 | 0) == 0) {
	              break;
	            }
	            var $29 = $26;
	            var $30 = $26;
	            var $31 = $yyss_0;
	            _memcpy($26, $31, $19 << 1, 2);
	            var $35 = (($_ >>> 1 & 1073741823) << 2) + $29 | 0;
	            var $36 = $35;
	            _memcpy($36, $yyvs_0, $19 << 2, 4);
	            if (($yyss_0 | 0) != ($1 | 0)) {
	              _free($31);
	            }
	            if (($_ - 1 | 0) > ($18 | 0)) {
	              var $yyss_1 = $30;
	              var $yyssp_2 = ($18 << 1) + $30 | 0;
	              var $yyvs_1 = $35;
	              var $yyvsp_2 = ($18 << 2) + $35 | 0, $yyvsp_2$s2 = $yyvsp_2 >> 2;
	              var $yystacksize_2 = $_;
	              break $_$43;
	            }
	            var $yyresult_016_ph = 1;
	            var $yyss_319_ph = $30;
	            break $_$41;
	          }
	        } while (0);
	        _yyerror(STRING_TABLE.__str41758 | 0);
	        var $yyresult_016_ph = 2;
	        var $yyss_319_ph = $yyss_0;
	        break $_$41;
	      }
	      var $yyss_1 = $yyss_0;
	      var $yyssp_2 = $yyssp_1;
	      var $yyvs_1 = $yyvs_0;
	      var $yyvsp_2 = $yyvsp_1, $yyvsp_2$s2 = $yyvsp_2 >> 2;
	      var $yystacksize_2 = $yystacksize_0;
	    } while (0);
	    var $yystacksize_2;
	    var $yyvsp_2;
	    var $yyvs_1;
	    var $yyssp_2;
	    var $yyss_1;
	    if (($yystate_1 | 0) == 7) {
	      var $yyresult_016_ph = 0;
	      var $yyss_319_ph = $yyss_1;
	      break;
	    }
	    var $48 = STRING_TABLE._yypact + $yystate_1 | 0;
	    var $49 = HEAP8[$48];
	    var $50 = $49 << 24 >> 24;
	    var $51 = $49 << 24 >> 24 == -37;
	    do {
	      if (!$51) {
	        if (($yychar_1 | 0) == -2) {
	          var $55 = _yylex($yylval, $yyscanner);
	          var $yychar_2 = $55;
	        } else {
	          var $yychar_2 = $yychar_1;
	        }
	        var $yychar_2;
	        var $57 = ($yychar_2 | 0) < 1;
	        do {
	          if ($57) {
	            var $yychar_3 = 0;
	            var $yytoken_2 = 0;
	          } else {
	            if ($yychar_2 >>> 0 >= 266) {
	              var $yychar_3 = $yychar_2;
	              var $yytoken_2 = 2;
	              break;
	            }
	            var $61 = STRING_TABLE._yytranslate + $yychar_2 | 0;
	            var $yychar_3 = $yychar_2;
	            var $yytoken_2 = HEAPU8[$61] & 255;
	          }
	        } while (0);
	        var $yytoken_2;
	        var $yychar_3;
	        var $65 = $yytoken_2 + $50 | 0;
	        if ($65 >>> 0 > 54) {
	          var $yychar_4 = $yychar_3;
	          __label__ = 21;
	          break;
	        }
	        var $68 = STRING_TABLE._yycheck + $65 | 0;
	        if ((HEAP8[$68] << 24 >> 24 | 0) != ($yytoken_2 | 0)) {
	          var $yychar_4 = $yychar_3;
	          __label__ = 21;
	          break;
	        }
	        if (($65 | 0) == 53 || ($65 | 0) == 48) {
	          __label__ = 49;
	          break;
	        }
	        var $74 = STRING_TABLE._yytable + $65 | 0;
	        var $76 = HEAPU8[$74] & 255;
	        var $77 = $yyvsp_2 + 4 | 0;
	        var $78 = HEAP32[$7 >> 2];
	        HEAP32[$77 >> 2] = $78;
	        var $yychar_0 = -2;
	        var $yystate_0 = $76;
	        var $yyssp_0 = $yyssp_2;
	        var $yyvsp_0 = $77;
	        __label__ = 3;
	        break;
	      }
	      var $yychar_4 = $yychar_1;
	      __label__ = 21;
	    } while (0);
	    $_$66 : do {
	      if (__label__ == 21) {
	        var $yychar_4;
	        var $81 = STRING_TABLE._yydefact + $yystate_1 | 0;
	        var $82 = HEAPU8[$81];
	        var $83 = $82 & 255;
	        if ($82 << 24 >> 24 == 0) {
	          __label__ = 49;
	          break;
	        }
	        var $86 = STRING_TABLE._yyr2 + $83 | 0;
	        var $88 = HEAPU8[$86] & 255;
	        var $89 = 1 - $88 | 0;
	        var $90 = HEAP32[($89 << 2 >> 2) + $yyvsp_2$s2];
	        if (($83 | 0) == 5) {
	          var $93 = HEAP32[$yyvsp_2$s2];
	          HEAP32[$3 >> 2] = $93;
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 7) {
	          var $96 = HEAP32[$yyvsp_2 - 4 >> 2];
	          HEAP32[$4$s2] = $96;
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 8) {
	          var $99 = HEAP32[$yyvsp_2 - 8 >> 2];
	          HEAP32[$4$s2] = $99;
	          var $101 = HEAP32[$yyvsp_2 - 4 >> 2];
	          HEAP32[$5 >> 2] = $101;
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 9) {
	          var $104 = HEAP32[$yyvsp_2 - 12 >> 2];
	          HEAP32[$4$s2] = $104;
	          var $106 = HEAP32[$yyvsp_2 - 8 >> 2];
	          HEAP32[$5 >> 2] = $106;
	          var $108 = HEAP32[$yyvsp_2 - 4 >> 2];
	          HEAP32[$6 >> 2] = $108;
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 10) {
	          var $yyval_0_0 = HEAP32[$yyvsp_2 - 4 >> 2];
	        } else if (($83 | 0) == 13) {
	          var $114 = $yyvsp_2 - 4 | 0;
	          var $115 = HEAP32[$114 >> 2];
	          _jsgf_import_rule($jsgf, $115);
	          var $116 = HEAP32[$114 >> 2];
	          _ckd_free($116);
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 16) {
	          var $118 = $yyvsp_2 - 12 | 0;
	          var $119 = HEAP32[$118 >> 2];
	          var $122 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $123 = _jsgf_define_rule($jsgf, $119, $122, 0);
	          var $124 = HEAP32[$118 >> 2];
	          _ckd_free($124);
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 17) {
	          var $126 = $yyvsp_2 - 12 | 0;
	          var $127 = HEAP32[$126 >> 2];
	          var $130 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $131 = _jsgf_define_rule($jsgf, $127, $130, 1);
	          var $132 = HEAP32[$126 >> 2];
	          _ckd_free($132);
	          var $yyval_0_0 = $90;
	        } else if (($83 | 0) == 18) {
	          var $135 = HEAP32[$yyvsp_2$s2];
	          var $136 = $135;
	          var $137 = $135 | 0;
	          var $138 = HEAP32[$137 >> 2];
	          var $139 = _glist_reverse($138);
	          HEAP32[$137 >> 2] = $139;
	          var $yyval_0_0 = $136;
	        } else if (($83 | 0) == 19) {
	          var $142 = HEAP32[$yyvsp_2$s2];
	          var $143 = $142;
	          var $144 = $142 | 0;
	          var $145 = HEAP32[$144 >> 2];
	          var $146 = _glist_reverse($145);
	          HEAP32[$144 >> 2] = $146;
	          var $149 = HEAP32[$yyvsp_2 - 8 >> 2];
	          var $150 = $142 + 4 | 0;
	          HEAP32[$150 >> 2] = $149;
	          var $yyval_0_0 = $143;
	        } else if (($83 | 0) == 20) {
	          var $152 = ___ckd_calloc__(1, 8, STRING_TABLE.__str1754 | 0, 119);
	          var $153 = $152;
	          var $154 = $152;
	          var $155 = HEAP32[$154 >> 2];
	          var $158 = HEAP32[$yyvsp_2$s2];
	          var $159 = _glist_add_ptr($155, $158);
	          HEAP32[$154 >> 2] = $159;
	          var $yyval_0_0 = $153;
	        } else if (($83 | 0) == 21) {
	          var $163 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $164 = $163;
	          var $165 = $163 | 0;
	          var $166 = HEAP32[$165 >> 2];
	          var $169 = HEAP32[$yyvsp_2$s2];
	          var $170 = _glist_add_ptr($166, $169);
	          HEAP32[$165 >> 2] = $170;
	          var $yyval_0_0 = $164;
	        } else if (($83 | 0) == 23) {
	          var $174 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $175 = $174;
	          var $176 = $174 + 4 | 0;
	          var $177 = HEAP32[$176 >> 2];
	          var $179 = HEAP32[$yyvsp_2$s2];
	          var $180 = _glist_add_ptr($177, $179);
	          HEAP32[$176 >> 2] = $180;
	          var $yyval_0_0 = $175;
	        } else if (($83 | 0) == 25) {
	          var $183 = HEAP32[$yyvsp_2$s2];
	          var $184 = $183;
	          var $187 = HEAPF32[$yyvsp_2 - 4 >> 2];
	          HEAPF32[$183 + 8 >> 2] = $187;
	          var $yyval_0_0 = $184;
	        } else if (($83 | 0) == 26) {
	          var $192 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $193 = _jsgf_define_rule($jsgf, 0, $192, 0);
	          var $yyval_0_0 = $193;
	        } else if (($83 | 0) == 27) {
	          var $198 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $199 = _jsgf_optional_new($jsgf, $198);
	          var $yyval_0_0 = $199;
	        } else if (($83 | 0) == 28) {
	          var $202 = $yyvsp_2 | 0;
	          var $203 = HEAP32[$202 >> 2];
	          var $204 = _jsgf_atom_new($203);
	          var $205 = $204;
	          var $206 = HEAP32[$202 >> 2];
	          _ckd_free($206);
	          var $yyval_0_0 = $205;
	        } else if (($83 | 0) == 29) {
	          var $208 = $yyvsp_2 | 0;
	          var $209 = HEAP32[$208 >> 2];
	          var $210 = _jsgf_atom_new($209);
	          var $211 = $210;
	          var $212 = HEAP32[$208 >> 2];
	          _ckd_free($212);
	          var $yyval_0_0 = $211;
	        } else if (($83 | 0) == 30) {
	          var $217 = HEAP32[HEAP32[$yyvsp_2$s2] + 4 >> 2];
	          var $218 = _jsgf_atom_new($217);
	          var $yyval_0_0 = $218;
	        } else if (($83 | 0) == 31) {
	          var $224 = HEAP32[HEAP32[$yyvsp_2$s2] + 4 >> 2];
	          var $225 = _jsgf_atom_new($224);
	          var $yyval_0_0 = $225;
	        } else if (($83 | 0) == 32) {
	          var $230 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $231 = _jsgf_kleene_new($jsgf, $230, 0);
	          var $yyval_0_0 = $231;
	        } else if (($83 | 0) == 33) {
	          var $236 = HEAP32[$yyvsp_2 - 4 >> 2];
	          var $237 = _jsgf_kleene_new($jsgf, $236, 1);
	          var $yyval_0_0 = $237;
	        } else {
	          var $yyval_0_0 = $90;
	        }
	        var $yyval_0_0;
	        var $241 = (-$88 << 1) + $yyssp_2 | 0;
	        var $242 = ($89 << 2) + $yyvsp_2 | 0;
	        HEAP32[$242 >> 2] = $yyval_0_0;
	        var $244 = STRING_TABLE._yyr1 + $83 | 0;
	        var $247 = (HEAPU8[$244] & 255) - 20 | 0;
	        var $248 = STRING_TABLE._yypgoto + $247 | 0;
	        var $252 = HEAP16[$241 >> 1] << 16 >> 16;
	        var $253 = (HEAP8[$248] << 24 >> 24) + $252 | 0;
	        var $254 = $253 >>> 0 < 55;
	        do {
	          if ($254) {
	            var $256 = STRING_TABLE._yycheck + $253 | 0;
	            if ((HEAP8[$256] << 24 >> 24 | 0) != ($252 | 0)) {
	              break;
	            }
	            var $261 = STRING_TABLE._yytable + $253 | 0;
	            var $yychar_0 = $yychar_4;
	            var $yystate_0 = HEAPU8[$261] & 255;
	            var $yyssp_0 = $241;
	            var $yyvsp_0 = $242;
	            __label__ = 3;
	            break $_$66;
	          }
	        } while (0);
	        var $265 = STRING_TABLE._yydefgoto + $247 | 0;
	        var $yychar_0 = $yychar_4;
	        var $yystate_0 = HEAP8[$265] << 24 >> 24;
	        var $yyssp_0 = $241;
	        var $yyvsp_0 = $242;
	        __label__ = 3;
	        break;
	      }
	    } while (0);
	    if (__label__ == 3) {
	      var $yyvsp_0;
	      var $yyssp_0;
	      var $yystate_0;
	      var $yychar_0;
	      var $yychar_1 = $yychar_0;
	      var $yystate_1 = $yystate_0;
	      var $yyss_0 = $yyss_1;
	      var $yyssp_1 = $yyssp_0 + 2 | 0;
	      var $yyvs_0 = $yyvs_1;
	      var $yyvsp_1 = $yyvsp_0;
	      var $yystacksize_0 = $yystacksize_2;
	    } else if (__label__ == 49) {
	      _yyerror(STRING_TABLE.__str11755 | 0);
	      var $yyresult_016_ph = 1;
	      var $yyss_319_ph = $yyss_1;
	      break;
	    }
	  }
	  var $yyss_319_ph;
	  var $yyresult_016_ph;
	  if (($yyss_319_ph | 0) != ($1 | 0)) {
	    _free($yyss_319_ph);
	  }
	  STACKTOP = __stackBase__;
	  return $yyresult_016_ph;
	  return null;
	}

	_yyparse["X"] = 1;

	function _yyerror($s) {
	  var __stackBase__ = STACKTOP;
	  var $1 = HEAP32[_stderr >> 2];
	  var $2 = _fprintf($1, STRING_TABLE.__str71761 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $s, tempInt));
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _yy_load_buffer_state($yyscanner) {
	  var $7$s2;
	  var $yyscanner$s2 = $yyscanner >> 2;
	  var $7$s2 = ((HEAP32[$yyscanner$s2 + 3] << 2) + HEAP32[$yyscanner$s2 + 5] | 0) >> 2;
	  var $10 = HEAP32[HEAP32[$7$s2] + 16 >> 2];
	  HEAP32[$yyscanner$s2 + 7] = $10;
	  var $15 = HEAP32[HEAP32[$7$s2] + 8 >> 2];
	  HEAP32[$yyscanner$s2 + 9] = $15;
	  HEAP32[$yyscanner$s2 + 20] = $15;
	  var $22 = HEAP32[HEAP32[$7$s2] >> 2];
	  HEAP32[$yyscanner$s2 + 1] = $22;
	  var $25 = HEAP8[$15];
	  HEAP8[$yyscanner + 24 | 0] = $25;
	  return;
	  return;
	}

	function _yy_get_previous_state($yyscanner) {
	  var __label__;
	  var $3 = HEAPU32[$yyscanner + 44 >> 2];
	  var $6 = HEAPU32[$yyscanner + 80 >> 2];
	  var $9 = HEAPU32[$yyscanner + 36 >> 2];
	  var $10 = $6 >>> 0 < $9 >>> 0;
	  $_$94 : do {
	    if ($10) {
	      var $12 = $yyscanner + 64 | 0;
	      var $14 = $yyscanner + 68 | 0;
	      var $yy_cp_05 = $6;
	      var $yy_current_state_06 = $3;
	      while (1) {
	        var $yy_current_state_06;
	        var $yy_cp_05;
	        var $16 = HEAPU8[$yy_cp_05];
	        if ($16 << 24 >> 24 == 0) {
	          var $23 = 1;
	        } else {
	          var $23 = HEAP32[_yy_ec + (($16 & 255) << 2) >> 2];
	        }
	        var $23;
	        if (HEAP16[_yy_accept + ($yy_current_state_06 << 1) >> 1] << 16 >> 16 == 0) {
	          var $yy_c_0_ph = $23;
	          var $yy_current_state_1_ph = $yy_current_state_06;
	          __label__ = 8;
	        } else {
	          HEAP32[$12 >> 2] = $yy_current_state_06;
	          HEAP32[$14 >> 2] = $yy_cp_05;
	          var $yy_c_0_ph = $23;
	          var $yy_current_state_1_ph = $yy_current_state_06;
	        }
	        $_$103 : while (1) {
	          var $yy_current_state_1_ph;
	          var $yy_c_0_ph;
	          var $28 = $yy_c_0_ph & 255;
	          var $yy_current_state_1 = $yy_current_state_1_ph;
	          while (1) {
	            var $yy_current_state_1;
	            var $33 = (HEAP16[_yy_base + ($yy_current_state_1 << 1) >> 1] << 16 >> 16) + $28 | 0;
	            if ((HEAP16[_yy_chk + ($33 << 1) >> 1] << 16 >> 16 | 0) == ($yy_current_state_1 | 0)) {
	              break $_$103;
	            }
	            var $40 = HEAP16[_yy_def + ($yy_current_state_1 << 1) >> 1];
	            var $41 = $40 << 16 >> 16;
	            if ($40 << 16 >> 16 > 76) {
	              break;
	            }
	            var $yy_current_state_1 = $41;
	          }
	          var $yy_c_0_ph = HEAP32[_yy_meta + ($28 << 2) >> 2];
	          var $yy_current_state_1_ph = $41;
	        }
	        var $49 = HEAP16[_yy_nxt + ($33 << 1) >> 1] << 16 >> 16;
	        var $50 = $yy_cp_05 + 1 | 0;
	        if ($50 >>> 0 >= $9 >>> 0) {
	          var $yy_current_state_0_lcssa = $49;
	          break $_$94;
	        }
	        var $yy_cp_05 = $50;
	        var $yy_current_state_06 = $49;
	      }
	    } else {
	      var $yy_current_state_0_lcssa = $3;
	    }
	  } while (0);
	  var $yy_current_state_0_lcssa;
	  return $yy_current_state_0_lcssa;
	  return null;
	}

	_yy_get_previous_state["X"] = 1;

	function _yy_try_NUL_trans($yy_current_state, $yyscanner) {
	  if (HEAP16[_yy_accept + ($yy_current_state << 1) >> 1] << 16 >> 16 != 0) {
	    var $7 = HEAP32[$yyscanner + 36 >> 2];
	    HEAP32[$yyscanner + 64 >> 2] = $yy_current_state;
	    HEAP32[$yyscanner + 68 >> 2] = $7;
	  }
	  var $14 = HEAP16[_yy_base + ($yy_current_state << 1) >> 1] << 16 >> 16;
	  var $19 = (HEAP16[_yy_chk + ($14 + 1 << 1) >> 1] << 16 >> 16 | 0) == ($yy_current_state | 0);
	  $_$115 : do {
	    if ($19) {
	      var $_lcssa = $14;
	    } else {
	      var $_01 = $yy_current_state;
	      while (1) {
	        var $_01;
	        var $21 = HEAP16[_yy_def + ($_01 << 1) >> 1];
	        var $22 = $21 << 16 >> 16;
	        var $25 = HEAP16[_yy_base + ($22 << 1) >> 1] << 16 >> 16;
	        if (HEAP16[_yy_chk + ($25 + 1 << 1) >> 1] << 16 >> 16 == $21 << 16 >> 16) {
	          var $_lcssa = $25;
	          break $_$115;
	        }
	        var $_01 = $22;
	      }
	    }
	  } while (0);
	  var $_lcssa;
	  var $32 = HEAP16[_yy_nxt + ($_lcssa + 1 << 1) >> 1];
	  var $35 = $32 << 16 >> 16 == 76 ? 0 : $32 << 16 >> 16;
	  return $35;
	  return null;
	}

	function _yylex($yylval_param, $yyscanner) {
	  var $55$s2;
	  var $51$s2;
	  var $49$s2;
	  var $47$s2;
	  var $44$s2;
	  var $_pre_phi3$s2;
	  var $_pre_phi89$s2;
	  var $_pre_phi85$s2;
	  var $15$s2;
	  var $2$s2;
	  var __label__;
	  var $2$s2 = ($yyscanner + 92 | 0) >> 2;
	  HEAP32[$2$s2] = $yylval_param;
	  var $4 = $yyscanner + 40 | 0;
	  if ((HEAP32[$4 >> 2] | 0) == 0) {
	    HEAP32[$4 >> 2] = 1;
	    var $9 = $yyscanner + 44 | 0;
	    if ((HEAP32[$9 >> 2] | 0) == 0) {
	      HEAP32[$9 >> 2] = 1;
	    }
	    var $15 = $yyscanner + 4 | 0, $15$s2 = $15 >> 2;
	    if ((HEAP32[$15$s2] | 0) == 0) {
	      var $19 = HEAP32[_stdin >> 2];
	      HEAP32[$15$s2] = $19;
	    }
	    var $22 = $yyscanner + 8 | 0;
	    if ((HEAP32[$22 >> 2] | 0) == 0) {
	      var $26 = HEAP32[_stdout >> 2];
	      HEAP32[$22 >> 2] = $26;
	    }
	    var $29 = $yyscanner + 20 | 0;
	    var $30 = HEAP32[$29 >> 2];
	    var $31 = ($30 | 0) == 0;
	    var $_pre80 = $yyscanner + 12 | 0;
	    do {
	      if ($31) {
	        __label__ = 12;
	      } else {
	        if ((HEAP32[$30 + (HEAP32[$_pre80 >> 2] << 2) >> 2] | 0) == 0) {
	          __label__ = 12;
	          break;
	        }
	        __label__ = 13;
	        break;
	      }
	    } while (0);
	    if (__label__ == 12) {
	      _yyensure_buffer_stack($yyscanner);
	      var $37 = HEAP32[$15$s2];
	      var $38 = _yy_create_buffer($37, $yyscanner);
	      var $41 = (HEAP32[$_pre80 >> 2] << 2) + HEAP32[$29 >> 2] | 0;
	      HEAP32[$41 >> 2] = $38;
	    }
	    _yy_load_buffer_state($yyscanner);
	    var $_pre_phi85 = $9, $_pre_phi85$s2 = $_pre_phi85 >> 2;
	    var $_pre_phi89 = $29, $_pre_phi89$s2 = $_pre_phi89 >> 2;
	    var $_pre_phi93 = $15;
	    var $_pre_phi97 = $22;
	    var $_pre_phi3 = $_pre80, $_pre_phi3$s2 = $_pre_phi3 >> 2;
	  } else {
	    var $_pre_phi85 = $yyscanner + 44 | 0, $_pre_phi85$s2 = $_pre_phi85 >> 2;
	    var $_pre_phi89 = $yyscanner + 20 | 0, $_pre_phi89$s2 = $_pre_phi89 >> 2;
	    var $_pre_phi93 = $yyscanner + 4 | 0;
	    var $_pre_phi97 = $yyscanner + 8 | 0;
	    var $_pre_phi3 = $yyscanner + 12 | 0, $_pre_phi3$s2 = $_pre_phi3 >> 2;
	  }
	  var $_pre_phi3;
	  var $_pre_phi97;
	  var $_pre_phi93;
	  var $_pre_phi89;
	  var $_pre_phi85;
	  var $44$s2 = ($yyscanner + 36 | 0) >> 2;
	  var $45 = $yyscanner + 24 | 0;
	  var $47$s2 = ($yyscanner + 64 | 0) >> 2;
	  var $49$s2 = ($yyscanner + 68 | 0) >> 2;
	  var $51$s2 = ($yyscanner + 80 | 0) >> 2;
	  var $53 = $yyscanner + 32 | 0;
	  var $55$s2 = ($yyscanner + 28 | 0) >> 2;
	  var $57 = $yyscanner + 48 | 0;
	  $_$20 : while (1) {
	    var $58 = HEAP32[$44$s2];
	    var $59 = HEAP8[$45];
	    HEAP8[$58] = $59;
	    var $yy_current_state_0_ph = HEAP32[$_pre_phi85$s2];
	    var $yy_cp_0_ph = $58;
	    var $yy_bp_0_ph = $58;
	    $_$22 : while (1) {
	      var $yy_bp_0_ph;
	      var $yy_cp_0_ph;
	      var $yy_current_state_0_ph;
	      var $yy_current_state_0 = $yy_current_state_0_ph;
	      var $yy_cp_0 = $yy_cp_0_ph;
	      while (1) {
	        var $yy_cp_0;
	        var $yy_current_state_0;
	        var $64 = HEAP32[_yy_ec + ((HEAPU8[$yy_cp_0] & 255) << 2) >> 2];
	        if (HEAP16[_yy_accept + ($yy_current_state_0 << 1) >> 1] << 16 >> 16 == 0) {
	          var $yy_c_0_ph_in = $64;
	          var $yy_current_state_1_ph = $yy_current_state_0;
	          __label__ = 19;
	        } else {
	          HEAP32[$47$s2] = $yy_current_state_0;
	          HEAP32[$49$s2] = $yy_cp_0;
	          var $yy_c_0_ph_in = $64;
	          var $yy_current_state_1_ph = $yy_current_state_0;
	        }
	        $_$28 : while (1) {
	          var $yy_current_state_1_ph;
	          var $yy_c_0_ph_in;
	          var $69 = $yy_c_0_ph_in & 255;
	          var $yy_current_state_1 = $yy_current_state_1_ph;
	          while (1) {
	            var $yy_current_state_1;
	            var $74 = (HEAP16[_yy_base + ($yy_current_state_1 << 1) >> 1] << 16 >> 16) + $69 | 0;
	            if ((HEAP16[_yy_chk + ($74 << 1) >> 1] << 16 >> 16 | 0) == ($yy_current_state_1 | 0)) {
	              break $_$28;
	            }
	            var $81 = HEAP16[_yy_def + ($yy_current_state_1 << 1) >> 1];
	            var $82 = $81 << 16 >> 16;
	            if ($81 << 16 >> 16 > 76) {
	              break;
	            }
	            var $yy_current_state_1 = $82;
	          }
	          var $yy_c_0_ph_in = HEAP32[_yy_meta + ($69 << 2) >> 2];
	          var $yy_current_state_1_ph = $82;
	        }
	        var $90 = HEAP16[_yy_nxt + ($74 << 1) >> 1] << 16 >> 16;
	        var $91 = $yy_cp_0 + 1 | 0;
	        if (HEAP16[_yy_base + ($90 << 1) >> 1] << 16 >> 16 == 196) {
	          var $yy_current_state_2_ph = $90;
	          var $yy_cp_1_ph = $91;
	          var $yy_bp_1_ph = $yy_bp_0_ph;
	          break;
	        }
	        var $yy_current_state_0 = $90;
	        var $yy_cp_0 = $91;
	      }
	      $_$35 : while (1) {
	        var $yy_bp_1_ph;
	        var $yy_cp_1_ph;
	        var $yy_current_state_2_ph;
	        var $95 = $yy_bp_1_ph;
	        var $yy_current_state_2 = $yy_current_state_2_ph;
	        var $yy_cp_1 = $yy_cp_1_ph;
	        $_$37 : while (1) {
	          var $yy_cp_1;
	          var $yy_current_state_2;
	          var $98 = HEAP16[_yy_accept + ($yy_current_state_2 << 1) >> 1];
	          if ($98 << 16 >> 16 == 0) {
	            var $yy_act_0_in = HEAP16[_yy_accept + (HEAP32[$47$s2] << 1) >> 1];
	            var $yy_cp_2 = HEAP32[$49$s2];
	          } else {
	            var $yy_act_0_in = $98;
	            var $yy_cp_2 = $yy_cp_1;
	          }
	          var $yy_cp_2;
	          var $yy_act_0_in;
	          HEAP32[$51$s2] = $yy_bp_1_ph;
	          var $106 = $yy_cp_2;
	          HEAP32[$53 >> 2] = $106 - $95 | 0;
	          var $108 = HEAP8[$yy_cp_2];
	          HEAP8[$45] = $108;
	          HEAP8[$yy_cp_2] = 0;
	          HEAP32[$44$s2] = $yy_cp_2;
	          var $yy_act_1 = $yy_act_0_in << 16 >> 16;
	          while (1) {
	            var $yy_act_1;
	            if (($yy_act_1 | 0) == 0) {
	              var $111 = HEAP8[$45];
	              HEAP8[$yy_cp_2] = $111;
	              var $yy_current_state_2 = HEAP32[$47$s2];
	              var $yy_cp_1 = HEAP32[$49$s2];
	              continue $_$37;
	            } else if (($yy_act_1 | 0) == 1 || ($yy_act_1 | 0) == 2 || ($yy_act_1 | 0) == 5) {
	              continue $_$20;
	            } else if (($yy_act_1 | 0) == 3) {
	              HEAP32[$_pre_phi85$s2] = 3;
	              continue $_$20;
	            } else if (($yy_act_1 | 0) == 4) {
	              HEAP32[$_pre_phi85$s2] = 1;
	              continue $_$20;
	            } else if (($yy_act_1 | 0) == 6) {
	              var $_0 = 258;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 7) {
	              var $_0 = 259;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 8) {
	              var $_0 = 260;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 9) {
	              var $_0 = 261;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 10) {
	              var $118 = HEAP32[$51$s2];
	              var $119 = _strdup($118);
	              var $121 = HEAP32[$2$s2] | 0;
	              HEAP32[$121 >> 2] = $119;
	              var $_0 = 263;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 11) {
	              var $123 = HEAP32[$51$s2];
	              var $124 = _strdup($123);
	              var $126 = HEAP32[$2$s2] | 0;
	              HEAP32[$126 >> 2] = $124;
	              var $_0 = 264;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 12) {
	              var $128 = HEAP32[$51$s2];
	              var $129 = _strdup($128);
	              var $131 = HEAP32[$2$s2] | 0;
	              HEAP32[$131 >> 2] = $129;
	              var $_0 = 262;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 13) {
	              var $133 = HEAP32[$51$s2];
	              var $134 = _strdup($133);
	              var $136 = HEAP32[$2$s2] | 0;
	              HEAP32[$136 >> 2] = $134;
	              var $_0 = 262;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 14) {
	              var $139 = HEAP32[$51$s2] + 1 | 0;
	              var $140 = _atof_c($139);
	              HEAPF32[HEAP32[$2$s2] >> 2] = $140;
	              var $_0 = 265;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 15) {
	              var $_0 = HEAP8[HEAP32[$51$s2]] << 24 >> 24;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 16) {
	              var $149 = HEAP32[$51$s2];
	              var $150 = HEAP32[$53 >> 2];
	              var $151 = HEAP32[$_pre_phi97 >> 2];
	              var $152 = _fwrite($149, $150, 1, $151);
	              continue $_$20;
	            } else if (($yy_act_1 | 0) == 18 || ($yy_act_1 | 0) == 19) {
	              var $_0 = 0;
	              break $_$20;
	            } else if (($yy_act_1 | 0) == 17) {
	              var $155 = HEAP32[$51$s2];
	              var $156 = HEAP8[$45];
	              HEAP8[$yy_cp_2] = $156;
	              var $159 = (HEAP32[$_pre_phi3$s2] << 2) + HEAP32[$_pre_phi89$s2] | 0;
	              var $160 = HEAP32[$159 >> 2];
	              if ((HEAP32[$160 + 44 >> 2] | 0) == 0) {
	                var $166 = HEAP32[$160 + 16 >> 2];
	                HEAP32[$55$s2] = $166;
	                var $167 = HEAP32[$_pre_phi93 >> 2];
	                var $169 = HEAP32[$159 >> 2] | 0;
	                HEAP32[$169 >> 2] = $167;
	                var $174 = HEAP32[HEAP32[$_pre_phi89$s2] + (HEAP32[$_pre_phi3$s2] << 2) >> 2] + 44 | 0;
	                HEAP32[$174 >> 2] = 1;
	                var $176 = HEAP32[HEAP32[$_pre_phi89$s2] + (HEAP32[$_pre_phi3$s2] << 2) >> 2];
	              } else {
	                var $176 = $160;
	              }
	              var $176;
	              if (HEAPU32[$44$s2] >>> 0 <= (HEAP32[$176 + 4 >> 2] + HEAP32[$55$s2] | 0) >>> 0) {
	                var $188 = HEAP32[$51$s2] + ($106 - $155 - 1) | 0;
	                HEAP32[$44$s2] = $188;
	                var $189 = _yy_get_previous_state($yyscanner);
	                var $190 = _yy_try_NUL_trans($189, $yyscanner);
	                var $191 = HEAPU32[$51$s2];
	                var $193 = HEAPU32[$44$s2];
	                if (($190 | 0) == 0) {
	                  var $yy_current_state_2_ph = $189;
	                  var $yy_cp_1_ph = $193;
	                  var $yy_bp_1_ph = $191;
	                  continue $_$35;
	                }
	                var $195 = $193 + 1 | 0;
	                HEAP32[$44$s2] = $195;
	                var $yy_current_state_0_ph = $190;
	                var $yy_cp_0_ph = $195;
	                var $yy_bp_0_ph = $191;
	                continue $_$22;
	              }
	              var $197 = _yy_get_next_buffer($yyscanner);
	              if (($197 | 0) == 1) {
	                HEAP32[$57 >> 2] = 0;
	                var $199 = HEAP32[$51$s2];
	                HEAP32[$44$s2] = $199;
	                var $yy_act_1 = ((HEAP32[$_pre_phi85$s2] - 1 | 0) / 2 & -1) + 18 | 0;
	              } else if (($197 | 0) == 0) {
	                var $209 = HEAP32[$51$s2] + ($106 - $155 - 1) | 0;
	                HEAP32[$44$s2] = $209;
	                var $210 = _yy_get_previous_state($yyscanner);
	                var $yy_current_state_0_ph = $210;
	                var $yy_cp_0_ph = HEAP32[$44$s2];
	                var $yy_bp_0_ph = HEAP32[$51$s2];
	                continue $_$22;
	              } else if (($197 | 0) == 2) {
	                var $221 = HEAP32[HEAP32[HEAP32[$_pre_phi89$s2] + (HEAP32[$_pre_phi3$s2] << 2) >> 2] + 4 >> 2] + HEAP32[$55$s2] | 0;
	                HEAP32[$44$s2] = $221;
	                var $222 = _yy_get_previous_state($yyscanner);
	                var $yy_current_state_2_ph = $222;
	                var $yy_cp_1_ph = HEAP32[$44$s2];
	                var $yy_bp_1_ph = HEAP32[$51$s2];
	                continue $_$35;
	              } else {
	                continue $_$20;
	              }
	            } else {
	              _yy_fatal_error(STRING_TABLE.__str1765 | 0);
	            }
	          }
	        }
	      }
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_yylex["X"] = 1;

	function _yyensure_buffer_stack($yyscanner) {
	  var $35$s2;
	  var $20$s2;
	  var $2$s2;
	  var $2$s2 = ($yyscanner + 20 | 0) >> 2;
	  var $3 = HEAPU32[$2$s2];
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $6 = _yyalloc(4);
	      var $7 = $6;
	      HEAP32[$2$s2] = $7;
	      if (($6 | 0) == 0) {
	        _yy_fatal_error(STRING_TABLE.__str81773 | 0);
	      } else {
	        HEAP32[$7 >> 2] = 0;
	        HEAP32[$yyscanner + 16 >> 2] = 1;
	        HEAP32[$yyscanner + 12 >> 2] = 0;
	      }
	    } else {
	      var $20$s2 = ($yyscanner + 16 | 0) >> 2;
	      var $21 = HEAPU32[$20$s2];
	      if (HEAPU32[$yyscanner + 12 >> 2] >>> 0 < ($21 - 1 | 0) >>> 0) {
	        break;
	      }
	      var $25 = $21 + 8 | 0;
	      var $26 = $3;
	      var $27 = $25 << 2;
	      var $28 = _yyrealloc($26, $27);
	      var $29 = $28;
	      HEAP32[$2$s2] = $29;
	      if (($28 | 0) == 0) {
	        _yy_fatal_error(STRING_TABLE.__str81773 | 0);
	      } else {
	        var $35$s2 = ((HEAP32[$20$s2] << 2) + $29 | 0) >> 2;
	        HEAP32[$35$s2] = 0;
	        HEAP32[$35$s2 + 1] = 0;
	        HEAP32[$35$s2 + 2] = 0;
	        HEAP32[$35$s2 + 3] = 0;
	        HEAP32[$35$s2 + 4] = 0;
	        HEAP32[$35$s2 + 5] = 0;
	        HEAP32[$35$s2 + 6] = 0;
	        HEAP32[$35$s2 + 7] = 0;
	        HEAP32[$20$s2] = $25;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _yy_create_buffer($file, $yyscanner) {
	  var $1$s2;
	  var $1 = _yyalloc(48), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  if (($1 | 0) == 0) {
	    _yy_fatal_error(STRING_TABLE.__str11766 | 0);
	  } else {
	    HEAP32[$1$s2 + 3] = 16384;
	    var $8 = _yyalloc(16386);
	    HEAP32[$1$s2 + 1] = $8;
	    if (($8 | 0) == 0) {
	      _yy_fatal_error(STRING_TABLE.__str11766 | 0);
	    } else {
	      HEAP32[$1$s2 + 5] = 1;
	      _yy_init_buffer($2, $file, $yyscanner);
	      return $2;
	    }
	  }
	  return null;
	}

	function _yyset_in($in_str, $yyscanner) {
	  HEAP32[$yyscanner + 4 >> 2] = $in_str;
	  return;
	  return;
	}

	function _yyrestart($input_file, $yyscanner) {
	  var $_pre2$s2;
	  var $2$s2;
	  var __label__;
	  var $2$s2 = ($yyscanner + 20 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  var $4 = ($3 | 0) == 0;
	  var $_pre2$s2 = ($yyscanner + 12 | 0) >> 2;
	  do {
	    if ($4) {
	      __label__ = 4;
	    } else {
	      var $8 = HEAP32[$3 + (HEAP32[$_pre2$s2] << 2) >> 2];
	      if (($8 | 0) == 0) {
	        __label__ = 4;
	        break;
	      }
	      var $18 = $8;
	      __label__ = 6;
	      break;
	    }
	  } while (0);
	  do {
	    if (__label__ == 4) {
	      _yyensure_buffer_stack($yyscanner);
	      var $12 = HEAP32[$yyscanner + 4 >> 2];
	      var $13 = _yy_create_buffer($12, $yyscanner);
	      var $16 = (HEAP32[$_pre2$s2] << 2) + HEAP32[$2$s2] | 0;
	      HEAP32[$16 >> 2] = $13;
	      var $_pre = HEAP32[$2$s2];
	      if (($_pre | 0) == 0) {
	        var $18 = 0;
	        break;
	      }
	      var $18 = HEAP32[$_pre + (HEAP32[$_pre2$s2] << 2) >> 2];
	    }
	  } while (0);
	  var $18;
	  _yy_init_buffer($18, $input_file, $yyscanner);
	  _yy_load_buffer_state($yyscanner);
	  return;
	  return;
	}

	function _yy_init_buffer($b, $file, $yyscanner) {
	  var $b$s2 = $b >> 2;
	  var $1 = ___errno();
	  var $2 = HEAP32[$1 >> 2];
	  _yy_flush_buffer($b, $yyscanner);
	  HEAP32[$b$s2] = $file;
	  HEAP32[$b$s2 + 10] = 1;
	  var $7 = HEAP32[$yyscanner + 20 >> 2];
	  if (($7 | 0) == 0) {
	    var $16 = 0;
	  } else {
	    var $16 = HEAP32[$7 + (HEAP32[$yyscanner + 12 >> 2] << 2) >> 2];
	  }
	  var $16;
	  if (($16 | 0) != ($b | 0)) {
	    HEAP32[$b$s2 + 8] = 1;
	    HEAP32[$b$s2 + 9] = 0;
	  }
	  if (($file | 0) == 0) {
	    var $29 = 0;
	  } else {
	    var $24 = _fileno($file);
	    var $25 = _isatty($24);
	    var $29 = ($25 | 0) > 0 & 1;
	  }
	  var $29;
	  HEAP32[$b$s2 + 6] = $29;
	  var $31 = ___errno();
	  HEAP32[$31 >> 2] = $2;
	  return;
	  return;
	}

	function _yyalloc($size) {
	  var $1 = _malloc($size);
	  return $1;
	  return null;
	}

	function _yy_delete_buffer($b, $yyscanner) {
	  if (($b | 0) != 0) {
	    var $5 = HEAP32[$yyscanner + 20 >> 2];
	    if (($5 | 0) == 0) {
	      var $14 = 0;
	    } else {
	      var $14 = HEAP32[$5 + (HEAP32[$yyscanner + 12 >> 2] << 2) >> 2];
	    }
	    var $14;
	    if (($14 | 0) == ($b | 0)) {
	      var $20 = (HEAP32[$yyscanner + 12 >> 2] << 2) + $5 | 0;
	      HEAP32[$20 >> 2] = 0;
	    }
	    if ((HEAP32[$b + 20 >> 2] | 0) != 0) {
	      var $27 = HEAP32[$b + 4 >> 2];
	      _yyfree($27);
	    }
	    var $29 = $b;
	    _yyfree($29);
	  }
	  return;
	  return;
	}

	function _yyfree($ptr) {
	  _free($ptr);
	  return;
	  return;
	}

	function _yy_flush_buffer($b, $yyscanner) {
	  var $4$s2;
	  var $1 = ($b | 0) == 0;
	  do {
	    if (!$1) {
	      HEAP32[$b + 16 >> 2] = 0;
	      var $4$s2 = ($b + 4 | 0) >> 2;
	      HEAP8[HEAP32[$4$s2]] = 0;
	      HEAP8[HEAP32[$4$s2] + 1 | 0] = 0;
	      var $8 = HEAP32[$4$s2];
	      HEAP32[$b + 8 >> 2] = $8;
	      HEAP32[$b + 28 >> 2] = 1;
	      HEAP32[$b + 44 >> 2] = 0;
	      var $14 = HEAP32[$yyscanner + 20 >> 2];
	      if (($14 | 0) == 0) {
	        var $23 = 0;
	      } else {
	        var $23 = HEAP32[$14 + (HEAP32[$yyscanner + 12 >> 2] << 2) >> 2];
	      }
	      var $23;
	      if (($23 | 0) != ($b | 0)) {
	        break;
	      }
	      _yy_load_buffer_state($yyscanner);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _yypop_buffer_state($yyscanner) {
	  var $7$s2;
	  var $2$s2;
	  var $2$s2 = ($yyscanner + 20 | 0) >> 2;
	  var $3 = HEAP32[$2$s2];
	  var $4 = ($3 | 0) == 0;
	  do {
	    if (!$4) {
	      var $7$s2 = ($yyscanner + 12 | 0) >> 2;
	      var $10 = HEAP32[$3 + (HEAP32[$7$s2] << 2) >> 2];
	      if (($10 | 0) == 0) {
	        break;
	      }
	      _yy_delete_buffer($10, $yyscanner);
	      var $15 = (HEAP32[$7$s2] << 2) + HEAP32[$2$s2] | 0;
	      HEAP32[$15 >> 2] = 0;
	      var $16 = HEAP32[$7$s2];
	      if (($16 | 0) == 0) {
	        var $21 = 0;
	      } else {
	        var $19 = $16 - 1 | 0;
	        HEAP32[$7$s2] = $19;
	        var $21 = $19;
	      }
	      var $21;
	      var $22 = HEAP32[$2$s2];
	      if (($22 | 0) == 0) {
	        break;
	      }
	      if ((HEAP32[$22 + ($21 << 2) >> 2] | 0) == 0) {
	        break;
	      }
	      _yy_load_buffer_state($yyscanner);
	      HEAP32[$yyscanner + 48 >> 2] = 1;
	    }
	  } while (0);
	  return;
	  return;
	}

	function _yylex_init($ptr_yy_globals) {
	  if (($ptr_yy_globals | 0) == 0) {
	    var $3 = ___errno();
	    HEAP32[$3 >> 2] = 22;
	  } else {
	    var $5 = _yyalloc(96);
	    HEAP32[$ptr_yy_globals >> 2] = $5;
	    if (($5 | 0) == 0) {
	      var $8 = ___errno();
	      HEAP32[$8 >> 2] = 12;
	    } else {
	      _memset($5, 0, 96, 1);
	      var $10 = HEAP32[$ptr_yy_globals >> 2];
	      _yy_init_globals($10);
	    }
	  }
	  return;
	  return;
	}

	function _yy_init_globals($yyscanner) {
	  var $13$s2;
	  var $yyscanner$s2 = $yyscanner >> 2;
	  HEAP32[$yyscanner$s2 + 9] = 0;
	  HEAP32[$yyscanner$s2 + 10] = 0;
	  HEAP32[$yyscanner$s2 + 11] = 0;
	  HEAP32[$yyscanner$s2 + 13] = 0;
	  HEAP32[$yyscanner$s2 + 14] = 0;
	  HEAP32[$yyscanner$s2 + 15] = 0;
	  var $13$s2 = ($yyscanner + 4 | 0) >> 2;
	  HEAP32[$13$s2] = 0;
	  HEAP32[$13$s2 + 1] = 0;
	  HEAP32[$13$s2 + 2] = 0;
	  HEAP32[$13$s2 + 3] = 0;
	  HEAP32[$13$s2 + 4] = 0;
	  return;
	  return;
	}

	function _yylex_destroy($yyscanner) {
	  var $2$s2;
	  var $2$s2 = ($yyscanner + 20 | 0) >> 2;
	  var $4 = $yyscanner + 12 | 0;
	  while (1) {
	    var $6 = HEAP32[$2$s2];
	    if (($6 | 0) == 0) {
	      var $16 = 0;
	      break;
	    }
	    var $11 = HEAP32[$6 + (HEAP32[$4 >> 2] << 2) >> 2];
	    if (($11 | 0) == 0) {
	      var $16 = $6;
	      break;
	    }
	    _yy_delete_buffer($11, $yyscanner);
	    var $15 = (HEAP32[$4 >> 2] << 2) + HEAP32[$2$s2] | 0;
	    HEAP32[$15 >> 2] = 0;
	    _yypop_buffer_state($yyscanner);
	  }
	  var $16;
	  _yyfree($16);
	  HEAP32[$2$s2] = 0;
	  var $18 = $yyscanner + 60 | 0;
	  var $20 = HEAP32[$18 >> 2];
	  _yyfree($20);
	  HEAP32[$18 >> 2] = 0;
	  _yy_init_globals($yyscanner);
	  _yyfree($yyscanner);
	  return;
	  return;
	}

	function _yyrealloc($ptr, $size) {
	  var $1 = _realloc($ptr, $size);
	  return $1;
	  return null;
	}

	function _lm3g_tginfo_free($lm3g) {
	  var $1 = $lm3g + 40 | 0;
	  if ((HEAP32[$1 >> 2] | 0) != 0) {
	    var $6 = HEAP32[$lm3g + 44 >> 2];
	    _listelem_alloc_free($6);
	    var $8 = HEAP32[$1 >> 2];
	    _ckd_free($8);
	  }
	  return;
	  return;
	}

	function _lm3g_tginfo_reset($base, $lm3g) {
	  var $1 = $lm3g + 40 | 0;
	  if ((HEAP32[$1 >> 2] | 0) != 0) {
	    var $5 = $lm3g + 44 | 0;
	    var $6 = HEAP32[$5 >> 2];
	    _listelem_alloc_free($6);
	    var $8 = HEAP32[$1 >> 2];
	    var $12 = HEAP32[HEAP32[$base + 4 >> 2] >> 2] << 2;
	    _memset($8, 0, $12, 4);
	    var $13 = _listelem_alloc_init(24);
	    HEAP32[$5 >> 2] = $13;
	  }
	  return;
	  return;
	}

	function _lm3g_apply_weights($base, $lm3g, $lw, $wip, $uw) {
	  var $15$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n_used = __stackBase__;
	  var $1$s2 = ($base + 20 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = $wip;
	  var $4 = _logmath_log($2, $3);
	  var $5 = HEAP32[$1$s2];
	  var $6 = $uw;
	  var $7 = _logmath_log($5, $6);
	  var $8 = HEAP32[$1$s2];
	  var $9 = 1 - $6;
	  var $10 = _logmath_log($8, $9);
	  var $11 = $base + 4 | 0;
	  var $14 = (HEAP32[HEAP32[$11 >> 2] >> 2] | 0) > 0;
	  $_$142 : do {
	    if ($14) {
	      var $15$s2 = ($lm3g | 0) >> 2;
	      var $16 = $base + 24 | 0;
	      var $17 = $base + 48 | 0;
	      var $18 = $base + 36 | 0;
	      var $i_08 = 0;
	      while (1) {
	        var $i_08;
	        var $33 = (HEAP32[(HEAP32[$15$s2] + 4 >> 2) + ($i_08 * 3 | 0)] | 0) / HEAPF32[$16 >> 2] & -1;
	        var $34 = _ngram_ng_prob($base, $i_08, 0, 0, $n_used);
	        var $37 = $33 * $lw & -1;
	        var $40 = HEAP32[$15$s2] + $i_08 * 12 + 4 | 0;
	        HEAP32[$40 >> 2] = $37;
	        var $43 = HEAP32[HEAP32[$17 >> 2] + ($i_08 << 2) >> 2];
	        var $44 = _strcmp($43, STRING_TABLE.__str531959 | 0);
	        if (($44 | 0) == 0) {
	          var $50 = ($34 * $lw & -1) + $4 | 0;
	          var $53 = HEAP32[$15$s2] + $i_08 * 12 | 0;
	          HEAP32[$53 >> 2] = $50;
	        } else {
	          var $55 = $34 + $7 | 0;
	          var $56 = HEAP32[$1$s2];
	          var $58 = HEAP32[$18 >> 2] + $10 | 0;
	          var $59 = _logmath_add($56, $55, $58);
	          var $63 = ($59 * $lw & -1) + $4 | 0;
	          var $66 = HEAP32[$15$s2] + $i_08 * 12 | 0;
	          HEAP32[$66 >> 2] = $63;
	        }
	        var $68 = $i_08 + 1 | 0;
	        if (($68 | 0) >= (HEAP32[HEAP32[$11 >> 2] >> 2] | 0)) {
	          break $_$142;
	        }
	        var $i_08 = $68;
	      }
	    }
	  } while (0);
	  var $19 = $lm3g + 16 | 0;
	  var $21 = (HEAP32[$19 >> 2] | 0) > 0;
	  $_$151 : do {
	    if ($21) {
	      var $22 = $lm3g + 12 | 0;
	      var $23 = $base + 28 | 0;
	      var $24 = $base + 24 | 0;
	      var $i_16 = 0;
	      while (1) {
	        var $i_16;
	        var $75 = ($i_16 << 2) + HEAP32[$22 >> 2] | 0;
	        var $86 = (((HEAP32[$75 >> 2] - HEAP32[$23 >> 2] | 0) / HEAPF32[$24 >> 2] & -1) * $lw & -1) + $4 | 0;
	        HEAP32[$75 >> 2] = $86;
	        var $87 = $i_16 + 1 | 0;
	        if (($87 | 0) >= (HEAP32[$19 >> 2] | 0)) {
	          break $_$151;
	        }
	        var $i_16 = $87;
	      }
	    }
	  } while (0);
	  var $92 = (HEAPU8[$base + 16 | 0] & 255) > 2;
	  $_$156 : do {
	    if ($92) {
	      var $93 = $lm3g + 24 | 0;
	      var $95 = (HEAP32[$93 >> 2] | 0) > 0;
	      $_$158 : do {
	        if ($95) {
	          var $96 = $lm3g + 20 | 0;
	          var $97 = $base + 24 | 0;
	          var $i_23 = 0;
	          while (1) {
	            var $i_23;
	            var $107 = ($i_23 << 2) + HEAP32[$96 >> 2] | 0;
	            var $113 = (HEAP32[$107 >> 2] | 0) / HEAPF32[$97 >> 2] * $lw & -1;
	            HEAP32[$107 >> 2] = $113;
	            var $114 = $i_23 + 1 | 0;
	            if (($114 | 0) >= (HEAP32[$93 >> 2] | 0)) {
	              break $_$158;
	            }
	            var $i_23 = $114;
	          }
	        }
	      } while (0);
	      var $98 = $lm3g + 32 | 0;
	      if ((HEAP32[$98 >> 2] | 0) <= 0) {
	        break;
	      }
	      var $101 = $lm3g + 28 | 0;
	      var $102 = $base + 28 | 0;
	      var $103 = $base + 24 | 0;
	      var $i_31 = 0;
	      while (1) {
	        var $i_31;
	        var $120 = ($i_31 << 2) + HEAP32[$101 >> 2] | 0;
	        var $131 = (((HEAP32[$120 >> 2] - HEAP32[$102 >> 2] | 0) / HEAPF32[$103 >> 2] & -1) * $lw & -1) + $4 | 0;
	        HEAP32[$120 >> 2] = $131;
	        var $132 = $i_31 + 1 | 0;
	        if (($132 | 0) >= (HEAP32[$98 >> 2] | 0)) {
	          break $_$156;
	        }
	        var $i_31 = $132;
	      }
	    }
	  } while (0);
	  HEAP32[$base + 28 >> 2] = $4;
	  HEAP32[$base + 32 >> 2] = $7;
	  HEAP32[$base + 40 >> 2] = $10;
	  HEAPF32[$base + 24 >> 2] = $lw;
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_lm3g_apply_weights["X"] = 1;

	function _yy_get_next_buffer($yyscanner) {
	  var $123$s2;
	  var $58$s2;
	  var $18$s2;
	  var $15$s2;
	  var $5$s2;
	  var $2$s2;
	  var __label__;
	  var $2$s2 = ($yyscanner + 12 | 0) >> 2;
	  var $3 = HEAPU32[$2$s2];
	  var $5$s2 = ($yyscanner + 20 | 0) >> 2;
	  var $6 = HEAPU32[$5$s2];
	  var $8 = HEAPU32[$6 + ($3 << 2) >> 2];
	  var $10 = HEAPU32[$8 + 4 >> 2];
	  var $12 = $yyscanner + 80 | 0;
	  var $13 = HEAP32[$12 >> 2];
	  var $15$s2 = ($yyscanner + 36 | 0) >> 2;
	  var $16 = HEAPU32[$15$s2];
	  var $18$s2 = ($yyscanner + 28 | 0) >> 2;
	  if ($16 >>> 0 > ($10 + HEAP32[$18$s2] + 1 | 0) >>> 0) {
	    _yy_fatal_error(STRING_TABLE.__str91774 | 0);
	  } else {
	    var $28 = $16;
	    var $29 = $13;
	    var $30 = $28 - $29 | 0;
	    if ((HEAP32[$8 + 40 >> 2] | 0) == 0) {
	      var $_ = ($30 | 0) == 1 ? 1 : 2;
	      var $_0 = $_;
	    } else {
	      var $34 = $30 - 1 | 0;
	      if (($34 | 0) > 0) {
	        var $lftr_limit = $10 + ($28 - 1 - $29) | 0;
	        var $source_014 = $13;
	        var $dest_015 = $10;
	        while (1) {
	          var $dest_015;
	          var $source_014;
	          var $40 = HEAP8[$source_014];
	          var $41 = $dest_015 + 1 | 0;
	          HEAP8[$dest_015] = $40;
	          if (($41 | 0) == ($lftr_limit | 0)) {
	            break;
	          }
	          var $source_014 = $source_014 + 1 | 0;
	          var $dest_015 = $41;
	        }
	        var $_pre = HEAP32[$2$s2];
	        var $_pre19 = HEAP32[$5$s2];
	        var $45 = $_pre;
	        var $44 = $_pre19;
	        var $43 = HEAP32[$_pre19 + ($_pre << 2) >> 2];
	      } else {
	        var $45 = $3;
	        var $44 = $6;
	        var $43 = $8;
	      }
	      var $43;
	      var $44;
	      var $45;
	      if ((HEAP32[$43 + 44 >> 2] | 0) == 2) {
	        HEAP32[$18$s2] = 0;
	        var $52 = HEAP32[$44 + ($45 << 2) >> 2] + 16 | 0;
	        HEAP32[$52 >> 2] = 0;
	      } else {
	        var $54 = $43;
	        var $53 = $44;
	        while (1) {
	          var $53;
	          var $54;
	          var $num_to_read_0 = HEAP32[$54 + 12 >> 2] - $34 - 1 | 0;
	          if (($num_to_read_0 | 0) >= 1) {
	            __label__ = 20;
	            break;
	          }
	          var $_24 = ($53 | 0) == 0 ? 0 : $54;
	          var $58$s2 = ($_24 + 4 | 0) >> 2;
	          var $59 = HEAPU32[$58$s2];
	          var $62 = HEAP32[$15$s2] - $59 | 0;
	          if ((HEAP32[$_24 + 20 >> 2] | 0) == 0) {
	            HEAP32[$58$s2] = 0;
	            __label__ = 18;
	            break;
	          }
	          var $67 = $_24 + 12 | 0;
	          var $68 = HEAPU32[$67 >> 2];
	          var $69 = $68 << 1;
	          if (($69 | 0) < 1) {
	            var $storemerge2 = ($68 >>> 3) + $68 | 0;
	          } else {
	            var $storemerge2 = $69;
	          }
	          var $storemerge2;
	          HEAP32[$67 >> 2] = $storemerge2;
	          var $76 = _yyrealloc($59, $storemerge2 + 2 | 0);
	          HEAP32[$58$s2] = $76;
	          if (($76 | 0) == 0) {
	            __label__ = 18;
	            break;
	          }
	          var $79 = $76 + $62 | 0;
	          HEAP32[$15$s2] = $79;
	          var $81 = HEAPU32[$5$s2];
	          var $54 = HEAP32[$81 + (HEAP32[$2$s2] << 2) >> 2];
	          var $53 = $81;
	        }
	        if (__label__ == 18) {
	          _yy_fatal_error(STRING_TABLE.__str101775 | 0);
	        } else if (__label__ == 20) {
	          var $_num_to_read_0 = ($num_to_read_0 | 0) > 8192 ? 8192 : $num_to_read_0;
	          var $88 = (HEAP32[$54 + 24 >> 2] | 0) == 0;
	          $_$29 : do {
	            if ($88) {
	              var $121 = ___errno();
	              HEAP32[$121 >> 2] = 0;
	              var $123$s2 = ($yyscanner + 4 | 0) >> 2;
	              while (1) {
	                var $131 = HEAP32[HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 >> 2] + $34 | 0;
	                var $132 = HEAP32[$123$s2];
	                var $133 = _fread($131, 1, $_num_to_read_0, $132);
	                HEAP32[$18$s2] = $133;
	                if (($133 | 0) != 0) {
	                  var $147 = $133;
	                  break $_$29;
	                }
	                var $136 = HEAP32[$123$s2];
	                var $137 = _ferror($136);
	                if (($137 | 0) == 0) {
	                  var $147 = 0;
	                  break $_$29;
	                }
	                var $140 = ___errno();
	                if ((HEAP32[$140 >> 2] | 0) != 4) {
	                  break;
	                }
	                var $145 = ___errno();
	                HEAP32[$145 >> 2] = 0;
	                var $146 = HEAP32[$123$s2];
	                _clearerr($146);
	              }
	              _yy_fatal_error(STRING_TABLE.__str111776 | 0);
	            } else {
	              var $90 = $yyscanner + 4 | 0;
	              var $n_0 = 0;
	              var $c_0 = 42;
	              while (1) {
	                var $c_0;
	                var $n_0;
	                if ($n_0 >>> 0 >= $_num_to_read_0 >>> 0) {
	                  var $c_16 = $c_0;
	                  break;
	                }
	                var $94 = HEAP32[$90 >> 2];
	                var $95 = _getc($94);
	                if (($95 | 0) == -1 || ($95 | 0) == 10) {
	                  var $c_16 = $95;
	                  break;
	                }
	                HEAP8[HEAP32[HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 >> 2] + $n_0 + $34 | 0] = $95 & 255;
	                var $n_0 = $n_0 + 1 | 0;
	                var $c_0 = $95;
	              }
	              var $c_16;
	              do {
	                if (($c_16 | 0) == 10) {
	                  HEAP8[HEAP32[HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 >> 2] + $n_0 + $34 | 0] = 10;
	                  var $n_18 = $n_0 + 1 | 0;
	                } else if (($c_16 | 0) == -1) {
	                  var $115 = HEAP32[$90 >> 2];
	                  var $116 = _ferror($115);
	                  if (($116 | 0) == 0) {
	                    var $n_18 = $n_0;
	                    break;
	                  }
	                  _yy_fatal_error(STRING_TABLE.__str111776 | 0);
	                } else {
	                  var $n_18 = $n_0;
	                }
	              } while (0);
	              var $n_18;
	              HEAP32[$18$s2] = $n_18;
	              var $147 = $n_18;
	            }
	          } while (0);
	          var $147;
	          var $152 = HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 16 | 0;
	          HEAP32[$152 >> 2] = $147;
	        }
	      }
	      if ((HEAP32[$18$s2] | 0) == 0) {
	        if (($34 | 0) == 0) {
	          var $161 = HEAP32[$yyscanner + 4 >> 2];
	          _yyrestart($161, $yyscanner);
	          var $ret_val_0 = 1;
	        } else {
	          var $167 = HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 44 | 0;
	          HEAP32[$167 >> 2] = 2;
	          var $ret_val_0 = 2;
	        }
	      } else {
	        var $ret_val_0 = 0;
	      }
	      var $ret_val_0;
	      var $169 = HEAPU32[$18$s2];
	      var $170 = $169 + $34 | 0;
	      var $171 = HEAPU32[$2$s2];
	      var $172 = HEAPU32[$5$s2];
	      var $174 = HEAPU32[$172 + ($171 << 2) >> 2];
	      if ($170 >>> 0 > HEAPU32[$174 + 12 >> 2] >>> 0) {
	        var $180 = ($169 >> 1) + $170 | 0;
	        var $182 = HEAP32[$174 + 4 >> 2];
	        var $183 = _yyrealloc($182, $180);
	        var $188 = HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 | 0;
	        HEAP32[$188 >> 2] = $183;
	        var $189 = HEAPU32[$2$s2];
	        var $190 = HEAP32[$5$s2];
	        if ((HEAP32[HEAP32[$190 + ($189 << 2) >> 2] + 4 >> 2] | 0) == 0) {
	          _yy_fatal_error(STRING_TABLE.__str121777 | 0);
	        } else {
	          var $200 = $189;
	          var $199 = $190;
	          var $198 = HEAP32[$18$s2];
	        }
	      } else {
	        var $200 = $171;
	        var $199 = $172;
	        var $198 = $169;
	      }
	      var $198;
	      var $199;
	      var $200;
	      var $201 = $198 + $34 | 0;
	      HEAP32[$18$s2] = $201;
	      HEAP8[HEAP32[HEAP32[$199 + ($200 << 2) >> 2] + 4 >> 2] + $201 | 0] = 0;
	      HEAP8[HEAP32[HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 >> 2] + HEAP32[$18$s2] + 1 | 0] = 0;
	      var $221 = HEAP32[HEAP32[HEAP32[$5$s2] + (HEAP32[$2$s2] << 2) >> 2] + 4 >> 2];
	      HEAP32[$12 >> 2] = $221;
	      var $_0 = $ret_val_0;
	    }
	    var $_0;
	    return $_0;
	  }
	  return null;
	}

	_yy_get_next_buffer["X"] = 1;

	function _yy_fatal_error($msg) {
	  var $1 = HEAP32[_stderr >> 2];
	  var $2 = _fprintf($1, STRING_TABLE.__str32302 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $msg, tempInt));
	  _exit(2);
	}

	function _ngram_class_prob($lmclass, $wid) {
	  var $18$s2;
	  var __label__;
	  var $1 = $wid & 16777215;
	  var $3 = HEAP32[$lmclass + 4 >> 2];
	  var $4 = ($1 | 0) < ($3 | 0);
	  do {
	    if (!$4) {
	      if (($1 | 0) > (HEAP32[$lmclass + 8 >> 2] + $3 | 0)) {
	        __label__ = 4;
	        break;
	      }
	      var $_0 = HEAP32[HEAP32[$lmclass + 12 >> 2] + ($1 - $3 << 2) >> 2];
	      __label__ = 10;
	      break;
	    }
	    __label__ = 4;
	  } while (0);
	  $_$139 : do {
	    if (__label__ == 4) {
	      var $15 = $lmclass + 16 | 0;
	      var $hash_0 = HEAP32[$lmclass + 20 >> 2] - 1 & $wid;
	      while (1) {
	        var $hash_0;
	        if (($hash_0 | 0) == -1) {
	          var $_0 = 1;
	          break $_$139;
	        }
	        var $18$s2 = HEAP32[$15 >> 2] >> 2;
	        if ((HEAP32[$18$s2 + ($hash_0 * 3 | 0)] | 0) == ($wid | 0)) {
	          break;
	        }
	        var $hash_0 = HEAP32[$18$s2 + ($hash_0 * 3 | 0) + 2];
	      }
	      var $_0 = HEAP32[$18$s2 + ($hash_0 * 3 | 0) + 1];
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_add_ug($base, $lm3g, $wid, $lweight) {
	  var $12$s2;
	  var $7$s2;
	  var $4$s2;
	  if (($wid | 0) < 0) {
	    ___assert_func(STRING_TABLE.__str11787 | 0, 141, STRING_TABLE.___func___lm3g_add_ug | 0, STRING_TABLE.__str21788 | 0);
	  }
	  var $4$s2 = ($lm3g | 0) >> 2;
	  var $6 = HEAP32[$4$s2];
	  var $7$s2 = ($base + 8 | 0) >> 2;
	  var $9 = HEAP32[$7$s2] * 12 | 0;
	  var $10 = ___ckd_realloc__($6, $9, STRING_TABLE.__str11787 | 0, 145);
	  var $11 = $10;
	  HEAP32[$4$s2] = $11;
	  var $12$s2 = ($base + 4 | 0) >> 2;
	  var $14 = HEAP32[HEAP32[$12$s2] >> 2];
	  var $16 = $11 + $14 * 12 | 0;
	  var $19 = (HEAP32[$7$s2] - $14) * 12 | 0;
	  _memset($16, 0, $19, 4);
	  var $20 = $lm3g + 40 | 0;
	  var $22 = HEAP32[$20 >> 2];
	  var $24 = HEAP32[$7$s2] << 2;
	  var $25 = ___ckd_realloc__($22, $24, STRING_TABLE.__str11787 | 0, 150);
	  var $26 = $25;
	  HEAP32[$20 >> 2] = $26;
	  var $28 = HEAP32[HEAP32[$12$s2] >> 2];
	  var $30 = ($28 << 2) + $26 | 0;
	  var $33 = HEAP32[$7$s2] - $28 << 2;
	  _memset($30, 0, $33, 4);
	  var $35 = HEAP32[$base + 36 >> 2];
	  var $39 = $35 + $lweight + HEAP32[$base + 32 >> 2] | 0;
	  var $41 = HEAP32[$base + 20 >> 2];
	  var $44 = HEAP32[$base + 40 >> 2] + $35 | 0;
	  var $45 = _logmath_add($41, $39, $44);
	  var $48 = HEAP32[$4$s2] + $wid * 12 | 0;
	  HEAP32[$48 >> 2] = $45;
	  var $51 = HEAP32[$4$s2] + $wid * 12 + 4 | 0;
	  HEAP32[$51 >> 2] = 0;
	  var $53 = HEAP32[$4$s2] + $wid * 12 + 8 | 0;
	  HEAP32[$53 >> 2] = 0;
	  var $54 = HEAP32[$12$s2];
	  var $56 = HEAP32[$54 >> 2] + 1 | 0;
	  HEAP32[$54 >> 2] = $56;
	  var $57 = HEAP32[$12$s2];
	  if ((HEAP32[$57 >> 2] | 0) <= ($wid | 0)) {
	    HEAP32[$57 >> 2] = $wid + 1 | 0;
	  }
	  return $45;
	  return null;
	}

	_lm3g_add_ug["X"] = 1;

	function _init_sorted_list($l) {
	  var $3$s2;
	  var $1 = ___ckd_calloc__(65534, 8, STRING_TABLE.__str11787 | 0, 183);
	  var $3$s2 = ($l | 0) >> 2;
	  HEAP32[$3$s2] = $1;
	  HEAP32[$1 >> 2] = -2147483648;
	  HEAP16[HEAP32[$3$s2] + 4 >> 1] = 0;
	  HEAP16[HEAP32[$3$s2] + 6 >> 1] = 0;
	  HEAP32[$l + 4 >> 2] = 1;
	  return;
	  return;
	}

	function _free_sorted_list($l_0_0_val) {
	  var $1 = $l_0_0_val;
	  _free($1);
	  return;
	  return;
	}

	function _vals_in_sorted_list($l) {
	  var $1$s2;
	  var $1$s2 = ($l + 4 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = ___ckd_calloc__($2, 4, STRING_TABLE.__str11787 | 0, 202);
	  var $4 = $3;
	  var $6 = (HEAP32[$1$s2] | 0) > 0;
	  $_$11 : do {
	    if ($6) {
	      var $7 = $l | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $12 = HEAPF32[HEAP32[$7 >> 2] + ($i_01 << 3) >> 2];
	        HEAPF32[$4 + ($i_01 << 2) >> 2] = $12;
	        var $13 = $i_01 + 1 | 0;
	        if (($13 | 0) >= (HEAP32[$1$s2] | 0)) {
	          break $_$11;
	        }
	        var $i_01 = $13;
	      }
	    }
	  } while (0);
	  return $4;
	  return null;
	}

	function _sorted_id($l, $val) {
	  var $41$s2;
	  var $16$s2;
	  var $2$s2;
	  var $val$s2 = $val >> 2;
	  var __stackBase__ = STACKTOP;
	  var $1 = HEAP32[$val$s2];
	  var $2$s2 = ($l | 0) >> 2;
	  var $3 = HEAPU32[$2$s2];
	  var $i_0 = 0;
	  $_$17 : while (1) {
	    var $i_0;
	    var $7 = HEAP32[$3 + ($i_0 << 3) >> 2];
	    if (($1 | 0) == ($7 | 0)) {
	      var $_0 = $i_0;
	      break;
	    }
	    var $10 = ($1 | 0) < ($7 | 0);
	    do {
	      if ($10) {
	        var $12 = ($i_0 << 3) + $3 + 4 | 0;
	        var $13 = HEAPU16[$12 >> 1];
	        if ($13 << 16 >> 16 != 0) {
	          var $i_0_be_in = $13;
	          break;
	        }
	        var $16$s2 = ($l + 4 | 0) >> 2;
	        var $17 = HEAP32[$16$s2];
	        if (($17 | 0) > 65533) {
	          __E__pr_header(STRING_TABLE.__str11787 | 0, 220, STRING_TABLE.__str212436 | 0);
	          var $20 = HEAP32[$val$s2];
	          var $24 = HEAP32[HEAP32[$2$s2] + ($i_0 << 3) >> 2];
	          __E__pr_warn(STRING_TABLE.__str41790 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $20, HEAP32[tempInt + 4 >> 2] = $24, tempInt));
	          var $_0 = $i_0;
	          break $_$17;
	        }
	        HEAP16[$12 >> 1] = $17 & 65535;
	        var $28 = HEAP32[$16$s2] + 1 | 0;
	        HEAP32[$16$s2] = $28;
	        var $29 = HEAPU32[$2$s2];
	        var $32 = HEAPU16[$29 + ($i_0 << 3) + 4 >> 1] & 65535;
	        var $33 = HEAP32[$val$s2];
	        HEAP32[$29 + ($32 << 3) >> 2] = $33;
	        var $_0 = $32;
	        break $_$17;
	      } else {
	        var $37 = ($i_0 << 3) + $3 + 6 | 0;
	        var $38 = HEAPU16[$37 >> 1];
	        if ($38 << 16 >> 16 != 0) {
	          var $i_0_be_in = $38;
	          break;
	        }
	        var $41$s2 = ($l + 4 | 0) >> 2;
	        var $42 = HEAP32[$41$s2];
	        if (($42 | 0) > 65533) {
	          __E__pr_header(STRING_TABLE.__str11787 | 0, 238, STRING_TABLE.__str212436 | 0);
	          var $45 = HEAP32[$val$s2];
	          var $47 = ($i_0 << 3) + HEAP32[$2$s2] | 0;
	          __E__pr_warn(STRING_TABLE.__str41790 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $45, HEAP32[tempInt + 4 >> 2] = $47, tempInt));
	          var $_0 = $i_0;
	          break $_$17;
	        }
	        HEAP16[$37 >> 1] = $42 & 65535;
	        var $51 = HEAP32[$41$s2] + 1 | 0;
	        HEAP32[$41$s2] = $51;
	        var $52 = HEAPU32[$2$s2];
	        var $55 = HEAPU16[$52 + ($i_0 << 3) + 6 >> 1] & 65535;
	        var $56 = HEAP32[$val$s2];
	        HEAP32[$52 + ($55 << 3) >> 2] = $56;
	        var $_0 = $55;
	        break $_$17;
	      }
	    } while (0);
	    var $i_0_be_in;
	    var $i_0 = $i_0_be_in & 65535;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_sorted_id["X"] = 1;

	function _ngram_model_read($config, $file_name, $lmath) {
	  var __label__;
	  var $1 = _ngram_model_arpa_read($file_name, $lmath);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if ($2) {
	      var $4 = _ngram_model_dmp_read($config, $file_name, $lmath);
	      if (($4 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 12;
	        break;
	      }
	      var $model_0 = $4;
	      __label__ = 4;
	      break;
	    } else {
	      var $model_0 = $1;
	      __label__ = 4;
	    }
	  } while (0);
	  do {
	    if (__label__ == 4) {
	      var $model_0;
	      if (($config | 0) == 0) {
	        var $_0 = $model_0;
	        break;
	      }
	      var $9 = _cmd_ln_exists_r($config, STRING_TABLE.__str2232792 | 0);
	      if (($9 | 0) == 0) {
	        var $lw_0 = 1;
	      } else {
	        var $config_idx2_val = HEAP32[$config + 4 >> 2];
	        var $12 = _cmd_ln_float_r($config_idx2_val, STRING_TABLE.__str2232792 | 0);
	        var $lw_0 = $12;
	      }
	      var $lw_0;
	      var $15 = _cmd_ln_exists_r($config, STRING_TABLE.__str2352804 | 0);
	      if (($15 | 0) == 0) {
	        var $wip_0 = 1;
	      } else {
	        var $config_idx1_val = HEAP32[$config + 4 >> 2];
	        var $18 = _cmd_ln_float_r($config_idx1_val, STRING_TABLE.__str2352804 | 0);
	        var $wip_0 = $18;
	      }
	      var $wip_0;
	      var $21 = _cmd_ln_exists_r($config, STRING_TABLE.__str2432812 | 0);
	      if (($21 | 0) == 0) {
	        var $uw_0 = 1;
	      } else {
	        var $config_idx_val = HEAP32[$config + 4 >> 2];
	        var $24 = _cmd_ln_float_r($config_idx_val, STRING_TABLE.__str2432812 | 0);
	        var $uw_0 = $24;
	      }
	      var $uw_0;
	      _ngram_model_apply_weights($model_0, $lw_0, $wip_0, $uw_0);
	      var $_0 = $model_0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_model_apply_weights($model, $lw, $wip, $uw) {
	  var $4 = HEAP32[HEAP32[$model + 64 >> 2] + 4 >> 2];
	  var $5 = FUNCTION_TABLE[$4]($model, $lw, $wip, $uw);
	  return;
	  return;
	}

	function _ngram_model_init($base, $funcs, $lmath, $n, $n_unigram) {
	  var $28$s2;
	  var $5$s2;
	  var $base$s2 = $base >> 2;
	  HEAP32[$base$s2] = 1;
	  HEAP32[$base$s2 + 16] = $funcs;
	  HEAP8[$base + 16 | 0] = $n & 255;
	  var $5$s2 = ($base + 4 | 0) >> 2;
	  if ((HEAP32[$5$s2] | 0) == 0) {
	    var $9 = ___ckd_calloc__(3, 4, STRING_TABLE.__str61797 | 0, 201);
	    HEAP32[$5$s2] = $9;
	  }
	  var $12 = $base + 20 | 0;
	  if ((HEAP32[$12 >> 2] | 0) != ($lmath | 0)) {
	    HEAPF32[$base$s2 + 6] = 1;
	    HEAP32[$base$s2 + 7] = 0;
	    HEAP32[$base$s2 + 8] = 0;
	    var $20 = 1 / ($n_unigram | 0);
	    var $21 = _logmath_log($lmath, $20);
	    HEAP32[$base$s2 + 9] = $21;
	    var $lmath_idx1 = $lmath + 60 | 0;
	    var $lmath_idx1_val = HEAP32[$lmath_idx1 >> 2];
	    var $23 = _logmath_get_zero($lmath_idx1_val);
	    HEAP32[$base$s2 + 10] = $23;
	    var $lmath_idx_val = HEAP32[$lmath_idx1 >> 2];
	    var $25 = _logmath_get_zero($lmath_idx_val);
	    HEAP32[$base$s2 + 11] = $25;
	    HEAP32[$12 >> 2] = $lmath;
	  }
	  var $28$s2 = ($base + 48 | 0) >> 2;
	  var $29 = HEAP32[$28$s2];
	  if (($29 | 0) == 0) {
	    var $51 = ___ckd_calloc__($n_unigram, 4, STRING_TABLE.__str61797 | 0, 226);
	    var $storemerge_in = $51;
	  } else {
	    var $34 = HEAP8[$base + 18 | 0] << 24 >> 24 == 0;
	    $_$59 : do {
	      if ($34) {
	        var $46 = $29;
	      } else {
	        var $35 = $base + 12 | 0;
	        if ((HEAP32[$35 >> 2] | 0) <= 0) {
	          var $46 = $29;
	          break;
	        }
	        var $i_01 = 0;
	        var $38 = $29;
	        while (1) {
	          var $38;
	          var $i_01;
	          var $40 = HEAP32[$38 + ($i_01 << 2) >> 2];
	          _ckd_free($40);
	          var $42 = ($i_01 << 2) + HEAP32[$28$s2] | 0;
	          HEAP32[$42 >> 2] = 0;
	          var $43 = $i_01 + 1 | 0;
	          var $_pre3 = HEAP32[$28$s2];
	          if (($43 | 0) >= (HEAP32[$35 >> 2] | 0)) {
	            var $46 = $_pre3;
	            break $_$59;
	          }
	          var $i_01 = $43;
	          var $38 = $_pre3;
	        }
	      }
	    } while (0);
	    var $46;
	    var $48 = $n_unigram << 2;
	    var $49 = ___ckd_realloc__($46, $48, STRING_TABLE.__str61797 | 0, 223);
	    var $storemerge_in = $49;
	  }
	  var $storemerge_in;
	  HEAP32[$28$s2] = $storemerge_in;
	  var $53 = $base + 52 | 0;
	  var $54 = HEAP32[$53 >> 2];
	  if (($54 | 0) == 0) {
	    var $58 = _hash_table_new($n_unigram, 0);
	    HEAP32[$53 >> 2] = $58;
	  } else {
	    _hash_table_empty($54);
	  }
	  HEAP32[$base$s2 + 3] = $n_unigram;
	  HEAP32[$base$s2 + 2] = $n_unigram;
	  var $62 = HEAP32[$5$s2];
	  HEAP32[$62 >> 2] = $n_unigram;
	  return;
	  return;
	}

	_ngram_model_init["X"] = 1;

	function _ngram_model_flush($model) {
	  var $2 = HEAP32[$model + 64 >> 2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if (!$3) {
	      var $6 = HEAP32[$2 + 20 >> 2];
	      if (($6 | 0) == 0) {
	        break;
	      }
	      FUNCTION_TABLE[$6]($model);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _ngram_model_free($model) {
	  var __label__;
	  var $1 = ($model | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $model | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$model + 64 >> 2];
	      var $10 = ($9 | 0) == 0;
	      do {
	        if (!$10) {
	          var $13 = HEAP32[$9 >> 2];
	          if (($13 | 0) == 0) {
	            break;
	          }
	          FUNCTION_TABLE[$13]($model);
	        }
	      } while (0);
	      var $19 = HEAP8[$model + 18 | 0] << 24 >> 24 == 0;
	      $_$83 : do {
	        if (!$19) {
	          var $26 = $model + 12 | 0;
	          var $28 = (HEAP32[$26 >> 2] | 0) > 0;
	          $_$104 : do {
	            if ($28) {
	              var $29 = $model + 48 | 0;
	              var $i_01 = 0;
	              while (1) {
	                var $i_01;
	                var $33 = HEAP32[HEAP32[$29 >> 2] + ($i_01 << 2) >> 2];
	                _ckd_free($33);
	                var $34 = $i_01 + 1 | 0;
	                if (($34 | 0) >= (HEAP32[$26 >> 2] | 0)) {
	                  break $_$104;
	                }
	                var $i_01 = $34;
	              }
	            }
	          } while (0);
	          var $74 = HEAP8[$model + 17 | 0];
	          var $_pre_phi = $model + 60 | 0;
	          __label__ = 24;
	          break;
	        }
	        var $20 = $model + 17 | 0;
	        var $23 = $model + 60 | 0;
	        if (HEAP8[$20] << 24 >> 24 == 0) {
	          var $_lcssa = HEAP32[$23 >> 2];
	          __label__ = 26;
	          break;
	        }
	        var $25 = $model + 48 | 0;
	        var $i_113 = 0;
	        while (1) {
	          var $i_113;
	          var $39 = HEAP32[HEAP32[$23 >> 2] + ($i_113 << 2) >> 2];
	          var $40 = $39 + 8 | 0;
	          var $42 = (HEAP32[$40 >> 2] | 0) > 0;
	          $_$90 : do {
	            if ($42) {
	              var $43 = $39 + 4 | 0;
	              var $j_06 = 0;
	              while (1) {
	                var $j_06;
	                var $49 = HEAP32[HEAP32[$25 >> 2] + (HEAP32[$43 >> 2] + $j_06 << 2) >> 2];
	                _ckd_free($49);
	                var $50 = $j_06 + 1 | 0;
	                if (($50 | 0) >= (HEAP32[$40 >> 2] | 0)) {
	                  break $_$90;
	                }
	                var $j_06 = $50;
	              }
	            }
	          } while (0);
	          var $53 = $39 + 20 | 0;
	          var $54 = HEAP32[$53 >> 2];
	          var $55 = ($54 | 0) > 0;
	          $_$95 : do {
	            if ($55) {
	              var $56 = $39 + 16 | 0;
	              var $j_19 = 0;
	              var $57 = $54;
	              while (1) {
	                var $57;
	                var $j_19;
	                var $60 = HEAP32[(HEAP32[$56 >> 2] >> 2) + ($j_19 * 3 | 0)];
	                if (($60 | 0) == -1) {
	                  var $67 = $57;
	                } else {
	                  var $65 = HEAP32[HEAP32[$25 >> 2] + ($60 << 2) >> 2];
	                  _ckd_free($65);
	                  var $67 = HEAP32[$53 >> 2];
	                }
	                var $67;
	                var $68 = $j_19 + 1 | 0;
	                if (($68 | 0) >= ($67 | 0)) {
	                  break $_$95;
	                }
	                var $j_19 = $68;
	                var $57 = $67;
	              }
	            }
	          } while (0);
	          var $70 = $i_113 + 1 | 0;
	          var $71 = HEAPU8[$20];
	          if (($70 | 0) >= ($71 & 255 | 0)) {
	            var $74 = $71;
	            var $_pre_phi = $23;
	            __label__ = 24;
	            break $_$83;
	          }
	          var $i_113 = $70;
	        }
	      } while (0);
	      $_$109 : do {
	        if (__label__ == 24) {
	          var $_pre_phi;
	          var $74;
	          var $75 = $model + 17 | 0;
	          var $77 = HEAPU32[$_pre_phi >> 2];
	          if ($74 << 24 >> 24 == 0) {
	            var $_lcssa = $77;
	            break;
	          }
	          var $i_23 = 0;
	          var $78 = $77;
	          while (1) {
	            var $78;
	            var $i_23;
	            var $80 = HEAP32[$78 + ($i_23 << 2) >> 2];
	            _ngram_class_free($80);
	            var $81 = $i_23 + 1 | 0;
	            var $85 = HEAP32[$_pre_phi >> 2];
	            if (($81 | 0) >= (HEAPU8[$75] & 255 | 0)) {
	              var $_lcssa = $85;
	              break $_$109;
	            }
	            var $i_23 = $81;
	            var $78 = $85;
	          }
	        }
	      } while (0);
	      var $_lcssa;
	      _ckd_free($_lcssa);
	      var $88 = HEAP32[$model + 52 >> 2];
	      _hash_table_free($88);
	      var $91 = HEAP32[$model + 48 >> 2];
	      _ckd_free($91);
	      var $94 = HEAP32[$model + 4 >> 2];
	      _ckd_free($94);
	      var $95 = $model;
	      _ckd_free($95);
	    }
	  } while (0);
	  return;
	  return;
	}

	_ngram_model_free["X"] = 1;

	function _ngram_class_free($lmclass) {
	  var $3 = HEAP32[$lmclass + 16 >> 2];
	  _ckd_free($3);
	  var $6 = HEAP32[$lmclass + 12 >> 2];
	  _ckd_free($6);
	  var $7 = $lmclass;
	  _ckd_free($7);
	  return;
	  return;
	}

	function _ngram_ng_score($model, $wid, $history, $n_hist, $n_used) {
	  var $1 = ($wid | 0) == -1;
	  do {
	    if ($1) {
	      var $_0 = HEAP32[$model + 44 >> 2];
	    } else {
	      if (($wid | 0) < 0) {
	        var $13 = HEAPU32[HEAP32[$model + 60 >> 2] + (($wid >>> 24 & 127) << 2) >> 2];
	        var $14 = _ngram_class_prob($13, $wid);
	        if (($14 | 0) == 1) {
	          var $_0 = HEAP32[$model + 44 >> 2];
	          break;
	        }
	        var $_01 = HEAP32[$13 >> 2];
	        var $class_weight_0 = $14;
	      } else {
	        var $_01 = $wid;
	        var $class_weight_0 = 0;
	      }
	      var $class_weight_0;
	      var $_01;
	      var $23 = ($n_hist | 0) > 0;
	      $_$126 : do {
	        if ($23) {
	          var $24 = $model + 60 | 0;
	          var $i_02 = 0;
	          while (1) {
	            var $i_02;
	            var $26 = ($i_02 << 2) + $history | 0;
	            var $27 = HEAPU32[$26 >> 2];
	            if (($27 | 0) < -1) {
	              var $36 = HEAP32[HEAP32[HEAP32[$24 >> 2] + (($27 >>> 24 & 127) << 2) >> 2] >> 2];
	              HEAP32[$26 >> 2] = $36;
	            }
	            var $38 = $i_02 + 1 | 0;
	            if (($38 | 0) == ($n_hist | 0)) {
	              break $_$126;
	            }
	            var $i_02 = $38;
	          }
	        }
	      } while (0);
	      var $42 = HEAP32[HEAP32[$model + 64 >> 2] + 8 >> 2];
	      var $43 = FUNCTION_TABLE[$42]($model, $_01, $history, $n_hist, $n_used);
	      var $_0 = $43 + $class_weight_0 | 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_ng_score["X"] = 1;

	function _ngram_wid($model, $word) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $1 = $model + 52 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = _hash_table_lookup_int32($2, $word, $val);
	  if (($3 | 0) == -1) {
	    var $model_idx_val = HEAP32[$1 >> 2];
	    var $6 = _ngram_unknown_wid($model_idx_val);
	    var $_0 = $6;
	  } else {
	    var $_0 = HEAP32[$val >> 2];
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _ngram_tg_score($model, $w3, $w2, $w1, $n_used) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $hist = __stackBase__;
	  var $1 = $hist | 0;
	  HEAP32[$1 >> 2] = $w2;
	  HEAP32[$hist + 4 >> 2] = $w1;
	  var $3 = _ngram_ng_score($model, $w3, $1, 2, $n_used);
	  STACKTOP = __stackBase__;
	  return $3;
	  return null;
	}

	function _ngram_bg_score($model, $w2, $w1, $n_used) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $1 = __stackBase__;
	  HEAP32[$1 >> 2] = $w1;
	  var $2 = _ngram_ng_score($model, $w2, $1, 1, $n_used);
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	function _ngram_ng_prob($model, $wid, $history, $n_hist, $n_used) {
	  var $1 = ($wid | 0) == -1;
	  do {
	    if ($1) {
	      var $_0 = HEAP32[$model + 44 >> 2];
	    } else {
	      if (($wid | 0) < 0) {
	        var $13 = HEAP32[HEAP32[$model + 60 >> 2] + (($wid >>> 24 & 127) << 2) >> 2];
	        var $14 = _ngram_class_prob($13, $wid);
	        if (($14 | 0) == 1) {
	          var $_0 = 1;
	          break;
	        }
	        var $_01 = HEAP32[$13 >> 2];
	        var $class_weight_0 = $14;
	      } else {
	        var $_01 = $wid;
	        var $class_weight_0 = 0;
	      }
	      var $class_weight_0;
	      var $_01;
	      var $20 = ($n_hist | 0) > 0;
	      $_$162 : do {
	        if ($20) {
	          var $21 = $model + 60 | 0;
	          var $i_02 = 0;
	          while (1) {
	            var $i_02;
	            var $23 = ($i_02 << 2) + $history | 0;
	            var $24 = HEAPU32[$23 >> 2];
	            if (($24 | 0) < -1) {
	              var $33 = HEAP32[HEAP32[HEAP32[$21 >> 2] + (($24 >>> 24 & 127) << 2) >> 2] >> 2];
	              HEAP32[$23 >> 2] = $33;
	            }
	            var $35 = $i_02 + 1 | 0;
	            if (($35 | 0) == ($n_hist | 0)) {
	              break $_$162;
	            }
	            var $i_02 = $35;
	          }
	        }
	      } while (0);
	      var $39 = HEAP32[HEAP32[$model + 64 >> 2] + 12 >> 2];
	      var $40 = FUNCTION_TABLE[$39]($model, $_01, $history, $n_hist, $n_used);
	      var $_0 = $40 + $class_weight_0 | 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_ng_prob["X"] = 1;

	function _ngram_unknown_wid($model_0_16_val) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $1 = _hash_table_lookup_int32($model_0_16_val, STRING_TABLE.__str192026 | 0, $val);
	  var $_0 = ($1 | 0) == -1 ? -1 : HEAP32[$val >> 2];
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _ngram_iter_init($itor, $model, $m, $successor) {
	  HEAP32[$itor >> 2] = $model;
	  var $4 = HEAPU8[$model + 16 | 0] & 255;
	  var $5 = ___ckd_calloc__($4, 4, STRING_TABLE.__str61797 | 0, 683);
	  HEAP32[$itor + 4 >> 2] = $5;
	  HEAP16[$itor + 8 >> 1] = $m & 65535;
	  HEAP16[$itor + 10 >> 1] = $successor & 65535;
	  return;
	  return;
	}

	function _ngram_iter_free($itor) {
	  var $3 = HEAP32[$itor + 4 >> 2];
	  _ckd_free($3);
	  var $9 = HEAP32[HEAP32[HEAP32[$itor >> 2] + 64 >> 2] + 44 >> 2];
	  FUNCTION_TABLE[$9]($itor);
	  return;
	  return;
	}

	function _ngram_add_word_internal($model, $word, $classid) {
	  var $_pre_phi$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $dummy = __stackBase__;
	  var $1$s2 = ($model + 12 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if (($classid | 0) > -1) {
	    var $wid_0 = $classid << 24 | $2 | -2147483648;
	  } else {
	    var $wid_0 = $2;
	  }
	  var $wid_0;
	  var $9 = $model + 52 | 0;
	  var $10 = HEAP32[$9 >> 2];
	  var $11 = _hash_table_lookup($10, $word, $dummy);
	  if (($11 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str61797 | 0, 809, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str191810 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $word, tempInt));
	    var $_0 = -1;
	  } else {
	    var $16 = $model + 8 | 0;
	    var $17 = HEAP32[$16 >> 2];
	    if ((HEAP32[$1$s2] | 0) < ($17 | 0)) {
	      var $_pre_phi = $model + 48 | 0, $_pre_phi$s2 = $_pre_phi >> 2;
	    } else {
	      var $20 = $17 + 10 | 0;
	      HEAP32[$16 >> 2] = $20;
	      var $21 = $model + 48 | 0;
	      var $23 = HEAP32[$21 >> 2];
	      var $24 = $20 << 2;
	      var $25 = ___ckd_realloc__($23, $24, STRING_TABLE.__str61797 | 0, 816);
	      var $26 = $25;
	      HEAP32[$21 >> 2] = $26;
	      var $_pre_phi = $21, $_pre_phi$s2 = $_pre_phi >> 2;
	    }
	    var $_pre_phi;
	    var $28 = ___ckd_salloc__($word, STRING_TABLE.__str61797 | 0, 820);
	    var $31 = (HEAP32[$1$s2] << 2) + HEAP32[$_pre_phi$s2] | 0;
	    HEAP32[$31 >> 2] = $28;
	    var $32 = HEAP32[$9 >> 2];
	    var $36 = HEAP32[HEAP32[$_pre_phi$s2] + (HEAP32[$1$s2] << 2) >> 2];
	    var $37 = $wid_0;
	    var $38 = _hash_table_enter($32, $36, $37);
	    if (($38 | 0) != ($wid_0 | 0)) {
	      __E__pr_header(STRING_TABLE.__str61797 | 0, 823, STRING_TABLE.__str102579 | 0);
	      var $45 = HEAP32[HEAP32[$_pre_phi$s2] + (HEAP32[$1$s2] << 2) >> 2];
	      __E__pr_warn(STRING_TABLE.__str201811 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $45, HEAP32[tempInt + 4 >> 2] = $37, tempInt));
	    }
	    var $48 = HEAP32[$1$s2] + 1 | 0;
	    HEAP32[$1$s2] = $48;
	    var $_0 = $wid_0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_add_word_internal["X"] = 1;

	function _ngram_model_add_word($model, $word, $weight) {
	  var $2 = HEAP32[$model + 44 >> 2];
	  var $3 = _ngram_add_word_internal($model, $word, -1);
	  var $4 = ($3 | 0) == -1;
	  do {
	    if ($4) {
	      var $_0 = -1;
	    } else {
	      var $7 = HEAP32[$model + 64 >> 2];
	      var $8 = ($7 | 0) == 0;
	      do {
	        if ($8) {
	          var $prob_0 = $2;
	        } else {
	          var $11 = HEAP32[$7 + 16 >> 2];
	          if (($11 | 0) == 0) {
	            var $prob_0 = $2;
	            break;
	          }
	          var $15 = HEAP32[$model + 20 >> 2];
	          var $16 = $weight;
	          var $17 = _logmath_log($15, $16);
	          var $18 = FUNCTION_TABLE[$11]($model, $3, $17);
	          var $prob_0 = $18;
	        }
	      } while (0);
	      var $prob_0;
	      if (($prob_0 | 0) != 0) {
	        var $_0 = $3;
	        break;
	      }
	      if (HEAP8[$model + 18 | 0] << 24 >> 24 == 0) {
	        var $_0 = -1;
	        break;
	      }
	      var $29 = HEAP32[HEAP32[$model + 48 >> 2] + ($3 << 2) >> 2];
	      _ckd_free($29);
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_class_new($model, $tag_wid, $start_wid, $classwords) {
	  var $29$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = ___ckd_calloc__(1, 28, STRING_TABLE.__str61797 | 0, 860), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  HEAP32[$1$s2] = $tag_wid;
	  HEAP32[$1$s2 + 1] = $start_wid;
	  var $6 = _glist_count($classwords);
	  HEAP32[$1$s2 + 2] = $6;
	  var $9 = ___ckd_calloc__($6, 4, STRING_TABLE.__str61797 | 0, 865);
	  var $12 = $1 + 12 | 0;
	  HEAP32[$12 >> 2] = $9;
	  HEAP32[$1$s2 + 4] = 0;
	  HEAP32[$1$s2 + 5] = 0;
	  var $17 = ($classwords | 0) == 0;
	  do {
	    if ($17) {
	      var $tprob_0_lcssa12 = 0;
	      __label__ = 5;
	    } else {
	      var $gn_06 = $classwords;
	      var $tprob_07 = 0;
	      while (1) {
	        var $tprob_07;
	        var $gn_06;
	        var $18 = $gn_06 | 0;
	        var $19 = (tempDoubleI32[0] = HEAP32[$18 >> 2], tempDoubleI32[1] = HEAP32[$18 + 4 >> 2], tempDoubleF64[0]);
	        var $21 = $tprob_07 + $19;
	        var $23 = HEAP32[$gn_06 + 8 >> 2];
	        if (($23 | 0) == 0) {
	          break;
	        }
	        var $gn_06 = $23;
	        var $tprob_07 = $21;
	      }
	      var $phitmp = $21;
	      if ($phitmp > 1.1 | $phitmp < .9) {
	        var $tprob_0_lcssa12 = $phitmp;
	        __label__ = 5;
	        break;
	      }
	      __label__ = 6;
	      break;
	    }
	  } while (0);
	  $_$31 : do {
	    if (__label__ == 5) {
	      var $tprob_0_lcssa12;
	      __E__pr_header(STRING_TABLE.__str61797 | 0, 873, STRING_TABLE.__str212436 | 0);
	      __E__pr_warn(STRING_TABLE.__str211812 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $tprob_0_lcssa12, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	      if ($17) {
	        __label__ = 10;
	        break;
	      }
	      var $gn_13 = $classwords;
	      while (1) {
	        var $gn_13;
	        var $29$s2 = ($gn_13 | 0) >> 2;
	        var $30 = (tempDoubleI32[0] = HEAP32[$29$s2], tempDoubleI32[1] = HEAP32[$29$s2 + 1], tempDoubleF64[0]);
	        var $31 = $30 / $tprob_0_lcssa12;
	        tempDoubleF64[0] = $31, HEAP32[$29$s2] = tempDoubleI32[0], HEAP32[$29$s2 + 1] = tempDoubleI32[1];
	        var $33 = HEAP32[$gn_13 + 8 >> 2];
	        if (($33 | 0) == 0) {
	          __label__ = 6;
	          break $_$31;
	        }
	        var $gn_13 = $33;
	      }
	    }
	  } while (0);
	  $_$35 : do {
	    if (__label__ == 6) {
	      if ($17) {
	        break;
	      }
	      var $28 = $model + 20 | 0;
	      var $gn_21 = $classwords;
	      var $i_02 = 0;
	      while (1) {
	        var $i_02;
	        var $gn_21;
	        var $36 = HEAP32[$28 >> 2];
	        var $37 = $gn_21 | 0;
	        var $38 = (tempDoubleI32[0] = HEAP32[$37 >> 2], tempDoubleI32[1] = HEAP32[$37 + 4 >> 2], tempDoubleF64[0]);
	        var $40 = $38;
	        var $41 = _logmath_log($36, $40);
	        var $43 = ($i_02 << 2) + HEAP32[$12 >> 2] | 0;
	        HEAP32[$43 >> 2] = $41;
	        var $46 = HEAP32[$gn_21 + 8 >> 2];
	        if (($46 | 0) == 0) {
	          break $_$35;
	        }
	        var $gn_21 = $46;
	        var $i_02 = $i_02 + 1 | 0;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	_ngram_class_new["X"] = 1;

	function _ngram_model_add_class($model, $classname, $words, $weights, $n_words) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = _ngram_wid($model, $classname);
	  var $model_idx_val = HEAP32[$model + 52 >> 2];
	  var $2 = _ngram_unknown_wid($model_idx_val);
	  var $3 = ($1 | 0) == ($2 | 0);
	  do {
	    if ($3) {
	      var $5 = _ngram_model_add_word($model, $classname, 1);
	      if (($5 | 0) == -1) {
	        var $_0 = -1;
	        __label__ = 14;
	        break;
	      }
	      var $tag_wid_0 = $5;
	      __label__ = 4;
	      break;
	    } else {
	      var $tag_wid_0 = $1;
	      __label__ = 4;
	    }
	  } while (0);
	  $_$44 : do {
	    if (__label__ == 4) {
	      var $tag_wid_0;
	      var $8 = $model + 17 | 0;
	      var $9 = HEAPU8[$8];
	      var $10 = $9 & 255;
	      if ($9 << 24 >> 24 == -128) {
	        __E__pr_header(STRING_TABLE.__str61797 | 0, 1020, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str261817 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = -1;
	      } else {
	        var $start_wid_0 = -1;
	        var $i_0 = 0;
	        var $classwords_0 = 0;
	        while (1) {
	          var $classwords_0;
	          var $i_0;
	          var $start_wid_0;
	          if (($i_0 | 0) >= ($n_words | 0)) {
	            break;
	          }
	          var $16 = HEAP32[$words + ($i_0 << 2) >> 2];
	          var $17 = _ngram_add_word_internal($model, $16, $10);
	          if (($17 | 0) == -1) {
	            var $_0 = -1;
	            break $_$44;
	          }
	          var $_start_wid_0 = ($start_wid_0 | 0) == -1 ? $17 & 16777215 : $start_wid_0;
	          var $23 = HEAPF32[$weights + ($i_0 << 2) >> 2];
	          var $24 = _glist_add_float32($classwords_0, $23);
	          var $start_wid_0 = $_start_wid_0;
	          var $i_0 = $i_0 + 1 | 0;
	          var $classwords_0 = $24;
	        }
	        var $27 = _glist_reverse($classwords_0);
	        var $28 = _ngram_class_new($model, $tag_wid_0, $start_wid_0, $27);
	        _glist_free($27);
	        if (($28 | 0) == 0) {
	          var $_0 = -1;
	          break;
	        }
	        var $32 = HEAP8[$8] + 1 & 255;
	        HEAP8[$8] = $32;
	        var $33 = $model + 60 | 0;
	        var $34 = HEAP32[$33 >> 2];
	        if (($34 | 0) == 0) {
	          var $37 = ___ckd_calloc__(1, 4, STRING_TABLE.__str61797 | 0, 1042);
	          var $storemerge_in = $37;
	        } else {
	          var $39 = $34;
	          var $41 = ($32 & 255) << 2;
	          var $42 = ___ckd_realloc__($39, $41, STRING_TABLE.__str61797 | 0, 1045);
	          var $storemerge_in = $42;
	        }
	        var $storemerge_in;
	        var $storemerge = $storemerge_in;
	        HEAP32[$33 >> 2] = $storemerge;
	        HEAP32[$storemerge + ($10 << 2) >> 2] = $28;
	        var $_0 = $10;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_add_class["X"] = 1;

	function _read_classdef_file($classes, $file_name) {
	  var $34$s2;
	  var $5$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 524;
	  var $is_pipe = __stackBase__;
	  var $line = __stackBase__ + 4;
	  var $wptr = __stackBase__ + 516;
	  var $1 = _fopen_comp($file_name, STRING_TABLE.__str2415 | 0, $is_pipe);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str61797 | 0, 1085, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str31843 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	    var $_0 = -1;
	  } else {
	    var $3 = $line | 0;
	    var $4 = $wptr | 0, $4$s2 = $4 >> 2;
	    var $5$s2 = ($wptr + 4 | 0) >> 2;
	    var $inclass_0_ph = 0;
	    var $classwords_0_ph = 0;
	    var $classprobs_0_ph = 0;
	    var $classname_0_ph = 0;
	    $_$62 : while (1) {
	      var $classname_0_ph;
	      var $classprobs_0_ph;
	      var $classwords_0_ph;
	      var $inclass_0_ph;
	      var $inclass_0_ph11 = $inclass_0_ph;
	      var $classwords_0_ph10 = $classwords_0_ph;
	      var $classprobs_0_ph9 = $classprobs_0_ph;
	      $_$64 : while (1) {
	        var $classprobs_0_ph9;
	        var $classwords_0_ph10;
	        var $inclass_0_ph11;
	        var $inclass_0_ph13 = $inclass_0_ph11;
	        $_$66 : while (1) {
	          var $inclass_0_ph13;
	          var $75 = ($inclass_0_ph13 | 0) == 0;
	          while (1) {
	            var $7 = _feof($1);
	            if (($7 | 0) != 0) {
	              var $rv_0 = 0;
	              var $classwords_1 = $classwords_0_ph10;
	              var $classprobs_1 = $classprobs_0_ph9;
	              break $_$62;
	            }
	            var $10 = _fgets($3, 512, $1);
	            if (($10 | 0) == 0) {
	              var $rv_0 = 0;
	              var $classwords_1 = $classwords_0_ph10;
	              var $classprobs_1 = $classprobs_0_ph9;
	              break $_$62;
	            }
	            var $13 = _str2words($3, $4, 2);
	            if (($13 | 0) < 1) {
	              continue;
	            }
	            var $16 = ($13 | 0) == 2;
	            if ($75) {
	              if (!$16) {
	                var $inclass_0_ph13 = 0;
	                continue $_$66;
	              }
	              var $77 = HEAP32[$4$s2];
	              var $78 = _strcmp($77, STRING_TABLE.__str301821 | 0);
	              if (($78 | 0) != 0) {
	                continue;
	              }
	              var $81 = HEAP32[$5$s2];
	              var $82 = ___ckd_salloc__($81, STRING_TABLE.__str61797 | 0, 1162);
	              var $inclass_0_ph = 1;
	              var $classwords_0_ph = $classwords_0_ph10;
	              var $classprobs_0_ph = $classprobs_0_ph9;
	              var $classname_0_ph = $82;
	              continue $_$62;
	            }
	            if ($16) {
	              var $19 = HEAP32[$4$s2];
	              var $20 = _strcmp($19, STRING_TABLE.__str291820 | 0);
	              if (($20 | 0) == 0) {
	                break $_$64;
	              }
	              var $67 = HEAP32[$5$s2];
	              var $68 = _atof_c($67);
	              var $fprob_0 = $68;
	            } else {
	              var $fprob_0 = 1;
	            }
	            var $fprob_0;
	            var $70 = HEAP32[$4$s2];
	            var $71 = ___ckd_salloc__($70, STRING_TABLE.__str61797 | 0, 1152);
	            var $72 = _glist_add_ptr($classwords_0_ph10, $71);
	            var $73 = _glist_add_float32($classprobs_0_ph9, $fprob_0);
	            var $inclass_0_ph11 = $inclass_0_ph13;
	            var $classwords_0_ph10 = $72;
	            var $classprobs_0_ph9 = $73;
	            continue $_$64;
	          }
	        }
	      }
	      if (($classname_0_ph | 0) == 0) {
	        var $rv_0 = -1;
	        var $classwords_1 = $classwords_0_ph10;
	        var $classprobs_1 = $classprobs_0_ph9;
	        break;
	      }
	      var $25 = HEAP32[$5$s2];
	      var $26 = _strcmp($25, $classname_0_ph);
	      if (($26 | 0) != 0) {
	        var $rv_0 = -1;
	        var $classwords_1 = $classwords_0_ph10;
	        var $classprobs_1 = $classprobs_0_ph9;
	        break;
	      }
	      var $29 = ___ckd_calloc__(1, 12, STRING_TABLE.__str61797 | 0, 1114);
	      var $30 = _glist_reverse($classwords_0_ph10);
	      var $31 = _glist_reverse($classprobs_0_ph9);
	      var $32 = _glist_count($30);
	      var $34$s2 = ($29 + 8 | 0) >> 2;
	      HEAP32[$34$s2] = $32;
	      var $35 = ___ckd_calloc__($32, 4, STRING_TABLE.__str61797 | 0, 1119);
	      var $37 = $29;
	      HEAP32[$37 >> 2] = $35;
	      var $38 = HEAP32[$34$s2];
	      var $39 = ___ckd_calloc__($38, 4, STRING_TABLE.__str61797 | 0, 1121);
	      var $40 = $39;
	      var $42 = $29 + 4 | 0;
	      HEAP32[$42 >> 2] = $40;
	      var $44 = (HEAP32[$34$s2] | 0) > 0;
	      $_$85 : do {
	        if ($44) {
	          var $word_02 = $30;
	          var $weight_03 = $31;
	          var $i_04 = 0;
	          while (1) {
	            var $i_04;
	            var $weight_03;
	            var $word_02;
	            var $46 = HEAP32[$word_02 >> 2];
	            var $48 = ($i_04 << 2) + HEAP32[$37 >> 2] | 0;
	            HEAP32[$48 >> 2] = $46;
	            var $49 = $weight_03 | 0;
	            var $50 = (tempDoubleI32[0] = HEAP32[$49 >> 2], tempDoubleI32[1] = HEAP32[$49 + 4 >> 2], tempDoubleF64[0]);
	            HEAPF32[HEAP32[$42 >> 2] + ($i_04 << 2) >> 2] = $50;
	            var $58 = $i_04 + 1 | 0;
	            if (($58 | 0) >= (HEAP32[$34$s2] | 0)) {
	              break $_$85;
	            }
	            var $word_02 = HEAP32[$word_02 + 8 >> 2];
	            var $weight_03 = HEAP32[$weight_03 + 8 >> 2];
	            var $i_04 = $58;
	          }
	        }
	      } while (0);
	      var $61 = _hash_table_enter($classes, $classname_0_ph, $29);
	      if (($61 | 0) != ($29 | 0)) {
	        var $64 = $29;
	        _classdef_free($64);
	        var $rv_0 = -1;
	        var $classwords_1 = $30;
	        var $classprobs_1 = $31;
	        break;
	      }
	      _glist_free($30);
	      _glist_free($31);
	      var $inclass_0_ph = 0;
	      var $classwords_0_ph = 0;
	      var $classprobs_0_ph = 0;
	      var $classname_0_ph = 0;
	    }
	    var $classprobs_1;
	    var $classwords_1;
	    var $rv_0;
	    var $83 = HEAP32[$is_pipe >> 2];
	    _fclose_comp($1, $83);
	    var $84 = ($classwords_1 | 0) == 0;
	    $_$93 : do {
	      if (!$84) {
	        var $gn_01 = $classwords_1;
	        while (1) {
	          var $gn_01;
	          var $86 = HEAP32[$gn_01 >> 2];
	          _ckd_free($86);
	          var $88 = HEAP32[$gn_01 + 8 >> 2];
	          if (($88 | 0) == 0) {
	            break $_$93;
	          }
	          var $gn_01 = $88;
	        }
	      }
	    } while (0);
	    _glist_free($classwords_1);
	    _glist_free($classprobs_1);
	    _ckd_free($classname_0_ph);
	    var $_0 = $rv_0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_read_classdef_file["X"] = 1;

	function _classdef_free($classdef) {
	  var $1 = $classdef + 8 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  var $4 = $classdef | 0;
	  var $5 = HEAP32[$4 >> 2];
	  $_$100 : do {
	    if ($3) {
	      var $i_01 = 0;
	      var $6 = $5;
	      while (1) {
	        var $6;
	        var $i_01;
	        var $8 = HEAP32[$6 + ($i_01 << 2) >> 2];
	        _ckd_free($8);
	        var $9 = $i_01 + 1 | 0;
	        var $12 = HEAP32[$4 >> 2];
	        if (($9 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          var $_lcssa = $12;
	          break $_$100;
	        }
	        var $i_01 = $9;
	        var $6 = $12;
	      }
	    } else {
	      var $_lcssa = $5;
	    }
	  } while (0);
	  var $_lcssa;
	  _ckd_free($_lcssa);
	  var $16 = HEAP32[$classdef + 4 >> 2];
	  _ckd_free($16);
	  var $17 = $classdef;
	  _ckd_free($17);
	  return;
	  return;
	}

	function _ngram_model_arpa_read($file_name, $lmath) {
	  var $23$s2;
	  var $15$s2;
	  var $is_pipe$s2;
	  var $li$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var $li = __stackBase__, $li$s2 = $li >> 2;
	  var $is_pipe = __stackBase__ + 4, $is_pipe$s2 = $is_pipe >> 2;
	  var $n_unigram = __stackBase__ + 8;
	  var $n_bigram = __stackBase__ + 12;
	  var $n_trigram = __stackBase__ + 16;
	  var $1 = _fopen_comp($file_name, STRING_TABLE.__str2415 | 0, $is_pipe);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if ($2) {
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 466, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str31843 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	      var $_0 = 0;
	    } else {
	      var $5 = _lineiter_start($1);
	      HEAP32[$li$s2] = $5;
	      var $6 = _ReadNgramCounts($li, $n_unigram, $n_bigram, $n_trigram);
	      if (($6 | 0) == -1) {
	        var $9 = HEAP32[$li$s2];
	        _lineiter_free($9);
	        var $10 = HEAP32[$is_pipe$s2];
	        _fclose_comp($1, $10);
	        var $_0 = 0;
	      } else {
	        __E__pr_info_header(STRING_TABLE.__str11841 | 0, 477);
	        var $12 = HEAPU32[$n_unigram >> 2];
	        var $13 = HEAP32[$n_bigram >> 2];
	        var $14 = HEAP32[$n_trigram >> 2];
	        __E__pr_info(STRING_TABLE.__str151920 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $12, HEAP32[tempInt + 4 >> 2] = $13, HEAP32[tempInt + 8 >> 2] = $14, tempInt));
	        var $15 = ___ckd_calloc__(1, 140, STRING_TABLE.__str11841 | 0, 480), $15$s2 = $15 >> 2;
	        var $16 = $15;
	        var $17 = $15;
	        var $18 = ($14 | 0) > 0;
	        if ($18) {
	          var $n_0 = 3;
	        } else {
	          var $_ = ($13 | 0) > 0 ? 2 : 1;
	          var $n_0 = $_;
	        }
	        var $n_0;
	        _ngram_model_init($17, _ngram_model_arpa_funcs, $lmath, $n_0, $12);
	        var $23$s2 = ($15 + 4 | 0) >> 2;
	        var $24 = HEAP32[$23$s2];
	        HEAP32[$24 >> 2] = $12;
	        var $26 = HEAP32[$23$s2] + 4 | 0;
	        HEAP32[$26 >> 2] = $13;
	        var $28 = HEAP32[$23$s2] + 8 | 0;
	        HEAP32[$28 >> 2] = $14;
	        HEAP8[$15 + 18 | 0] = 1;
	        var $30 = $12 + 1 | 0;
	        var $31 = _new_unigram_table($30);
	        var $33 = $15 + 68 | 0;
	        HEAP32[$33 >> 2] = $31;
	        var $34 = $13 + 1 | 0;
	        var $35 = ___ckd_calloc__($34, 12, STRING_TABLE.__str11841 | 0, 501);
	        var $36 = $35;
	        var $38 = $15 + 72 | 0;
	        HEAP32[$38 >> 2] = $36;
	        if ($18) {
	          var $40 = ___ckd_calloc__($14, 8, STRING_TABLE.__str11841 | 0, 504);
	          var $41 = $40;
	          HEAP32[$15$s2 + 19] = $41;
	          var $45 = (($34 | 0) / 512 & -1) + 1 | 0;
	          var $46 = ___ckd_calloc__($45, 4, STRING_TABLE.__str11841 | 0, 509);
	          var $47 = $46;
	          HEAP32[$15$s2 + 26] = $47;
	        }
	        var $50 = _ReadUnigrams($li, $16);
	        if (($50 | 0) == -1) {
	          var $53 = HEAP32[$is_pipe$s2];
	          _fclose_comp($1, $53);
	          _ngram_model_free($17);
	          var $_0 = 0;
	        } else {
	          __E__pr_info_header(STRING_TABLE.__str11841 | 0, 516);
	          var $56 = HEAP32[HEAP32[$23$s2] >> 2];
	          __E__pr_info(STRING_TABLE.__str381943 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $56, tempInt));
	          var $57 = $15 + 116 | 0;
	          var $58 = $57;
	          _init_sorted_list($58);
	          var $59 = HEAP32[$23$s2];
	          if ((HEAP32[$59 + 8 >> 2] | 0) > 0) {
	            var $65 = $15 + 124 | 0;
	            _init_sorted_list($65);
	            var $67 = HEAP32[$23$s2];
	          } else {
	            var $67 = $59;
	          }
	          var $67;
	          if ((HEAP32[$67 + 4 >> 2] | 0) > 0) {
	            var $72 = _ReadBigrams($li, $16);
	            if (($72 | 0) == -1) {
	              var $75 = HEAP32[$is_pipe$s2];
	              _fclose_comp($1, $75);
	              _ngram_model_free($17);
	              var $_0 = 0;
	              break;
	            }
	            var $77 = HEAP32[$23$s2];
	            var $81 = HEAP32[(HEAP32[$33 >> 2] + 8 >> 2) + (HEAP32[$77 >> 2] * 3 | 0)];
	            var $82 = $77 + 4 | 0;
	            HEAP32[$82 >> 2] = $81;
	            var $85 = HEAP32[$15$s2 + 30];
	            var $87 = $15 + 84 | 0;
	            HEAP32[$87 >> 2] = $85;
	            var $88 = _vals_in_sorted_list($58);
	            HEAP32[$15$s2 + 20] = $88;
	            var $_idx2_val = HEAP32[$57 >> 2];
	            _free_sorted_list($_idx2_val);
	            __E__pr_info_header(STRING_TABLE.__str11841 | 0, 533);
	            var $93 = HEAP32[HEAP32[$23$s2] + 4 >> 2];
	            __E__pr_info(STRING_TABLE.__str411946 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $93, tempInt));
	            __E__pr_info_header(STRING_TABLE.__str11841 | 0, 534);
	            var $94 = HEAP32[$87 >> 2];
	            __E__pr_info(STRING_TABLE.__str421947 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $94, tempInt));
	            var $96 = HEAP32[$23$s2];
	          } else {
	            var $96 = $67;
	          }
	          var $96;
	          if ((HEAP32[$96 + 8 >> 2] | 0) > 0) {
	            var $101 = $15 + 124 | 0;
	            var $102 = $101;
	            var $105 = HEAP32[$15$s2 + 32];
	            var $107 = $15 + 92 | 0;
	            HEAP32[$107 >> 2] = $105;
	            var $108 = _vals_in_sorted_list($102);
	            HEAP32[$15$s2 + 22] = $108;
	            var $_idx1_val = HEAP32[$101 >> 2];
	            _free_sorted_list($_idx1_val);
	            __E__pr_info_header(STRING_TABLE.__str11841 | 0, 542);
	            var $111 = HEAP32[$107 >> 2];
	            __E__pr_info(STRING_TABLE.__str431948 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $111, tempInt));
	            var $112 = $15 + 132 | 0;
	            var $113 = $112;
	            _init_sorted_list($113);
	            var $114 = _ReadTrigrams($li, $16);
	            if (($114 | 0) == -1) {
	              var $117 = HEAP32[$is_pipe$s2];
	              _fclose_comp($1, $117);
	              _ngram_model_free($17);
	              var $_0 = 0;
	              break;
	            }
	            var $119 = HEAPU32[$23$s2];
	            var $121 = HEAP32[$119 + 4 >> 2];
	            var $132 = (HEAPU16[(HEAP32[$38 >> 2] + 8 >> 1) + ($121 * 6 | 0)] & 65535) + HEAP32[HEAP32[$15$s2 + 26] + ($121 >> 9 << 2) >> 2] | 0;
	            HEAP32[$119 + 8 >> 2] = $132;
	            var $136 = HEAP32[$15$s2 + 34];
	            var $138 = $15 + 100 | 0;
	            HEAP32[$138 >> 2] = $136;
	            var $139 = _vals_in_sorted_list($113);
	            HEAP32[$15$s2 + 24] = $139;
	            __E__pr_info_header(STRING_TABLE.__str11841 | 0, 555);
	            var $144 = HEAP32[HEAP32[$23$s2] + 8 >> 2];
	            __E__pr_info(STRING_TABLE.__str441949 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $144, tempInt));
	            __E__pr_info_header(STRING_TABLE.__str11841 | 0, 556);
	            var $145 = HEAP32[$138 >> 2];
	            __E__pr_info(STRING_TABLE.__str451950 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $145, tempInt));
	            var $_idx_val = HEAP32[$112 >> 2];
	            _free_sorted_list($_idx_val);
	            var $146 = ___ckd_calloc__($12, 4, STRING_TABLE.__str11841 | 0, 561);
	            HEAP32[$15$s2 + 27] = $146;
	            var $150 = _listelem_alloc_init(24);
	            HEAP32[$15$s2 + 28] = $150;
	          }
	          var $154 = HEAP32[$li$s2];
	          _lineiter_free($154);
	          var $155 = HEAP32[$is_pipe$s2];
	          _fclose_comp($1, $155);
	          var $_0 = $17;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_arpa_read["X"] = 1;

	function _ReadNgramCounts($li, $n_ug, $n_bg, $n_tg) {
	  var $ngram_cnt$s2;
	  var $li$s2 = $li >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $ngram = __stackBase__;
	  var $ngram_cnt = __stackBase__ + 4, $ngram_cnt$s2 = $ngram_cnt >> 2;
	  var $_pr1 = HEAP32[$li$s2];
	  while (1) {
	    var $_pr1;
	    if (($_pr1 | 0) == 0) {
	      __label__ = 7;
	      break;
	    }
	    var $5 = HEAP32[$_pr1 >> 2];
	    _string_trim($5);
	    var $6 = HEAP32[$li$s2];
	    var $8 = HEAP32[$6 >> 2];
	    var $9 = _strcmp($8, STRING_TABLE.__str531893 | 0);
	    if (($9 | 0) == 0) {
	      __label__ = 6;
	      break;
	    }
	    var $12 = _lineiter_next($6);
	    HEAP32[$li$s2] = $12;
	    var $_pr1 = $12;
	  }
	  $_$141 : do {
	    if (__label__ == 6) {
	      if (($6 | 0) == 0) {
	        __label__ = 7;
	        break;
	      }
	      HEAP32[$n_tg >> 2] = 0;
	      HEAP32[$n_bg >> 2] = 0;
	      HEAP32[$n_ug >> 2] = 0;
	      while (1) {
	        var $15 = HEAP32[$li$s2];
	        var $16 = _lineiter_next($15);
	        HEAP32[$li$s2] = $16;
	        if (($16 | 0) == 0) {
	          __label__ = 17;
	          break;
	        }
	        var $20 = HEAP32[$16 >> 2];
	        var $21 = _sscanf($20, STRING_TABLE.__str551895 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $ngram, HEAP32[tempInt + 4 >> 2] = $ngram_cnt, tempInt));
	        if (($21 | 0) != 2) {
	          __label__ = 16;
	          break;
	        }
	        var $24 = HEAP32[$ngram >> 2];
	        if (($24 | 0) == 1) {
	          var $26 = HEAP32[$ngram_cnt$s2];
	          HEAP32[$n_ug >> 2] = $26;
	        } else if (($24 | 0) == 2) {
	          var $28 = HEAP32[$ngram_cnt$s2];
	          HEAP32[$n_bg >> 2] = $28;
	        } else if (($24 | 0) == 3) {
	          var $30 = HEAP32[$ngram_cnt$s2];
	          HEAP32[$n_tg >> 2] = $30;
	        } else {
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 96, STRING_TABLE.__str102579 | 0);
	          var $32 = HEAP32[$ngram >> 2];
	          __E__pr_warn(STRING_TABLE.__str561896 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $32, tempInt));
	          var $_0 = -1;
	          __label__ = 26;
	          break $_$141;
	        }
	      }
	      do {
	        if (__label__ == 16) {
	          var $_pr3 = HEAP32[$li$s2];
	          if (($_pr3 | 0) == 0) {
	            break;
	          }
	          var $35 = $_pr3;
	          while (1) {
	            var $35;
	            var $36 = _lineiter_next($35);
	            HEAP32[$li$s2] = $36;
	            if (($36 | 0) == 0) {
	              break;
	            }
	            var $40 = HEAP32[$36 >> 2];
	            _string_trim($40);
	            var $41 = HEAP32[$li$s2];
	            var $43 = HEAP32[$41 >> 2];
	            var $44 = _strcmp($43, STRING_TABLE.__str581898 | 0);
	            if (($44 | 0) != 0) {
	              var $35 = $41;
	              continue;
	            }
	            if (($41 | 0) == 0) {
	              break;
	            }
	            var $50 = (HEAP32[$n_ug >> 2] | 0) < 1;
	            do {
	              if (!$50) {
	                if ((HEAP32[$n_bg >> 2] | 0) < 0) {
	                  break;
	                }
	                if ((HEAP32[$n_tg >> 2] | 0) >= 0) {
	                  var $_0 = 0;
	                  __label__ = 26;
	                  break $_$141;
	                }
	              }
	            } while (0);
	            __E__pr_header(STRING_TABLE.__str11841 | 0, 117, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str601900 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            var $_0 = -1;
	            __label__ = 26;
	            break $_$141;
	          }
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 112, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str591899 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	          __label__ = 26;
	          break $_$141;
	        }
	      } while (0);
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 101, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str571897 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	      __label__ = 26;
	      break;
	    }
	  } while (0);
	  if (__label__ == 7) {
	    __E__pr_info_header(STRING_TABLE.__str11841 | 0, 77);
	    __E__pr_info(STRING_TABLE.__str541894 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ReadNgramCounts["X"] = 1;

	function _new_unigram_table($n_ug) {
	  var $1 = ___ckd_calloc__($n_ug, 12, STRING_TABLE.__str11841 | 0, 442);
	  var $2 = $1;
	  var $3 = ($n_ug | 0) > 0;
	  $_$170 : do {
	    if ($3) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        HEAP32[($2 >> 2) + ($i_01 * 3 | 0)] = -2147483648;
	        HEAP32[($2 + 4 >> 2) + ($i_01 * 3 | 0)] = -2147483648;
	        var $8 = $i_01 + 1 | 0;
	        if (($8 | 0) == ($n_ug | 0)) {
	          break $_$170;
	        }
	        var $i_01 = $8;
	      }
	    }
	  } while (0);
	  return $2;
	  return null;
	}

	function _ReadUnigrams($li, $model) {
	  var $5$s2;
	  var $4$s2;
	  var $li$s2 = $li >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var $wptr = __stackBase__;
	  __E__pr_info_header(STRING_TABLE.__str11841 | 0, 135);
	  __E__pr_info(STRING_TABLE.__str461886 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  var $1 = $wptr | 0;
	  var $2 = $wptr + 4 | 0;
	  var $3 = $wptr + 8 | 0;
	  var $4$s2 = ($model + 4 | 0) >> 2;
	  var $5$s2 = ($model + 48 | 0) >> 2;
	  var $6 = $model + 52 | 0;
	  var $7 = $model + 20 | 0;
	  var $8 = $model + 68 | 0;
	  var $wcnt_0_ph = 0;
	  $_$2 : while (1) {
	    var $wcnt_0_ph;
	    $_$4 : while (1) {
	      var $9 = HEAP32[$li$s2];
	      var $10 = _lineiter_next($9);
	      HEAP32[$li$s2] = $10;
	      var $11 = ($10 | 0) == 0;
	      do {
	        if (!$11) {
	          var $14 = HEAP32[$10 >> 2];
	          _string_trim($14);
	          var $17 = HEAP32[HEAP32[$li$s2] >> 2];
	          var $18 = _strcmp($17, STRING_TABLE.__str471887 | 0);
	          if (($18 | 0) == 0) {
	            break;
	          }
	          var $21 = _strcmp($17, STRING_TABLE.__str381878 | 0);
	          if (($21 | 0) == 0) {
	            break;
	          }
	          var $24 = _str2words($17, $1, 3);
	          if (($24 | 0) < 2) {
	            if (HEAP8[HEAP32[HEAP32[$li$s2] >> 2]] << 24 >> 24 == 0) {
	              continue $_$4;
	            }
	            __E__pr_header(STRING_TABLE.__str11841 | 0, 150, STRING_TABLE.__str212436 | 0);
	            var $35 = HEAP32[HEAP32[$li$s2] >> 2];
	            __E__pr_warn(STRING_TABLE.__str491889 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $35, tempInt));
	            continue $_$4;
	          }
	          var $37 = HEAP32[$1 >> 2];
	          var $38 = _atof_c($37);
	          var $39 = $38;
	          var $40 = HEAP32[$2 >> 2];
	          if (($24 | 0) == 3) {
	            var $43 = HEAP32[$3 >> 2];
	            var $44 = _atof_c($43);
	            var $bo_wt_0 = $44;
	          } else {
	            var $bo_wt_0 = 0;
	          }
	          var $bo_wt_0;
	          if (($wcnt_0_ph | 0) < (HEAP32[HEAP32[$4$s2] >> 2] | 0)) {
	            var $52 = ___ckd_salloc__($40, STRING_TABLE.__str11841 | 0, 166);
	            var $54 = ($wcnt_0_ph << 2) + HEAP32[$5$s2] | 0;
	            HEAP32[$54 >> 2] = $52;
	            var $55 = HEAP32[$6 >> 2];
	            var $58 = HEAP32[HEAP32[$5$s2] + ($wcnt_0_ph << 2) >> 2];
	            var $59 = $wcnt_0_ph;
	            var $60 = _hash_table_enter($55, $58, $59);
	            if (($60 | 0) != ($59 | 0)) {
	              __E__pr_header(STRING_TABLE.__str11841 | 0, 169, STRING_TABLE.__str212436 | 0);
	              var $65 = HEAP32[HEAP32[$5$s2] + ($wcnt_0_ph << 2) >> 2];
	              __E__pr_warn(STRING_TABLE.__str341939 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $65, tempInt));
	            }
	            var $67 = HEAP32[$7 >> 2];
	            var $68 = $39;
	            var $_idx2_val = HEAP8[$67 + 9 | 0];
	            var $_idx3 = $67 + 52 | 0;
	            var $_idx3_val = (tempDoubleI32[0] = HEAP32[$_idx3 >> 2], tempDoubleI32[1] = HEAP32[$_idx3 + 4 >> 2], tempDoubleF64[0]);
	            var $69 = _logmath_log10_to_log($_idx2_val, $_idx3_val, $68);
	            var $72 = HEAP32[$8 >> 2] + $wcnt_0_ph * 12 | 0;
	            HEAP32[$72 >> 2] = $69;
	            var $73 = HEAP32[$7 >> 2];
	            var $_idx_val = HEAP8[$73 + 9 | 0];
	            var $_idx1 = $73 + 52 | 0;
	            var $_idx1_val = (tempDoubleI32[0] = HEAP32[$_idx1 >> 2], tempDoubleI32[1] = HEAP32[$_idx1 + 4 >> 2], tempDoubleF64[0]);
	            var $74 = _logmath_log10_to_log($_idx_val, $_idx1_val, $bo_wt_0);
	            var $77 = HEAP32[$8 >> 2] + $wcnt_0_ph * 12 + 4 | 0;
	            HEAP32[$77 >> 2] = $74;
	            var $wcnt_0_ph = $wcnt_0_ph + 1 | 0;
	            continue $_$2;
	          }
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 161, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str501890 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	          break $_$2;
	        }
	      } while (0);
	      if ((HEAP32[HEAP32[$4$s2] >> 2] | 0) == ($wcnt_0_ph | 0)) {
	        var $_0 = 0;
	        break $_$2;
	      }
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 177, STRING_TABLE.__str212436 | 0);
	      var $85 = HEAP32[HEAP32[$4$s2] >> 2];
	      __E__pr_warn(STRING_TABLE.__str521892 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $85, HEAP32[tempInt + 4 >> 2] = $wcnt_0_ph, tempInt));
	      var $86 = HEAP32[$4$s2];
	      HEAP32[$86 >> 2] = $wcnt_0_ph;
	      HEAP32[$model + 12 >> 2] = $wcnt_0_ph;
	      var $_0 = 0;
	      break $_$2;
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ReadUnigrams["X"] = 1;

	function _ReadBigrams($li, $model) {
	  var $9$s2;
	  var $li$s2 = $li >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 24;
	  var __label__;
	  var $p2 = __stackBase__;
	  var $bo_wt2 = __stackBase__ + 4;
	  var $wptr = __stackBase__ + 8;
	  var $1 = $model | 0;
	  __E__pr_info_header(STRING_TABLE.__str11841 | 0, 195);
	  __E__pr_info(STRING_TABLE.__str401880 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  var $4 = $wptr + 12 | 0;
	  var $5 = $wptr | 0;
	  var $6 = $wptr + 4 | 0;
	  var $7 = $wptr + 8 | 0;
	  var $8 = $model + 20 | 0;
	  var $9$s2 = ($model + 4 | 0) >> 2;
	  var $10 = $model + 116 | 0;
	  var $11 = $model + 124 | 0;
	  var $12 = $model + 68 | 0;
	  var $bgptr_0_ph = HEAP32[$model + 72 >> 2];
	  var $bgcount_0_ph = 0;
	  var $prev_w1_0_ph = -1;
	  $_$27 : while (1) {
	    var $prev_w1_0_ph;
	    var $bgcount_0_ph;
	    var $bgptr_0_ph;
	    while (1) {
	      var $13 = HEAP32[$li$s2];
	      var $14 = _lineiter_next($13);
	      HEAP32[$li$s2] = $14;
	      if (($14 | 0) == 0) {
	        __label__ = 28;
	        break $_$27;
	      }
	      var $18 = HEAP32[$14 >> 2];
	      _string_trim($18);
	      HEAP32[$4 >> 2] = 0;
	      var $21 = HEAP32[HEAP32[$li$s2] >> 2];
	      var $22 = _str2words($21, $5, 4);
	      if (($22 | 0) < 3) {
	        var $25 = HEAP32[$li$s2];
	        var $27 = HEAP32[$25 >> 2];
	        if (HEAP8[$27] << 24 >> 24 != 0) {
	          __label__ = 24;
	          break $_$27;
	        }
	      } else {
	        var $31 = HEAP32[$5 >> 2];
	        var $32 = _atof_c($31);
	        var $33 = HEAP32[$6 >> 2];
	        var $34 = HEAP32[$7 >> 2];
	        var $35 = HEAP32[$4 >> 2];
	        if (($35 | 0) == 0) {
	          var $bo_wt_0 = 0;
	        } else {
	          var $38 = _atof_c($35);
	          var $bo_wt_0 = $38 * 1e4 & -1 | 0;
	        }
	        var $bo_wt_0;
	        var $41 = _ngram_wid($1, $33);
	        if (($41 | 0) == -1) {
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 223, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str411881 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $33, HEAP32[tempInt + 4 >> 2] = $33, HEAP32[tempInt + 8 >> 2] = $34, tempInt));
	        } else {
	          var $45 = _ngram_wid($1, $34);
	          if (($45 | 0) != -1) {
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 228, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str411881 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $34, HEAP32[tempInt + 4 >> 2] = $33, HEAP32[tempInt + 8 >> 2] = $34, tempInt));
	        }
	      }
	    }
	    var $54 = $bo_wt_0 / 1e4;
	    var $55 = HEAP32[$8 >> 2];
	    var $56 = ($32 * 1e4 & -1 | 0) / 1e4;
	    var $_idx2_val = HEAP8[$55 + 9 | 0];
	    var $_idx3 = $55 + 52 | 0;
	    var $_idx3_val = (tempDoubleI32[0] = HEAP32[$_idx3 >> 2], tempDoubleI32[1] = HEAP32[$_idx3 + 4 >> 2], tempDoubleF64[0]);
	    var $57 = _logmath_log10_to_log($_idx2_val, $_idx3_val, $56);
	    HEAP32[$p2 >> 2] = $57;
	    var $59 = _logmath_log10_to_log($_idx2_val, $_idx3_val, $54);
	    HEAP32[$bo_wt2 >> 2] = $59;
	    if (($bgcount_0_ph | 0) >= (HEAP32[HEAP32[$9$s2] + 4 >> 2] | 0)) {
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 242, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str421882 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	      __label__ = 30;
	      break;
	    }
	    HEAP32[$bgptr_0_ph >> 2] = $45;
	    var $67 = _sorted_id($10, $p2);
	    HEAP16[$bgptr_0_ph + 4 >> 1] = $67 & 65535;
	    if ((HEAP32[HEAP32[$9$s2] + 8 >> 2] | 0) > 0) {
	      var $75 = _sorted_id($11, $bo_wt2);
	      HEAP16[$bgptr_0_ph + 6 >> 1] = $75 & 65535;
	    }
	    var $79 = ($41 | 0) == ($prev_w1_0_ph | 0);
	    $_$49 : do {
	      if ($79) {
	        var $prev_w1_2 = $prev_w1_0_ph;
	      } else {
	        if (($41 | 0) < ($prev_w1_0_ph | 0)) {
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 253, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str431883 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	          __label__ = 30;
	          break $_$27;
	        }
	        var $prev_w1_17 = $prev_w1_0_ph + 1 | 0;
	        if (($prev_w1_17 | 0) > ($41 | 0)) {
	          var $prev_w1_2 = $41;
	          break;
	        }
	        var $prev_w1_18 = $prev_w1_17;
	        while (1) {
	          var $prev_w1_18;
	          var $85 = HEAP32[$12 >> 2] + $prev_w1_18 * 12 + 8 | 0;
	          HEAP32[$85 >> 2] = $bgcount_0_ph;
	          var $prev_w1_1 = $prev_w1_18 + 1 | 0;
	          if (($prev_w1_1 | 0) > ($41 | 0)) {
	            var $prev_w1_2 = $41;
	            break $_$49;
	          }
	          var $prev_w1_18 = $prev_w1_1;
	        }
	      }
	    } while (0);
	    var $prev_w1_2;
	    var $87 = $bgcount_0_ph + 1 | 0;
	    var $88 = $bgptr_0_ph + 12 | 0;
	    if (($87 & 65535 | 0) != 0) {
	      var $bgptr_0_ph = $88;
	      var $bgcount_0_ph = $87;
	      var $prev_w1_0_ph = $prev_w1_2;
	      continue;
	    }
	    __E__pr_info(STRING_TABLE.__str371877 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $bgptr_0_ph = $88;
	    var $bgcount_0_ph = $87;
	    var $prev_w1_0_ph = $prev_w1_2;
	  }
	  $_$58 : do {
	    if (__label__ == 24) {
	      if (($25 | 0) == 0) {
	        __label__ = 28;
	        break;
	      }
	      var $95 = _strcmp($27, STRING_TABLE.__str381878 | 0);
	      if (($95 | 0) != 0) {
	        var $101 = _strcmp($27, STRING_TABLE.__str441884 | 0);
	        if (($101 | 0) != 0) {
	          __label__ = 28;
	          break;
	        }
	      }
	      var $prev_w1_33 = $prev_w1_0_ph + 1 | 0;
	      if (($prev_w1_33 | 0) > (HEAP32[HEAP32[$9$s2] >> 2] | 0)) {
	        var $_0 = 0;
	        __label__ = 30;
	        break;
	      }
	      var $prev_w1_34 = $prev_w1_33;
	      while (1) {
	        var $prev_w1_34;
	        var $107 = HEAP32[$12 >> 2] + $prev_w1_34 * 12 + 8 | 0;
	        HEAP32[$107 >> 2] = $bgcount_0_ph;
	        var $prev_w1_3 = $prev_w1_34 + 1 | 0;
	        if (($prev_w1_3 | 0) > (HEAP32[HEAP32[$9$s2] >> 2] | 0)) {
	          var $_0 = 0;
	          __label__ = 30;
	          break $_$58;
	        }
	        var $prev_w1_34 = $prev_w1_3;
	      }
	    }
	  } while (0);
	  if (__label__ == 28) {
	    __E__pr_header(STRING_TABLE.__str11841 | 0, 270, STRING_TABLE.__str102579 | 0);
	    var $105 = HEAP32[HEAP32[$li$s2] >> 2];
	    __E__pr_warn(STRING_TABLE.__str451885 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $105, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ReadBigrams["X"] = 1;

	function _ReadTrigrams($li, $model) {
	  var $13$s2;
	  var $12$s2;
	  var $li$s2 = $li >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var __label__;
	  var $p3 = __stackBase__;
	  var $wptr = __stackBase__ + 4;
	  var $1 = $model | 0;
	  __E__pr_info_header(STRING_TABLE.__str11841 | 0, 292);
	  __E__pr_info(STRING_TABLE.__str311871 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  var $4 = $wptr | 0;
	  var $5 = $wptr + 4 | 0;
	  var $6 = $wptr + 8 | 0;
	  var $7 = $wptr + 12 | 0;
	  var $8 = $model + 20 | 0;
	  var $9 = $model + 4 | 0;
	  var $10 = $model + 132 | 0;
	  var $11 = $model + 68 | 0;
	  var $12$s2 = ($model + 72 | 0) >> 2;
	  var $13$s2 = ($model + 104 | 0) >> 2;
	  var $tgptr_0_ph = HEAP32[$model + 76 >> 2];
	  var $prev_seg_0_ph = -1;
	  var $prev_w1_0_ph = -1;
	  var $prev_w2_0_ph = -1;
	  var $tgcount_0_ph = 0;
	  var $prev_bg_0_ph = -1;
	  $_$70 : while (1) {
	    var $prev_bg_0_ph;
	    var $tgcount_0_ph;
	    var $prev_w2_0_ph;
	    var $prev_w1_0_ph;
	    var $prev_seg_0_ph;
	    var $tgptr_0_ph;
	    while (1) {
	      var $14 = HEAP32[$li$s2];
	      var $15 = _lineiter_next($14);
	      HEAP32[$li$s2] = $15;
	      if (($15 | 0) == 0) {
	        __label__ = 48;
	        break $_$70;
	      }
	      var $19 = HEAP32[$15 >> 2];
	      _string_trim($19);
	      var $22 = HEAP32[HEAP32[$li$s2] >> 2];
	      var $23 = _str2words($22, $4, 4);
	      if (($23 | 0) == 4) {
	        var $32 = HEAP32[$4 >> 2];
	        var $33 = _atof_c($32);
	        var $34 = HEAP32[$5 >> 2];
	        var $35 = HEAP32[$6 >> 2];
	        var $36 = HEAP32[$7 >> 2];
	        var $37 = _ngram_wid($1, $34);
	        if (($37 | 0) == -1) {
	          __E__pr_header(STRING_TABLE.__str11841 | 0, 320, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str321872 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $34, HEAP32[tempInt + 4 >> 2] = $34, HEAP32[tempInt + 8 >> 2] = $35, HEAP32[tempInt + 12 >> 2] = $36, tempInt));
	        } else {
	          var $41 = _ngram_wid($1, $35);
	          if (($41 | 0) == -1) {
	            __E__pr_header(STRING_TABLE.__str11841 | 0, 325, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str321872 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $35, HEAP32[tempInt + 4 >> 2] = $34, HEAP32[tempInt + 8 >> 2] = $35, HEAP32[tempInt + 12 >> 2] = $36, tempInt));
	          } else {
	            var $45 = _ngram_wid($1, $36);
	            if (($45 | 0) != -1) {
	              break;
	            }
	            __E__pr_header(STRING_TABLE.__str11841 | 0, 330, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str321872 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $36, HEAP32[tempInt + 4 >> 2] = $34, HEAP32[tempInt + 8 >> 2] = $35, HEAP32[tempInt + 12 >> 2] = $36, tempInt));
	          }
	        }
	      } else {
	        var $26 = HEAP32[$li$s2];
	        var $28 = HEAP32[$26 >> 2];
	        if (HEAP8[$28] << 24 >> 24 != 0) {
	          __label__ = 46;
	          break $_$70;
	        }
	      }
	    }
	    var $54 = HEAP32[$8 >> 2];
	    var $55 = ($33 * 1e4 & -1 | 0) / 1e4;
	    var $_idx_val = HEAP8[$54 + 9 | 0];
	    var $_idx1 = $54 + 52 | 0;
	    var $_idx1_val = (tempDoubleI32[0] = HEAP32[$_idx1 >> 2], tempDoubleI32[1] = HEAP32[$_idx1 + 4 >> 2], tempDoubleF64[0]);
	    var $56 = _logmath_log10_to_log($_idx_val, $_idx1_val, $55);
	    HEAP32[$p3 >> 2] = $56;
	    if (($tgcount_0_ph | 0) >= (HEAP32[HEAP32[$9 >> 2] + 8 >> 2] | 0)) {
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 341, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str331873 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	      __label__ = 55;
	      break;
	    }
	    HEAP32[$tgptr_0_ph >> 2] = $45;
	    var $64 = _sorted_id($10, $p3);
	    HEAP16[$tgptr_0_ph + 4 >> 1] = $64 & 65535;
	    var $67 = ($37 | 0) != ($prev_w1_0_ph | 0);
	    var $or_cond = ($41 | 0) == ($prev_w2_0_ph | 0) & ($67 ^ 1);
	    $_$89 : do {
	      if (!$or_cond) {
	        var $70 = ($37 | 0) < ($prev_w1_0_ph | 0);
	        do {
	          if (!$70) {
	            if (($37 | 0) == ($prev_w1_0_ph | 0) & ($41 | 0) < ($prev_w2_0_ph | 0)) {
	              break;
	            }
	            if ($67) {
	              var $77 = HEAP32[$11 >> 2];
	              var $84 = HEAP32[($77 + 8 >> 2) + ($37 * 3 | 0)];
	              var $83 = $77;
	            } else {
	              var $84 = $prev_bg_0_ph + 1 | 0;
	              var $83 = HEAP32[$11 >> 2];
	            }
	            var $83;
	            var $84;
	            var $87 = HEAP32[($83 + 8 >> 2) + (($37 + 1) * 3 | 0)];
	            var $bgptr_0 = HEAP32[$12$s2] + $84 * 12 | 0;
	            var $bg_0 = $84;
	            while (1) {
	              var $bg_0;
	              var $bgptr_0;
	              if (($bg_0 | 0) >= ($87 | 0)) {
	                __E__pr_header(STRING_TABLE.__str11841 | 0, 361, STRING_TABLE.__str102579 | 0);
	                var $102 = HEAP32[HEAP32[$li$s2] >> 2];
	                __E__pr_warn(STRING_TABLE.__str351875 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $102, tempInt));
	                var $_0 = -1;
	                __label__ = 55;
	                break $_$70;
	              }
	              if ((HEAP32[$bgptr_0 >> 2] | 0) == ($41 | 0)) {
	                break;
	              }
	              var $bgptr_0 = $bgptr_0 + 12 | 0;
	              var $bg_0 = $bg_0 + 1 | 0;
	            }
	            var $104 = $bg_0 >> 9;
	            var $105 = $prev_seg_0_ph + 1 | 0;
	            var $106 = ($105 | 0) > ($104 | 0);
	            $_$105 : do {
	              if (!$106) {
	                var $107 = $104 + 1 | 0;
	                var $i_09 = $105;
	                while (1) {
	                  var $i_09;
	                  var $110 = ($i_09 << 2) + HEAP32[$13$s2] | 0;
	                  HEAP32[$110 >> 2] = $tgcount_0_ph;
	                  var $111 = $i_09 + 1 | 0;
	                  if (($111 | 0) == ($107 | 0)) {
	                    break $_$105;
	                  }
	                  var $i_09 = $111;
	                }
	              }
	            } while (0);
	            if (($prev_seg_0_ph | 0) < ($104 | 0)) {
	              if (($prev_seg_0_ph | 0) > -1) {
	                var $119 = $tgcount_0_ph - HEAP32[HEAP32[$13$s2] + ($prev_seg_0_ph << 2) >> 2] | 0;
	                if (($119 | 0) > 65535) {
	                  __E__pr_header(STRING_TABLE.__str11841 | 0, 377, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str361876 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $_0 = -1;
	                  __label__ = 55;
	                  break $_$70;
	                }
	                var $tgoff_0 = $119 & 65535;
	              } else {
	                var $tgoff_0 = 0;
	              }
	              var $tgoff_0;
	              var $123 = ($105 << 9) - 1 | 0;
	              var $_sum1 = $prev_bg_0_ph + 1 | 0;
	              var $125 = HEAP32[$12$s2] + $_sum1 * 12 | 0;
	              var $126 = ($_sum1 | 0) > ($123 | 0);
	              $_$118 : do {
	                if ($126) {
	                  var $bgptr_1_lcssa = $125;
	                  var $prev_bg_1_lcssa = $_sum1;
	                } else {
	                  var $bgptr_113 = $125;
	                  var $prev_bg_114 = $_sum1;
	                  while (1) {
	                    var $prev_bg_114;
	                    var $bgptr_113;
	                    HEAP16[$bgptr_113 + 8 >> 1] = $tgoff_0;
	                    var $128 = $bgptr_113 + 12 | 0;
	                    var $prev_bg_1 = $prev_bg_114 + 1 | 0;
	                    if (($prev_bg_1 | 0) > ($123 | 0)) {
	                      var $bgptr_1_lcssa = $128;
	                      var $prev_bg_1_lcssa = $prev_bg_1;
	                      break $_$118;
	                    }
	                    var $bgptr_113 = $128;
	                    var $prev_bg_114 = $prev_bg_1;
	                  }
	                }
	              } while (0);
	              var $prev_bg_1_lcssa;
	              var $bgptr_1_lcssa;
	              if (($prev_bg_1_lcssa | 0) > ($bg_0 | 0)) {
	                var $prev_seg_1 = $104;
	                var $prev_w1_1 = $37;
	                var $prev_w2_1 = $41;
	                var $prev_bg_4 = $bg_0;
	                break $_$89;
	              }
	              var $prev_bg_219 = $prev_bg_1_lcssa;
	              var $bgptr_220 = $bgptr_1_lcssa;
	              while (1) {
	                var $bgptr_220;
	                var $prev_bg_219;
	                HEAP16[$bgptr_220 + 8 >> 1] = 0;
	                var $132 = $prev_bg_219 + 1 | 0;
	                if (($132 | 0) > ($bg_0 | 0)) {
	                  var $prev_seg_1 = $104;
	                  var $prev_w1_1 = $37;
	                  var $prev_w2_1 = $41;
	                  var $prev_bg_4 = $bg_0;
	                  break $_$89;
	                }
	                var $prev_bg_219 = $132;
	                var $bgptr_220 = $bgptr_220 + 12 | 0;
	              }
	            } else {
	              var $139 = $tgcount_0_ph - HEAP32[HEAP32[$13$s2] + ($prev_seg_0_ph << 2) >> 2] | 0;
	              if (($139 | 0) > 65535) {
	                __E__pr_header(STRING_TABLE.__str11841 | 0, 396, STRING_TABLE.__str102579 | 0);
	                __E__pr_warn(STRING_TABLE.__str361876 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                var $_0 = -1;
	                __label__ = 55;
	                break $_$70;
	              }
	              var $prev_bg_35 = $prev_bg_0_ph + 1 | 0;
	              if (($prev_bg_35 | 0) > ($bg_0 | 0)) {
	                var $prev_seg_1 = $104;
	                var $prev_w1_1 = $37;
	                var $prev_w2_1 = $41;
	                var $prev_bg_4 = $bg_0;
	                break $_$89;
	              }
	              var $146 = $139 & 65535;
	              var $bgptr_36 = HEAP32[$12$s2] + $prev_bg_35 * 12 | 0;
	              var $prev_bg_37 = $prev_bg_35;
	              while (1) {
	                var $prev_bg_37;
	                var $bgptr_36;
	                HEAP16[$bgptr_36 + 8 >> 1] = $146;
	                var $prev_bg_3 = $prev_bg_37 + 1 | 0;
	                if (($prev_bg_3 | 0) > ($bg_0 | 0)) {
	                  var $prev_seg_1 = $104;
	                  var $prev_w1_1 = $37;
	                  var $prev_w2_1 = $41;
	                  var $prev_bg_4 = $bg_0;
	                  break $_$89;
	                }
	                var $bgptr_36 = $bgptr_36 + 12 | 0;
	                var $prev_bg_37 = $prev_bg_3;
	              }
	            }
	          }
	        } while (0);
	        __E__pr_header(STRING_TABLE.__str11841 | 0, 351, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str341874 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = -1;
	        __label__ = 55;
	        break $_$70;
	      }
	      var $prev_seg_1 = $prev_seg_0_ph;
	      var $prev_w1_1 = $prev_w1_0_ph;
	      var $prev_w2_1 = $prev_w2_0_ph;
	      var $prev_bg_4 = $prev_bg_0_ph;
	    } while (0);
	    var $prev_bg_4;
	    var $prev_w2_1;
	    var $prev_w1_1;
	    var $prev_seg_1;
	    var $151 = $tgcount_0_ph + 1 | 0;
	    var $152 = $tgptr_0_ph + 8 | 0;
	    if (($151 & 65535 | 0) != 0) {
	      var $tgptr_0_ph = $152;
	      var $prev_seg_0_ph = $prev_seg_1;
	      var $prev_w1_0_ph = $prev_w1_1;
	      var $prev_w2_0_ph = $prev_w2_1;
	      var $tgcount_0_ph = $151;
	      var $prev_bg_0_ph = $prev_bg_4;
	      continue;
	    }
	    __E__pr_info(STRING_TABLE.__str371877 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $tgptr_0_ph = $152;
	    var $prev_seg_0_ph = $prev_seg_1;
	    var $prev_w1_0_ph = $prev_w1_1;
	    var $prev_w2_0_ph = $prev_w2_1;
	    var $tgcount_0_ph = $151;
	    var $prev_bg_0_ph = $prev_bg_4;
	  }
	  $_$134 : do {
	    if (__label__ == 46) {
	      if (($26 | 0) == 0) {
	        __label__ = 48;
	        break;
	      }
	      var $159 = _strcmp($28, STRING_TABLE.__str381878 | 0);
	      if (($159 | 0) != 0) {
	        __label__ = 48;
	        break;
	      }
	      var $prev_bg_5_in = $prev_bg_0_ph;
	      while (1) {
	        var $prev_bg_5_in;
	        var $prev_bg_5 = $prev_bg_5_in + 1 | 0;
	        if (($prev_bg_5 | 0) > (HEAP32[HEAP32[$9 >> 2] + 4 >> 2] | 0)) {
	          var $_0 = 0;
	          __label__ = 55;
	          break $_$134;
	        }
	        var $171 = $prev_bg_5 >> 9;
	        if (($prev_bg_5 & 511 | 0) == 0) {
	          var $174 = ($171 << 2) + HEAP32[$13$s2] | 0;
	          HEAP32[$174 >> 2] = $tgcount_0_ph;
	        }
	        var $178 = $tgcount_0_ph - HEAP32[HEAP32[$13$s2] + ($171 << 2) >> 2] | 0;
	        if (($178 | 0) > 65535) {
	          break;
	        }
	        HEAP16[(HEAP32[$12$s2] + 8 >> 1) + ($prev_bg_5 * 6 | 0)] = $178 & 65535;
	        var $prev_bg_5_in = $prev_bg_5;
	      }
	      __E__pr_header(STRING_TABLE.__str11841 | 0, 427, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str361876 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	      __label__ = 55;
	      break;
	    }
	  } while (0);
	  if (__label__ == 48) {
	    __E__pr_header(STRING_TABLE.__str11841 | 0, 419, STRING_TABLE.__str102579 | 0);
	    var $163 = HEAP32[HEAP32[$li$s2] >> 2];
	    __E__pr_warn(STRING_TABLE.__str391879 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $163, tempInt));
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ReadTrigrams["X"] = 1;

	function _ngram_model_arpa_free($base) {
	  var $base$s2 = $base >> 2;
	  var $1 = $base + 68 | 0;
	  var $2 = $1;
	  var $5 = HEAP32[$1 >> 2];
	  _ckd_free($5);
	  var $8 = HEAP32[$base$s2 + 18];
	  _ckd_free($8);
	  var $12 = HEAP32[$base$s2 + 19];
	  _ckd_free($12);
	  var $16 = HEAP32[$base$s2 + 20];
	  _ckd_free($16);
	  var $19 = HEAP32[$base$s2 + 22];
	  _ckd_free($19);
	  var $23 = HEAP32[$base$s2 + 24];
	  _ckd_free($23);
	  _lm3g_tginfo_free($2);
	  var $27 = HEAP32[$base$s2 + 26];
	  _ckd_free($27);
	  return;
	  return;
	}

	function _ngram_model_arpa_apply_weights($base, $lw, $wip, $uw) {
	  var $2 = $base + 68 | 0;
	  _lm3g_apply_weights($base, $2, $lw, $wip, $uw);
	  return 0;
	  return null;
	}

	function _lm3g_template_score($base, $wid, $history, $n_hist, $n_used) {
	  var $1 = $base;
	  if (($n_hist | 0) == 0) {
	    HEAP32[$n_used >> 2] = 1;
	    var $_0 = HEAP32[(HEAP32[$base + 68 >> 2] >> 2) + ($wid * 3 | 0)];
	  } else if (($n_hist | 0) == 1) {
	    var $10 = HEAP32[$history >> 2];
	    var $11 = _lm3g_bg_score($1, $10, $wid, $n_used);
	    var $_0 = $11;
	  } else {
	    var $14 = HEAP32[$history + 4 >> 2];
	    var $15 = HEAP32[$history >> 2];
	    var $16 = _lm3g_tg_score($1, $14, $15, $wid, $n_used);
	    var $_0 = $16;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_template_raw_score($base, $wid, $history, $n_hist, $n_used) {
	  var $base$s2 = $base >> 2;
	  var __label__;
	  var $1 = $base;
	  do {
	    if (($n_hist | 0) == 0) {
	      HEAP32[$n_used >> 2] = 1;
	      var $16 = (HEAP32[(HEAP32[$base$s2 + 17] >> 2) + ($wid * 3 | 0)] - HEAP32[$base$s2 + 7] | 0) / HEAPF32[$base$s2 + 6] & -1;
	      var $20 = HEAP32[HEAP32[$base$s2 + 12] + ($wid << 2) >> 2];
	      var $21 = _strcmp($20, STRING_TABLE.__str531959 | 0);
	      if (($21 | 0) == 0) {
	        var $_0 = $16;
	        __label__ = 8;
	        break;
	      }
	      var $25 = HEAP32[$base$s2 + 5];
	      var $_idx2_val = HEAP8[$25 + 9 | 0];
	      var $_idx3 = $25 + 20 | 0;
	      var $_idx3_val = (tempDoubleI32[0] = HEAP32[$_idx3 >> 2], tempDoubleI32[1] = HEAP32[$_idx3 + 4 >> 2], tempDoubleF64[0]);
	      var $26 = _logmath_exp($_idx2_val, $_idx3_val, $16);
	      var $31 = HEAP32[$base$s2 + 10] + HEAP32[$base$s2 + 9] | 0;
	      var $32 = _logmath_exp($_idx2_val, $_idx3_val, $31);
	      var $33 = $26 - $32;
	      var $34 = _logmath_log($25, $33);
	      var $_0 = $34;
	      __label__ = 8;
	      break;
	    } else if (($n_hist | 0) == 1) {
	      var $36 = HEAP32[$history >> 2];
	      var $37 = _lm3g_bg_score($1, $36, $wid, $n_used);
	      var $score_1 = $37;
	      __label__ = 7;
	      break;
	    } else {
	      var $40 = HEAP32[$history + 4 >> 2];
	      var $41 = HEAP32[$history >> 2];
	      var $42 = _lm3g_tg_score($1, $40, $41, $wid, $n_used);
	      var $score_1 = $42;
	      __label__ = 7;
	      break;
	    }
	  } while (0);
	  if (__label__ == 7) {
	    var $score_1;
	    var $_0 = ($score_1 - HEAP32[$base$s2 + 7] | 0) / HEAPF32[$base$s2 + 6] & -1;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_raw_score["X"] = 1;

	function _lm3g_template_add_ug($base, $wid, $lweight) {
	  var $2 = $base + 68 | 0;
	  var $3 = _lm3g_add_ug($base, $2, $wid, $lweight);
	  return $3;
	  return null;
	}

	function _lm3g_template_flush($base) {
	  var $2 = $base + 68 | 0;
	  _lm3g_tginfo_reset($base, $2);
	  return;
	  return;
	}

	function _lm3g_template_iter_get($base, $out_score, $out_bowt) {
	  var $15$s2;
	  var $13$s2;
	  var $4$s2;
	  var $2$s2;
	  var __label__;
	  var $2$s2 = HEAPU32[$base >> 2] >> 2;
	  var $4$s2 = ($base + 12 | 0) >> 2;
	  var $12 = (HEAP32[$4$s2] - HEAP32[$2$s2 + 17] | 0) / 12 & -1;
	  var $13$s2 = ($base + 4 | 0) >> 2;
	  var $14 = HEAP32[$13$s2];
	  HEAP32[$14 >> 2] = $12;
	  var $15$s2 = ($base + 16 | 0) >> 2;
	  var $16 = HEAP32[$15$s2];
	  if (($16 | 0) != 0) {
	    var $19 = HEAP32[$16 >> 2];
	    var $21 = HEAP32[$13$s2] + 4 | 0;
	    HEAP32[$21 >> 2] = $19;
	  }
	  var $24 = $base + 20 | 0;
	  var $25 = HEAP32[$24 >> 2];
	  if (($25 | 0) != 0) {
	    var $29 = HEAP32[$25 >> 2];
	    var $31 = HEAP32[$13$s2] + 8 | 0;
	    HEAP32[$31 >> 2] = $29;
	  }
	  var $35 = HEAP16[$base + 8 >> 1] << 16 >> 16;
	  do {
	    if (($35 | 0) == 0) {
	      var $39 = HEAP32[HEAP32[$4$s2] >> 2];
	      HEAP32[$out_score >> 2] = $39;
	      var $43 = HEAP32[HEAP32[$4$s2] + 4 >> 2];
	      HEAP32[$out_bowt >> 2] = $43;
	      __label__ = 12;
	      break;
	    } else if (($35 | 0) == 1) {
	      var $55 = HEAP32[HEAP32[$2$s2 + 20] + ((HEAPU16[HEAP32[$15$s2] + 4 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_score >> 2] = $55;
	      var $57 = HEAP32[$2$s2 + 22];
	      if (($57 | 0) == 0) {
	        HEAP32[$out_bowt >> 2] = 0;
	        __label__ = 12;
	        break;
	      }
	      var $68 = HEAP32[$57 + ((HEAPU16[HEAP32[$15$s2] + 6 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_bowt >> 2] = $68;
	      __label__ = 12;
	      break;
	    } else if (($35 | 0) == 2) {
	      var $80 = HEAP32[HEAP32[$2$s2 + 24] + ((HEAPU16[HEAP32[$24 >> 2] + 4 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_score >> 2] = $80;
	      HEAP32[$out_bowt >> 2] = 0;
	      __label__ = 12;
	      break;
	    } else {
	      var $_0 = 0;
	      __label__ = 13;
	    }
	  } while (0);
	  if (__label__ == 12) {
	    var $_0 = HEAP32[$13$s2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter_get["X"] = 1;

	function _find_bg($bg, $n, $w) {
	  var __label__;
	  var $e_0_ph = $n;
	  var $b_0_ph = 0;
	  $_$103 : while (1) {
	    var $b_0_ph;
	    var $e_0_ph;
	    var $e_0 = $e_0_ph;
	    while (1) {
	      var $e_0;
	      if (($e_0 - $b_0_ph | 0) <= 16) {
	        var $i_0 = $b_0_ph;
	        __label__ = 8;
	        break $_$103;
	      }
	      var $6 = $e_0 + $b_0_ph >> 1;
	      var $8 = HEAPU32[($bg >> 2) + ($6 * 3 | 0)];
	      if ($8 >>> 0 < $w >>> 0) {
	        break;
	      }
	      if ($8 >>> 0 <= $w >>> 0) {
	        var $_0 = $6;
	        __label__ = 10;
	        break $_$103;
	      }
	      var $e_0 = $6;
	    }
	    var $e_0_ph = $e_0;
	    var $b_0_ph = $6 + 1 | 0;
	  }
	  $_$110 : do {
	    if (__label__ == 8) {
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($e_0 | 0)) {
	          var $_0 = -1;
	          break $_$110;
	        }
	        if ((HEAP32[($bg >> 2) + ($i_0 * 3 | 0)] | 0) == ($w | 0)) {
	          var $_0 = $i_0;
	          break $_$110;
	        }
	        var $i_0 = $i_0 + 1 | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_template_iter($base, $wid, $history, $n_hist) {
	  var $tginfo_1$s2;
	  var $49$s2;
	  var $42$s2;
	  var $2$s2;
	  var $history$s2 = $history >> 2;
	  var $1 = $base;
	  var $2 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 288), $2$s2 = $2 >> 2;
	  var $3 = $2;
	  _ngram_iter_init($3, $base, $n_hist, 0);
	  $_$2 : do {
	    if (($n_hist | 0) == 0) {
	      var $8 = HEAP32[$base + 68 >> 2] + $wid * 12 | 0;
	      HEAP32[$2$s2 + 3] = $8;
	      var $_0 = $3;
	    } else if (($n_hist | 0) == 1) {
	      var $13 = $base + 68 | 0;
	      var $16 = HEAP32[$13 >> 2] + HEAP32[$history$s2] * 12 | 0;
	      HEAP32[$2$s2 + 3] = $16;
	      var $19 = HEAP32[$history$s2];
	      var $20 = HEAP32[$13 >> 2];
	      var $22 = HEAP32[($20 + 8 >> 2) + ($19 * 3 | 0)];
	      var $26 = HEAP32[($20 + 8 >> 2) + (($19 + 1) * 3 | 0)] - $22 | 0;
	      var $29 = HEAP32[$base + 72 >> 2];
	      var $30 = $29 + $22 * 12 | 0;
	      var $32 = $2 + 16 | 0;
	      HEAP32[$32 >> 2] = $30;
	      var $33 = _find_bg($30, $26, $wid);
	      if (($33 | 0) < 0) {
	        _ngram_iter_free($3);
	        var $_0 = 0;
	      } else {
	        var $37 = $29 + ($33 + $22) * 12 | 0;
	        HEAP32[$32 >> 2] = $37;
	        var $_0 = $3;
	      }
	    } else if (($n_hist | 0) == 2) {
	      var $42$s2 = ($history + 4 | 0) >> 2;
	      var $44 = HEAP32[$base + 68 >> 2] + HEAP32[$42$s2] * 12 | 0;
	      HEAP32[$2$s2 + 3] = $44;
	      var $47 = HEAP32[$history$s2];
	      var $49$s2 = ($base + 108 | 0) >> 2;
	      var $prev_tginfo_0 = 0;
	      var $tginfo_0_in = ($47 << 2) + HEAP32[$49$s2] | 0;
	      while (1) {
	        var $tginfo_0_in;
	        var $prev_tginfo_0;
	        var $tginfo_0 = HEAP32[$tginfo_0_in >> 2];
	        if (($tginfo_0 | 0) == 0) {
	          var $60 = HEAP32[$42$s2];
	          _load_tginfo($1, $60, $47);
	          var $tginfo_1 = HEAP32[HEAP32[$49$s2] + (HEAP32[$history$s2] << 2) >> 2], $tginfo_1$s2 = $tginfo_1 >> 2;
	          break;
	        }
	        var $59 = $tginfo_0 + 20 | 0;
	        if ((HEAP32[$tginfo_0 >> 2] | 0) != (HEAP32[$42$s2] | 0)) {
	          var $prev_tginfo_0 = $tginfo_0;
	          var $tginfo_0_in = $59;
	          continue;
	        }
	        if (($prev_tginfo_0 | 0) == 0) {
	          var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	          break;
	        }
	        var $68 = HEAP32[$59 >> 2];
	        HEAP32[$prev_tginfo_0 + 20 >> 2] = $68;
	        var $73 = HEAP32[HEAP32[$49$s2] + (HEAP32[$history$s2] << 2) >> 2];
	        HEAP32[$59 >> 2] = $73;
	        var $76 = (HEAP32[$history$s2] << 2) + HEAP32[$49$s2] | 0;
	        HEAP32[$76 >> 2] = $tginfo_0;
	        var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $tginfo_1;
	      HEAP32[$tginfo_1$s2 + 3] = 1;
	      var $80 = HEAP32[$tginfo_1$s2 + 1];
	      var $82 = HEAP32[$tginfo_1$s2 + 4];
	      var $84 = $2 + 20 | 0;
	      HEAP32[$84 >> 2] = $82;
	      var $85 = _find_tg($82, $80, $wid);
	      if (($85 | 0) > -1) {
	        var $88 = ($85 << 3) + $82 | 0;
	        HEAP32[$84 >> 2] = $88;
	        var $89 = $base + 72 | 0;
	        var $93 = $2 + 16 | 0;
	        var $95 = $base + 104 | 0;
	        var $97 = $base + 76 | 0;
	        var $98 = $88;
	        var $storemerge = HEAP32[$89 >> 2];
	        while (1) {
	          var $storemerge;
	          HEAP32[$93 >> 2] = $storemerge;
	          var $100 = HEAP32[$89 >> 2];
	          var $106 = (($storemerge - $100 | 0) / 12 & -1) + 1 | 0;
	          if (((HEAPU16[($100 + 8 >> 1) + ($106 * 6 | 0)] & 65535) + HEAP32[HEAP32[$95 >> 2] + ($106 >> 9 << 2) >> 2] | 0) > ($98 - HEAP32[$97 >> 2] >> 3 | 0)) {
	            var $_0 = $3;
	            break $_$2;
	          }
	          var $storemerge = $storemerge + 12 | 0;
	        }
	      } else {
	        _ngram_iter_free($3);
	        var $_0 = 0;
	      }
	    } else {
	      ___assert_func(STRING_TABLE.__str481953 | 0, 358, STRING_TABLE.___func___lm3g_template_iter1957 | 0, STRING_TABLE.__str521958 | 0);
	      _ngram_iter_free($3);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter["X"] = 1;

	function _lm3g_template_mgrams($base, $m) {
	  var $8$s2;
	  var $1 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 368);
	  var $2 = $1;
	  _ngram_iter_init($2, $base, $m, 0);
	  var $5 = HEAPU32[$base + 68 >> 2];
	  var $7 = $1 + 12 | 0;
	  HEAP32[$7 >> 2] = $5;
	  var $8$s2 = ($base + 72 | 0) >> 2;
	  var $10 = HEAP32[$8$s2];
	  var $12 = $1 + 16 | 0;
	  HEAP32[$12 >> 2] = $10;
	  var $14 = $base + 76 | 0;
	  var $15 = HEAP32[$14 >> 2];
	  HEAP32[$1 + 20 >> 2] = $15;
	  var $18 = ($m | 0) > 1;
	  $_$25 : do {
	    if ($18) {
	      if ((HEAP32[HEAP32[$base + 4 >> 2] + 4 >> 2] | 0) <= 1) {
	        var $52 = $10;
	        break;
	      }
	      var $26 = $base + 104 | 0;
	      var $27 = $15;
	      var $29 = $10;
	      while (1) {
	        var $29;
	        var $30 = HEAP32[$8$s2];
	        var $36 = (($29 - $30 | 0) / 12 & -1) + 1 | 0;
	        if (((HEAPU16[($30 + 8 >> 1) + ($36 * 6 | 0)] & 65535) + HEAP32[HEAP32[$26 >> 2] + ($36 >> 9 << 2) >> 2] | 0) > ($27 - HEAP32[$14 >> 2] >> 3 | 0)) {
	          var $52 = $29;
	          break $_$25;
	        }
	        var $51 = $29 + 12 | 0;
	        HEAP32[$12 >> 2] = $51;
	        var $29 = $51;
	      }
	    } else {
	      var $52 = $10;
	    }
	  } while (0);
	  var $52;
	  var $53 = ($m | 0) > 0;
	  $_$32 : do {
	    if ($53) {
	      if ((HEAP32[HEAP32[$base + 4 >> 2] >> 2] | 0) <= 1) {
	        break;
	      }
	      var $62 = $52;
	      if ((HEAP32[$5 + 20 >> 2] | 0) > (($62 - HEAP32[$8$s2] | 0) / 12 & -1 | 0)) {
	        break;
	      }
	      var $67 = $5;
	      while (1) {
	        var $67;
	        var $68 = $67 + 12 | 0;
	        HEAP32[$7 >> 2] = $68;
	        if ((HEAP32[$67 + 32 >> 2] | 0) > (($62 - HEAP32[$8$s2] | 0) / 12 & -1 | 0)) {
	          break $_$32;
	        }
	        var $67 = $68;
	      }
	    }
	  } while (0);
	  return $2;
	  return null;
	}

	_lm3g_template_mgrams["X"] = 1;

	function _lm3g_template_successors($bitor) {
	  var $3$s2;
	  var $2$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($bitor | 0) >> 2;
	  var $2$s2 = HEAPU32[$1$s2] >> 2;
	  var $3 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 396), $3$s2 = $3 >> 2;
	  var $6 = HEAP32[$bitor + 12 >> 2];
	  HEAP32[$3$s2 + 3] = $6;
	  var $9 = $bitor + 8 | 0;
	  var $11 = HEAP16[$9 >> 1] << 16 >> 16;
	  do {
	    if (($11 | 0) == 0) {
	      var $23 = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $27 = HEAP32[$6 + 8 >> 2];
	      if ((($6 + 12 - HEAP32[$2$s2 + 17] | 0) / 12 & -1 | 0) < (HEAP32[$23 >> 2] | 0)) {
	        if (($27 | 0) == (HEAP32[$6 + 20 >> 2] | 0)) {
	          __label__ = 13;
	          break;
	        }
	      }
	      if (($27 | 0) == (HEAP32[$23 + 4 >> 2] | 0)) {
	        __label__ = 13;
	        break;
	      }
	      var $39 = HEAP32[$2$s2 + 18] + $27 * 12 | 0;
	      HEAP32[$3$s2 + 4] = $39;
	      __label__ = 12;
	      break;
	    } else if (($11 | 0) == 1) {
	      var $44 = HEAP32[$bitor + 16 >> 2];
	      var $45 = $44;
	      HEAP32[$3$s2 + 4] = $45;
	      var $50 = HEAP32[$2$s2 + 18];
	      var $51 = $50;
	      var $53 = $50;
	      var $55 = ($44 + 12 - $53 | 0) / 12 & -1;
	      var $58 = HEAPU32[HEAP32[$1$s2] + 4 >> 2];
	      if (($55 | 0) < (HEAP32[$58 + 4 >> 2] | 0)) {
	        var $65 = ($44 - $53 | 0) / 12 & -1;
	        var $66 = $65 >> 9;
	        var $69 = HEAPU32[$2$s2 + 26];
	        var $72 = $51 + $65 * 12 + 8 | 0;
	        if (((HEAPU16[$72 >> 1] & 65535) + HEAP32[$69 + ($66 << 2) >> 2] | 0) == ((HEAPU16[($51 + 8 >> 1) + ($55 * 6 | 0)] & 65535) + HEAP32[$69 + ($55 >> 9 << 2) >> 2] | 0)) {
	          __label__ = 13;
	          break;
	        }
	        var $85 = $69;
	        var $_pre_phi6 = $66;
	        var $_pre_phi8 = $72;
	      } else {
	        var $_pre3 = ($44 - $53 | 0) / 12 & -1;
	        var $85 = HEAP32[$2$s2 + 26];
	        var $_pre_phi6 = $_pre3 >> 9;
	        var $_pre_phi8 = $51 + $_pre3 * 12 + 8 | 0;
	      }
	      var $_pre_phi8;
	      var $_pre_phi6;
	      var $85;
	      var $90 = (HEAPU16[$_pre_phi8 >> 1] & 65535) + HEAP32[$85 + ($_pre_phi6 << 2) >> 2] | 0;
	      if (($90 | 0) == (HEAP32[$58 + 8 >> 2] | 0)) {
	        __label__ = 13;
	        break;
	      }
	      var $98 = ($90 << 3) + HEAP32[$2$s2 + 19] | 0;
	      HEAP32[$3$s2 + 5] = $98;
	      __label__ = 12;
	      break;
	    } else {
	      __label__ = 13;
	    }
	  } while (0);
	  if (__label__ == 12) {
	    var $102 = $3;
	    var $103 = HEAP32[$1$s2];
	    var $106 = (HEAP16[$9 >> 1] << 16 >> 16) + 1 | 0;
	    _ngram_iter_init($102, $103, $106, 1);
	    var $_0 = $102;
	  } else if (__label__ == 13) {
	    _ckd_free($3);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_successors["X"] = 1;

	function _lm3g_template_iter_next($base) {
	  var $89$s2;
	  var $83$s2;
	  var $77$s2;
	  var $72$s2;
	  var $27$s2;
	  var $24$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $2 = HEAP32[$base >> 2];
	  var $5 = HEAP16[$base + 8 >> 1] << 16 >> 16;
	  $_$73 : do {
	    if (($5 | 0) == 0) {
	      var $7 = $base + 12 | 0;
	      var $10 = HEAP32[$7 >> 2] + 12 | 0;
	      var $_c4 = $10;
	      HEAP32[$7 >> 2] = $_c4;
	      if ((($10 - HEAP32[$2 + 68 >> 2] | 0) / 12 & -1 | 0) < (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] | 0)) {
	        var $_0 = $base;
	        __label__ = 24;
	        break;
	      }
	      __label__ = 23;
	      break;
	    } else if (($5 | 0) == 1) {
	      var $24$s2 = ($base + 16 | 0) >> 2;
	      var $26 = HEAP32[$24$s2] + 12 | 0;
	      HEAP32[$24$s2] = $26;
	      var $27$s2 = ($2 + 72 | 0) >> 2;
	      var $28 = HEAP32[$27$s2];
	      var $29 = $26;
	      var $33 = $2 + 4 | 0;
	      if ((($29 - $28 | 0) / 12 & -1 | 0) >= (HEAP32[HEAP32[$33 >> 2] + 4 >> 2] | 0)) {
	        __label__ = 23;
	        break;
	      }
	      var $39 = $base + 12 | 0;
	      var $41 = $base + 10 | 0;
	      var $42 = $39 | 0;
	      var $43 = $2 + 68 | 0;
	      var $46 = HEAP32[$39 >> 2];
	      var $45 = $28;
	      while (1) {
	        var $45;
	        var $46;
	        var $50 = $46 + 12 | 0;
	        if ((($29 - $45 | 0) / 12 & -1 | 0) < (HEAP32[$46 + 20 >> 2] | 0)) {
	          var $_0 = $base;
	          __label__ = 24;
	          break $_$73;
	        }
	        if (HEAP16[$41 >> 1] << 16 >> 16 != 0) {
	          __label__ = 23;
	          break $_$73;
	        }
	        HEAP32[$42 >> 2] = $50;
	        if (($50 | 0) == (HEAP32[$43 >> 2] + HEAP32[HEAP32[$33 >> 2] >> 2] * 12 | 0)) {
	          break;
	        }
	        var $46 = $50;
	        var $45 = HEAP32[$27$s2];
	      }
	      __E__pr_header(STRING_TABLE.__str481953 | 0, 508, STRING_TABLE.__str102579 | 0);
	      var $69 = (HEAP32[$24$s2] - HEAP32[$27$s2] | 0) / 12 & -1;
	      __E__pr_warn(STRING_TABLE.__str491954 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $69, tempInt));
	      __label__ = 23;
	      break;
	    } else if (($5 | 0) == 2) {
	      var $72$s2 = ($base + 20 | 0) >> 2;
	      var $74 = HEAP32[$72$s2] + 8 | 0;
	      HEAP32[$72$s2] = $74;
	      var $75 = $2 + 68 | 0;
	      var $77$s2 = ($2 + 76 | 0) >> 2;
	      var $78 = HEAP32[$77$s2];
	      var $79 = $74;
	      var $83$s2 = ($2 + 4 | 0) >> 2;
	      if (($79 - $78 >> 3 | 0) >= (HEAP32[HEAP32[$83$s2] + 8 >> 2] | 0)) {
	        __label__ = 23;
	        break;
	      }
	      var $88 = $base + 16 | 0;
	      var $89$s2 = ($2 + 72 | 0) >> 2;
	      var $91 = $2 + 104 | 0;
	      var $92 = $base + 10 | 0;
	      var $96 = HEAP32[$88 >> 2];
	      var $95 = HEAP32[$89$s2];
	      var $94 = $78;
	      while (1) {
	        var $94;
	        var $95;
	        var $96;
	        var $101 = $96;
	        var $105 = (($101 - $95 | 0) / 12 & -1) + 1 | 0;
	        if (($79 - $94 >> 3 | 0) < ((HEAPU16[($95 + 8 >> 1) + ($105 * 6 | 0)] & 65535) + HEAP32[HEAP32[$91 >> 2] + ($105 >> 9 << 2) >> 2] | 0)) {
	          break;
	        }
	        if (HEAP16[$92 >> 1] << 16 >> 16 != 0) {
	          __label__ = 23;
	          break $_$73;
	        }
	        var $123 = $96 + 12 | 0;
	        HEAP32[$88 >> 2] = $123;
	        var $125 = HEAPU32[$89$s2];
	        if (($123 | 0) == ($125 + HEAP32[HEAP32[$83$s2] + 4 >> 2] * 12 | 0)) {
	          __E__pr_header(STRING_TABLE.__str481953 | 0, 526, STRING_TABLE.__str102579 | 0);
	          var $138 = HEAP32[$72$s2] - HEAP32[$77$s2] >> 3;
	          __E__pr_warn(STRING_TABLE.__str501955 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $138, tempInt));
	          __label__ = 23;
	          break $_$73;
	        }
	        var $96 = $123;
	        var $95 = $125;
	        var $94 = HEAP32[$77$s2];
	      }
	      var $115 = $base + 12 | 0;
	      var $117 = $115 | 0;
	      var $118 = $75;
	      var $141 = HEAP32[$115 >> 2];
	      var $140 = $95;
	      while (1) {
	        var $140;
	        var $141;
	        var $145 = $141 + 12 | 0;
	        if ((($101 - $140 | 0) / 12 & -1 | 0) < (HEAP32[$141 + 20 >> 2] | 0)) {
	          var $_0 = $base;
	          __label__ = 24;
	          break $_$73;
	        }
	        HEAP32[$117 >> 2] = $145;
	        if (($145 | 0) == (HEAP32[$118 >> 2] + HEAP32[HEAP32[$83$s2] >> 2] * 12 | 0)) {
	          break;
	        }
	        var $141 = $145;
	        var $140 = HEAP32[$89$s2];
	      }
	      __E__pr_header(STRING_TABLE.__str481953 | 0, 536, STRING_TABLE.__str102579 | 0);
	      var $161 = HEAP32[$72$s2] - HEAP32[$77$s2] >> 3;
	      __E__pr_warn(STRING_TABLE.__str511956 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $161, tempInt));
	      __label__ = 23;
	      break;
	    } else {
	      __label__ = 23;
	    }
	  } while (0);
	  if (__label__ == 23) {
	    _ngram_iter_free($base);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter_next["X"] = 1;

	function _lm3g_template_iter_free($base) {
	  var $1 = $base;
	  _ckd_free($1);
	  return;
	  return;
	}

	function _load_tginfo($model, $lw1, $lw2) {
	  var $24$s2;
	  var __label__;
	  var $2 = HEAP32[$model + 112 >> 2];
	  var $3 = ___listelem_malloc__($2, STRING_TABLE.__str481953 | 0, 107);
	  var $4 = $3;
	  var $5 = $3;
	  HEAP32[$5 >> 2] = $lw1;
	  var $7 = $3 + 16 | 0;
	  HEAP32[$7 >> 2] = 0;
	  var $8 = $model + 108 | 0;
	  var $11 = HEAP32[HEAP32[$8 >> 2] + ($lw2 << 2) >> 2];
	  var $13 = $3 + 20 | 0;
	  HEAP32[$13 >> 2] = $11;
	  var $15 = ($lw2 << 2) + HEAP32[$8 >> 2] | 0;
	  HEAP32[$15 >> 2] = $4;
	  var $17 = HEAP32[$model + 68 >> 2];
	  var $19 = HEAP32[($17 + 8 >> 2) + ($lw1 * 3 | 0)];
	  var $23 = HEAP32[($17 + 8 >> 2) + (($lw1 + 1) * 3 | 0)] - $19 | 0;
	  var $24$s2 = ($model + 72 | 0) >> 2;
	  var $25 = HEAP32[$24$s2];
	  var $26 = ($23 | 0) > 0;
	  do {
	    if ($26) {
	      var $28 = $25 + $19 * 12 | 0;
	      var $29 = _find_bg($28, $23, $lw2);
	      if (($29 | 0) <= -1) {
	        __label__ = 5;
	        break;
	      }
	      var $_sum = $29 + $19 | 0;
	      var $39 = HEAP32[HEAP32[$model + 88 >> 2] + ((HEAPU16[($25 + 6 >> 1) + ($_sum * 6 | 0)] & 65535) << 2) >> 2];
	      var $41 = $3 + 8 | 0;
	      HEAP32[$41 >> 2] = $39;
	      var $43 = $model + 104 | 0;
	      var $51 = (HEAPU16[(HEAP32[$24$s2] + 8 >> 1) + ($_sum * 6 | 0)] & 65535) + HEAP32[HEAP32[$43 >> 2] + ($_sum >> 9 << 2) >> 2] | 0;
	      var $54 = ($51 << 3) + HEAP32[$model + 76 >> 2] | 0;
	      HEAP32[$7 >> 2] = $54;
	      var $55 = $_sum + 1 | 0;
	      var $65 = HEAP32[HEAP32[$43 >> 2] + ($55 >> 9 << 2) >> 2] - $51 + (HEAPU16[(HEAP32[$24$s2] + 8 >> 1) + ($55 * 6 | 0)] & 65535) | 0;
	      var $67 = $3 + 4 | 0;
	      HEAP32[$67 >> 2] = $65;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  if (__label__ == 5) {
	    var $70 = $3 + 8 | 0;
	    HEAP32[$70 >> 2] = 0;
	    var $72 = $3 + 4 | 0;
	    HEAP32[$72 >> 2] = 0;
	  }
	  return;
	  return;
	}

	_load_tginfo["X"] = 1;

	function _find_tg($tg, $n, $w) {
	  var __label__;
	  var $e_0_ph = $n;
	  var $b_0_ph = 0;
	  $_$2 : while (1) {
	    var $b_0_ph;
	    var $e_0_ph;
	    var $e_0 = $e_0_ph;
	    while (1) {
	      var $e_0;
	      if (($e_0 - $b_0_ph | 0) <= 16) {
	        var $i_0 = $b_0_ph;
	        __label__ = 8;
	        break $_$2;
	      }
	      var $6 = $e_0 + $b_0_ph >> 1;
	      var $8 = HEAPU32[$tg + ($6 << 3) >> 2];
	      if ($8 >>> 0 < $w >>> 0) {
	        break;
	      }
	      if ($8 >>> 0 <= $w >>> 0) {
	        var $_0 = $6;
	        __label__ = 10;
	        break $_$2;
	      }
	      var $e_0 = $6;
	    }
	    var $e_0_ph = $e_0;
	    var $b_0_ph = $6 + 1 | 0;
	  }
	  $_$9 : do {
	    if (__label__ == 8) {
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($e_0 | 0)) {
	          var $_0 = -1;
	          break $_$9;
	        }
	        if ((HEAP32[$tg + ($i_0 << 3) >> 2] | 0) == ($w | 0)) {
	          var $_0 = $i_0;
	          break $_$9;
	        }
	        var $i_0 = $i_0 + 1 | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_bg_score($model, $lw1, $lw2, $n_used) {
	  var __label__;
	  var $1 = ($lw1 | 0) < 0;
	  do {
	    if ($1) {
	      __label__ = 4;
	    } else {
	      if ((HEAPU8[$model + 16 | 0] & 255) < 2) {
	        __label__ = 4;
	        break;
	      }
	      var $13 = $model + 68 | 0;
	      var $14 = HEAP32[$13 >> 2];
	      var $16 = HEAPU32[($14 + 8 >> 2) + ($lw1 * 3 | 0)];
	      var $20 = HEAP32[($14 + 8 >> 2) + (($lw1 + 1) * 3 | 0)] - $16 | 0;
	      var $22 = HEAP32[$model + 72 >> 2];
	      var $23 = $22 + $16 * 12 | 0;
	      var $24 = _find_bg($23, $20, $lw2);
	      if (($24 | 0) > -1) {
	        HEAP32[$n_used >> 2] = 2;
	        var $_0 = HEAP32[HEAP32[$model + 80 >> 2] + ((HEAPU16[($22 + 4 >> 1) + (($24 + $16) * 6 | 0)] & 65535) << 2) >> 2];
	        __label__ = 8;
	        break;
	      }
	      HEAP32[$n_used >> 2] = 1;
	      var $36 = HEAP32[$13 >> 2];
	      var $_0 = HEAP32[($36 >> 2) + ($lw2 * 3 | 0)] + HEAP32[($36 + 4 >> 2) + ($lw1 * 3 | 0)] | 0;
	      __label__ = 8;
	      break;
	    }
	  } while (0);
	  if (__label__ == 4) {
	    HEAP32[$n_used >> 2] = 1;
	    var $_0 = HEAP32[(HEAP32[$model + 68 >> 2] >> 2) + ($lw2 * 3 | 0)];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_bg_score["X"] = 1;

	function _lm3g_tg_score($model, $lw1, $lw2, $lw3, $n_used) {
	  var $tginfo_1$s2;
	  var $9$s2;
	  if ((HEAPU8[$model + 16 | 0] & 255) < 3 | ($lw1 | 0) < 0 | ($lw2 | 0) < 0) {
	    var $7 = _lm3g_bg_score($model, $lw2, $lw3, $n_used);
	    var $_0 = $7;
	  } else {
	    var $9$s2 = ($model + 108 | 0) >> 2;
	    var $prev_tginfo_0 = 0;
	    var $tginfo_0_in = ($lw2 << 2) + HEAP32[$9$s2] | 0;
	    while (1) {
	      var $tginfo_0_in;
	      var $prev_tginfo_0;
	      var $tginfo_0 = HEAPU32[$tginfo_0_in >> 2];
	      if (($tginfo_0 | 0) == 0) {
	        _load_tginfo($model, $lw1, $lw2);
	        var $tginfo_1 = HEAP32[HEAP32[$9$s2] + ($lw2 << 2) >> 2], $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $18 = $tginfo_0 + 20 | 0;
	      if ((HEAP32[$tginfo_0 >> 2] | 0) != ($lw1 | 0)) {
	        var $prev_tginfo_0 = $tginfo_0;
	        var $tginfo_0_in = $18;
	        continue;
	      }
	      if (($prev_tginfo_0 | 0) == 0) {
	        var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $25 = HEAP32[$18 >> 2];
	      HEAP32[$prev_tginfo_0 + 20 >> 2] = $25;
	      var $29 = HEAP32[HEAP32[$9$s2] + ($lw2 << 2) >> 2];
	      HEAP32[$18 >> 2] = $29;
	      var $31 = ($lw2 << 2) + HEAP32[$9$s2] | 0;
	      HEAP32[$31 >> 2] = $tginfo_0;
	      var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	      break;
	    }
	    var $tginfo_1;
	    HEAP32[$tginfo_1$s2 + 3] = 1;
	    var $35 = HEAP32[$tginfo_1$s2 + 1];
	    var $37 = HEAP32[$tginfo_1$s2 + 4];
	    var $38 = _find_tg($37, $35, $lw3);
	    if (($38 | 0) > -1) {
	      HEAP32[$n_used >> 2] = 3;
	      var $_0 = HEAP32[HEAP32[$model + 96 >> 2] + ((HEAPU16[$37 + ($38 << 3) + 4 >> 1] & 65535) << 2) >> 2];
	    } else {
	      var $51 = HEAP32[$tginfo_1$s2 + 2];
	      var $52 = _lm3g_bg_score($model, $lw2, $lw3, $n_used);
	      var $_0 = $52 + $51 | 0;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_tg_score["X"] = 1;

	function _ngram_model_dmp_read($config, $file_name, $lmath) {
	  var $489$s2;
	  var $484$s2;
	  var $374$s2;
	  var $334$s2;
	  var $291$s2;
	  var $lmath_idx9$s2;
	  var $122$s2;
	  var $115$s2;
	  var $n_trigram$s2;
	  var $n_bigram$s2;
	  var $n_unigram$s2;
	  var $k$s2;
	  var $is_pipe$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1052;
	  var __label__;
	  var $is_pipe = __stackBase__, $is_pipe$s2 = $is_pipe >> 2;
	  var $k = __stackBase__ + 4, $k$s2 = $k >> 2;
	  var $vn = __stackBase__ + 8;
	  var $ts = __stackBase__ + 12;
	  var $n_unigram = __stackBase__ + 16, $n_unigram$s2 = $n_unigram >> 2;
	  var $n_bigram = __stackBase__ + 20, $n_bigram$s2 = $n_bigram >> 2;
	  var $n_trigram = __stackBase__ + 24, $n_trigram$s2 = $n_trigram >> 2;
	  var $str = __stackBase__ + 28;
	  if (($config | 0) == 0) {
	    var $do_mmap_0 = 0;
	  } else {
	    var $config_idx_val = HEAP32[$config + 4 >> 2];
	    var $3 = _cmd_ln_int_r($config_idx_val, STRING_TABLE.__str1372706 | 0);
	    var $do_mmap_0 = ($3 | 0) != 0 & 1;
	  }
	  var $do_mmap_0;
	  var $7 = _fopen_comp($file_name, STRING_TABLE.__str92578 | 0, $is_pipe);
	  var $8 = ($7 | 0) == 0;
	  $_$5 : do {
	    if ($8) {
	      __E__pr_header(STRING_TABLE.__str21907 | 0, 106, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str41909 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $file_name, tempInt));
	      var $base_05 = 0;
	      __label__ = 157;
	      break;
	    }
	    if ((HEAP32[$is_pipe$s2] | 0) == 0 | ($do_mmap_0 | 0) == 0) {
	      var $do_mmap_1 = $do_mmap_0;
	    } else {
	      __E__pr_header(STRING_TABLE.__str21907 | 0, 111, STRING_TABLE.__str212436 | 0);
	      __E__pr_warn(STRING_TABLE.__str61911 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $do_mmap_1 = 0;
	    }
	    var $do_mmap_1;
	    var $15 = $k;
	    var $16 = _fread($15, 4, 1, $7);
	    var $17 = ($16 | 0) == 1;
	    $_$11 : do {
	      if ($17) {
	        var $19 = HEAP32[$k$s2];
	        var $20 = ($19 | 0) == 17;
	        do {
	          if (!$20) {
	            var $22 = _llvm_bswap_i32($19);
	            HEAP32[$k$s2] = $22;
	            if (($19 | 0) == 285212672) {
	              var $do_swap_0 = 1;
	              var $27 = $22;
	              break;
	            }
	            __E__pr_header(STRING_TABLE.__str21907 | 0, 121, STRING_TABLE.__str102579 | 0);
	            var $25 = HEAP32[$k$s2];
	            __E__pr_warn(STRING_TABLE.__str71912 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $25, HEAP32[tempInt + 4 >> 2] = $file_name, tempInt));
	            var $base_0 = 0;
	            break $_$11;
	          }
	          var $do_swap_0 = 0;
	          var $27 = 17;
	        } while (0);
	        var $27;
	        var $do_swap_0;
	        var $28 = $str | 0;
	        var $29 = _fread($28, 1, $27, $7);
	        if (($29 | 0) == (HEAP32[$k$s2] | 0)) {
	          var $34 = _strncmp($28, STRING_TABLE._darpa_hdr | 0, $29);
	          if (($34 | 0) == 0) {
	            if (($do_mmap_1 | 0) == 0) {
	              var $do_mmap_2 = 0;
	            } else {
	              if (($do_swap_0 | 0) == 0) {
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 142);
	                __E__pr_info(STRING_TABLE.__str121917 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                var $do_mmap_2 = $do_mmap_1;
	              } else {
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 137);
	                __E__pr_info(STRING_TABLE.__str111916 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                var $do_mmap_2 = 0;
	              }
	            }
	            var $do_mmap_2;
	            var $44 = _fread($15, 4, 1, $7);
	            if (($44 | 0) != 1) {
	              var $base_0 = 0;
	              break;
	            }
	            var $47 = ($do_swap_0 | 0) != 0;
	            var $48 = HEAP32[$k$s2];
	            if ($47) {
	              var $50 = _llvm_bswap_i32($48);
	              HEAP32[$k$s2] = $50;
	              var $51 = $50;
	            } else {
	              var $51 = $48;
	            }
	            var $51;
	            var $52 = _fread($28, 1, $51, $7);
	            if (($52 | 0) == (HEAP32[$k$s2] | 0)) {
	              var $57 = $vn;
	              var $58 = _fread($57, 4, 1, $7);
	              if (($58 | 0) != 1) {
	                var $base_0 = 0;
	                break;
	              }
	              var $61 = HEAP32[$vn >> 2];
	              if ($47) {
	                var $63 = _llvm_bswap_i32($61);
	                HEAP32[$vn >> 2] = $63;
	                var $64 = $63;
	              } else {
	                var $64 = $61;
	              }
	              var $64;
	              var $65 = ($64 | 0) < 1;
	              $_$40 : do {
	                if ($65) {
	                  var $67 = $ts;
	                  var $68 = _fread($67, 4, 1, $7);
	                  if (($68 | 0) != 1) {
	                    var $base_0 = 0;
	                    break $_$11;
	                  }
	                  if ($47) {
	                    var $72 = HEAP32[$ts >> 2];
	                    var $73 = _llvm_bswap_i32($72);
	                    HEAP32[$ts >> 2] = $73;
	                  } else {
	                    __label__ = 32;
	                  }
	                  while (1) {
	                    var $74 = _fread($15, 4, 1, $7);
	                    if (($74 | 0) != 1) {
	                      var $base_0 = 0;
	                      break $_$11;
	                    }
	                    var $77 = HEAP32[$k$s2];
	                    if ($47) {
	                      var $79 = _llvm_bswap_i32($77);
	                      HEAP32[$k$s2] = $79;
	                      var $80 = $79;
	                    } else {
	                      var $80 = $77;
	                    }
	                    var $80;
	                    if (($80 | 0) == 0) {
	                      var $88 = $n_unigram;
	                      var $89 = _fread($88, 4, 1, $7);
	                      if (($89 | 0) != 1) {
	                        var $base_0 = 0;
	                        break $_$11;
	                      }
	                      if (!$47) {
	                        break $_$40;
	                      }
	                      var $93 = HEAP32[$n_unigram$s2];
	                      var $94 = _llvm_bswap_i32($93);
	                      HEAP32[$n_unigram$s2] = $94;
	                      break $_$40;
	                    }
	                    var $83 = _fread($28, 1, $80, $7);
	                    if (($83 | 0) == (HEAP32[$k$s2] | 0)) {
	                      continue;
	                    }
	                    __E__pr_header(STRING_TABLE.__str21907 | 0, 176, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str141919 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    var $base_0 = 0;
	                    break $_$11;
	                  }
	                } else {
	                  HEAP32[$n_unigram$s2] = $64;
	                }
	              } while (0);
	              var $97 = $n_bigram;
	              var $98 = _fread($97, 4, 1, $7);
	              if (($98 | 0) != 1) {
	                var $base_0 = 0;
	                break;
	              }
	              if ($47) {
	                var $102 = HEAP32[$n_bigram$s2];
	                var $103 = _llvm_bswap_i32($102);
	                HEAP32[$n_bigram$s2] = $103;
	              }
	              var $105 = $n_trigram;
	              var $106 = _fread($105, 4, 1, $7);
	              if (($106 | 0) != 1) {
	                var $base_0 = 0;
	                break;
	              }
	              var $109 = HEAP32[$n_trigram$s2];
	              if ($47) {
	                var $111 = _llvm_bswap_i32($109);
	                HEAP32[$n_trigram$s2] = $111;
	                var $112 = $111;
	              } else {
	                var $112 = $109;
	              }
	              var $112;
	              __E__pr_info_header(STRING_TABLE.__str21907 | 0, 196);
	              var $113 = HEAP32[$n_unigram$s2];
	              var $114 = HEAP32[$n_bigram$s2];
	              __E__pr_info(STRING_TABLE.__str151920 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $113, HEAP32[tempInt + 4 >> 2] = $114, HEAP32[tempInt + 8 >> 2] = $112, tempInt));
	              var $115 = ___ckd_calloc__(1, 120, STRING_TABLE.__str21907 | 0, 199), $115$s2 = $115 >> 2;
	              var $116 = $115;
	              if (($112 | 0) > 0) {
	                var $n_0 = 3;
	              } else {
	                var $_ = ($114 | 0) > 0 ? 2 : 1;
	                var $n_0 = $_;
	              }
	              var $n_0;
	              _ngram_model_init($116, _ngram_model_dmp_funcs, $lmath, $n_0, $113);
	              var $122$s2 = ($115 + 4 | 0) >> 2;
	              var $123 = HEAP32[$122$s2];
	              HEAP32[$123 >> 2] = $113;
	              var $125 = HEAP32[$122$s2] + 4 | 0;
	              HEAP32[$125 >> 2] = $114;
	              var $127 = HEAP32[$122$s2] + 8 | 0;
	              HEAP32[$127 >> 2] = $112;
	              var $128 = $113 + 1 | 0;
	              var $129 = _new_unigram_table1989($128);
	              HEAP32[$115$s2 + 17] = $129;
	              var $lmath_idx8 = $lmath + 9 | 0;
	              var $lmath_idx9$s2 = ($lmath + 52 | 0) >> 2;
	              var $i_0 = 0;
	              var $ugptr_0 = $129;
	              var $133 = $113;
	              while (1) {
	                var $133;
	                var $ugptr_0;
	                var $i_0;
	                if (($i_0 | 0) > ($133 | 0)) {
	                  break;
	                }
	                var $136 = $ugptr_0;
	                var $137 = _fread($136, 4, 1, $7);
	                if (($137 | 0) != 1) {
	                  __E__pr_header(STRING_TABLE.__str21907 | 0, 219, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str161921 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $i_0, tempInt));
	                  var $base_0 = $116;
	                  break $_$11;
	                }
	                var $141 = _fread($136, 12, 1, $7);
	                if (($141 | 0) != 1) {
	                  __E__pr_header(STRING_TABLE.__str21907 | 0, 224, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str171922 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  _ngram_model_free($116);
	                  var $144 = HEAP32[$is_pipe$s2];
	                  _fclose_comp($7, $144);
	                  var $_0 = 0;
	                  __label__ = 158;
	                  break $_$5;
	                }
	                if ($47) {
	                  var $147 = $ugptr_0;
	                  var $148 = HEAP32[$147 >> 2];
	                  var $149 = _llvm_bswap_i32($148);
	                  HEAP32[$147 >> 2] = $149;
	                  var $151 = $ugptr_0 + 4 | 0;
	                  var $152 = HEAP32[$151 >> 2];
	                  var $153 = _llvm_bswap_i32($152);
	                  HEAP32[$151 >> 2] = $153;
	                  var $154 = $ugptr_0 + 8 | 0;
	                  var $155 = HEAP32[$154 >> 2];
	                  var $156 = _llvm_bswap_i32($155);
	                  HEAP32[$154 >> 2] = $156;
	                  var $157 = (tempDoubleI32[0] = $149, tempDoubleF32[0]);
	                  var $158 = (tempDoubleI32[0] = $153, tempDoubleF32[0]);
	                  var $161 = $157;
	                  var $160 = $158;
	                  var $_pre_phi82 = $147;
	                  var $_pre_phi86 = $151;
	                } else {
	                  var $_phi_trans_insert76 = $ugptr_0 + 4 | 0;
	                  var $161 = HEAPF32[$ugptr_0 >> 2];
	                  var $160 = HEAPF32[$_phi_trans_insert76 >> 2];
	                  var $_pre_phi82 = $ugptr_0;
	                  var $_pre_phi86 = $_phi_trans_insert76;
	                }
	                var $_pre_phi86;
	                var $_pre_phi82;
	                var $160;
	                var $161;
	                var $lmath_idx8_val = HEAP8[$lmath_idx8];
	                var $lmath_idx9_val = (tempDoubleI32[0] = HEAP32[$lmath_idx9$s2], tempDoubleI32[1] = HEAP32[$lmath_idx9$s2 + 1], tempDoubleF64[0]);
	                var $163 = _logmath_log10_to_log($lmath_idx8_val, $lmath_idx9_val, $161);
	                HEAP32[$_pre_phi82 >> 2] = $163;
	                var $lmath_idx6_val = HEAP8[$lmath_idx8];
	                var $lmath_idx7_val = (tempDoubleI32[0] = HEAP32[$lmath_idx9$s2], tempDoubleI32[1] = HEAP32[$lmath_idx9$s2 + 1], tempDoubleF64[0]);
	                var $165 = _logmath_log10_to_log($lmath_idx6_val, $lmath_idx7_val, $160);
	                HEAP32[$_pre_phi86 >> 2] = $165;
	                var $i_0 = $i_0 + 1 | 0;
	                var $ugptr_0 = $ugptr_0 + 12 | 0;
	                var $133 = HEAP32[$n_unigram$s2];
	              }
	              __E__pr_info_header(STRING_TABLE.__str21907 | 0, 242);
	              __E__pr_info(STRING_TABLE.__str181923 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $133, tempInt));
	              var $169 = ($do_mmap_2 | 0) == 0;
	              do {
	                if ($169) {
	                  var $offset_0 = 0;
	                  var $map_base_0 = 0;
	                  var $do_mmap_3 = 0;
	                } else {
	                  var $171 = _ftell($7);
	                  var $172 = _fseek($7, 0, 2);
	                  var $173 = _ftell($7);
	                  var $174 = _fseek($7, $171, 0);
	                  if (($171 & 3 | 0) == 0) {
	                    var $179 = _mmio_file_read($file_name);
	                    HEAP32[$115$s2 + 29] = $179;
	                    if (($179 | 0) == 0) {
	                      var $offset_0 = $171;
	                      var $map_base_0 = 0;
	                      var $do_mmap_3 = 0;
	                      break;
	                    }
	                    var $_idx_val = HEAP32[$179 >> 2];
	                    var $184 = _mmio_file_ptr($_idx_val);
	                    var $offset_0 = $171;
	                    var $map_base_0 = $184;
	                    var $do_mmap_3 = $do_mmap_2;
	                  } else {
	                    __E__pr_header(STRING_TABLE.__str21907 | 0, 253, STRING_TABLE.__str212436 | 0);
	                    __E__pr_warn(STRING_TABLE.__str191924 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    var $offset_0 = $171;
	                    var $map_base_0 = 0;
	                    var $do_mmap_3 = 0;
	                  }
	                }
	              } while (0);
	              var $do_mmap_3;
	              var $map_base_0;
	              var $offset_0;
	              var $185 = HEAP32[$n_bigram$s2];
	              if (($185 | 0) > 0) {
	                var $188 = ($do_mmap_3 | 0) == 0;
	                $_$93 : do {
	                  if ($188) {
	                    var $198 = $185 + 1 | 0;
	                    var $199 = ___ckd_calloc__($198, 8, STRING_TABLE.__str21907 | 0, 275);
	                    var $200 = $199;
	                    var $202 = $115 + 72 | 0;
	                    HEAP32[$202 >> 2] = $200;
	                    var $203 = _fread($199, 8, $198, $7);
	                    if (($203 | 0) != ($198 | 0)) {
	                      __E__pr_header(STRING_TABLE.__str21907 | 0, 278, STRING_TABLE.__str102579 | 0);
	                      __E__pr_warn(STRING_TABLE.__str201925 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                      var $base_0 = $116;
	                      break $_$11;
	                    }
	                    if (($185 | 0) < 0 | $47 ^ 1) {
	                      var $offset_1 = $offset_0;
	                      var $226 = $185;
	                      break;
	                    }
	                    var $i_141 = 0;
	                    var $bgptr_042 = HEAP32[$202 >> 2];
	                    while (1) {
	                      var $bgptr_042;
	                      var $i_141;
	                      var $210 = $bgptr_042 | 0;
	                      var $211 = HEAP16[$210 >> 1];
	                      var $212 = _llvm_bswap_i16($211);
	                      HEAP16[$210 >> 1] = $212;
	                      var $213 = $bgptr_042 + 2 | 0;
	                      var $214 = HEAP16[$213 >> 1];
	                      var $215 = _llvm_bswap_i16($214);
	                      HEAP16[$213 >> 1] = $215;
	                      var $216 = $bgptr_042 + 4 | 0;
	                      var $217 = HEAP16[$216 >> 1];
	                      var $218 = _llvm_bswap_i16($217);
	                      HEAP16[$216 >> 1] = $218;
	                      var $219 = $bgptr_042 + 6 | 0;
	                      var $220 = HEAP16[$219 >> 1];
	                      var $221 = _llvm_bswap_i16($220);
	                      HEAP16[$219 >> 1] = $221;
	                      var $222 = $i_141 + 1 | 0;
	                      var $224 = HEAP32[$n_bigram$s2];
	                      if (($222 | 0) > ($224 | 0)) {
	                        var $offset_1 = $offset_0;
	                        var $226 = $224;
	                        break $_$93;
	                      }
	                      var $i_141 = $222;
	                      var $bgptr_042 = $bgptr_042 + 8 | 0;
	                    }
	                  } else {
	                    HEAP32[$115$s2 + 18] = $map_base_0 + $offset_0 | 0;
	                    var $offset_1 = ($185 << 3) + $offset_0 + 8 | 0;
	                    var $226 = $185;
	                  }
	                } while (0);
	                var $226;
	                var $offset_1;
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 291);
	                __E__pr_info(STRING_TABLE.__str211926 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $226, tempInt));
	                var $offset_2 = $offset_1;
	                var $227 = $226;
	              } else {
	                var $offset_2 = $offset_0;
	                var $227 = $185;
	              }
	              var $227;
	              var $offset_2;
	              var $228 = HEAP32[$n_trigram$s2];
	              if (($228 | 0) > 0) {
	                var $231 = ($do_mmap_3 | 0) == 0;
	                do {
	                  if ($231) {
	                    var $240 = ___ckd_calloc__($228, 4, STRING_TABLE.__str21907 | 0, 302);
	                    var $241 = $240;
	                    var $243 = $115 + 76 | 0;
	                    HEAP32[$243 >> 2] = $241;
	                    var $244 = _fread($240, 4, $228, $7);
	                    if (($244 | 0) != ($228 | 0)) {
	                      __E__pr_header(STRING_TABLE.__str21907 | 0, 306, STRING_TABLE.__str102579 | 0);
	                      __E__pr_warn(STRING_TABLE.__str221927 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                      var $base_0 = $116;
	                      break $_$11;
	                    }
	                    if (!$47) {
	                      var $offset_3 = $offset_2;
	                      var $260 = $228;
	                      var $_pre52 = $227;
	                      break;
	                    }
	                    var $i_236 = 0;
	                    var $tgptr_037 = HEAP32[$243 >> 2];
	                    while (1) {
	                      var $tgptr_037;
	                      var $i_236;
	                      var $250 = $tgptr_037 | 0;
	                      var $251 = HEAP16[$250 >> 1];
	                      var $252 = _llvm_bswap_i16($251);
	                      HEAP16[$250 >> 1] = $252;
	                      var $253 = $tgptr_037 + 2 | 0;
	                      var $254 = HEAP16[$253 >> 1];
	                      var $255 = _llvm_bswap_i16($254);
	                      HEAP16[$253 >> 1] = $255;
	                      var $256 = $i_236 + 1 | 0;
	                      var $258 = HEAP32[$n_trigram$s2];
	                      if (($256 | 0) >= ($258 | 0)) {
	                        break;
	                      }
	                      var $i_236 = $256;
	                      var $tgptr_037 = $tgptr_037 + 4 | 0;
	                    }
	                    var $offset_3 = $offset_2;
	                    var $260 = $258;
	                    var $_pre52 = HEAP32[$n_bigram$s2];
	                  } else {
	                    HEAP32[$115$s2 + 19] = $map_base_0 + $offset_2 | 0;
	                    var $offset_3 = ($228 << 2) + $offset_2 | 0;
	                    var $260 = $228;
	                    var $_pre52 = $227;
	                  }
	                } while (0);
	                var $_pre52;
	                var $260;
	                var $offset_3;
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 317);
	                __E__pr_info(STRING_TABLE.__str231928 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $260, tempInt));
	                var $261 = HEAP32[$n_unigram$s2];
	                var $262 = ___ckd_calloc__($261, 4, STRING_TABLE.__str21907 | 0, 319);
	                var $263 = $262;
	                HEAP32[$115$s2 + 27] = $263;
	                var $266 = _listelem_alloc_init(24);
	                HEAP32[$115$s2 + 28] = $266;
	                var $offset_4 = $offset_3;
	                var $271 = $_pre52;
	                var $270 = $260;
	              } else {
	                var $offset_4 = $offset_2;
	                var $271 = $227;
	                var $270 = $228;
	              }
	              var $270;
	              var $271;
	              var $offset_4;
	              if (($271 | 0) > 0) {
	                if (($do_mmap_3 | 0) != 0) {
	                  var $276 = _fseek($7, $offset_4, 0);
	                }
	                var $278 = _fread($15, 4, 1, $7);
	                if (($278 | 0) != 1) {
	                  var $base_0 = $116;
	                  break;
	                }
	                var $281 = HEAP32[$k$s2];
	                if ($47) {
	                  var $283 = _llvm_bswap_i32($281);
	                  HEAP32[$k$s2] = $283;
	                  var $284 = $283;
	                } else {
	                  var $284 = $281;
	                }
	                var $284;
	                HEAP32[$115$s2 + 21] = $284;
	                var $287 = HEAP32[$k$s2];
	                var $288 = ___ckd_calloc__($287, 4, STRING_TABLE.__str21907 | 0, 331);
	                var $289 = $288;
	                var $291$s2 = ($115 + 80 | 0) >> 2;
	                HEAP32[$291$s2] = $289;
	                var $292 = HEAP32[$k$s2];
	                var $293 = _fread($288, 4, $292, $7);
	                if (($293 | 0) != (HEAP32[$k$s2] | 0)) {
	                  __E__pr_header(STRING_TABLE.__str21907 | 0, 333, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str241929 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $base_0 = $116;
	                  break;
	                }
	                var $296 = ($293 | 0) > 0;
	                $_$129 : do {
	                  if ($296) {
	                    var $i_332 = 0;
	                    while (1) {
	                      var $i_332;
	                      if ($47) {
	                        var $301 = ($i_332 << 2) + HEAP32[$291$s2] | 0;
	                        var $302 = HEAP32[$301 >> 2];
	                        var $303 = _llvm_bswap_i32($302);
	                        HEAP32[$301 >> 2] = $303;
	                      }
	                      var $305 = HEAP32[$291$s2];
	                      var $308 = HEAPF32[$305 + ($i_332 << 2) >> 2];
	                      var $lmath_idx4_val = HEAP8[$lmath_idx8];
	                      var $lmath_idx5_val = (tempDoubleI32[0] = HEAP32[$lmath_idx9$s2], tempDoubleI32[1] = HEAP32[$lmath_idx9$s2 + 1], tempDoubleF64[0]);
	                      var $309 = _logmath_log10_to_log($lmath_idx4_val, $lmath_idx5_val, $308);
	                      var $311 = ($i_332 << 2) + $305 | 0;
	                      HEAP32[$311 >> 2] = $309;
	                      var $312 = $i_332 + 1 | 0;
	                      if (($312 | 0) >= (HEAP32[$k$s2] | 0)) {
	                        break $_$129;
	                      }
	                      var $i_332 = $312;
	                    }
	                  }
	                } while (0);
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 342);
	                var $315 = HEAP32[$k$s2];
	                __E__pr_info(STRING_TABLE.__str251930 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $315, tempInt));
	              }
	              var $317 = $115 + 16 | 0;
	              var $319 = (HEAPU8[$317] & 255) > 2;
	              do {
	                if ($319) {
	                  var $321 = _fread($15, 4, 1, $7);
	                  if (($321 | 0) != 1) {
	                    var $base_0 = $116;
	                    break $_$11;
	                  }
	                  var $324 = HEAPU32[$k$s2];
	                  if ($47) {
	                    var $326 = _llvm_bswap_i32($324);
	                    HEAP32[$k$s2] = $326;
	                    var $327 = $326;
	                  } else {
	                    var $327 = $324;
	                  }
	                  var $327;
	                  HEAP32[$115$s2 + 23] = $327;
	                  var $330 = HEAP32[$k$s2];
	                  var $331 = ___ckd_calloc__($330, 4, STRING_TABLE.__str21907 | 0, 351);
	                  var $332 = $331;
	                  var $334$s2 = ($115 + 88 | 0) >> 2;
	                  HEAP32[$334$s2] = $332;
	                  var $335 = HEAP32[$k$s2];
	                  var $336 = _fread($331, 4, $335, $7);
	                  if (($336 | 0) != (HEAP32[$k$s2] | 0)) {
	                    __E__pr_header(STRING_TABLE.__str21907 | 0, 353, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str261931 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    var $base_0 = $116;
	                    break $_$11;
	                  }
	                  var $339 = ($336 | 0) > 0;
	                  $_$146 : do {
	                    if ($339) {
	                      var $i_428 = 0;
	                      while (1) {
	                        var $i_428;
	                        if ($47) {
	                          var $344 = ($i_428 << 2) + HEAP32[$334$s2] | 0;
	                          var $345 = HEAP32[$344 >> 2];
	                          var $346 = _llvm_bswap_i32($345);
	                          HEAP32[$344 >> 2] = $346;
	                        }
	                        var $348 = HEAP32[$334$s2];
	                        var $351 = HEAPF32[$348 + ($i_428 << 2) >> 2];
	                        var $lmath_idx2_val = HEAP8[$lmath_idx8];
	                        var $lmath_idx3_val = (tempDoubleI32[0] = HEAP32[$lmath_idx9$s2], tempDoubleI32[1] = HEAP32[$lmath_idx9$s2 + 1], tempDoubleF64[0]);
	                        var $352 = _logmath_log10_to_log($lmath_idx2_val, $lmath_idx3_val, $351);
	                        var $354 = ($i_428 << 2) + $348 | 0;
	                        HEAP32[$354 >> 2] = $352;
	                        var $355 = $i_428 + 1 | 0;
	                        if (($355 | 0) >= (HEAP32[$k$s2] | 0)) {
	                          break $_$146;
	                        }
	                        var $i_428 = $355;
	                      }
	                    }
	                  } while (0);
	                  __E__pr_info_header(STRING_TABLE.__str21907 | 0, 362);
	                  var $358 = HEAP32[$k$s2];
	                  __E__pr_info(STRING_TABLE.__str271932 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $358, tempInt));
	                  if ((HEAPU8[$317] & 255) <= 2) {
	                    break;
	                  }
	                  var $361 = _fread($15, 4, 1, $7);
	                  if (($361 | 0) != 1) {
	                    var $base_0 = $116;
	                    break $_$11;
	                  }
	                  var $364 = HEAPU32[$k$s2];
	                  if ($47) {
	                    var $366 = _llvm_bswap_i32($364);
	                    HEAP32[$k$s2] = $366;
	                    var $367 = $366;
	                  } else {
	                    var $367 = $364;
	                  }
	                  var $367;
	                  HEAP32[$115$s2 + 25] = $367;
	                  var $370 = HEAP32[$k$s2];
	                  var $371 = ___ckd_calloc__($370, 4, STRING_TABLE.__str21907 | 0, 371);
	                  var $372 = $371;
	                  var $374$s2 = ($115 + 96 | 0) >> 2;
	                  HEAP32[$374$s2] = $372;
	                  var $375 = HEAP32[$k$s2];
	                  var $376 = _fread($371, 4, $375, $7);
	                  if (($376 | 0) != (HEAP32[$k$s2] | 0)) {
	                    __E__pr_header(STRING_TABLE.__str21907 | 0, 373, STRING_TABLE.__str102579 | 0);
	                    __E__pr_warn(STRING_TABLE.__str281933 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                    var $base_0 = $116;
	                    break $_$11;
	                  }
	                  var $379 = ($376 | 0) > 0;
	                  $_$160 : do {
	                    if ($379) {
	                      var $i_524 = 0;
	                      while (1) {
	                        var $i_524;
	                        if ($47) {
	                          var $384 = ($i_524 << 2) + HEAP32[$374$s2] | 0;
	                          var $385 = HEAP32[$384 >> 2];
	                          var $386 = _llvm_bswap_i32($385);
	                          HEAP32[$384 >> 2] = $386;
	                        }
	                        var $388 = HEAP32[$374$s2];
	                        var $391 = HEAPF32[$388 + ($i_524 << 2) >> 2];
	                        var $lmath_idx_val = HEAP8[$lmath_idx8];
	                        var $lmath_idx1_val = (tempDoubleI32[0] = HEAP32[$lmath_idx9$s2], tempDoubleI32[1] = HEAP32[$lmath_idx9$s2 + 1], tempDoubleF64[0]);
	                        var $392 = _logmath_log10_to_log($lmath_idx_val, $lmath_idx1_val, $391);
	                        var $394 = ($i_524 << 2) + $388 | 0;
	                        HEAP32[$394 >> 2] = $392;
	                        var $395 = $i_524 + 1 | 0;
	                        if (($395 | 0) >= (HEAP32[$k$s2] | 0)) {
	                          break $_$160;
	                        }
	                        var $i_524 = $395;
	                      }
	                    }
	                  } while (0);
	                  __E__pr_info_header(STRING_TABLE.__str21907 | 0, 382);
	                  var $398 = HEAP32[$k$s2];
	                  __E__pr_info(STRING_TABLE.__str291934 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $398, tempInt));
	                }
	              } while (0);
	              var $399 = ($do_mmap_3 | 0) != 0;
	              if ($399) {
	                var $401 = _ftell($7);
	                var $offset_5 = $401;
	              } else {
	                var $offset_5 = $offset_4;
	              }
	              var $offset_5;
	              if (($270 | 0) > 0) {
	                $_$175 : do {
	                  if ($399) {
	                    var $407 = $map_base_0 + $offset_5 | 0;
	                    HEAP32[$k$s2] = HEAPU8[$407] | HEAPU8[$407 + 1] << 8 | HEAPU8[$407 + 2] << 16 | HEAPU8[$407 + 3] << 24 | 0;
	                    var $409 = $offset_5 + 4 | 0;
	                    HEAP32[$115$s2 + 26] = $map_base_0 + $409 | 0;
	                    var $offset_6 = (HEAP32[$k$s2] << 2) + $409 | 0;
	                  } else {
	                    HEAP32[$k$s2] = (($271 + 1 | 0) / 512 & -1) + 1 | 0;
	                    var $421 = _fread($15, 4, 1, $7);
	                    if (($421 | 0) != 1) {
	                      var $base_0 = $116;
	                      break $_$11;
	                    }
	                    var $424 = HEAP32[$k$s2];
	                    if ($47) {
	                      var $426 = _llvm_bswap_i32($424);
	                      HEAP32[$k$s2] = $426;
	                      var $427 = $426;
	                    } else {
	                      var $427 = $424;
	                    }
	                    var $427;
	                    var $428 = ___ckd_calloc__($427, 4, STRING_TABLE.__str21907 | 0, 400);
	                    var $431 = $115 + 104 | 0;
	                    HEAP32[$431 >> 2] = $428;
	                    var $432 = HEAP32[$k$s2];
	                    var $433 = _fread($428, 4, $432, $7);
	                    if (($433 | 0) != (HEAP32[$k$s2] | 0)) {
	                      __E__pr_header(STRING_TABLE.__str21907 | 0, 403, STRING_TABLE.__str102579 | 0);
	                      __E__pr_warn(STRING_TABLE.__str301935 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                      var $base_0 = $116;
	                      break $_$11;
	                    }
	                    if (!($47 & ($433 | 0) > 0)) {
	                      var $offset_6 = $offset_5;
	                      break;
	                    }
	                    var $i_66 = 0;
	                    while (1) {
	                      var $i_66;
	                      var $440 = ($i_66 << 2) + HEAP32[$431 >> 2] | 0;
	                      var $441 = HEAP32[$440 >> 2];
	                      var $442 = _llvm_bswap_i32($441);
	                      HEAP32[$440 >> 2] = $442;
	                      var $443 = $i_66 + 1 | 0;
	                      if (($443 | 0) >= (HEAP32[$k$s2] | 0)) {
	                        var $offset_6 = $offset_5;
	                        break $_$175;
	                      }
	                      var $i_66 = $443;
	                    }
	                  }
	                } while (0);
	                var $offset_6;
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 410);
	                var $446 = HEAP32[$k$s2];
	                __E__pr_info(STRING_TABLE.__str311936 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $446, tempInt));
	                var $offset_7 = $offset_6;
	              } else {
	                var $offset_7 = $offset_5;
	              }
	              var $offset_7;
	              do {
	                if (!$399) {
	                  HEAP8[$115 + 18 | 0] = 1;
	                  var $456 = _fread($15, 4, 1, $7);
	                  if (($456 | 0) != 1) {
	                    var $base_0 = $116;
	                    break $_$11;
	                  }
	                  var $459 = HEAP32[$k$s2];
	                  if ($47) {
	                    var $461 = _llvm_bswap_i32($459);
	                    HEAP32[$k$s2] = $461;
	                    var $462 = $461;
	                  } else {
	                    var $462 = $459;
	                  }
	                  var $462;
	                  var $463 = ___ckd_calloc__($462, 1, STRING_TABLE.__str21907 | 0, 425);
	                  var $464 = HEAP32[$k$s2];
	                  var $465 = _fread($463, 1, $464, $7);
	                  var $466 = HEAP32[$k$s2];
	                  if (($465 | 0) == ($466 | 0)) {
	                    var $tmp_word_str_0 = $463;
	                    var $470 = $466;
	                    break;
	                  }
	                  __E__pr_header(STRING_TABLE.__str21907 | 0, 427, STRING_TABLE.__str102579 | 0);
	                  __E__pr_warn(STRING_TABLE.__str321937 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	                  var $base_0 = $116;
	                  break $_$11;
	                }
	                var $450 = $map_base_0 + $offset_7 | 0;
	                var $451 = HEAPU8[$450] | HEAPU8[$450 + 1] << 8 | HEAPU8[$450 + 2] << 16 | HEAPU8[$450 + 3] << 24 | 0;
	                HEAP32[$k$s2] = $451;
	                var $tmp_word_str_0 = $offset_7 + ($map_base_0 + 4) | 0;
	                var $470 = $451;
	              } while (0);
	              var $470;
	              var $tmp_word_str_0;
	              var $471 = ($470 | 0) > 0;
	              $_$198 : do {
	                if ($471) {
	                  var $j_017 = 0;
	                  var $i_718 = 0;
	                  while (1) {
	                    var $i_718;
	                    var $j_017;
	                    var $_j_0 = (HEAP8[$tmp_word_str_0 + $i_718 | 0] << 24 >> 24 == 0 & 1) + $j_017 | 0;
	                    var $476 = $i_718 + 1 | 0;
	                    if (($476 | 0) >= ($470 | 0)) {
	                      var $j_0_lcssa = $_j_0;
	                      break $_$198;
	                    }
	                    var $j_017 = $_j_0;
	                    var $i_718 = $476;
	                  }
	                } else {
	                  var $j_0_lcssa = 0;
	                }
	              } while (0);
	              var $j_0_lcssa;
	              var $478 = HEAP32[$n_unigram$s2];
	              if (($j_0_lcssa | 0) == ($478 | 0)) {
	                var $482 = ($j_0_lcssa | 0) > 0;
	                do {
	                  if ($399) {
	                    if (!$482) {
	                      var $i_10 = 0;
	                      break;
	                    }
	                    var $484$s2 = ($115 + 48 | 0) >> 2;
	                    var $486 = $115 + 52 | 0;
	                    var $487 = ($j_0_lcssa | 0) > 1;
	                    var $j_213 = 0;
	                    var $i_814 = 0;
	                    var $493 = HEAP32[$484$s2];
	                    while (1) {
	                      var $493;
	                      var $i_814;
	                      var $j_213;
	                      HEAP32[$493 + ($i_814 << 2) >> 2] = $tmp_word_str_0 + $j_213 | 0;
	                      var $496 = HEAP32[$486 >> 2];
	                      var $499 = HEAP32[HEAP32[$484$s2] + ($i_814 << 2) >> 2];
	                      var $500 = $i_814;
	                      var $501 = _hash_table_enter($496, $499, $500);
	                      if (($501 | 0) != ($500 | 0)) {
	                        __E__pr_header(STRING_TABLE.__str21907 | 0, 449, STRING_TABLE.__str212436 | 0);
	                        var $506 = HEAP32[HEAP32[$484$s2] + ($i_814 << 2) >> 2];
	                        __E__pr_warn(STRING_TABLE.__str341939 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $506, tempInt));
	                      }
	                      var $508 = HEAP32[$484$s2];
	                      var $510 = HEAP32[$508 + ($i_814 << 2) >> 2];
	                      var $511 = _strlen($510);
	                      var $514 = $i_814 + 1 | 0;
	                      if (($514 | 0) >= ($j_0_lcssa | 0)) {
	                        break;
	                      }
	                      var $j_213 = $511 + ($j_213 + 1) | 0;
	                      var $i_814 = $514;
	                      var $493 = $508;
	                    }
	                    var $smax = $487 ? $j_0_lcssa : 1;
	                    var $i_10 = $smax;
	                  } else {
	                    $_$215 : do {
	                      if ($482) {
	                        var $489$s2 = ($115 + 48 | 0) >> 2;
	                        var $491 = $115 + 52 | 0;
	                        var $j_38 = 0;
	                        var $i_99 = 0;
	                        while (1) {
	                          var $i_99;
	                          var $j_38;
	                          var $518 = ___ckd_salloc__($tmp_word_str_0 + $j_38 | 0, STRING_TABLE.__str21907 | 0, 457);
	                          var $520 = ($i_99 << 2) + HEAP32[$489$s2] | 0;
	                          HEAP32[$520 >> 2] = $518;
	                          var $521 = HEAP32[$491 >> 2];
	                          var $524 = HEAP32[HEAP32[$489$s2] + ($i_99 << 2) >> 2];
	                          var $525 = $i_99;
	                          var $526 = _hash_table_enter($521, $524, $525);
	                          if (($526 | 0) != ($525 | 0)) {
	                            __E__pr_header(STRING_TABLE.__str21907 | 0, 460, STRING_TABLE.__str212436 | 0);
	                            var $531 = HEAP32[HEAP32[$489$s2] + ($i_99 << 2) >> 2];
	                            __E__pr_warn(STRING_TABLE.__str341939 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $531, tempInt));
	                          }
	                          var $535 = HEAP32[HEAP32[$489$s2] + ($i_99 << 2) >> 2];
	                          var $536 = _strlen($535);
	                          var $539 = $i_99 + 1 | 0;
	                          if (($539 | 0) >= (HEAP32[$n_unigram$s2] | 0)) {
	                            var $i_9_lcssa = $539;
	                            break $_$215;
	                          }
	                          var $j_38 = $536 + ($j_38 + 1) | 0;
	                          var $i_99 = $539;
	                        }
	                      } else {
	                        var $i_9_lcssa = 0;
	                      }
	                    } while (0);
	                    var $i_9_lcssa;
	                    _free($tmp_word_str_0);
	                    var $i_10 = $i_9_lcssa;
	                  }
	                } while (0);
	                var $i_10;
	                __E__pr_info_header(STRING_TABLE.__str21907 | 0, 466);
	                __E__pr_info(STRING_TABLE.__str351940 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $i_10, tempInt));
	                var $542 = HEAP32[$is_pipe$s2];
	                _fclose_comp($7, $542);
	                var $_0 = $116;
	                __label__ = 158;
	                break $_$5;
	              }
	              __E__pr_header(STRING_TABLE.__str21907 | 0, 437, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str331938 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $j_0_lcssa, HEAP32[tempInt + 4 >> 2] = $478, tempInt));
	              var $base_0 = $116;
	            } else {
	              __E__pr_header(STRING_TABLE.__str21907 | 0, 154, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str131918 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	              var $base_0 = 0;
	            }
	          } else {
	            __E__pr_header(STRING_TABLE.__str21907 | 0, 131, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str91914 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE._darpa_hdr | 0, tempInt));
	            var $base_0 = 0;
	          }
	        } else {
	          __E__pr_header(STRING_TABLE.__str21907 | 0, 127, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str81913 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $base_0 = 0;
	        }
	      } else {
	        var $base_0 = 0;
	      }
	    } while (0);
	    var $base_0;
	    var $543 = HEAP32[$is_pipe$s2];
	    _fclose_comp($7, $543);
	    var $base_05 = $base_0;
	    __label__ = 157;
	    break;
	  } while (0);
	  if (__label__ == 157) {
	    var $base_05;
	    _ngram_model_free($base_05);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_dmp_read["X"] = 1;

	function _lm3g_template_iter_get1999($base, $out_score, $out_bowt) {
	  var $15$s2;
	  var $13$s2;
	  var $4$s2;
	  var $2$s2;
	  var __label__;
	  var $2$s2 = HEAPU32[$base >> 2] >> 2;
	  var $4$s2 = ($base + 12 | 0) >> 2;
	  var $12 = (HEAP32[$4$s2] - HEAP32[$2$s2 + 17] | 0) / 12 & -1;
	  var $13$s2 = ($base + 4 | 0) >> 2;
	  var $14 = HEAP32[$13$s2];
	  HEAP32[$14 >> 2] = $12;
	  var $15$s2 = ($base + 16 | 0) >> 2;
	  var $16 = HEAP32[$15$s2];
	  if (($16 | 0) != 0) {
	    var $21 = HEAPU16[$16 >> 1] & 65535;
	    var $23 = HEAP32[$13$s2] + 4 | 0;
	    HEAP32[$23 >> 2] = $21;
	  }
	  var $26 = $base + 20 | 0;
	  var $27 = HEAP32[$26 >> 2];
	  if (($27 | 0) != 0) {
	    var $32 = HEAPU16[$27 >> 1] & 65535;
	    var $34 = HEAP32[$13$s2] + 8 | 0;
	    HEAP32[$34 >> 2] = $32;
	  }
	  var $38 = HEAP16[$base + 8 >> 1] << 16 >> 16;
	  do {
	    if (($38 | 0) == 0) {
	      var $42 = HEAP32[HEAP32[$4$s2] >> 2];
	      HEAP32[$out_score >> 2] = $42;
	      var $46 = HEAP32[HEAP32[$4$s2] + 4 >> 2];
	      HEAP32[$out_bowt >> 2] = $46;
	      __label__ = 12;
	      break;
	    } else if (($38 | 0) == 1) {
	      var $58 = HEAP32[HEAP32[$2$s2 + 20] + ((HEAPU16[HEAP32[$15$s2] + 2 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_score >> 2] = $58;
	      var $60 = HEAP32[$2$s2 + 22];
	      if (($60 | 0) == 0) {
	        HEAP32[$out_bowt >> 2] = 0;
	        __label__ = 12;
	        break;
	      }
	      var $71 = HEAP32[$60 + ((HEAPU16[HEAP32[$15$s2] + 4 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_bowt >> 2] = $71;
	      __label__ = 12;
	      break;
	    } else if (($38 | 0) == 2) {
	      var $83 = HEAP32[HEAP32[$2$s2 + 24] + ((HEAPU16[HEAP32[$26 >> 2] + 2 >> 1] & 65535) << 2) >> 2];
	      HEAP32[$out_score >> 2] = $83;
	      HEAP32[$out_bowt >> 2] = 0;
	      __label__ = 12;
	      break;
	    } else {
	      var $_0 = 0;
	      __label__ = 13;
	    }
	  } while (0);
	  if (__label__ == 12) {
	    var $_0 = HEAP32[$13$s2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter_get1999["X"] = 1;

	function _new_unigram_table1989($n_ug) {
	  var $1 = ___ckd_calloc__($n_ug, 12, STRING_TABLE.__str21907 | 0, 70);
	  var $2 = $1;
	  var $3 = ($n_ug | 0) > 0;
	  $_$2 : do {
	    if ($3) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        HEAPF32[($2 >> 2) + ($i_01 * 3 | 0)] = -99;
	        HEAPF32[($2 + 4 >> 2) + ($i_01 * 3 | 0)] = -99;
	        var $6 = $i_01 + 1 | 0;
	        if (($6 | 0) == ($n_ug | 0)) {
	          break $_$2;
	        }
	        var $i_01 = $6;
	      }
	    }
	  } while (0);
	  return $2;
	  return null;
	}

	function _ngram_model_dmp_free($base) {
	  var $base$s2 = $base >> 2;
	  var $1 = $base + 68 | 0;
	  var $4 = HEAP32[$1 >> 2];
	  _ckd_free($4);
	  var $8 = HEAP32[$base$s2 + 20];
	  _ckd_free($8);
	  var $10 = HEAP32[$base$s2 + 29];
	  var $11 = ($10 | 0) == 0;
	  do {
	    if ($11) {
	      var $17 = HEAP32[$base$s2 + 18];
	      _ckd_free($17);
	      var $18 = $base + 16 | 0;
	      if ((HEAPU8[$18] & 255) <= 2) {
	        var $_pre_phi = $18;
	        break;
	      }
	      var $25 = HEAP32[$base$s2 + 19];
	      _ckd_free($25);
	      var $29 = HEAP32[$base$s2 + 26];
	      _ckd_free($29);
	      var $_pre_phi = $18;
	    } else {
	      var $13 = $10;
	      _mmio_file_unmap($13);
	      var $_pre_phi = $base + 16 | 0;
	    }
	  } while (0);
	  var $_pre_phi;
	  if ((HEAPU8[$_pre_phi] & 255) > 2) {
	    var $36 = HEAP32[$base$s2 + 22];
	    _ckd_free($36);
	    var $40 = HEAP32[$base$s2 + 24];
	    _ckd_free($40);
	  }
	  var $42 = $1;
	  _lm3g_tginfo_free($42);
	  return;
	  return;
	}

	_ngram_model_dmp_free["X"] = 1;

	function _ngram_model_dmp_apply_weights($base, $lw, $wip, $uw) {
	  var $2 = $base + 68 | 0;
	  _lm3g_apply_weights($base, $2, $lw, $wip, $uw);
	  return 0;
	  return null;
	}

	function _lm3g_template_score1992($base, $wid, $history, $n_hist, $n_used) {
	  var $1 = $base;
	  if (($n_hist | 0) == 0) {
	    HEAP32[$n_used >> 2] = 1;
	    var $_0 = HEAP32[(HEAP32[$base + 68 >> 2] >> 2) + ($wid * 3 | 0)];
	  } else if (($n_hist | 0) == 1) {
	    var $10 = HEAP32[$history >> 2];
	    var $11 = _lm3g_bg_score2005($1, $10, $wid, $n_used);
	    var $_0 = $11;
	  } else {
	    var $14 = HEAP32[$history + 4 >> 2];
	    var $15 = HEAP32[$history >> 2];
	    var $16 = _lm3g_tg_score2006($1, $14, $15, $wid, $n_used);
	    var $_0 = $16;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_template_raw_score1993($base, $wid, $history, $n_hist, $n_used) {
	  var $base$s2 = $base >> 2;
	  var __label__;
	  var $1 = $base;
	  do {
	    if (($n_hist | 0) == 0) {
	      HEAP32[$n_used >> 2] = 1;
	      var $16 = (HEAP32[(HEAP32[$base$s2 + 17] >> 2) + ($wid * 3 | 0)] - HEAP32[$base$s2 + 7] | 0) / HEAPF32[$base$s2 + 6] & -1;
	      var $20 = HEAP32[HEAP32[$base$s2 + 12] + ($wid << 2) >> 2];
	      var $21 = _strcmp($20, STRING_TABLE.__str531959 | 0);
	      if (($21 | 0) == 0) {
	        var $_0 = $16;
	        __label__ = 8;
	        break;
	      }
	      var $25 = HEAP32[$base$s2 + 5];
	      var $_idx2_val = HEAP8[$25 + 9 | 0];
	      var $_idx3 = $25 + 20 | 0;
	      var $_idx3_val = (tempDoubleI32[0] = HEAP32[$_idx3 >> 2], tempDoubleI32[1] = HEAP32[$_idx3 + 4 >> 2], tempDoubleF64[0]);
	      var $26 = _logmath_exp($_idx2_val, $_idx3_val, $16);
	      var $31 = HEAP32[$base$s2 + 10] + HEAP32[$base$s2 + 9] | 0;
	      var $32 = _logmath_exp($_idx2_val, $_idx3_val, $31);
	      var $33 = $26 - $32;
	      var $34 = _logmath_log($25, $33);
	      var $_0 = $34;
	      __label__ = 8;
	      break;
	    } else if (($n_hist | 0) == 1) {
	      var $36 = HEAP32[$history >> 2];
	      var $37 = _lm3g_bg_score2005($1, $36, $wid, $n_used);
	      var $score_1 = $37;
	      __label__ = 7;
	      break;
	    } else {
	      var $40 = HEAP32[$history + 4 >> 2];
	      var $41 = HEAP32[$history >> 2];
	      var $42 = _lm3g_tg_score2006($1, $40, $41, $wid, $n_used);
	      var $score_1 = $42;
	      __label__ = 7;
	      break;
	    }
	  } while (0);
	  if (__label__ == 7) {
	    var $score_1;
	    var $_0 = ($score_1 - HEAP32[$base$s2 + 7] | 0) / HEAPF32[$base$s2 + 6] & -1;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_raw_score1993["X"] = 1;

	function _lm3g_template_add_ug1994($base, $wid, $lweight) {
	  var $2 = $base + 68 | 0;
	  var $3 = _lm3g_add_ug($base, $2, $wid, $lweight);
	  return $3;
	  return null;
	}

	function _lm3g_template_flush1995($base) {
	  var $2 = $base + 68 | 0;
	  _lm3g_tginfo_reset($base, $2);
	  return;
	  return;
	}

	function _lm3g_template_iter1996($base, $wid, $history, $n_hist) {
	  var $tginfo_1$s2;
	  var $49$s2;
	  var $42$s2;
	  var $2$s2;
	  var $history$s2 = $history >> 2;
	  var $1 = $base;
	  var $2 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 288), $2$s2 = $2 >> 2;
	  var $3 = $2;
	  _ngram_iter_init($3, $base, $n_hist, 0);
	  $_$34 : do {
	    if (($n_hist | 0) == 0) {
	      var $8 = HEAP32[$base + 68 >> 2] + $wid * 12 | 0;
	      HEAP32[$2$s2 + 3] = $8;
	      var $_0 = $3;
	    } else if (($n_hist | 0) == 1) {
	      var $13 = $base + 68 | 0;
	      var $16 = HEAP32[$13 >> 2] + HEAP32[$history$s2] * 12 | 0;
	      HEAP32[$2$s2 + 3] = $16;
	      var $19 = HEAP32[$history$s2];
	      var $20 = HEAP32[$13 >> 2];
	      var $22 = HEAP32[($20 + 8 >> 2) + ($19 * 3 | 0)];
	      var $26 = HEAP32[($20 + 8 >> 2) + (($19 + 1) * 3 | 0)] - $22 | 0;
	      var $29 = HEAP32[$base + 72 >> 2];
	      var $30 = ($22 << 3) + $29 | 0;
	      var $32 = $2 + 16 | 0;
	      HEAP32[$32 >> 2] = $30;
	      var $33 = _find_bg2002($30, $26, $wid);
	      if (($33 | 0) < 0) {
	        _ngram_iter_free($3);
	        var $_0 = 0;
	      } else {
	        var $37 = ($33 + $22 << 3) + $29 | 0;
	        HEAP32[$32 >> 2] = $37;
	        var $_0 = $3;
	      }
	    } else if (($n_hist | 0) == 2) {
	      var $42$s2 = ($history + 4 | 0) >> 2;
	      var $44 = HEAP32[$base + 68 >> 2] + HEAP32[$42$s2] * 12 | 0;
	      HEAP32[$2$s2 + 3] = $44;
	      var $47 = HEAP32[$history$s2];
	      var $49$s2 = ($base + 108 | 0) >> 2;
	      var $prev_tginfo_0 = 0;
	      var $tginfo_0_in = ($47 << 2) + HEAP32[$49$s2] | 0;
	      while (1) {
	        var $tginfo_0_in;
	        var $prev_tginfo_0;
	        var $tginfo_0 = HEAP32[$tginfo_0_in >> 2];
	        if (($tginfo_0 | 0) == 0) {
	          var $60 = HEAP32[$42$s2];
	          _load_tginfo2003($1, $60, $47);
	          var $tginfo_1 = HEAP32[HEAP32[$49$s2] + (HEAP32[$history$s2] << 2) >> 2], $tginfo_1$s2 = $tginfo_1 >> 2;
	          break;
	        }
	        var $59 = $tginfo_0 + 20 | 0;
	        if ((HEAP32[$tginfo_0 >> 2] | 0) != (HEAP32[$42$s2] | 0)) {
	          var $prev_tginfo_0 = $tginfo_0;
	          var $tginfo_0_in = $59;
	          continue;
	        }
	        if (($prev_tginfo_0 | 0) == 0) {
	          var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	          break;
	        }
	        var $68 = HEAP32[$59 >> 2];
	        HEAP32[$prev_tginfo_0 + 20 >> 2] = $68;
	        var $73 = HEAP32[HEAP32[$49$s2] + (HEAP32[$history$s2] << 2) >> 2];
	        HEAP32[$59 >> 2] = $73;
	        var $76 = (HEAP32[$history$s2] << 2) + HEAP32[$49$s2] | 0;
	        HEAP32[$76 >> 2] = $tginfo_0;
	        var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $tginfo_1;
	      HEAP32[$tginfo_1$s2 + 3] = 1;
	      var $80 = HEAP32[$tginfo_1$s2 + 1];
	      var $82 = HEAP32[$tginfo_1$s2 + 4];
	      var $84 = $2 + 20 | 0;
	      HEAP32[$84 >> 2] = $82;
	      var $85 = _find_tg2004($82, $80, $wid);
	      if (($85 | 0) > -1) {
	        var $88 = ($85 << 2) + $82 | 0;
	        HEAP32[$84 >> 2] = $88;
	        var $89 = $base + 72 | 0;
	        var $93 = $2 + 16 | 0;
	        var $95 = $base + 104 | 0;
	        var $97 = $base + 76 | 0;
	        var $98 = $88;
	        var $storemerge = HEAP32[$89 >> 2];
	        while (1) {
	          var $storemerge;
	          HEAP32[$93 >> 2] = $storemerge;
	          var $100 = HEAP32[$89 >> 2];
	          var $106 = $storemerge - $100 + 8 >> 3 | 0;
	          if (((HEAPU16[$100 + ($106 << 3) + 6 >> 1] & 65535) + HEAP32[HEAP32[$95 >> 2] + ($106 >> 9 << 2) >> 2] | 0) > ($98 - HEAP32[$97 >> 2] >> 2 | 0)) {
	            var $_0 = $3;
	            break $_$34;
	          }
	          var $storemerge = $storemerge + 8 | 0;
	        }
	      } else {
	        _ngram_iter_free($3);
	        var $_0 = 0;
	      }
	    } else {
	      ___assert_func(STRING_TABLE.__str481953 | 0, 358, STRING_TABLE.___func___lm3g_template_iter1957 | 0, STRING_TABLE.__str521958 | 0);
	      _ngram_iter_free($3);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter1996["X"] = 1;

	function _lm3g_template_mgrams1997($base, $m) {
	  var $8$s2;
	  var $1 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 368);
	  var $2 = $1;
	  _ngram_iter_init($2, $base, $m, 0);
	  var $5 = HEAPU32[$base + 68 >> 2];
	  var $7 = $1 + 12 | 0;
	  HEAP32[$7 >> 2] = $5;
	  var $8$s2 = ($base + 72 | 0) >> 2;
	  var $10 = HEAP32[$8$s2];
	  var $12 = $1 + 16 | 0;
	  HEAP32[$12 >> 2] = $10;
	  var $14 = $base + 76 | 0;
	  var $15 = HEAP32[$14 >> 2];
	  HEAP32[$1 + 20 >> 2] = $15;
	  var $18 = ($m | 0) > 1;
	  $_$57 : do {
	    if ($18) {
	      if ((HEAP32[HEAP32[$base + 4 >> 2] + 4 >> 2] | 0) <= 1) {
	        var $52 = $10;
	        break;
	      }
	      var $26 = $base + 104 | 0;
	      var $27 = $15;
	      var $29 = $10;
	      while (1) {
	        var $29;
	        var $30 = HEAP32[$8$s2];
	        var $36 = $29 - $30 + 8 >> 3 | 0;
	        if (((HEAPU16[$30 + ($36 << 3) + 6 >> 1] & 65535) + HEAP32[HEAP32[$26 >> 2] + ($36 >> 9 << 2) >> 2] | 0) > ($27 - HEAP32[$14 >> 2] >> 2 | 0)) {
	          var $52 = $29;
	          break $_$57;
	        }
	        var $51 = $29 + 8 | 0;
	        HEAP32[$12 >> 2] = $51;
	        var $29 = $51;
	      }
	    } else {
	      var $52 = $10;
	    }
	  } while (0);
	  var $52;
	  var $53 = ($m | 0) > 0;
	  $_$64 : do {
	    if ($53) {
	      if ((HEAP32[HEAP32[$base + 4 >> 2] >> 2] | 0) <= 1) {
	        break;
	      }
	      var $62 = $52;
	      if ((HEAP32[$5 + 20 >> 2] | 0) > ($62 - HEAP32[$8$s2] >> 3 | 0)) {
	        break;
	      }
	      var $67 = $5;
	      while (1) {
	        var $67;
	        var $68 = $67 + 12 | 0;
	        HEAP32[$7 >> 2] = $68;
	        if ((HEAP32[$67 + 32 >> 2] | 0) > ($62 - HEAP32[$8$s2] >> 3 | 0)) {
	          break $_$64;
	        }
	        var $67 = $68;
	      }
	    }
	  } while (0);
	  return $2;
	  return null;
	}

	_lm3g_template_mgrams1997["X"] = 1;

	function _lm3g_template_successors1998($bitor) {
	  var $3$s2;
	  var $2$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($bitor | 0) >> 2;
	  var $2$s2 = HEAPU32[$1$s2] >> 2;
	  var $3 = ___ckd_calloc__(1, 24, STRING_TABLE.__str481953 | 0, 396), $3$s2 = $3 >> 2;
	  var $6 = HEAP32[$bitor + 12 >> 2];
	  HEAP32[$3$s2 + 3] = $6;
	  var $9 = $bitor + 8 | 0;
	  var $11 = HEAP16[$9 >> 1] << 16 >> 16;
	  do {
	    if (($11 | 0) == 0) {
	      var $23 = HEAP32[HEAP32[$1$s2] + 4 >> 2];
	      var $27 = HEAP32[$6 + 8 >> 2];
	      if ((($6 + 12 - HEAP32[$2$s2 + 17] | 0) / 12 & -1 | 0) < (HEAP32[$23 >> 2] | 0)) {
	        if (($27 | 0) == (HEAP32[$6 + 20 >> 2] | 0)) {
	          __label__ = 13;
	          break;
	        }
	      }
	      if (($27 | 0) == (HEAP32[$23 + 4 >> 2] | 0)) {
	        __label__ = 13;
	        break;
	      }
	      var $39 = ($27 << 3) + HEAP32[$2$s2 + 18] | 0;
	      HEAP32[$3$s2 + 4] = $39;
	      __label__ = 12;
	      break;
	    } else if (($11 | 0) == 1) {
	      var $44 = HEAP32[$bitor + 16 >> 2];
	      var $45 = $44;
	      HEAP32[$3$s2 + 4] = $45;
	      var $50 = HEAP32[$2$s2 + 18];
	      var $51 = $50;
	      var $53 = $50;
	      var $54 = $44 + 8 - $53 | 0;
	      var $55 = $54 >> 3;
	      var $58 = HEAPU32[HEAP32[$1$s2] + 4 >> 2];
	      if (($55 | 0) < (HEAP32[$58 + 4 >> 2] | 0)) {
	        var $64 = $44 - $53 | 0;
	        var $66 = $64 >> 12;
	        var $69 = HEAPU32[$2$s2 + 26];
	        var $72 = ($64 >> 3 << 3) + $51 + 6 | 0;
	        if (((HEAPU16[$72 >> 1] & 65535) + HEAP32[$69 + ($66 << 2) >> 2] | 0) == ((HEAPU16[$51 + ($55 << 3) + 6 >> 1] & 65535) + HEAP32[$69 + ($54 >> 12 << 2) >> 2] | 0)) {
	          __label__ = 13;
	          break;
	        }
	        var $85 = $69;
	        var $_pre_phi6 = $66;
	        var $_pre_phi8 = $72;
	      } else {
	        var $_pre1 = $44 - $53 | 0;
	        var $85 = HEAP32[$2$s2 + 26];
	        var $_pre_phi6 = $_pre1 >> 12;
	        var $_pre_phi8 = ($_pre1 >> 3 << 3) + $51 + 6 | 0;
	      }
	      var $_pre_phi8;
	      var $_pre_phi6;
	      var $85;
	      var $90 = (HEAPU16[$_pre_phi8 >> 1] & 65535) + HEAP32[$85 + ($_pre_phi6 << 2) >> 2] | 0;
	      if (($90 | 0) == (HEAP32[$58 + 8 >> 2] | 0)) {
	        __label__ = 13;
	        break;
	      }
	      var $98 = ($90 << 2) + HEAP32[$2$s2 + 19] | 0;
	      HEAP32[$3$s2 + 5] = $98;
	      __label__ = 12;
	      break;
	    } else {
	      __label__ = 13;
	    }
	  } while (0);
	  if (__label__ == 12) {
	    var $102 = $3;
	    var $103 = HEAP32[$1$s2];
	    var $106 = (HEAP16[$9 >> 1] << 16 >> 16) + 1 | 0;
	    _ngram_iter_init($102, $103, $106, 1);
	    var $_0 = $102;
	  } else if (__label__ == 13) {
	    _ckd_free($3);
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_template_successors1998["X"] = 1;

	function _find_bg2002($bg, $n, $w) {
	  var __label__;
	  var $e_0_ph = $n;
	  var $b_0_ph = 0;
	  $_$32 : while (1) {
	    var $b_0_ph;
	    var $e_0_ph;
	    var $e_0 = $e_0_ph;
	    while (1) {
	      var $e_0;
	      if (($e_0 - $b_0_ph | 0) <= 16) {
	        var $i_0 = $b_0_ph;
	        __label__ = 8;
	        break $_$32;
	      }
	      var $6 = $e_0 + $b_0_ph >> 1;
	      var $9 = HEAPU16[$bg + ($6 << 3) >> 1] & 65535;
	      if (($9 | 0) < ($w | 0)) {
	        break;
	      }
	      if (($9 | 0) <= ($w | 0)) {
	        var $_0 = $6;
	        __label__ = 10;
	        break $_$32;
	      }
	      var $e_0 = $6;
	    }
	    var $e_0_ph = $e_0;
	    var $b_0_ph = $6 + 1 | 0;
	  }
	  $_$39 : do {
	    if (__label__ == 8) {
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($e_0 | 0)) {
	          var $_0 = -1;
	          break $_$39;
	        }
	        if ((HEAPU16[$bg + ($i_0 << 3) >> 1] & 65535 | 0) == ($w | 0)) {
	          var $_0 = $i_0;
	          break $_$39;
	        }
	        var $i_0 = $i_0 + 1 | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _find_tg2004($tg, $n, $w) {
	  var __label__;
	  var $e_0_ph = $n;
	  var $b_0_ph = 0;
	  $_$52 : while (1) {
	    var $b_0_ph;
	    var $e_0_ph;
	    var $e_0 = $e_0_ph;
	    while (1) {
	      var $e_0;
	      if (($e_0 - $b_0_ph | 0) <= 16) {
	        var $i_0 = $b_0_ph;
	        __label__ = 8;
	        break $_$52;
	      }
	      var $6 = $e_0 + $b_0_ph >> 1;
	      var $9 = HEAPU16[$tg + ($6 << 2) >> 1] & 65535;
	      if (($9 | 0) < ($w | 0)) {
	        break;
	      }
	      if (($9 | 0) <= ($w | 0)) {
	        var $_0 = $6;
	        __label__ = 10;
	        break $_$52;
	      }
	      var $e_0 = $6;
	    }
	    var $e_0_ph = $e_0;
	    var $b_0_ph = $6 + 1 | 0;
	  }
	  $_$59 : do {
	    if (__label__ == 8) {
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($e_0 | 0)) {
	          var $_0 = -1;
	          break $_$59;
	        }
	        if ((HEAPU16[$tg + ($i_0 << 2) >> 1] & 65535 | 0) == ($w | 0)) {
	          var $_0 = $i_0;
	          break $_$59;
	        }
	        var $i_0 = $i_0 + 1 | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lm3g_template_iter_next2000($base) {
	  var $89$s2;
	  var $83$s2;
	  var $77$s2;
	  var $72$s2;
	  var $27$s2;
	  var $24$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $2 = HEAP32[$base >> 2];
	  var $5 = HEAP16[$base + 8 >> 1] << 16 >> 16;
	  $_$2 : do {
	    if (($5 | 0) == 0) {
	      var $7 = $base + 12 | 0;
	      var $10 = HEAP32[$7 >> 2] + 12 | 0;
	      var $_c4 = $10;
	      HEAP32[$7 >> 2] = $_c4;
	      if ((($10 - HEAP32[$2 + 68 >> 2] | 0) / 12 & -1 | 0) < (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] | 0)) {
	        var $_0 = $base;
	        __label__ = 24;
	        break;
	      }
	      __label__ = 23;
	      break;
	    } else if (($5 | 0) == 1) {
	      var $24$s2 = ($base + 16 | 0) >> 2;
	      var $26 = HEAP32[$24$s2] + 8 | 0;
	      HEAP32[$24$s2] = $26;
	      var $27$s2 = ($2 + 72 | 0) >> 2;
	      var $28 = HEAP32[$27$s2];
	      var $29 = $26;
	      var $33 = $2 + 4 | 0;
	      if (($29 - $28 >> 3 | 0) >= (HEAP32[HEAP32[$33 >> 2] + 4 >> 2] | 0)) {
	        __label__ = 23;
	        break;
	      }
	      var $39 = $base + 12 | 0;
	      var $41 = $base + 10 | 0;
	      var $42 = $39 | 0;
	      var $43 = $2 + 68 | 0;
	      var $46 = HEAP32[$39 >> 2];
	      var $45 = $28;
	      while (1) {
	        var $45;
	        var $46;
	        var $50 = $46 + 12 | 0;
	        if (($29 - $45 >> 3 | 0) < (HEAP32[$46 + 20 >> 2] | 0)) {
	          var $_0 = $base;
	          __label__ = 24;
	          break $_$2;
	        }
	        if (HEAP16[$41 >> 1] << 16 >> 16 != 0) {
	          __label__ = 23;
	          break $_$2;
	        }
	        HEAP32[$42 >> 2] = $50;
	        if (($50 | 0) == (HEAP32[$43 >> 2] + HEAP32[HEAP32[$33 >> 2] >> 2] * 12 | 0)) {
	          break;
	        }
	        var $46 = $50;
	        var $45 = HEAP32[$27$s2];
	      }
	      __E__pr_header(STRING_TABLE.__str481953 | 0, 508, STRING_TABLE.__str102579 | 0);
	      var $69 = HEAP32[$24$s2] - HEAP32[$27$s2] >> 3;
	      __E__pr_warn(STRING_TABLE.__str491954 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $69, tempInt));
	      __label__ = 23;
	      break;
	    } else if (($5 | 0) == 2) {
	      var $72$s2 = ($base + 20 | 0) >> 2;
	      var $74 = HEAP32[$72$s2] + 4 | 0;
	      HEAP32[$72$s2] = $74;
	      var $75 = $2 + 68 | 0;
	      var $77$s2 = ($2 + 76 | 0) >> 2;
	      var $78 = HEAP32[$77$s2];
	      var $79 = $74;
	      var $83$s2 = ($2 + 4 | 0) >> 2;
	      if (($79 - $78 >> 2 | 0) >= (HEAP32[HEAP32[$83$s2] + 8 >> 2] | 0)) {
	        __label__ = 23;
	        break;
	      }
	      var $88 = $base + 16 | 0;
	      var $89$s2 = ($2 + 72 | 0) >> 2;
	      var $91 = $2 + 104 | 0;
	      var $92 = $base + 10 | 0;
	      var $96 = HEAP32[$88 >> 2];
	      var $95 = HEAP32[$89$s2];
	      var $94 = $78;
	      while (1) {
	        var $94;
	        var $95;
	        var $96;
	        var $101 = $96;
	        var $105 = $101 - $95 + 8 >> 3 | 0;
	        if (($79 - $94 >> 2 | 0) < ((HEAPU16[$95 + ($105 << 3) + 6 >> 1] & 65535) + HEAP32[HEAP32[$91 >> 2] + ($105 >> 9 << 2) >> 2] | 0)) {
	          break;
	        }
	        if (HEAP16[$92 >> 1] << 16 >> 16 != 0) {
	          __label__ = 23;
	          break $_$2;
	        }
	        var $123 = $96 + 8 | 0;
	        HEAP32[$88 >> 2] = $123;
	        var $125 = HEAPU32[$89$s2];
	        if (($123 | 0) == ((HEAP32[HEAP32[$83$s2] + 4 >> 2] << 3) + $125 | 0)) {
	          __E__pr_header(STRING_TABLE.__str481953 | 0, 526, STRING_TABLE.__str102579 | 0);
	          var $138 = HEAP32[$72$s2] - HEAP32[$77$s2] >> 2;
	          __E__pr_warn(STRING_TABLE.__str501955 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $138, tempInt));
	          __label__ = 23;
	          break $_$2;
	        }
	        var $96 = $123;
	        var $95 = $125;
	        var $94 = HEAP32[$77$s2];
	      }
	      var $115 = $base + 12 | 0;
	      var $117 = $115 | 0;
	      var $118 = $75;
	      var $141 = HEAP32[$115 >> 2];
	      var $140 = $95;
	      while (1) {
	        var $140;
	        var $141;
	        var $145 = $141 + 12 | 0;
	        if (($101 - $140 >> 3 | 0) < (HEAP32[$141 + 20 >> 2] | 0)) {
	          var $_0 = $base;
	          __label__ = 24;
	          break $_$2;
	        }
	        HEAP32[$117 >> 2] = $145;
	        if (($145 | 0) == (HEAP32[$118 >> 2] + HEAP32[HEAP32[$83$s2] >> 2] * 12 | 0)) {
	          break;
	        }
	        var $141 = $145;
	        var $140 = HEAP32[$89$s2];
	      }
	      __E__pr_header(STRING_TABLE.__str481953 | 0, 536, STRING_TABLE.__str102579 | 0);
	      var $161 = HEAP32[$72$s2] - HEAP32[$77$s2] >> 2;
	      __E__pr_warn(STRING_TABLE.__str511956 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $161, tempInt));
	      __label__ = 23;
	      break;
	    } else {
	      __label__ = 23;
	    }
	  } while (0);
	  if (__label__ == 23) {
	    _ngram_iter_free($base);
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_lm3g_template_iter_next2000["X"] = 1;

	function _lm3g_template_iter_free2001($base) {
	  var $1 = $base;
	  _ckd_free($1);
	  return;
	  return;
	}

	function _load_tginfo2003($model, $lw1, $lw2) {
	  var $24$s2;
	  var __label__;
	  var $2 = HEAP32[$model + 112 >> 2];
	  var $3 = ___listelem_malloc__($2, STRING_TABLE.__str481953 | 0, 107);
	  var $4 = $3;
	  var $5 = $3;
	  HEAP32[$5 >> 2] = $lw1;
	  var $7 = $3 + 16 | 0;
	  HEAP32[$7 >> 2] = 0;
	  var $8 = $model + 108 | 0;
	  var $11 = HEAP32[HEAP32[$8 >> 2] + ($lw2 << 2) >> 2];
	  var $13 = $3 + 20 | 0;
	  HEAP32[$13 >> 2] = $11;
	  var $15 = ($lw2 << 2) + HEAP32[$8 >> 2] | 0;
	  HEAP32[$15 >> 2] = $4;
	  var $17 = HEAP32[$model + 68 >> 2];
	  var $19 = HEAP32[($17 + 8 >> 2) + ($lw1 * 3 | 0)];
	  var $23 = HEAP32[($17 + 8 >> 2) + (($lw1 + 1) * 3 | 0)] - $19 | 0;
	  var $24$s2 = ($model + 72 | 0) >> 2;
	  var $25 = HEAP32[$24$s2];
	  var $26 = ($23 | 0) > 0;
	  do {
	    if ($26) {
	      var $28 = ($19 << 3) + $25 | 0;
	      var $29 = _find_bg2002($28, $23, $lw2);
	      if (($29 | 0) <= -1) {
	        __label__ = 5;
	        break;
	      }
	      var $_sum = $29 + $19 | 0;
	      var $39 = HEAP32[HEAP32[$model + 88 >> 2] + ((HEAPU16[$25 + ($_sum << 3) + 4 >> 1] & 65535) << 2) >> 2];
	      var $41 = $3 + 8 | 0;
	      HEAP32[$41 >> 2] = $39;
	      var $43 = $model + 104 | 0;
	      var $51 = (HEAPU16[HEAP32[$24$s2] + ($_sum << 3) + 6 >> 1] & 65535) + HEAP32[HEAP32[$43 >> 2] + ($_sum >> 9 << 2) >> 2] | 0;
	      var $54 = ($51 << 2) + HEAP32[$model + 76 >> 2] | 0;
	      HEAP32[$7 >> 2] = $54;
	      var $55 = $_sum + 1 | 0;
	      var $65 = HEAP32[HEAP32[$43 >> 2] + ($55 >> 9 << 2) >> 2] - $51 + (HEAPU16[HEAP32[$24$s2] + ($55 << 3) + 6 >> 1] & 65535) | 0;
	      var $67 = $3 + 4 | 0;
	      HEAP32[$67 >> 2] = $65;
	      __label__ = 6;
	      break;
	    }
	    __label__ = 5;
	  } while (0);
	  if (__label__ == 5) {
	    var $70 = $3 + 8 | 0;
	    HEAP32[$70 >> 2] = 0;
	    var $72 = $3 + 4 | 0;
	    HEAP32[$72 >> 2] = 0;
	  }
	  return;
	  return;
	}

	_load_tginfo2003["X"] = 1;

	function _lm3g_bg_score2005($model, $lw1, $lw2, $n_used) {
	  var __label__;
	  var $1 = ($lw1 | 0) < 0;
	  do {
	    if ($1) {
	      __label__ = 4;
	    } else {
	      if ((HEAPU8[$model + 16 | 0] & 255) < 2) {
	        __label__ = 4;
	        break;
	      }
	      var $13 = $model + 68 | 0;
	      var $14 = HEAP32[$13 >> 2];
	      var $16 = HEAPU32[($14 + 8 >> 2) + ($lw1 * 3 | 0)];
	      var $20 = HEAP32[($14 + 8 >> 2) + (($lw1 + 1) * 3 | 0)] - $16 | 0;
	      var $22 = HEAP32[$model + 72 >> 2];
	      var $23 = ($16 << 3) + $22 | 0;
	      var $24 = _find_bg2002($23, $20, $lw2);
	      if (($24 | 0) > -1) {
	        HEAP32[$n_used >> 2] = 2;
	        var $_0 = HEAP32[HEAP32[$model + 80 >> 2] + ((HEAPU16[$22 + ($24 + $16 << 3) + 2 >> 1] & 65535) << 2) >> 2];
	        __label__ = 8;
	        break;
	      }
	      HEAP32[$n_used >> 2] = 1;
	      var $36 = HEAP32[$13 >> 2];
	      var $_0 = HEAP32[($36 >> 2) + ($lw2 * 3 | 0)] + HEAP32[($36 + 4 >> 2) + ($lw1 * 3 | 0)] | 0;
	      __label__ = 8;
	      break;
	    }
	  } while (0);
	  if (__label__ == 4) {
	    HEAP32[$n_used >> 2] = 1;
	    var $_0 = HEAP32[(HEAP32[$model + 68 >> 2] >> 2) + ($lw2 * 3 | 0)];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_bg_score2005["X"] = 1;

	function _lm3g_tg_score2006($model, $lw1, $lw2, $lw3, $n_used) {
	  var $tginfo_1$s2;
	  var $9$s2;
	  if ((HEAPU8[$model + 16 | 0] & 255) < 3 | ($lw1 | 0) < 0 | ($lw2 | 0) < 0) {
	    var $7 = _lm3g_bg_score2005($model, $lw2, $lw3, $n_used);
	    var $_0 = $7;
	  } else {
	    var $9$s2 = ($model + 108 | 0) >> 2;
	    var $prev_tginfo_0 = 0;
	    var $tginfo_0_in = ($lw2 << 2) + HEAP32[$9$s2] | 0;
	    while (1) {
	      var $tginfo_0_in;
	      var $prev_tginfo_0;
	      var $tginfo_0 = HEAPU32[$tginfo_0_in >> 2];
	      if (($tginfo_0 | 0) == 0) {
	        _load_tginfo2003($model, $lw1, $lw2);
	        var $tginfo_1 = HEAP32[HEAP32[$9$s2] + ($lw2 << 2) >> 2], $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $18 = $tginfo_0 + 20 | 0;
	      if ((HEAP32[$tginfo_0 >> 2] | 0) != ($lw1 | 0)) {
	        var $prev_tginfo_0 = $tginfo_0;
	        var $tginfo_0_in = $18;
	        continue;
	      }
	      if (($prev_tginfo_0 | 0) == 0) {
	        var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	        break;
	      }
	      var $25 = HEAP32[$18 >> 2];
	      HEAP32[$prev_tginfo_0 + 20 >> 2] = $25;
	      var $29 = HEAP32[HEAP32[$9$s2] + ($lw2 << 2) >> 2];
	      HEAP32[$18 >> 2] = $29;
	      var $31 = ($lw2 << 2) + HEAP32[$9$s2] | 0;
	      HEAP32[$31 >> 2] = $tginfo_0;
	      var $tginfo_1 = $tginfo_0, $tginfo_1$s2 = $tginfo_1 >> 2;
	      break;
	    }
	    var $tginfo_1;
	    HEAP32[$tginfo_1$s2 + 3] = 1;
	    var $35 = HEAP32[$tginfo_1$s2 + 1];
	    var $37 = HEAP32[$tginfo_1$s2 + 4];
	    var $38 = _find_tg2004($37, $35, $lw3);
	    if (($38 | 0) > -1) {
	      HEAP32[$n_used >> 2] = 3;
	      var $_0 = HEAP32[HEAP32[$model + 96 >> 2] + ((HEAPU16[$37 + ($38 << 2) + 2 >> 1] & 65535) << 2) >> 2];
	    } else {
	      var $51 = HEAP32[$tginfo_1$s2 + 2];
	      var $52 = _lm3g_bg_score2005($model, $lw2, $lw3, $n_used);
	      var $_0 = $52 + $51 | 0;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_lm3g_tg_score2006["X"] = 1;

	function _ngram_model_set_init($models, $names, $n_models) {
	  var __stackBase__ = STACKTOP;
	  var $1 = ($n_models | 0) == 0;
	  $_$91 : do {
	    if ($1) {
	      var $_0 = 0;
	    } else {
	      var $5 = HEAPU32[HEAP32[$models >> 2] + 20 >> 2];
	      var $_idx = $5 + 20 | 0;
	      var $_idx2 = $5 + 9 | 0;
	      var $i_0 = 1;
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($n_models | 0)) {
	          break;
	        }
	        var $12 = HEAPU32[HEAP32[$models + ($i_0 << 2) >> 2] + 20 >> 2];
	        var $_idx1 = $12 + 20 | 0;
	        var $_idx1_val = (tempDoubleI32[0] = HEAP32[$_idx1 >> 2], tempDoubleI32[1] = HEAP32[$_idx1 + 4 >> 2], tempDoubleF64[0]);
	        var $13 = _logmath_get_base($_idx1_val);
	        var $_idx_val = (tempDoubleI32[0] = HEAP32[$_idx >> 2], tempDoubleI32[1] = HEAP32[$_idx + 4 >> 2], tempDoubleF64[0]);
	        var $14 = _logmath_get_base($_idx_val);
	        if ($13 == $14) {
	          var $_idx3_val = HEAP8[$12 + 9 | 0];
	          var $17 = _logmath_get_shift($_idx3_val);
	          var $_idx2_val = HEAP8[$_idx2];
	          var $18 = _logmath_get_shift($_idx2_val);
	          if (($17 | 0) == ($18 | 0)) {
	            var $i_0 = $i_0 + 1 | 0;
	            continue;
	          }
	        }
	        __E__pr_header(STRING_TABLE.__str2007 | 0, 141, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str22009 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = 0;
	        break $_$91;
	      }
	      var $23 = ___ckd_calloc__(1, 96, STRING_TABLE.__str2007 | 0, 147);
	      var $24 = $23;
	      HEAP32[$23 + 68 >> 2] = $n_models;
	      var $27 = ___ckd_calloc__($n_models, 4, STRING_TABLE.__str2007 | 0, 150);
	      var $30 = $23 + 76 | 0;
	      HEAP32[$30 >> 2] = $27;
	      var $31 = ___ckd_calloc__($n_models, 4, STRING_TABLE.__str2007 | 0, 151);
	      var $34 = $23 + 80 | 0;
	      HEAP32[$34 >> 2] = $31;
	      var $35 = ___ckd_calloc__($n_models, 4, STRING_TABLE.__str2007 | 0, 153);
	      var $38 = $23 + 84 | 0;
	      HEAP32[$38 >> 2] = $35;
	      var $40 = 1 / ($n_models | 0);
	      var $41 = _logmath_log($5, $40);
	      var $42 = ($n_models | 0) > 0;
	      $_$100 : do {
	        if ($42) {
	          var $i_13 = 0;
	          while (1) {
	            var $i_13;
	            var $44 = ($i_13 << 2) + HEAP32[$38 >> 2] | 0;
	            HEAP32[$44 >> 2] = $41;
	            var $45 = $i_13 + 1 | 0;
	            if (($45 | 0) == ($n_models | 0)) {
	              var $i_21 = 0;
	              var $n_02 = 0;
	              break;
	            }
	            var $i_13 = $45;
	          }
	          while (1) {
	            var $n_02;
	            var $i_21;
	            var $46 = ($i_21 << 2) + $models | 0;
	            var $47 = HEAP32[$46 >> 2];
	            var $49 = ($i_21 << 2) + HEAP32[$30 >> 2] | 0;
	            HEAP32[$49 >> 2] = $47;
	            var $51 = HEAP32[$names + ($i_21 << 2) >> 2];
	            var $52 = ___ckd_salloc__($51, STRING_TABLE.__str2007 | 0, 166);
	            var $54 = ($i_21 << 2) + HEAP32[$34 >> 2] | 0;
	            HEAP32[$54 >> 2] = $52;
	            var $58 = HEAPU8[HEAP32[$46 >> 2] + 16 | 0] & 255;
	            var $_n_0 = ($58 | 0) > ($n_02 | 0) ? $58 : $n_02;
	            var $60 = $i_21 + 1 | 0;
	            if (($60 | 0) == ($n_models | 0)) {
	              var $n_0_lcssa = $_n_0;
	              break $_$100;
	            }
	            var $i_21 = $60;
	            var $n_02 = $_n_0;
	          }
	        } else {
	          var $n_0_lcssa = 0;
	        }
	      } while (0);
	      var $n_0_lcssa;
	      var $62 = ___ckd_calloc__($n_0_lcssa - 1 | 0, 4, STRING_TABLE.__str2007 | 0, 174);
	      HEAP32[$23 + 92 >> 2] = $62;
	      _build_widmap($24, $5, $n_0_lcssa);
	      var $_0 = $24;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_set_init["X"] = 1;

	function _build_widmap($base, $lmath, $n) {
	  var $57$s2;
	  var $55$s2;
	  var $_pre17$s2;
	  var $8$s2;
	  var $3 = HEAP32[$base + 76 >> 2];
	  var $6 = HEAP32[HEAP32[$3 >> 2] + 12 >> 2];
	  var $7 = _hash_table_new($6, 0);
	  var $8$s2 = ($base + 68 | 0) >> 2;
	  var $9 = HEAP32[$8$s2];
	  var $10 = ($9 | 0) > 0;
	  $_$108 : do {
	    if ($10) {
	      var $i_014 = 0;
	      var $11 = $9;
	      while (1) {
	        var $11;
	        var $i_014;
	        var $12 = ($i_014 << 2) + $3 | 0;
	        var $13 = HEAP32[$12 >> 2];
	        if ((HEAP32[$13 + 12 >> 2] | 0) > 0) {
	          var $j_011 = 0;
	          var $17 = $13;
	          while (1) {
	            var $17;
	            var $j_011;
	            var $21 = HEAP32[HEAP32[$17 + 48 >> 2] + ($j_011 << 2) >> 2];
	            var $23 = _hash_table_enter($7, $21, $j_011);
	            var $24 = $j_011 + 1 | 0;
	            var $25 = HEAP32[$12 >> 2];
	            if (($24 | 0) >= (HEAP32[$25 + 12 >> 2] | 0)) {
	              break;
	            }
	            var $j_011 = $24;
	            var $17 = $25;
	          }
	          var $30 = HEAP32[$8$s2];
	        } else {
	          var $30 = $11;
	        }
	        var $30;
	        var $31 = $i_014 + 1 | 0;
	        if (($31 | 0) >= ($30 | 0)) {
	          break $_$108;
	        }
	        var $i_014 = $31;
	        var $11 = $30;
	      }
	    }
	  } while (0);
	  var $33 = _hash_table_lookup($7, STRING_TABLE.__str192026 | 0, 0);
	  if (($33 | 0) != 0) {
	    var $36 = _hash_table_enter($7, STRING_TABLE.__str192026 | 0, 0);
	  }
	  var $39 = HEAP32[$7 + 8 >> 2];
	  _ngram_model_init($base, _ngram_model_set_funcs, $lmath, $n, $39);
	  HEAP8[$base + 18 | 0] = 0;
	  var $41 = _hash_table_tolist($7, 0);
	  var $42 = ($41 | 0) == 0;
	  var $_pre17$s2 = ($base + 48 | 0) >> 2;
	  $_$120 : do {
	    if (!$42) {
	      var $gn_06 = $41;
	      var $i_17 = 0;
	      while (1) {
	        var $i_17;
	        var $gn_06;
	        var $46 = HEAP32[HEAP32[$gn_06 >> 2] >> 2];
	        var $49 = ($i_17 << 2) + HEAP32[$_pre17$s2] | 0;
	        HEAP32[$49 >> 2] = $46;
	        var $51 = HEAP32[$gn_06 + 8 >> 2];
	        if (($51 | 0) == 0) {
	          break $_$120;
	        }
	        var $gn_06 = $51;
	        var $i_17 = $i_17 + 1 | 0;
	      }
	    }
	  } while (0);
	  _glist_free($41);
	  var $54 = HEAP32[$_pre17$s2];
	  var $55$s2 = ($base + 12 | 0) >> 2;
	  var $56 = HEAP32[$55$s2];
	  _qsort($54, $56, 4, 16);
	  var $57$s2 = ($base + 88 | 0) >> 2;
	  var $58 = HEAP32[$57$s2];
	  if (($58 | 0) != 0) {
	    var $61 = $58;
	    _ckd_free_2d($61);
	  }
	  var $63 = HEAP32[$55$s2];
	  var $64 = HEAP32[$8$s2];
	  var $65 = ___ckd_calloc_2d__($63, $64, 4, STRING_TABLE.__str2007 | 0, 105);
	  var $_c = $65;
	  HEAP32[$57$s2] = $_c;
	  var $67 = (HEAP32[$55$s2] | 0) > 0;
	  $_$127 : do {
	    if ($67) {
	      var $68 = $base + 52 | 0;
	      var $i_22 = 0;
	      while (1) {
	        var $i_22;
	        var $70 = HEAP32[$68 >> 2];
	        var $73 = HEAP32[HEAP32[$_pre17$s2] + ($i_22 << 2) >> 2];
	        var $75 = _hash_table_enter($70, $73, $i_22);
	        var $77 = (HEAP32[$8$s2] | 0) > 0;
	        $_$131 : do {
	          if ($77) {
	            var $j1_01 = 0;
	            while (1) {
	              var $j1_01;
	              var $79 = HEAP32[$3 + ($j1_01 << 2) >> 2];
	              var $82 = HEAP32[HEAP32[$_pre17$s2] + ($i_22 << 2) >> 2];
	              var $83 = _ngram_wid($79, $82);
	              var $88 = ($j1_01 << 2) + HEAP32[HEAP32[$57$s2] + ($i_22 << 2) >> 2] | 0;
	              HEAP32[$88 >> 2] = $83;
	              var $89 = $j1_01 + 1 | 0;
	              if (($89 | 0) >= (HEAP32[$8$s2] | 0)) {
	                break $_$131;
	              }
	              var $j1_01 = $89;
	            }
	          }
	        } while (0);
	        var $92 = $i_22 + 1 | 0;
	        if (($92 | 0) >= (HEAP32[$55$s2] | 0)) {
	          break $_$127;
	        }
	        var $i_22 = $92;
	      }
	    }
	  } while (0);
	  _hash_table_free($7);
	  return;
	  return;
	}

	_build_widmap["X"] = 1;

	function _ngram_model_set_read($config, $lmctlfile, $lmath) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 1028;
	  var __label__;
	  var $str = __stackBase__;
	  var $val = __stackBase__ + 1024;
	  var $1 = _hash_table_new(0, 0);
	  var $2 = _fopen($lmctlfile, STRING_TABLE.__str2415 | 0);
	  if (($2 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str2007 | 0, 198, STRING_TABLE.__str232533 | 0);
	    __E__sys_error(STRING_TABLE.__str22405 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmctlfile, tempInt));
	    var $_0 = 0;
	  } else {
	    var $6 = _strrchr($lmctlfile, 47);
	    var $7 = ($6 | 0) == 0;
	    do {
	      if ($7) {
	        var $9 = _strrchr($lmctlfile, 92);
	        if (($9 | 0) == 0) {
	          var $basedir_0 = 0;
	          __label__ = 7;
	          break;
	        }
	        var $c_0 = $9;
	        __label__ = 6;
	        break;
	      } else {
	        var $c_0 = $6;
	        __label__ = 6;
	      }
	    } while (0);
	    if (__label__ == 6) {
	      var $c_0;
	      var $14 = $c_0 - $lmctlfile | 0;
	      var $15 = $14 + 2 | 0;
	      var $16 = ___ckd_calloc__($15, 1, STRING_TABLE.__str2007 | 0, 206);
	      var $17 = $14 + 1 | 0;
	      _memcpy($16, $lmctlfile, $17, 1);
	      var $basedir_0 = $16;
	    }
	    var $basedir_0;
	    __E__pr_info_header(STRING_TABLE.__str2007 | 0, 212);
	    __E__pr_info(STRING_TABLE.__str72014 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmctlfile, tempInt));
	    var $19 = ($basedir_0 | 0) != 0;
	    if ($19) {
	      __E__pr_info_header(STRING_TABLE.__str2007 | 0, 214);
	      __E__pr_info(STRING_TABLE.__str82015 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $basedir_0, tempInt));
	    }
	    var $22 = $str | 0;
	    var $23 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	    var $24 = ($23 | 0) == 1;
	    $_$13 : do {
	      if ($24) {
	        var $26 = _strcmp($22, STRING_TABLE.__str102017 | 0);
	        if (($26 | 0) != 0) {
	          var $lms_0_ph = 0;
	          var $lmnames_0_ph = 0;
	          __label__ = 23;
	          break;
	        }
	        $_$15 : while (1) {
	          var $28 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	          var $29 = ($28 | 0) == 1;
	          do {
	            if ($29) {
	              var $31 = _strcmp($22, STRING_TABLE.__str112018 | 0);
	              if (($31 | 0) == 0) {
	                break;
	              }
	              do {
	                if ($19) {
	                  var $_val = HEAP8[$22];
	                  var $35 = _path_is_absolute($_val);
	                  if (($35 | 0) != 0) {
	                    __label__ = 16;
	                    break;
	                  }
	                  var $38 = _string_join($basedir_0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $22, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	                  var $deffile_0 = $38;
	                  __label__ = 17;
	                  break;
	                }
	                __label__ = 16;
	              } while (0);
	              if (__label__ == 16) {
	                var $40 = ___ckd_salloc__($22, STRING_TABLE.__str2007 | 0, 225);
	                var $deffile_0 = $40;
	              }
	              var $deffile_0;
	              __E__pr_info_header(STRING_TABLE.__str2007 | 0, 226);
	              __E__pr_info(STRING_TABLE.__str122019 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $deffile_0, tempInt));
	              var $42 = _read_classdef_file($1, $deffile_0);
	              var $43 = ($42 | 0) < 0;
	              _ckd_free($deffile_0);
	              if ($43) {
	                break $_$15;
	              }
	              continue $_$15;
	            }
	          } while (0);
	          var $44 = _strcmp($22, STRING_TABLE.__str112018 | 0);
	          if (($44 | 0) == 0) {
	            var $48 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	            if (($48 | 0) == 1) {
	              var $lms_0_ph = 0;
	              var $lmnames_0_ph = 0;
	              __label__ = 23;
	              break $_$13;
	            }
	            HEAP8[$22] = 0;
	            var $lms_0 = 0;
	            var $lmnames_0 = 0;
	            var $52 = 0;
	            __label__ = 24;
	            break $_$13;
	          }
	          __E__pr_header(STRING_TABLE.__str2007 | 0, 235, STRING_TABLE.__str102579 | 0);
	          __E__pr_warn(STRING_TABLE.__str132020 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmctlfile, tempInt));
	          break;
	        }
	        _glist_free(0);
	        var $lmnames_1577 = 0;
	        var $set_0378 = 0;
	        __label__ = 53;
	        break;
	      }
	      HEAP8[$22] = 0;
	      var $lms_0 = 0;
	      var $lmnames_0 = 0;
	      var $52 = 0;
	      __label__ = 24;
	      break;
	    } while (0);
	    $_$33 : while (1) {
	      if (__label__ == 23) {
	        var $lmnames_0_ph;
	        var $lms_0_ph;
	        var $lms_0 = $lms_0_ph;
	        var $lmnames_0 = $lmnames_0_ph;
	        var $52 = HEAP8[$22];
	        __label__ = 24;
	        continue;
	      } else if (__label__ == 24) {
	        var $52;
	        var $lmnames_0;
	        var $lms_0;
	        var $53 = $52 << 24 >> 24 == 0;
	        $_$37 : do {
	          if ($53) {
	            var $107 = _fclose($2);
	            var $108 = _glist_reverse($lms_0);
	            var $109 = _glist_reverse($lmnames_0);
	            var $110 = _glist_count($108);
	            var $111 = ___ckd_calloc__($110, 4, STRING_TABLE.__str2007 | 0, 317);
	            var $112 = $111;
	            var $113 = ___ckd_calloc__($110, 4, STRING_TABLE.__str2007 | 0, 318);
	            var $114 = $113;
	            var $115 = ($110 | 0) > 0;
	            $_$68 : do {
	              if ($115) {
	                var $lm_node_016 = $108;
	                var $name_node_017 = $109;
	                var $i_018 = 0;
	                while (1) {
	                  var $i_018;
	                  var $name_node_017;
	                  var $lm_node_016;
	                  var $118 = HEAP32[$lm_node_016 >> 2];
	                  HEAP32[$112 + ($i_018 << 2) >> 2] = $118;
	                  var $121 = HEAP32[$name_node_017 >> 2];
	                  HEAP32[$114 + ($i_018 << 2) >> 2] = $121;
	                  var $127 = $i_018 + 1 | 0;
	                  if (($127 | 0) == ($110 | 0)) {
	                    break $_$68;
	                  }
	                  var $lm_node_016 = HEAP32[$lm_node_016 + 8 >> 2];
	                  var $name_node_017 = HEAP32[$name_node_017 + 8 >> 2];
	                  var $i_018 = $127;
	                }
	              }
	            } while (0);
	            var $128 = _ngram_model_set_init($112, $114, $110);
	            _ckd_free($111);
	            _ckd_free($113);
	            if (($128 | 0) == 0) {
	              var $lmnames_16_ph = $109;
	              var $lms_18_ph = $108;
	              __label__ = 49;
	              break;
	            }
	            var $set_03 = $128;
	            var $lmnames_15 = $109;
	            var $lms_17 = $108;
	            __label__ = 51;
	            break;
	          } else {
	            do {
	              if ($19) {
	                if ($52 << 24 >> 24 == 92 || $52 << 24 >> 24 == 47) {
	                  __label__ = 28;
	                  break;
	                }
	                var $56 = _string_join($basedir_0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $22, HEAP32[tempInt + 4 >> 2] = 0, tempInt));
	                var $lmfile_0 = $56;
	                __label__ = 29;
	                break;
	              }
	              __label__ = 28;
	            } while (0);
	            if (__label__ == 28) {
	              var $58 = ___ckd_salloc__($22, STRING_TABLE.__str2007 | 0, 255);
	              var $lmfile_0 = $58;
	            }
	            var $lmfile_0;
	            __E__pr_info_header(STRING_TABLE.__str2007 | 0, 256);
	            __E__pr_info(STRING_TABLE.__str142021 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmfile_0, tempInt));
	            var $60 = _ngram_model_read($config, $lmfile_0, $lmath);
	            if (($60 | 0) == 0) {
	              _ckd_free($lmfile_0);
	              var $lmnames_16_ph = $lmnames_0;
	              var $lms_18_ph = $lms_0;
	              __label__ = 49;
	              break;
	            }
	            var $64 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	            if (($64 | 0) == 1) {
	              _ckd_free($lmfile_0);
	              var $68 = $60;
	              var $69 = _glist_add_ptr($lms_0, $68);
	              var $70 = ___ckd_salloc__($22, STRING_TABLE.__str2007 | 0, 269);
	              var $71 = _glist_add_ptr($lmnames_0, $70);
	              var $72 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	              var $73 = ($72 | 0) == 1;
	              $_$51 : do {
	                if ($73) {
	                  var $75 = _strcmp($22, STRING_TABLE.__str102017 | 0);
	                  if (($75 | 0) != 0) {
	                    var $lms_0_ph = $69;
	                    var $lmnames_0_ph = $71;
	                    __label__ = 23;
	                    continue $_$33;
	                  }
	                  $_$53 : while (1) {
	                    var $77 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	                    var $78 = ($77 | 0) == 1;
	                    do {
	                      if ($78) {
	                        var $80 = _strcmp($22, STRING_TABLE.__str112018 | 0);
	                        if (($80 | 0) == 0) {
	                          break;
	                        }
	                        var $83 = _hash_table_lookup($1, $22, $val);
	                        if (($83 | 0) == -1) {
	                          __E__pr_header(STRING_TABLE.__str2007 | 0, 280, STRING_TABLE.__str102579 | 0);
	                          __E__pr_warn(STRING_TABLE.__str162023 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	                          var $lmnames_16_ph = $71;
	                          var $lms_18_ph = $69;
	                          __label__ = 49;
	                          break $_$37;
	                        }
	                        var $87 = HEAP32[$val >> 2];
	                        var $89 = HEAP32[$87 >> 2];
	                        var $92 = HEAP32[$87 + 4 >> 2];
	                        var $94 = $87 + 8 | 0;
	                        var $95 = HEAP32[$94 >> 2];
	                        var $96 = _ngram_model_add_class($60, $22, $89, $92, $95);
	                        if (($96 | 0) < 0) {
	                          var $lmnames_16_ph = $71;
	                          var $lms_18_ph = $69;
	                          __label__ = 49;
	                          break $_$37;
	                        }
	                        __E__pr_info_header(STRING_TABLE.__str2007 | 0, 289);
	                        var $99 = HEAP32[$94 >> 2];
	                        __E__pr_info(STRING_TABLE.__str172024 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $22, HEAP32[tempInt + 4 >> 2] = $99, tempInt));
	                        continue $_$53;
	                      }
	                    } while (0);
	                    var $100 = _strcmp($22, STRING_TABLE.__str112018 | 0);
	                    if (($100 | 0) != 0) {
	                      __E__pr_header(STRING_TABLE.__str2007 | 0, 293, STRING_TABLE.__str102579 | 0);
	                      __E__pr_warn(STRING_TABLE.__str132020 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmctlfile, tempInt));
	                      var $lmnames_16_ph = $71;
	                      var $lms_18_ph = $69;
	                      __label__ = 49;
	                      break $_$37;
	                    }
	                    var $104 = _fscanf($2, STRING_TABLE.__str92016 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $22, tempInt));
	                    if (($104 | 0) == 1) {
	                      var $lms_0_ph = $69;
	                      var $lmnames_0_ph = $71;
	                      __label__ = 23;
	                      continue $_$33;
	                    }
	                    break $_$51;
	                  }
	                }
	              } while (0);
	              HEAP8[$22] = 0;
	              var $lms_0 = $69;
	              var $lmnames_0 = $71;
	              var $52 = 0;
	              __label__ = 24;
	              continue $_$33;
	            }
	            __E__pr_header(STRING_TABLE.__str2007 | 0, 263, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str152022 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lmfile_0, tempInt));
	            _ckd_free($lmfile_0);
	            var $lmnames_16_ph = $lmnames_0;
	            var $lms_18_ph = $lms_0;
	            __label__ = 49;
	            break;
	          }
	        } while (0);
	        $_$72 : do {
	          if (__label__ == 49) {
	            var $lms_18_ph;
	            var $lmnames_16_ph;
	            if (($lms_18_ph | 0) == 0) {
	              var $set_03 = 0;
	              var $lmnames_15 = $lmnames_16_ph;
	              var $lms_17 = $lms_18_ph;
	              break;
	            }
	            var $gn_014 = $lms_18_ph;
	            while (1) {
	              var $gn_014;
	              var $133 = HEAP32[$gn_014 >> 2];
	              _ngram_model_free($133);
	              var $135 = HEAP32[$gn_014 + 8 >> 2];
	              if (($135 | 0) == 0) {
	                var $set_03 = 0;
	                var $lmnames_15 = $lmnames_16_ph;
	                var $lms_17 = $lms_18_ph;
	                break $_$72;
	              }
	              var $gn_014 = $135;
	            }
	          }
	        } while (0);
	        var $lms_17;
	        var $lmnames_15;
	        var $set_03;
	        _glist_free($lms_17);
	        if (($lmnames_15 | 0) == 0) {
	          var $lmnames_1577 = 0;
	          var $set_0378 = $set_03;
	          __label__ = 53;
	          continue;
	        }
	        var $gn_110 = $lmnames_15;
	        while (1) {
	          var $gn_110;
	          var $139 = HEAP32[$gn_110 >> 2];
	          _ckd_free($139);
	          var $141 = HEAP32[$gn_110 + 8 >> 2];
	          if (($141 | 0) == 0) {
	            var $lmnames_1577 = $lmnames_15;
	            var $set_0378 = $set_03;
	            __label__ = 53;
	            continue $_$33;
	          }
	          var $gn_110 = $141;
	        }
	      } else if (__label__ == 53) {
	        var $set_0378;
	        var $lmnames_1577;
	        _glist_free($lmnames_1577);
	        var $143 = _hash_table_tolist($1, 0);
	        if (($143 | 0) == 0) {
	          __label__ = 55;
	          break;
	        }
	        var $gn_29 = $143;
	        __label__ = 54;
	        break;
	      }
	    }
	    $_$80 : do {
	      if (__label__ == 54) {
	        while (1) {
	          var $gn_29;
	          var $146 = HEAP32[$gn_29 >> 2];
	          var $148 = HEAP32[$146 >> 2];
	          _ckd_free($148);
	          var $152 = HEAP32[$146 + 8 >> 2];
	          _classdef_free($152);
	          var $154 = HEAP32[$gn_29 + 8 >> 2];
	          if (($154 | 0) == 0) {
	            break $_$80;
	          }
	          var $gn_29 = $154;
	        }
	      }
	    } while (0);
	    _glist_free($143);
	    _hash_table_free($1);
	    _ckd_free($basedir_0);
	    var $_0 = $set_0378;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_set_read["X"] = 1;

	function _ngram_model_set_select($base, $name) {
	  var $2 = $base + 80 | 0;
	  var $4 = HEAP32[$base + 68 >> 2];
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) >= ($4 | 0)) {
	      break;
	    }
	    var $10 = HEAP32[HEAP32[$2 >> 2] + ($i_0 << 2) >> 2];
	    var $11 = _strcmp($10, $name);
	    if (($11 | 0) == 0) {
	      break;
	    }
	    var $i_0 = $i_0 + 1 | 0;
	  }
	  if (($i_0 | 0) != ($4 | 0)) {
	    HEAP32[$base + 72 >> 2] = $i_0;
	  }
	  return;
	  return;
	}

	function _ngram_model_set_known_wid($base, $set_wid) {
	  var $3 = (HEAP32[$base + 12 >> 2] | 0) > ($set_wid | 0);
	  $_$94 : do {
	    if ($3) {
	      var $7 = HEAP32[$base + 72 >> 2];
	      var $9 = $base + 88 | 0;
	      if (($7 | 0) == -1) {
	        var $10 = $base + 68 | 0;
	        var $12 = $base + 76 | 0;
	        var $i_0 = 0;
	        while (1) {
	          var $i_0;
	          if (($i_0 | 0) >= (HEAP32[$10 >> 2] | 0)) {
	            var $_0 = 0;
	            break $_$94;
	          }
	          var $22 = HEAP32[HEAP32[HEAP32[$9 >> 2] + ($set_wid << 2) >> 2] + ($i_0 << 2) >> 2];
	          var $_idx1_val = HEAP32[HEAP32[HEAP32[$12 >> 2] + ($i_0 << 2) >> 2] + 52 >> 2];
	          var $26 = _ngram_unknown_wid($_idx1_val);
	          if (($22 | 0) != ($26 | 0)) {
	            var $_0 = 1;
	            break $_$94;
	          }
	          var $i_0 = $i_0 + 1 | 0;
	        }
	      } else {
	        var $35 = HEAP32[HEAP32[HEAP32[$9 >> 2] + ($set_wid << 2) >> 2] + ($7 << 2) >> 2];
	        var $_idx_val = HEAP32[HEAP32[HEAP32[$base + 76 >> 2] + ($7 << 2) >> 2] + 52 >> 2];
	        var $41 = _ngram_unknown_wid($_idx_val);
	        var $_0 = ($35 | 0) != ($41 | 0) & 1;
	      }
	    } else {
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_ngram_model_set_known_wid["X"] = 1;

	function _ngram_model_set_map_words($base, $words, $n_words) {
	  var $23$s2;
	  var $17$s2;
	  var $14$s2;
	  var $_pre$s2;
	  var $1 = $base + 18 | 0;
	  var $3 = HEAP8[$1] << 24 >> 24 == 0;
	  var $_pre$s2 = ($base + 12 | 0) >> 2;
	  $_$104 : do {
	    if (!$3) {
	      if ((HEAP32[$_pre$s2] | 0) <= 0) {
	        break;
	      }
	      var $6 = $base + 48 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $10 = HEAP32[HEAP32[$6 >> 2] + ($i_01 << 2) >> 2];
	        _ckd_free($10);
	        var $11 = $i_01 + 1 | 0;
	        if (($11 | 0) >= (HEAP32[$_pre$s2] | 0)) {
	          break $_$104;
	        }
	        var $i_01 = $11;
	      }
	    }
	  } while (0);
	  var $14$s2 = ($base + 48 | 0) >> 2;
	  var $16 = HEAP32[$14$s2];
	  _ckd_free($16);
	  var $17$s2 = ($base + 88 | 0) >> 2;
	  var $19 = HEAP32[$17$s2];
	  _ckd_free_2d($19);
	  HEAP8[$1] = 1;
	  HEAP32[$base + 8 >> 2] = $n_words;
	  HEAP32[$_pre$s2] = $n_words;
	  var $21 = ___ckd_calloc__($n_words, 4, STRING_TABLE.__str2007 | 0, 654);
	  HEAP32[$14$s2] = $21;
	  var $23$s2 = ($base + 68 | 0) >> 2;
	  var $24 = HEAP32[$23$s2];
	  var $25 = ___ckd_calloc_2d__($n_words, $24, 4, STRING_TABLE.__str2007 | 0, 655);
	  var $_c = $25;
	  HEAP32[$17$s2] = $_c;
	  var $26 = $base + 52 | 0;
	  var $27 = HEAP32[$26 >> 2];
	  _hash_table_empty($27);
	  var $28 = ($n_words | 0) > 0;
	  $_$110 : do {
	    if ($28) {
	      var $30 = $base + 76 | 0;
	      var $i_14 = 0;
	      while (1) {
	        var $i_14;
	        var $33 = HEAP32[$words + ($i_14 << 2) >> 2];
	        var $34 = ___ckd_salloc__($33, STRING_TABLE.__str2007 | 0, 659);
	        var $36 = ($i_14 << 2) + HEAP32[$14$s2] | 0;
	        HEAP32[$36 >> 2] = $34;
	        var $37 = HEAP32[$26 >> 2];
	        var $40 = HEAP32[HEAP32[$14$s2] + ($i_14 << 2) >> 2];
	        var $42 = _hash_table_enter($37, $40, $i_14);
	        var $44 = (HEAP32[$23$s2] | 0) > 0;
	        $_$114 : do {
	          if ($44) {
	            var $j_02 = 0;
	            while (1) {
	              var $j_02;
	              var $47 = HEAP32[HEAP32[$30 >> 2] + ($j_02 << 2) >> 2];
	              var $50 = HEAP32[HEAP32[$14$s2] + ($i_14 << 2) >> 2];
	              var $51 = _ngram_wid($47, $50);
	              var $56 = ($j_02 << 2) + HEAP32[HEAP32[$17$s2] + ($i_14 << 2) >> 2] | 0;
	              HEAP32[$56 >> 2] = $51;
	              var $57 = $j_02 + 1 | 0;
	              if (($57 | 0) >= (HEAP32[$23$s2] | 0)) {
	                break $_$114;
	              }
	              var $j_02 = $57;
	            }
	          }
	        } while (0);
	        var $60 = $i_14 + 1 | 0;
	        if (($60 | 0) == ($n_words | 0)) {
	          break $_$110;
	        }
	        var $i_14 = $60;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_ngram_model_set_map_words["X"] = 1;

	function _my_compare($a, $b) {
	  var $2 = HEAP32[$a >> 2];
	  var $3 = _strcmp($2, STRING_TABLE.__str192026 | 0);
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = -1;
	    } else {
	      var $7 = HEAP32[$b >> 2];
	      var $8 = _strcmp($7, STRING_TABLE.__str192026 | 0);
	      if (($8 | 0) == 0) {
	        var $_0 = 1;
	        break;
	      }
	      var $11 = _strcmp($2, $7);
	      var $_0 = $11;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_model_set_free($base) {
	  var $1$s2;
	  var $1$s2 = ($base + 68 | 0) >> 2;
	  var $3 = (HEAP32[$1$s2] | 0) > 0;
	  var $5 = $base + 76 | 0;
	  var $6 = HEAP32[$5 >> 2];
	  $_$125 : do {
	    if ($3) {
	      var $i_04 = 0;
	      var $7 = $6;
	      while (1) {
	        var $7;
	        var $i_04;
	        var $9 = HEAP32[$7 + ($i_04 << 2) >> 2];
	        _ngram_model_free($9);
	        var $10 = $i_04 + 1 | 0;
	        var $13 = HEAP32[$5 >> 2];
	        if (($10 | 0) >= (HEAP32[$1$s2] | 0)) {
	          var $_lcssa3 = $13;
	          break $_$125;
	        }
	        var $i_04 = $10;
	        var $7 = $13;
	      }
	    } else {
	      var $_lcssa3 = $6;
	    }
	  } while (0);
	  var $_lcssa3;
	  _ckd_free($_lcssa3);
	  var $16 = (HEAP32[$1$s2] | 0) > 0;
	  var $18 = $base + 80 | 0;
	  var $19 = HEAP32[$18 >> 2];
	  $_$129 : do {
	    if ($16) {
	      var $i_11 = 0;
	      var $20 = $19;
	      while (1) {
	        var $20;
	        var $i_11;
	        var $22 = HEAP32[$20 + ($i_11 << 2) >> 2];
	        _ckd_free($22);
	        var $23 = $i_11 + 1 | 0;
	        var $26 = HEAP32[$18 >> 2];
	        if (($23 | 0) >= (HEAP32[$1$s2] | 0)) {
	          var $_lcssa = $26;
	          break $_$129;
	        }
	        var $i_11 = $23;
	        var $20 = $26;
	      }
	    } else {
	      var $_lcssa = $19;
	    }
	  } while (0);
	  var $_lcssa;
	  _ckd_free($_lcssa);
	  var $31 = HEAP32[$base + 84 >> 2];
	  _ckd_free($31);
	  var $35 = HEAP32[$base + 92 >> 2];
	  _ckd_free($35);
	  var $38 = HEAP32[$base + 88 >> 2];
	  _ckd_free_2d($38);
	  return;
	  return;
	}

	_ngram_model_set_free["X"] = 1;

	function _ngram_model_set_apply_weights($base, $lw, $wip, $uw) {
	  var $1 = $base + 68 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  $_$134 : do {
	    if ($3) {
	      var $5 = $base + 76 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $9 = HEAP32[HEAP32[$5 >> 2] + ($i_01 << 2) >> 2];
	        _ngram_model_apply_weights($9, $lw, $wip, $uw);
	        var $10 = $i_01 + 1 | 0;
	        if (($10 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          break $_$134;
	        }
	        var $i_01 = $10;
	      }
	    }
	  } while (0);
	  return 0;
	  return null;
	}

	function _ngram_model_set_score($base, $wid, $history, $n_hist, $n_used) {
	  var $77$s2;
	  var $24$s2;
	  var $7$s2;
	  var $3 = HEAPU8[$base + 16 | 0] & 255;
	  var $4 = $3 - 1 | 0;
	  var $_n_hist = ($4 | 0) < ($n_hist | 0) ? $4 : $n_hist;
	  var $7$s2 = ($base + 72 | 0) >> 2;
	  var $8 = HEAPU32[$7$s2];
	  var $9 = ($8 | 0) == -1;
	  $_$140 : do {
	    if ($9) {
	      var $12 = HEAP32[$base + 44 >> 2];
	      var $13 = $base + 68 | 0;
	      if ((HEAP32[$13 >> 2] | 0) <= 0) {
	        var $score_1 = $12;
	        break;
	      }
	      var $16 = $base + 88 | 0;
	      var $17 = ($_n_hist | 0) > 0;
	      var $18 = $base + 20 | 0;
	      var $20 = $base + 84 | 0;
	      var $22 = $base + 76 | 0;
	      var $24$s2 = ($base + 92 | 0) >> 2;
	      var $25 = -$3 | 0;
	      var $26 = $n_hist ^ -1;
	      var $smax10 = ($25 | 0) > ($26 | 0) ? $25 : $26;
	      var $28 = $smax10 ^ -1;
	      var $score_06 = $12;
	      var $i_07 = 0;
	      while (1) {
	        var $i_07;
	        var $score_06;
	        var $35 = HEAP32[HEAP32[HEAP32[$16 >> 2] + ($wid << 2) >> 2] + ($i_07 << 2) >> 2];
	        $_$145 : do {
	          if ($17) {
	            var $j_02 = 0;
	            while (1) {
	              var $j_02;
	              var $37 = HEAP32[$history + ($j_02 << 2) >> 2];
	              if (($37 | 0) == -1) {
	                var $41 = ($j_02 << 2) + HEAP32[$24$s2] | 0;
	                HEAP32[$41 >> 2] = -1;
	              } else {
	                var $48 = HEAP32[HEAP32[HEAP32[$16 >> 2] + ($37 << 2) >> 2] + ($i_07 << 2) >> 2];
	                var $50 = ($j_02 << 2) + HEAP32[$24$s2] | 0;
	                HEAP32[$50 >> 2] = $48;
	              }
	              var $52 = $j_02 + 1 | 0;
	              if (($52 | 0) == ($28 | 0)) {
	                break $_$145;
	              }
	              var $j_02 = $52;
	            }
	          }
	        } while (0);
	        var $53 = HEAP32[$18 >> 2];
	        var $56 = HEAP32[HEAP32[$20 >> 2] + ($i_07 << 2) >> 2];
	        var $59 = HEAP32[HEAP32[$22 >> 2] + ($i_07 << 2) >> 2];
	        var $60 = HEAP32[$24$s2];
	        var $61 = _ngram_ng_score($59, $35, $60, $_n_hist, $n_used);
	        var $62 = $61 + $56 | 0;
	        var $63 = _logmath_add($53, $score_06, $62);
	        var $64 = $i_07 + 1 | 0;
	        if (($64 | 0) >= (HEAP32[$13 >> 2] | 0)) {
	          var $score_1 = $63;
	          break $_$140;
	        }
	        var $score_06 = $63;
	        var $i_07 = $64;
	      }
	    } else {
	      var $68 = $base + 88 | 0;
	      var $74 = HEAP32[HEAP32[HEAP32[$68 >> 2] + ($wid << 2) >> 2] + ($8 << 2) >> 2];
	      var $77$s2 = ($base + 92 | 0) >> 2;
	      if (($_n_hist | 0) > 0) {
	        var $78 = -$3 | 0;
	        var $79 = $n_hist ^ -1;
	        var $smax = ($78 | 0) > ($79 | 0) ? $78 : $79;
	        var $81 = $smax ^ -1;
	        var $j1_01 = 0;
	        while (1) {
	          var $j1_01;
	          var $84 = HEAP32[$history + ($j1_01 << 2) >> 2];
	          if (($84 | 0) == -1) {
	            var $88 = ($j1_01 << 2) + HEAP32[$77$s2] | 0;
	            HEAP32[$88 >> 2] = -1;
	          } else {
	            var $96 = HEAP32[HEAP32[HEAP32[$68 >> 2] + ($84 << 2) >> 2] + (HEAP32[$7$s2] << 2) >> 2];
	            var $98 = ($j1_01 << 2) + HEAP32[$77$s2] | 0;
	            HEAP32[$98 >> 2] = $96;
	          }
	          var $100 = $j1_01 + 1 | 0;
	          if (($100 | 0) == ($81 | 0)) {
	            break;
	          }
	          var $j1_01 = $100;
	        }
	        var $101 = HEAP32[$7$s2];
	      } else {
	        var $101 = $8;
	      }
	      var $101;
	      var $106 = HEAP32[HEAP32[$base + 76 >> 2] + ($101 << 2) >> 2];
	      var $107 = HEAP32[$77$s2];
	      var $108 = _ngram_ng_score($106, $74, $107, $_n_hist, $n_used);
	      var $score_1 = $108;
	    }
	  } while (0);
	  var $score_1;
	  return $score_1;
	  return null;
	}

	_ngram_model_set_score["X"] = 1;

	function _chksum_accum($buf, $n_el, $sum) {
	  var $1 = $buf;
	  var $2 = ($n_el | 0) > 0;
	  $_$137 : do {
	    if ($2) {
	      var $_21 = $sum;
	      var $i_22 = 0;
	      while (1) {
	        var $i_22;
	        var $_21;
	        var $8 = HEAP32[$1 + ($i_22 << 2) >> 2] + ($_21 << 20 | $_21 >>> 12) | 0;
	        var $9 = $i_22 + 1 | 0;
	        if (($9 | 0) == ($n_el | 0)) {
	          var $_3 = $8;
	          break $_$137;
	        }
	        var $_21 = $8;
	        var $i_22 = $9;
	      }
	    } else {
	      var $_3 = $sum;
	    }
	  } while (0);
	  var $_3;
	  return $_3;
	  return null;
	}

	function _strcmp_nocase($str1, $str2) {
	  var $1 = ($str1 | 0) == ($str2 | 0);
	  $_$180 : do {
	    if ($1) {
	      var $_0 = 0;
	    } else {
	      var $3 = ($str1 | 0) == 0;
	      if ($3 | ($str2 | 0) == 0) {
	        var $23 = $3 ? -1 : 1;
	        var $_0 = $23;
	      } else {
	        var $_01 = $str1;
	        var $_02 = $str2;
	        while (1) {
	          var $_02;
	          var $_01;
	          var $5 = HEAPU8[$_01];
	          var $8 = ($5 - 97 & 255 & 255) < 26 ? $5 - 32 & 255 : $5;
	          var $9 = HEAPU8[$_02];
	          var $12 = ($9 - 97 & 255 & 255) < 26 ? $9 - 32 & 255 : $9;
	          if ($8 << 24 >> 24 != $12 << 24 >> 24) {
	            break;
	          }
	          if ($8 << 24 >> 24 == 0) {
	            var $_0 = 0;
	            break $_$180;
	          }
	          var $_01 = $_01 + 1 | 0;
	          var $_02 = $_02 + 1 | 0;
	        }
	        var $_0 = ($8 << 24 >> 24) - ($12 << 24 >> 24) | 0;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _ngram_model_set_raw_score($base, $wid, $history, $n_hist, $n_used) {
	  var $77$s2;
	  var $24$s2;
	  var $7$s2;
	  var $3 = HEAPU8[$base + 16 | 0] & 255;
	  var $4 = $3 - 1 | 0;
	  var $_n_hist = ($4 | 0) < ($n_hist | 0) ? $4 : $n_hist;
	  var $7$s2 = ($base + 72 | 0) >> 2;
	  var $8 = HEAPU32[$7$s2];
	  var $9 = ($8 | 0) == -1;
	  $_$2 : do {
	    if ($9) {
	      var $12 = HEAP32[$base + 44 >> 2];
	      var $13 = $base + 68 | 0;
	      if ((HEAP32[$13 >> 2] | 0) <= 0) {
	        var $score_1 = $12;
	        break;
	      }
	      var $16 = $base + 88 | 0;
	      var $17 = ($_n_hist | 0) > 0;
	      var $18 = $base + 20 | 0;
	      var $20 = $base + 84 | 0;
	      var $22 = $base + 76 | 0;
	      var $24$s2 = ($base + 92 | 0) >> 2;
	      var $25 = -$3 | 0;
	      var $26 = $n_hist ^ -1;
	      var $smax10 = ($25 | 0) > ($26 | 0) ? $25 : $26;
	      var $28 = $smax10 ^ -1;
	      var $score_06 = $12;
	      var $i_07 = 0;
	      while (1) {
	        var $i_07;
	        var $score_06;
	        var $35 = HEAP32[HEAP32[HEAP32[$16 >> 2] + ($wid << 2) >> 2] + ($i_07 << 2) >> 2];
	        $_$7 : do {
	          if ($17) {
	            var $j_02 = 0;
	            while (1) {
	              var $j_02;
	              var $37 = HEAP32[$history + ($j_02 << 2) >> 2];
	              if (($37 | 0) == -1) {
	                var $41 = ($j_02 << 2) + HEAP32[$24$s2] | 0;
	                HEAP32[$41 >> 2] = -1;
	              } else {
	                var $48 = HEAP32[HEAP32[HEAP32[$16 >> 2] + ($37 << 2) >> 2] + ($i_07 << 2) >> 2];
	                var $50 = ($j_02 << 2) + HEAP32[$24$s2] | 0;
	                HEAP32[$50 >> 2] = $48;
	              }
	              var $52 = $j_02 + 1 | 0;
	              if (($52 | 0) == ($28 | 0)) {
	                break $_$7;
	              }
	              var $j_02 = $52;
	            }
	          }
	        } while (0);
	        var $53 = HEAP32[$18 >> 2];
	        var $56 = HEAP32[HEAP32[$20 >> 2] + ($i_07 << 2) >> 2];
	        var $59 = HEAP32[HEAP32[$22 >> 2] + ($i_07 << 2) >> 2];
	        var $60 = HEAP32[$24$s2];
	        var $61 = _ngram_ng_prob($59, $35, $60, $_n_hist, $n_used);
	        var $62 = $61 + $56 | 0;
	        var $63 = _logmath_add($53, $score_06, $62);
	        var $64 = $i_07 + 1 | 0;
	        if (($64 | 0) >= (HEAP32[$13 >> 2] | 0)) {
	          var $score_1 = $63;
	          break $_$2;
	        }
	        var $score_06 = $63;
	        var $i_07 = $64;
	      }
	    } else {
	      var $68 = $base + 88 | 0;
	      var $74 = HEAP32[HEAP32[HEAP32[$68 >> 2] + ($wid << 2) >> 2] + ($8 << 2) >> 2];
	      var $77$s2 = ($base + 92 | 0) >> 2;
	      if (($_n_hist | 0) > 0) {
	        var $78 = -$3 | 0;
	        var $79 = $n_hist ^ -1;
	        var $smax = ($78 | 0) > ($79 | 0) ? $78 : $79;
	        var $81 = $smax ^ -1;
	        var $j1_01 = 0;
	        while (1) {
	          var $j1_01;
	          var $84 = HEAP32[$history + ($j1_01 << 2) >> 2];
	          if (($84 | 0) == -1) {
	            var $88 = ($j1_01 << 2) + HEAP32[$77$s2] | 0;
	            HEAP32[$88 >> 2] = -1;
	          } else {
	            var $96 = HEAP32[HEAP32[HEAP32[$68 >> 2] + ($84 << 2) >> 2] + (HEAP32[$7$s2] << 2) >> 2];
	            var $98 = ($j1_01 << 2) + HEAP32[$77$s2] | 0;
	            HEAP32[$98 >> 2] = $96;
	          }
	          var $100 = $j1_01 + 1 | 0;
	          if (($100 | 0) == ($81 | 0)) {
	            break;
	          }
	          var $j1_01 = $100;
	        }
	        var $101 = HEAP32[$7$s2];
	      } else {
	        var $101 = $8;
	      }
	      var $101;
	      var $106 = HEAP32[HEAP32[$base + 76 >> 2] + ($101 << 2) >> 2];
	      var $107 = HEAP32[$77$s2];
	      var $108 = _ngram_ng_prob($106, $74, $107, $_n_hist, $n_used);
	      var $score_1 = $108;
	    }
	  } while (0);
	  var $score_1;
	  return $score_1;
	  return null;
	}

	_ngram_model_set_raw_score["X"] = 1;

	function _ngram_model_set_add_ug($base, $wid, $lweight) {
	  var $71$s2;
	  var $68$s2;
	  var $10$s2;
	  var $1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var __label__;
	  var $n_hist = __stackBase__;
	  var $1$s2 = ($base + 68 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = ___ckd_calloc__($2, 4, STRING_TABLE.__str2007 | 0, 791);
	  var $4 = $3;
	  var $5 = $base + 44 | 0;
	  var $8 = $base + 72 | 0;
	  var $10$s2 = ($base + 76 | 0) >> 2;
	  var $11 = $base + 48 | 0;
	  var $12 = $base + 20 | 0;
	  var $14 = $base + 84 | 0;
	  var $prob_0 = HEAP32[$5 >> 2];
	  var $i_0 = 0;
	  $_$28 : while (1) {
	    var $i_0;
	    var $prob_0;
	    if (($i_0 | 0) >= (HEAP32[$1$s2] | 0)) {
	      __label__ = 13;
	      break;
	    }
	    var $19 = HEAP32[$8 >> 2];
	    var $or_cond = ($19 | 0) == -1 | ($19 | 0) == ($i_0 | 0);
	    do {
	      if ($or_cond) {
	        var $25 = HEAP32[HEAP32[$10$s2] + ($i_0 << 2) >> 2];
	        var $28 = HEAP32[HEAP32[$11 >> 2] + ($wid << 2) >> 2];
	        var $29 = _ngram_wid($25, $28);
	        var $30 = ($i_0 << 2) + $4 | 0;
	        HEAP32[$30 >> 2] = $29;
	        var $31 = ($29 | 0) == -1;
	        do {
	          if ($31) {
	            var $35 = HEAP32[HEAP32[$10$s2] + ($i_0 << 2) >> 2];
	            var $38 = HEAP32[HEAP32[$11 >> 2] + ($wid << 2) >> 2];
	            var $39 = HEAP32[$12 >> 2];
	            var $_idx_val = HEAP8[$39 + 9 | 0];
	            var $_idx1 = $39 + 20 | 0;
	            var $_idx1_val = (tempDoubleI32[0] = HEAP32[$_idx1 >> 2], tempDoubleI32[1] = HEAP32[$_idx1 + 4 >> 2], tempDoubleF64[0]);
	            var $40 = _logmath_exp($_idx_val, $_idx1_val, $lweight);
	            var $41 = $40;
	            var $42 = _ngram_model_add_word($35, $38, $41);
	            HEAP32[$30 >> 2] = $42;
	            if (($42 | 0) != -1) {
	              var $47 = $42;
	              break;
	            }
	            _ckd_free($3);
	            var $_0 = HEAP32[$5 >> 2];
	            __label__ = 16;
	            break $_$28;
	          }
	          var $47 = $29;
	        } while (0);
	        var $47;
	        var $50 = HEAP32[HEAP32[$10$s2] + ($i_0 << 2) >> 2];
	        var $51 = _ngram_ng_prob($50, $47, 0, 0, $n_hist);
	        var $52 = HEAP32[$8 >> 2];
	        if (($52 | 0) == ($i_0 | 0)) {
	          var $prob_1 = $51;
	          break;
	        }
	        if (($52 | 0) != -1) {
	          var $prob_1 = $prob_0;
	          break;
	        }
	        var $57 = HEAP32[$12 >> 2];
	        var $61 = HEAP32[HEAP32[$14 >> 2] + ($i_0 << 2) >> 2] + $51 | 0;
	        var $62 = _logmath_add($57, $prob_0, $61);
	        var $prob_1 = $62;
	      } else {
	        var $64 = ($i_0 << 2) + $4 | 0;
	        HEAP32[$64 >> 2] = -1;
	        var $prob_1 = $prob_0;
	      }
	    } while (0);
	    var $prob_1;
	    var $prob_0 = $prob_1;
	    var $i_0 = $i_0 + 1 | 0;
	  }
	  if (__label__ == 13) {
	    var $68$s2 = ($base + 88 | 0) >> 2;
	    var $70 = HEAP32[$68$s2];
	    var $71$s2 = ($base + 12 | 0) >> 2;
	    var $73 = HEAP32[$71$s2] << 2;
	    var $74 = ___ckd_realloc__($70, $73, STRING_TABLE.__str2007 | 0, 824);
	    var $75 = $74;
	    var $_c = $74;
	    HEAP32[$68$s2] = $_c;
	    var $77 = HEAP32[$75 >> 2];
	    var $81 = (HEAP32[$71$s2] << 2) * HEAP32[$1$s2] | 0;
	    var $82 = ___ckd_realloc__($77, $81, STRING_TABLE.__str2007 | 0, 828);
	    var $84 = HEAP32[$68$s2] | 0;
	    HEAP32[$84 >> 2] = $82;
	    var $86 = (HEAP32[$71$s2] | 0) > 0;
	    var $88 = HEAP32[$68$s2];
	    $_$43 : do {
	      if ($86) {
	        var $i_12 = 0;
	        var $89 = $88;
	        while (1) {
	          var $89;
	          var $i_12;
	          var $93 = (HEAP32[$1$s2] * $i_12 << 2) + HEAP32[$89 >> 2] | 0;
	          HEAP32[$89 + ($i_12 << 2) >> 2] = $93;
	          var $95 = $i_12 + 1 | 0;
	          var $99 = HEAP32[$68$s2];
	          if (($95 | 0) >= (HEAP32[$71$s2] | 0)) {
	            var $_lcssa = $99;
	            break $_$43;
	          }
	          var $i_12 = $95;
	          var $89 = $99;
	        }
	      } else {
	        var $_lcssa = $88;
	      }
	    } while (0);
	    var $_lcssa;
	    var $102 = HEAP32[$_lcssa + ($wid << 2) >> 2];
	    var $104 = HEAP32[$1$s2] << 2;
	    _memcpy($102, $3, $104, 4);
	    _ckd_free($3);
	    var $_0 = $prob_0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_ngram_model_set_add_ug["X"] = 1;

	function _ngram_model_set_flush($base) {
	  var $1 = $base + 68 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  $_$49 : do {
	    if ($3) {
	      var $5 = $base + 76 | 0;
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        var $9 = HEAP32[HEAP32[$5 >> 2] + ($i_01 << 2) >> 2];
	        _ngram_model_flush($9);
	        var $10 = $i_01 + 1 | 0;
	        if (($10 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          break $_$49;
	        }
	        var $i_01 = $10;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _bio_hdrarg_free($argname, $argval) {
	  if (($argname | 0) != 0) {
	    var $2 = HEAP32[$argname >> 2];
	    var $3 = ($2 | 0) == 0;
	    $_$57 : do {
	      if (!$3) {
	        var $i_01 = 0;
	        var $4 = $2;
	        while (1) {
	          var $4;
	          var $i_01;
	          _ckd_free($4);
	          var $6 = HEAP32[$argval + ($i_01 << 2) >> 2];
	          _ckd_free($6);
	          var $7 = $i_01 + 1 | 0;
	          var $9 = HEAP32[$argname + ($7 << 2) >> 2];
	          if (($9 | 0) == 0) {
	            break $_$57;
	          }
	          var $i_01 = $7;
	          var $4 = $9;
	        }
	      }
	    } while (0);
	    var $11 = $argname;
	    _ckd_free($11);
	    var $12 = $argval;
	    _ckd_free($12);
	  }
	  return;
	  return;
	}

	function _bio_writehdr($fp) {
	  var $args$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $args$s2 = __stackBase__ >> 2;
	  var $b = __stackBase__ + 4;
	  var $1 = _fwrite(STRING_TABLE.__str2037 | 0, 3, 1, $fp);
	  HEAP32[$args$s2] = arguments[_bio_writehdr.length];
	  while (1) {
	    var $4 = HEAP32[$args$s2];
	    var $5 = $4;
	    var $6 = $4 + 4 | 0;
	    HEAP32[$args$s2] = $6;
	    var $7 = HEAP32[$5 >> 2];
	    if (($7 | 0) == 0) {
	      var $18 = _fwrite(STRING_TABLE.__str302370 | 0, 7, 1, $fp);
	      var $19 = _fflush($fp);
	      HEAP32[$b >> 2] = 287454020;
	      var $20 = $b;
	      var $21 = _fwrite($20, 4, 1, $fp);
	      if (($21 | 0) != 1) {
	        var $_0 = -1;
	        break;
	      }
	      var $24 = _fflush($fp);
	      var $_0 = 0;
	      break;
	    }
	    var $10 = $6;
	    var $11 = $4 + 8 | 0;
	    HEAP32[$args$s2] = $11;
	    var $12 = HEAP32[$10 >> 2];
	    if (($12 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 166, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str52042 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	      break;
	    }
	    var $16 = _fprintf($fp, STRING_TABLE.__str62043 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $7, HEAP32[tempInt + 4 >> 2] = $12, tempInt));
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _bio_readhdr($fp, $argname, $argval, $swap) {
	  var $argval$s2 = $argval >> 2;
	  var $argname$s2 = $argname >> 2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20484;
	  var __label__;
	  var $line = __stackBase__;
	  var $word = __stackBase__ + 16384;
	  var $l = __stackBase__ + 20480;
	  var $1 = ___ckd_calloc__(33, 4, STRING_TABLE.__str32040 | 0, 193);
	  HEAP32[$argname$s2] = $1;
	  var $3 = ___ckd_calloc__(32, 4, STRING_TABLE.__str32040 | 0, 194);
	  HEAP32[$argval$s2] = $3;
	  var $5 = $line | 0;
	  var $6 = _fgets($5, 16384, $fp);
	  var $7 = ($6 | 0) == 0;
	  $_$74 : do {
	    if ($7) {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 198, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str72044 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 0, tempInt));
	      __label__ = 25;
	      break;
	    }
	    var $11 = HEAP8[$5] << 24 >> 24 == 115;
	    $_$77 : do {
	      if ($11) {
	        if (HEAP8[$line + 1 | 0] << 24 >> 24 != 51) {
	          __label__ = 20;
	          break;
	        }
	        if (HEAP8[$line + 2 | 0] << 24 >> 24 != 10) {
	          __label__ = 20;
	          break;
	        }
	        var $20 = $word | 0;
	        var $lineno_0_ph = 1;
	        var $i_0_ph = 0;
	        $_$81 : while (1) {
	          var $i_0_ph;
	          var $lineno_0_ph;
	          var $lineno_0 = $lineno_0_ph;
	          while (1) {
	            var $lineno_0;
	            var $22 = _fgets($5, 16384, $fp);
	            if (($22 | 0) == 0) {
	              __E__pr_header(STRING_TABLE.__str32040 | 0, 207, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str72044 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $lineno_0, tempInt));
	              __label__ = 25;
	              break $_$74;
	            }
	            var $26 = $lineno_0 + 1 | 0;
	            var $27 = _sscanf($5, STRING_TABLE.__str82045 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $20, HEAP32[tempInt + 4 >> 2] = $l, tempInt));
	            if (($27 | 0) != 1) {
	              __E__pr_header(STRING_TABLE.__str32040 | 0, 213, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str92046 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $26, tempInt));
	              __label__ = 25;
	              break $_$74;
	            }
	            var $31 = HEAP32[$l >> 2];
	            var $32 = _printf(STRING_TABLE.__str102047 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $20, HEAP32[tempInt + 4 >> 2] = $31, tempInt));
	            var $33 = _strcmp($20, STRING_TABLE.__str112048 | 0);
	            if (($33 | 0) == 0) {
	              var $i_1 = $i_0_ph;
	              __label__ = 23;
	              break $_$77;
	            }
	            if (HEAP8[$20] << 24 >> 24 == 35) {
	              var $lineno_0 = $26;
	              continue;
	            }
	            if (($i_0_ph | 0) > 31) {
	              __E__pr_header(STRING_TABLE.__str32040 | 0, 223, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str122049 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 32, tempInt));
	              __label__ = 25;
	              break $_$74;
	            }
	            var $42 = ___ckd_salloc__($20, STRING_TABLE.__str32040 | 0, 229);
	            var $44 = ($i_0_ph << 2) + HEAP32[$argname$s2] | 0;
	            HEAP32[$44 >> 2] = $42;
	            var $46 = $line + HEAP32[$l >> 2] | 0;
	            var $47 = _sscanf($46, STRING_TABLE.__str32259 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $20, tempInt));
	            if (($47 | 0) == 1) {
	              var $51 = _printf(STRING_TABLE.__str142051 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $20, tempInt));
	              var $52 = ___ckd_salloc__($20, STRING_TABLE.__str32040 | 0, 235);
	              var $54 = ($i_0_ph << 2) + HEAP32[$argval$s2] | 0;
	              HEAP32[$54 >> 2] = $52;
	              var $55 = $i_0_ph + 1 | 0;
	              var $56 = _printf(STRING_TABLE.__str152052 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $55, HEAP32[tempInt + 4 >> 2] = $26, tempInt));
	              var $lineno_0_ph = $26;
	              var $i_0_ph = $55;
	              continue $_$81;
	            }
	            __E__pr_header(STRING_TABLE.__str32040 | 0, 231, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str92046 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $26, tempInt));
	            __label__ = 25;
	            break $_$74;
	          }
	        }
	      } else {
	        __label__ = 20;
	      }
	    } while (0);
	    if (__label__ == 20) {
	      var $58 = $word | 0;
	      var $59 = _sscanf($5, STRING_TABLE.__str32259 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $58, tempInt));
	      if (($59 | 0) != 1) {
	        __E__pr_header(STRING_TABLE.__str32040 | 0, 243, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str92046 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = 1, tempInt));
	        __label__ = 25;
	        break;
	      }
	      var $63 = ___ckd_salloc__(STRING_TABLE.__str82348 | 0, STRING_TABLE.__str32040 | 0, 247);
	      var $64 = HEAP32[$argname$s2];
	      HEAP32[$64 >> 2] = $63;
	      var $65 = ___ckd_salloc__($58, STRING_TABLE.__str32040 | 0, 248);
	      var $66 = HEAP32[$argval$s2];
	      HEAP32[$66 >> 2] = $65;
	      _bcomment_read($fp);
	      var $i_1 = 1;
	    }
	    var $i_1;
	    var $68 = ($i_1 << 2) + HEAP32[$argname$s2] | 0;
	    HEAP32[$68 >> 2] = 0;
	    var $69 = _swap_check($fp);
	    HEAP32[$swap >> 2] = $69;
	    if (($69 | 0) >= 0) {
	      var $_0 = 0;
	      __label__ = 26;
	      break;
	    }
	    __E__pr_header(STRING_TABLE.__str32040 | 0, 256, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str172054 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    __label__ = 25;
	    break;
	  } while (0);
	  if (__label__ == 25) {
	    var $73 = HEAP32[$argname$s2];
	    var $74 = HEAP32[$argval$s2];
	    _bio_hdrarg_free($73, $74);
	    HEAP32[$argval$s2] = 0;
	    HEAP32[$argname$s2] = 0;
	    var $_0 = -1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_bio_readhdr["X"] = 1;

	function _swap_check($fp) {
	  var $magic$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $magic = __stackBase__, $magic$s2 = $magic >> 2;
	  var $1 = $magic;
	  var $2 = _fread($1, 4, 1, $fp);
	  var $3 = ($2 | 0) == 1;
	  do {
	    if ($3) {
	      var $6 = HEAP32[$magic$s2];
	      if (($6 | 0) == 287454020) {
	        var $_0 = 0;
	        break;
	      }
	      var $9 = _llvm_bswap_i32($6);
	      HEAP32[$magic$s2] = $9;
	      if (($6 | 0) == 1144201745) {
	        var $_0 = 1;
	        break;
	      }
	      HEAP32[$magic$s2] = $6;
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 111, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str402077 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $6, HEAP32[tempInt + 4 >> 2] = 287454020, tempInt));
	      var $_0 = -1;
	    } else {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 99, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str392076 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _bio_fread($buf, $n_el, $fp, $swap, $chksum) {
	  var $1 = _fread($buf, 4, $n_el, $fp);
	  var $2 = ($1 | 0) == ($n_el | 0);
	  do {
	    if ($2) {
	      if (($swap | 0) != 0) {
	        _swap_buf($buf, $n_el);
	      }
	      if (($chksum | 0) == 0) {
	        var $_0 = $n_el;
	        break;
	      }
	      var $9 = HEAP32[$chksum >> 2];
	      var $10 = _chksum_accum($buf, $n_el, $9);
	      HEAP32[$chksum >> 2] = $10;
	      var $_0 = $n_el;
	    } else {
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _swap_buf($buf, $n_el) {
	  var $1 = $buf;
	  var $2 = ($n_el | 0) > 0;
	  $_$132 : do {
	    if ($2) {
	      var $i_11 = 0;
	      while (1) {
	        var $i_11;
	        var $3 = ($i_11 << 2) + $1 | 0;
	        var $4 = HEAP32[$3 >> 2];
	        var $5 = _llvm_bswap_i32($4);
	        HEAP32[$3 >> 2] = $5;
	        var $6 = $i_11 + 1 | 0;
	        if (($6 | 0) == ($n_el | 0)) {
	          break $_$132;
	        }
	        var $i_11 = $6;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _bio_fread_3d($arr, $d1, $d2, $d3, $fp, $swap, $chksum) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var $l_d1 = __stackBase__;
	  var $l_d2 = __stackBase__ + 4;
	  var $l_d3 = __stackBase__ + 8;
	  var $n = __stackBase__ + 12;
	  var $raw = __stackBase__ + 16;
	  var $1 = $l_d1;
	  var $2 = _bio_fread($1, 1, $fp, $swap, $chksum);
	  do {
	    if (($2 | 0) == 1) {
	      var $6 = $l_d2;
	      var $7 = _bio_fread($6, 1, $fp, $swap, $chksum);
	      if (($7 | 0) == 1) {
	        var $11 = $l_d3;
	        var $12 = _bio_fread($11, 1, $fp, $swap, $chksum);
	        if (($12 | 0) == 1) {
	          var $16 = _bio_fread_1d($raw, $n, $fp, $swap, $chksum);
	          if (($16 | 0) != (HEAP32[$n >> 2] | 0)) {
	            var $_0 = -1;
	            break;
	          }
	          var $20 = HEAP32[$l_d1 >> 2];
	          var $21 = HEAP32[$l_d2 >> 2];
	          var $22 = HEAP32[$l_d3 >> 2];
	          if (($16 | 0) != ($21 * $20 * $22 | 0)) {
	            ___assert_func(STRING_TABLE.__str32040 | 0, 484, STRING_TABLE.___func___bio_fread_3d | 0, STRING_TABLE.__str272064 | 0);
	          }
	          var $28 = HEAP32[$raw >> 2];
	          var $29 = ___ckd_alloc_3d_ptr($20, $21, $22, $28);
	          var $30 = $29;
	          HEAP32[$arr >> 2] = $30;
	          HEAP32[$d1 >> 2] = $20;
	          HEAP32[$d2 >> 2] = $21;
	          HEAP32[$d3 >> 2] = $22;
	          var $_0 = $16;
	        } else if (($12 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str32040 | 0, 472, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str232060 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	        } else {
	          __E__pr_header(STRING_TABLE.__str32040 | 0, 475, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str262063 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	          var $_0 = -1;
	        }
	      } else if (($7 | 0) == 0) {
	        __E__pr_header(STRING_TABLE.__str32040 | 0, 462, STRING_TABLE.__str232533 | 0);
	        __E__sys_error(STRING_TABLE.__str232060 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = -1;
	      } else {
	        __E__pr_header(STRING_TABLE.__str32040 | 0, 465, STRING_TABLE.__str232533 | 0);
	        __E__sys_error(STRING_TABLE.__str262063 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $_0 = -1;
	      }
	    } else if (($2 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 452, STRING_TABLE.__str232533 | 0);
	      __E__sys_error(STRING_TABLE.__str232060 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	    } else {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 455, STRING_TABLE.__str232533 | 0);
	      __E__sys_error(STRING_TABLE.__str262063 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = -1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_bio_fread_3d["X"] = 1;

	function ___ckd_salloc__($orig, $caller_file, $caller_line) {
	  var $1 = _strlen($orig);
	  var $2 = $1 + 1 | 0;
	  var $3 = ___ckd_malloc__($2, $caller_file, $caller_line);
	  var $4 = _strcpy($3, $orig);
	  return $3;
	  return null;
	}

	function _bcomment_read($fp) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 16384;
	  var $1 = __stackBase__ | 0;
	  while (1) {
	    var $3 = _fgets($1, 16384, $fp);
	    if (($3 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 89, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str422079 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str412078 | 0, tempInt));
	    } else {
	      var $6 = _strcmp($1, STRING_TABLE.__str412078 | 0);
	      if (($6 | 0) != 0) {
	        continue;
	      }
	      STACKTOP = __stackBase__;
	      return;
	    }
	  }
	  return;
	}

	function _bio_fread_1d($buf, $n_el, $fp, $sw, $ck) {
	  var __stackBase__ = STACKTOP;
	  var $1 = $n_el;
	  var $2 = _bio_fread($1, 1, $fp, $sw, $ck);
	  if (($2 | 0) == 1) {
	    var $6 = HEAP32[$n_el >> 2];
	    if (($6 | 0) == 0) {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 374, STRING_TABLE.__str72422 | 0);
	      var $9 = HEAP32[$n_el >> 2];
	      __E__die_error(STRING_TABLE.__str202057 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $9, tempInt));
	    } else {
	      var $11 = ___ckd_calloc__($6, 4, STRING_TABLE.__str32040 | 0, 377);
	      HEAP32[$buf >> 2] = $11;
	      var $12 = HEAP32[$n_el >> 2];
	      var $13 = _bio_fread($11, $12, $fp, $sw, $ck);
	      if (($13 | 0) == (HEAP32[$n_el >> 2] | 0)) {
	        STACKTOP = __stackBase__;
	        return $13;
	      } else {
	        __E__pr_header(STRING_TABLE.__str32040 | 0, 381, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str212058 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      }
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str32040 | 0, 372, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str192056 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  return null;
	}

	function _bio_verify_chksum($fp, $byteswap, $chksum) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $file_chksum = __stackBase__;
	  var $1 = $file_chksum;
	  var $2 = _fread($1, 4, 1, $fp);
	  if (($2 | 0) == 1) {
	    var $_pre = HEAP32[$file_chksum >> 2];
	    if (($byteswap | 0) == 0) {
	      var $9 = $_pre;
	    } else {
	      var $8 = _llvm_bswap_i32($_pre);
	      HEAP32[$file_chksum >> 2] = $8;
	      var $9 = $8;
	    }
	    var $9;
	    if (($9 | 0) == ($chksum | 0)) {
	      STACKTOP = __stackBase__;
	      return;
	    } else {
	      __E__pr_header(STRING_TABLE.__str32040 | 0, 504, STRING_TABLE.__str72422 | 0);
	      __E__die_error(STRING_TABLE.__str292066 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $9, HEAP32[tempInt + 4 >> 2] = $chksum, tempInt));
	    }
	  } else {
	    __E__pr_header(STRING_TABLE.__str32040 | 0, 500, STRING_TABLE.__str72422 | 0);
	    __E__die_error(STRING_TABLE.__str282065 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  }
	  return;
	}

	function _ckd_fail($format) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $args = __stackBase__;
	  HEAP32[$args >> 2] = arguments[_ckd_fail.length];
	  var $2 = HEAP32[_stderr >> 2];
	  var $3 = HEAP32[$args >> 2];
	  var $4 = _vfprintf($2, $format, $3);
	  _exit(-1);
	}

	function ___ckd_calloc__($n_elem, $elem_size, $caller_file, $caller_line) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _calloc($n_elem, $elem_size);
	  if (($1 | 0) == 0) {
	    _ckd_fail(STRING_TABLE.__str2102 | 0, (tempInt = STACKTOP, STACKTOP += 16, HEAP32[tempInt >> 2] = $n_elem, HEAP32[tempInt + 4 >> 2] = $elem_size, HEAP32[tempInt + 8 >> 2] = $caller_file, HEAP32[tempInt + 12 >> 2] = $caller_line, tempInt));
	  } else {
	    STACKTOP = __stackBase__;
	    return $1;
	  }
	  return null;
	}

	function ___ckd_malloc__($size, $caller_file, $caller_line) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _malloc($size);
	  if (($1 | 0) == 0) {
	    _ckd_fail(STRING_TABLE.__str12103 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $size, HEAP32[tempInt + 4 >> 2] = $caller_file, HEAP32[tempInt + 8 >> 2] = $caller_line, tempInt));
	  } else {
	    STACKTOP = __stackBase__;
	    return $1;
	  }
	  return null;
	}

	function ___ckd_realloc__($ptr, $new_size, $caller_file, $caller_line) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _realloc($ptr, $new_size);
	  if (($1 | 0) == 0) {
	    _ckd_fail(STRING_TABLE.__str12103 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $new_size, HEAP32[tempInt + 4 >> 2] = $caller_file, HEAP32[tempInt + 8 >> 2] = $caller_line, tempInt));
	  } else {
	    STACKTOP = __stackBase__;
	    return $1;
	  }
	  return null;
	}

	function ___ckd_calloc_2d__($d1, $d2, $elemsize, $caller_file, $caller_line) {
	  var $1 = $d2 * $d1 | 0;
	  var $2 = ___ckd_calloc__($1, $elemsize, $caller_file, $caller_line);
	  var $3 = $d1 << 2;
	  var $4 = ___ckd_malloc__($3, $caller_file, $caller_line);
	  var $5 = $4;
	  var $6 = ($d1 | 0) == 0;
	  $_$2 : do {
	    if (!$6) {
	      var $7 = $elemsize * $d2 | 0;
	      var $i_01 = 0;
	      var $offset_02 = 0;
	      while (1) {
	        var $offset_02;
	        var $i_01;
	        HEAP32[$5 + ($i_01 << 2) >> 2] = $2 + $offset_02 | 0;
	        var $11 = $i_01 + 1 | 0;
	        if (($11 | 0) == ($d1 | 0)) {
	          break $_$2;
	        }
	        var $i_01 = $11;
	        var $offset_02 = $offset_02 + $7 | 0;
	      }
	    }
	  } while (0);
	  return $4;
	  return null;
	}

	function _ckd_free($ptr) {
	  if (($ptr | 0) != 0) {
	    _free($ptr);
	  }
	  return;
	  return;
	}

	function _ckd_free_2d($tmpptr) {
	  if (($tmpptr | 0) != 0) {
	    var $4 = HEAP32[$tmpptr >> 2];
	    _ckd_free($4);
	  }
	  _ckd_free($tmpptr);
	  return;
	  return;
	}

	function ___ckd_calloc_3d__($d1, $d2, $d3, $elemsize, $caller_file, $caller_line) {
	  var $1 = $d2 * $d1 | 0;
	  var $2 = $1 * $d3 | 0;
	  var $3 = ___ckd_calloc__($2, $elemsize, $caller_file, $caller_line);
	  var $4 = $d1 << 2;
	  var $5 = ___ckd_malloc__($4, $caller_file, $caller_line);
	  var $6 = $5;
	  var $7 = $1 << 2;
	  var $8 = ___ckd_malloc__($7, $caller_file, $caller_line);
	  var $9 = $8;
	  var $10 = ($d1 | 0) == 0;
	  $_$16 : do {
	    if (!$10) {
	      var $i_07 = 0;
	      var $offset_08 = 0;
	      while (1) {
	        var $offset_08;
	        var $i_07;
	        HEAP32[$6 + ($i_07 << 2) >> 2] = ($offset_08 << 2) + $9 | 0;
	        var $26 = $i_07 + 1 | 0;
	        if (($26 | 0) == ($d1 | 0)) {
	          break;
	        }
	        var $i_07 = $26;
	        var $offset_08 = $offset_08 + $d2 | 0;
	      }
	      var $12 = $elemsize * $d3 | 0;
	      if (($d2 | 0) == 0) {
	        break;
	      }
	      var $13 = $12 * $d2 | 0;
	      var $i_14_us = 0;
	      var $offset_15_us = 0;
	      while (1) {
	        var $offset_15_us;
	        var $i_14_us;
	        var $23 = ($i_14_us << 2) + $6 | 0;
	        var $j_01_us = 0;
	        var $offset_22_us = $offset_15_us;
	        while (1) {
	          var $offset_22_us;
	          var $j_01_us;
	          var $20 = ($j_01_us << 2) + HEAP32[$23 >> 2] | 0;
	          HEAP32[$20 >> 2] = $3 + $offset_22_us | 0;
	          var $22 = $j_01_us + 1 | 0;
	          if (($22 | 0) == ($d2 | 0)) {
	            break;
	          }
	          var $j_01_us = $22;
	          var $offset_22_us = $offset_22_us + $12 | 0;
	        }
	        var $16 = $i_14_us + 1 | 0;
	        if (($16 | 0) == ($d1 | 0)) {
	          break $_$16;
	        }
	        var $i_14_us = $16;
	        var $offset_15_us = $13 + $offset_15_us | 0;
	      }
	    }
	  } while (0);
	  return $5;
	  return null;
	}

	function _ckd_free_3d($inptr) {
	  var $1 = $inptr;
	  if (($inptr | 0) != 0) {
	    var $4 = HEAP32[$1 >> 2];
	    if (($4 | 0) == 0) {
	      var $9 = 0;
	    } else {
	      var $7 = HEAP32[$4 >> 2];
	      _ckd_free($7);
	      var $9 = HEAP32[$1 >> 2];
	    }
	    var $9;
	    _ckd_free($9);
	  }
	  _ckd_free($inptr);
	  return;
	  return;
	}

	function ___ckd_alloc_3d_ptr($d1, $d2, $d3, $store) {
	  var $1 = $d2 * $d1 | 0;
	  var $2 = ___ckd_calloc__($1, 4, STRING_TABLE.__str32040 | 0, 486);
	  var $3 = $2;
	  var $4 = ___ckd_calloc__($d1, 4, STRING_TABLE.__str32040 | 0, 486);
	  var $5 = $4;
	  var $6 = ($1 | 0) == 0;
	  $_$35 : do {
	    if (!$6) {
	      var $i_03 = 0;
	      var $j_04 = 0;
	      while (1) {
	        var $j_04;
	        var $i_03;
	        HEAP32[$3 + ($i_03 << 2) >> 2] = ($j_04 << 2) + $store | 0;
	        var $11 = $i_03 + 1 | 0;
	        if (($11 | 0) == ($1 | 0)) {
	          break $_$35;
	        }
	        var $i_03 = $11;
	        var $j_04 = $j_04 + $d3 | 0;
	      }
	    }
	  } while (0);
	  var $7 = ($d1 | 0) == 0;
	  $_$39 : do {
	    if (!$7) {
	      var $i_11 = 0;
	      var $j_12 = 0;
	      while (1) {
	        var $j_12;
	        var $i_11;
	        HEAP32[$5 + ($i_11 << 2) >> 2] = ($j_12 << 2) + $3 | 0;
	        var $15 = $i_11 + 1 | 0;
	        if (($15 | 0) == ($d1 | 0)) {
	          break $_$39;
	        }
	        var $i_11 = $15;
	        var $j_12 = $j_12 + $d2 | 0;
	      }
	    }
	  } while (0);
	  return $4;
	  return null;
	}

	function _cmd_ln_val_free($val) {
	  var $1 = $val + 8 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $4 = ($2 & 32 | 0) == 0;
	  do {
	    if ($4) {
	      var $17 = $2;
	    } else {
	      var $6 = $val;
	      var $7 = HEAP32[$6 >> 2];
	      var $8 = $7;
	      if (($7 | 0) == 0) {
	        var $17 = $2;
	        break;
	      }
	      var $11 = (HEAP32[$8 >> 2] | 0) == 0;
	      $_$47 : do {
	        if (!$11) {
	          var $i_01 = 1;
	          var $12 = $7;
	          while (1) {
	            var $12;
	            var $i_01;
	            _ckd_free($12);
	            if ((HEAP32[$8 + ($i_01 << 2) >> 2] | 0) == 0) {
	              break $_$47;
	            }
	            var $i_01 = $i_01 + 1 | 0;
	            var $12 = HEAP32[$6 >> 2];
	          }
	        }
	      } while (0);
	      _ckd_free($7);
	      var $17 = HEAP32[$1 >> 2];
	    }
	  } while (0);
	  var $17;
	  if (($17 & 8 | 0) != 0) {
	    var $22 = HEAP32[$val >> 2];
	    _ckd_free($22);
	  }
	  var $24 = $val;
	  _ckd_free($24);
	  return;
	  return;
	}

	function _cmd_ln_print_help_r($cmdln, $fp, $defn) {
	  if (($defn | 0) != 0) {
	    var $3 = _fwrite(STRING_TABLE.__str322161 | 0, 27, 1, $fp);
	    _arg_dump_r($cmdln, $fp, $defn, 1);
	    var $4 = _fflush($fp);
	  }
	  return;
	  return;
	}

	function _cmd_ln_parse_r($inout_cmdln, $defn, $argc, $argv, $strict) {
	  var $97$s2;
	  var $42$s2;
	  var $28$s2;
	  var $v1$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 12;
	  var __label__;
	  var $v1 = __stackBase__, $v1$s2 = $v1 >> 2;
	  var $v3 = __stackBase__ + 4;
	  var $v4 = __stackBase__ + 8;
	  var $1 = ($inout_cmdln | 0) == 0;
	  if ($1) {
	    var $3 = ___ckd_calloc__(1, 16, STRING_TABLE.__str12130 | 0, 559);
	    var $4 = $3;
	    HEAP32[$3 >> 2] = 1;
	    var $cmdln_0 = $4;
	  } else {
	    var $cmdln_0 = $inout_cmdln;
	  }
	  var $cmdln_0;
	  var $7 = _hash_table_new(50, 0);
	  var $8 = ($defn | 0) == 0;
	  $_$64 : do {
	    if ($8) {
	      var $n_1 = 0;
	      __label__ = 11;
	    } else {
	      if (($strict | 0) != 0) {
	        var $n_0 = 0;
	        while (1) {
	          var $n_0;
	          var $18 = ($n_0 << 4) + $defn | 0;
	          var $19 = $18 | 0;
	          var $20 = HEAP32[$19 >> 2];
	          if (($20 | 0) == 0) {
	            var $n_1 = $n_0;
	            __label__ = 11;
	            break $_$64;
	          }
	          var $23 = $18;
	          var $24 = _hash_table_enter($7, $20, $23);
	          if (($24 | 0) != ($23 | 0)) {
	            break;
	          }
	          var $n_0 = $n_0 + 1 | 0;
	        }
	        __E__pr_header(STRING_TABLE.__str12130 | 0, 573, STRING_TABLE.__str102579 | 0);
	        var $27 = HEAP32[$19 >> 2];
	        __E__pr_warn(STRING_TABLE.__str112140 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $27, tempInt));
	        __label__ = 58;
	        break;
	      }
	      var $n_0_us = 0;
	      while (1) {
	        var $n_0_us;
	        var $10 = ($n_0_us << 4) + $defn | 0;
	        var $12 = HEAP32[$10 >> 2];
	        if (($12 | 0) == 0) {
	          var $n_1 = $n_0_us;
	          __label__ = 11;
	          break $_$64;
	        }
	        var $15 = $10;
	        var $16 = _hash_table_enter($7, $12, $15);
	        var $n_0_us = $n_0_us + 1 | 0;
	      }
	    }
	  } while (0);
	  $_$74 : do {
	    if (__label__ == 11) {
	      var $n_1;
	      var $28$s2 = ($cmdln_0 + 4 | 0) >> 2;
	      if ((HEAP32[$28$s2] | 0) == 0) {
	        var $32 = _hash_table_new($n_1, 0);
	        HEAP32[$28$s2] = $32;
	      }
	      var $34 = ($argc | 0) > 0;
	      if ($34) {
	        var $j_0_ph = HEAP8[HEAP32[$argv >> 2]] << 24 >> 24 != 45 & 1;
	      } else {
	        var $j_0_ph = 0;
	      }
	      var $j_0_ph;
	      var $38 = ($strict | 0) == 0;
	      var $j_0 = $j_0_ph;
	      while (1) {
	        var $j_0;
	        if (($j_0 | 0) >= ($argc | 0)) {
	          var $i_0 = 0;
	          break;
	        }
	        var $42$s2 = (($j_0 << 2) + $argv | 0) >> 2;
	        var $43 = HEAP32[$42$s2];
	        var $44 = _hash_table_lookup($7, $43, $v1);
	        var $45 = ($44 | 0) < 0;
	        do {
	          if (!$45) {
	            var $52 = HEAP32[$v1$s2];
	            __label__ = 23;
	            break;
	          }
	          if ($38) {
	            if (!$8) {
	              __label__ = 33;
	              break;
	            }
	            HEAP32[$v1$s2] = 0;
	            var $52 = 0;
	            __label__ = 23;
	            break;
	          }
	          __E__pr_header(STRING_TABLE.__str12130 | 0, 602, STRING_TABLE.__str102579 | 0);
	          var $48 = HEAP32[$42$s2];
	          __E__pr_warn(STRING_TABLE.__str122141 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $48, tempInt));
	          __label__ = 58;
	          break $_$74;
	        } while (0);
	        do {
	          if (__label__ == 23) {
	            var $52;
	            var $53 = $j_0 + 1 | 0;
	            if (($53 | 0) >= ($argc | 0)) {
	              var $56 = HEAP32[_stderr >> 2];
	              _cmd_ln_print_help_r($cmdln_0, $56, $defn);
	              __E__pr_header(STRING_TABLE.__str12130 | 0, 615, STRING_TABLE.__str102579 | 0);
	              var $57 = HEAP32[$42$s2];
	              __E__pr_warn(STRING_TABLE.__str132142 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $57, tempInt));
	              __label__ = 58;
	              break $_$74;
	            }
	            var $59 = ($52 | 0) == 0;
	            do {
	              if (!$59) {
	                var $67 = HEAP32[$52 + 4 >> 2];
	                var $68 = ($53 << 2) + $argv | 0;
	                var $69 = HEAP32[$68 >> 2];
	                var $70 = _cmd_ln_val_init($67, $69);
	                if (($70 | 0) != 0) {
	                  var $val_0 = $70;
	                  break;
	                }
	                var $73 = HEAP32[_stderr >> 2];
	                _cmd_ln_print_help_r($cmdln_0, $73, $defn);
	                __E__pr_header(STRING_TABLE.__str12130 | 0, 624, STRING_TABLE.__str102579 | 0);
	                var $74 = HEAP32[$42$s2];
	                var $75 = HEAP32[$68 >> 2];
	                __E__pr_warn(STRING_TABLE.__str142143 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $74, HEAP32[tempInt + 4 >> 2] = $75, tempInt));
	                __label__ = 58;
	                break $_$74;
	              }
	              var $62 = HEAP32[$argv + ($53 << 2) >> 2];
	              var $63 = _cmd_ln_val_init(8, $62);
	              var $val_0 = $63;
	            } while (0);
	            var $val_0;
	            var $77 = HEAP32[$28$s2];
	            var $78 = HEAP32[$42$s2];
	            var $79 = $val_0;
	            var $80 = _hash_table_enter($77, $78, $79);
	            HEAP32[$v1$s2] = $80;
	            if (($80 | 0) == ($79 | 0)) {
	              break;
	            }
	            if (!$38) {
	              _cmd_ln_val_free($val_0);
	              __E__pr_header(STRING_TABLE.__str12130 | 0, 633, STRING_TABLE.__str102579 | 0);
	              var $85 = HEAP32[$52 >> 2];
	              __E__pr_warn(STRING_TABLE.__str152144 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $85, tempInt));
	              __label__ = 58;
	              break $_$74;
	            }
	            var $87 = HEAP32[$28$s2];
	            var $88 = HEAP32[$42$s2];
	            var $89 = _hash_table_replace($87, $88, $79);
	            HEAP32[$v1$s2] = $89;
	            var $90 = $89;
	            _cmd_ln_val_free($90);
	          }
	        } while (0);
	        var $j_0 = $j_0 + 2 | 0;
	      }
	      while (1) {
	        var $i_0;
	        if (($i_0 | 0) >= ($n_1 | 0)) {
	          break;
	        }
	        var $96 = HEAP32[$28$s2];
	        var $97$s2 = (($i_0 << 4) + $defn | 0) >> 2;
	        var $98 = HEAP32[$97$s2];
	        var $99 = _hash_table_lookup($96, $98, $v3);
	        if (($99 | 0) < 0) {
	          var $103 = HEAP32[$defn + ($i_0 << 4) + 4 >> 2];
	          var $104 = ($i_0 << 4) + $defn + 8 | 0;
	          var $105 = HEAP32[$104 >> 2];
	          var $106 = _cmd_ln_val_init($103, $105);
	          if (($106 | 0) == 0) {
	            __E__pr_header(STRING_TABLE.__str12130 | 0, 651, STRING_TABLE.__str102579 | 0);
	            var $109 = HEAP32[$97$s2];
	            var $110 = HEAP32[$104 >> 2];
	            __E__pr_warn(STRING_TABLE.__str162145 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $109, HEAP32[tempInt + 4 >> 2] = $110, tempInt));
	            __label__ = 58;
	            break $_$74;
	          }
	          var $112 = HEAP32[$28$s2];
	          var $113 = HEAP32[$97$s2];
	          var $114 = $106;
	          var $115 = _hash_table_enter($112, $113, $114);
	        }
	        var $i_0 = $i_0 + 1 | 0;
	      }
	      var $94 = ($n_1 | 0) > 0;
	      $_$117 : do {
	        if ($94) {
	          var $i_16 = 0;
	          while (1) {
	            var $i_16;
	            var $121 = (HEAP32[$defn + ($i_16 << 4) + 4 >> 2] & 1 | 0) == 0;
	            do {
	              if (!$121) {
	                var $123 = HEAP32[$28$s2];
	                var $124 = ($i_16 << 4) + $defn | 0;
	                var $125 = HEAP32[$124 >> 2];
	                var $126 = _hash_table_lookup($123, $125, $v4);
	                if (($126 | 0) == 0) {
	                  break;
	                }
	                __E__pr_header(STRING_TABLE.__str12130 | 0, 666, STRING_TABLE.__str102579 | 0);
	                var $129 = HEAP32[$124 >> 2];
	                __E__pr_warn(STRING_TABLE.__str172146 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $129, tempInt));
	              }
	            } while (0);
	            var $131 = $i_16 + 1 | 0;
	            if (($131 | 0) == ($n_1 | 0)) {
	              break $_$117;
	            }
	            var $i_16 = $131;
	          }
	        }
	      } while (0);
	      if (($strict | 0) != 0 & ($argc | 0) == 1) {
	        __E__pr_header(STRING_TABLE.__str12130 | 0, 675, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str182147 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	        var $135 = HEAP32[_stderr >> 2];
	        _cmd_ln_print_help_r($cmdln_0, $135, $defn);
	        if (($7 | 0) == 0) {
	          __label__ = 48;
	        } else {
	          _hash_table_free($7);
	        }
	        if (!$1) {
	          var $_0 = 0;
	          __label__ = 63;
	          break;
	        }
	        _cmd_ln_free_r($cmdln_0);
	        var $_0 = 0;
	        __label__ = 63;
	        break;
	      }
	      var $141 = _cmd_ln_exists_r($cmdln_0, STRING_TABLE.__str2652834 | 0);
	      var $142 = ($141 | 0) == 0;
	      do {
	        if (!$142) {
	          var $cmdln_0_idx1_val = HEAP32[$28$s2];
	          var $144 = _cmd_ln_str_r($cmdln_0_idx1_val, STRING_TABLE.__str2652834 | 0);
	          if (($144 | 0) == 0) {
	            break;
	          }
	          var $cmdln_0_idx_val = HEAP32[$28$s2];
	          var $147 = _cmd_ln_str_r($cmdln_0_idx_val, STRING_TABLE.__str2652834 | 0);
	          _err_set_logfile($147);
	        }
	      } while (0);
	      __E__pr_info_header(STRING_TABLE.__str12130 | 0, 691);
	      __E__pr_info(STRING_TABLE.__str202149 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      $_$136 : do {
	        if ($34) {
	          var $i_24 = 0;
	          while (1) {
	            var $i_24;
	            var $149 = ($i_24 << 2) + $argv | 0;
	            var $150 = HEAP32[$149 >> 2];
	            if (HEAP8[$150] << 24 >> 24 == 45) {
	              __E__pr_info(STRING_TABLE.__str212150 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	              var $155 = HEAP32[$149 >> 2];
	            } else {
	              var $155 = $150;
	            }
	            var $155;
	            __E__pr_info(STRING_TABLE.__str222151 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $155, tempInt));
	            var $156 = $i_24 + 1 | 0;
	            if (($156 | 0) == ($argc | 0)) {
	              break $_$136;
	            }
	            var $i_24 = $156;
	          }
	        }
	      } while (0);
	      __E__pr_info(STRING_TABLE.__str232152 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $157 = HEAP32[_stderr >> 2];
	      var $158 = _fflush($157);
	      __E__pr_info(STRING_TABLE.__str242153 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $159 = _err_get_logfp();
	      _arg_dump_r($cmdln_0, $159, $defn, 0);
	      _hash_table_free($7);
	      var $_0 = $cmdln_0;
	      __label__ = 63;
	      break;
	    }
	  } while (0);
	  if (__label__ == 58) {
	    if (($7 | 0) == 0) {
	      __label__ = 60;
	    } else {
	      _hash_table_free($7);
	    }
	    if ($1) {
	      _cmd_ln_free_r($cmdln_0);
	    }
	    __E__pr_header(STRING_TABLE.__str12130 | 0, 713, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str252154 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    var $_0 = 0;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_cmd_ln_parse_r["X"] = 1;

	function _cmd_ln_val_init($t, $str) {
	  var $val$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $val = __stackBase__, $val$s2 = $val >> 2;
	  var $1 = ($str | 0) == 0;
	  do {
	    if ($1) {
	      var $3 = $val;
	      HEAP32[$3 >> 2] = 0;
	      HEAP32[$3 + 4 >> 2] = 0;
	      __label__ = 21;
	      break;
	    }
	    var $5 = _arg_resolve_env($str);
	    $_$156 : do {
	      if (($t | 0) == 2 || ($t | 0) == 3) {
	        var $7 = _sscanf($5, STRING_TABLE.__str402169 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $val, tempInt));
	        var $valid_1 = ($7 | 0) == 1 & 1;
	        __label__ = 20;
	        break;
	      } else if (($t | 0) == 4 || ($t | 0) == 5) {
	        var $10 = ($5 | 0) == 0;
	        do {
	          if ($10) {
	            __label__ = 8;
	          } else {
	            if (HEAP8[$5] << 24 >> 24 == 0) {
	              __label__ = 8;
	              break;
	            }
	            var $valid_0 = 1;
	            __label__ = 9;
	            break;
	          }
	        } while (0);
	        if (__label__ == 8) {
	          var $valid_0 = 0;
	        }
	        var $valid_0;
	        var $16 = _atof_c($5);
	        var $17 = $val | 0;
	        tempDoubleF64[0] = $16, HEAP32[$17 >> 2] = tempDoubleI32[0], HEAP32[$17 + 4 >> 2] = tempDoubleI32[1];
	        var $valid_1 = $valid_0;
	        __label__ = 20;
	        break;
	      } else if (($t | 0) == 16 || ($t | 0) == 17) {
	        var $19 = HEAPU8[$5];
	        do {
	          if ($19 << 24 >> 24 == 121 || $19 << 24 >> 24 == 116 || $19 << 24 >> 24 == 89 || $19 << 24 >> 24 == 84 || $19 << 24 >> 24 == 49) {
	            HEAP32[$val$s2] = 1;
	            __label__ = 18;
	            break $_$156;
	          } else if (!($19 << 24 >> 24 == 110 || $19 << 24 >> 24 == 102 || $19 << 24 >> 24 == 78)) {
	            if (($19 << 24 >> 24 == 70 & 1 | $19 << 24 >> 24 == 48 & 1 | 0) != 0) {
	              break;
	            }
	            __E__pr_header(STRING_TABLE.__str12130 | 0, 400, STRING_TABLE.__str102579 | 0);
	            __E__pr_warn(STRING_TABLE.__str472176 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $str, tempInt));
	            __label__ = 19;
	            break $_$156;
	          }
	        } while (0);
	        HEAP32[$val$s2] = 0;
	        __label__ = 18;
	        break;
	      } else if (($t | 0) == 8 || ($t | 0) == 9) {
	        var $33 = ___ckd_salloc__($5, STRING_TABLE.__str12130 | 0, 406);
	        HEAP32[$val$s2] = $33;
	        __label__ = 18;
	        break;
	      } else if (($t | 0) == 32) {
	        var $36 = _parse_string_list($5);
	        HEAP32[$val$s2] = $36;
	        __label__ = 18;
	        break;
	      } else {
	        __E__pr_header(STRING_TABLE.__str12130 | 0, 412, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str452174 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $t, tempInt));
	        __label__ = 19;
	        break;
	      }
	    } while (0);
	    if (__label__ == 18) {
	      _ckd_free($5);
	      __label__ = 21;
	      break;
	    } else if (__label__ == 19) {
	      _ckd_free($5);
	      var $_0 = 0;
	      __label__ = 22;
	      break;
	    } else if (__label__ == 20) {
	      var $valid_1;
	      _ckd_free($5);
	      if (($valid_1 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 22;
	        break;
	      }
	      __label__ = 21;
	      break;
	    }
	  } while (0);
	  if (__label__ == 21) {
	    var $43 = ___ckd_calloc__(1, 12, STRING_TABLE.__str12130 | 0, 421);
	    var $44 = $43;
	    var $45 = $val;
	    var $46 = $43;
	    var $47$0 = HEAP32[$45 >> 2];
	    var $47$1 = HEAP32[$45 + 4 >> 2];
	    HEAP32[$46 >> 2] = $47$0;
	    HEAP32[$46 + 4 >> 2] = $47$1;
	    HEAP32[$43 + 8 >> 2] = $t;
	    var $_0 = $44;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_cmd_ln_val_init["X"] = 1;

	function _cmd_ln_free_r($cmdln) {
	  var $28$s2;
	  var $25$s2;
	  var $8$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $n = __stackBase__;
	  var $1 = ($cmdln | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $cmdln | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $8$s2 = ($cmdln + 4 | 0) >> 2;
	      var $9 = HEAP32[$8$s2];
	      if (($9 | 0) != 0) {
	        var $12 = _hash_table_tolist($9, $n);
	        var $13 = ($12 | 0) == 0;
	        $_$186 : do {
	          if (!$13) {
	            var $gn_01 = $12;
	            while (1) {
	              var $gn_01;
	              var $19 = HEAP32[HEAP32[$gn_01 >> 2] + 8 >> 2];
	              _cmd_ln_val_free($19);
	              var $21 = HEAP32[$gn_01 + 8 >> 2];
	              if (($21 | 0) == 0) {
	                break $_$186;
	              }
	              var $gn_01 = $21;
	            }
	          }
	        } while (0);
	        _glist_free($12);
	        var $23 = HEAP32[$8$s2];
	        _hash_table_free($23);
	        HEAP32[$8$s2] = 0;
	      }
	      var $25$s2 = ($cmdln + 8 | 0) >> 2;
	      var $26 = HEAPU32[$25$s2];
	      if (($26 | 0) != 0) {
	        var $28$s2 = ($cmdln + 12 | 0) >> 2;
	        var $30 = (HEAP32[$28$s2] | 0) == 0;
	        $_$193 : do {
	          if ($30) {
	            var $_lcssa2 = $26;
	          } else {
	            var $i_03 = 0;
	            var $31 = $26;
	            while (1) {
	              var $31;
	              var $i_03;
	              var $33 = HEAP32[$31 + ($i_03 << 2) >> 2];
	              _ckd_free($33);
	              var $34 = $i_03 + 1 | 0;
	              var $37 = HEAP32[$25$s2];
	              if ($34 >>> 0 >= HEAPU32[$28$s2] >>> 0) {
	                var $_lcssa2 = $37;
	                break $_$193;
	              }
	              var $i_03 = $34;
	              var $31 = $37;
	            }
	          }
	        } while (0);
	        var $_lcssa2;
	        _ckd_free($_lcssa2);
	        HEAP32[$25$s2] = 0;
	        HEAP32[$28$s2] = 0;
	      }
	      var $40 = $cmdln;
	      _ckd_free($40);
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_cmd_ln_free_r["X"] = 1;

	function _cmd_ln_exists_r($cmdln, $name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  if (($cmdln | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    var $4 = HEAP32[$cmdln + 4 >> 2];
	    var $5 = _hash_table_lookup($4, $name, $val);
	    var $_0 = ($5 | 0) == 0 & 1;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _cmd_ln_str_r($cmdln_0_1_val, $name) {
	  var $1 = _cmd_ln_access_r($cmdln_0_1_val, $name);
	  if (($1 | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    var $_0 = HEAP32[$1 >> 2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _cmd_ln_retain($cmdln) {
	  var $1 = $cmdln | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return;
	  return;
	}

	function _arg_dump_r($cmdln, $fp, $defn, $doc) {
	  var $58$s2;
	  var $25$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var __label__;
	  var $namelen = __stackBase__;
	  var $deflen = __stackBase__ + 4;
	  if (!(($defn | 0) == 0 | ($fp | 0) == 0)) {
	    var $4 = _arg_strlen($defn, $namelen, $deflen);
	    var $6 = HEAP32[$namelen >> 2] & -8;
	    HEAP32[$namelen >> 2] = $6;
	    var $8 = HEAP32[$deflen >> 2] & -8;
	    HEAP32[$deflen >> 2] = $8;
	    var $9 = _fwrite(STRING_TABLE.__str342163 | 0, 6, 1, $fp);
	    var $10 = ($6 | 0) > 6;
	    $_$4 : do {
	      if ($10) {
	        var $l_028 = 6;
	        while (1) {
	          var $l_028;
	          var $fputc = _fputc(9, $fp);
	          var $11 = $l_028 + 8 | 0;
	          if (($11 | 0) >= ($6 | 0)) {
	            break $_$4;
	          }
	          var $l_028 = $11;
	        }
	      }
	    } while (0);
	    var $13 = _fwrite(STRING_TABLE.__str362165 | 0, 8, 1, $fp);
	    var $14 = ($8 | 0) > 7;
	    $_$8 : do {
	      if ($14) {
	        var $l_124 = 7;
	        while (1) {
	          var $l_124;
	          var $fputc3 = _fputc(9, $fp);
	          var $15 = $l_124 + 8 | 0;
	          if (($15 | 0) >= ($8 | 0)) {
	            break $_$8;
	          }
	          var $l_124 = $15;
	        }
	      }
	    } while (0);
	    var $17 = ($doc | 0) != 0;
	    if ($17) {
	      var $19 = _fwrite(STRING_TABLE.__str372166 | 0, 9, 1, $fp);
	    } else {
	      var $21 = _fwrite(STRING_TABLE.__str382167 | 0, 9, 1, $fp);
	    }
	    var $23 = _arg_sort($defn, $4);
	    var $24 = ($4 | 0) > 0;
	    $_$16 : do {
	      if ($24) {
	        var $cmdln_idx = $cmdln + 4 | 0;
	        var $i_022 = 0;
	        while (1) {
	          var $i_022;
	          var $25$s2 = (($i_022 << 2) + $23 | 0) >> 2;
	          var $28 = HEAP32[HEAP32[$25$s2] >> 2];
	          var $fputs = _fputs($28, $fp);
	          var $31 = HEAP32[HEAP32[$25$s2] >> 2];
	          var $32 = _strlen($31);
	          var $l_2 = $32;
	          while (1) {
	            var $l_2;
	            var $34 = ($l_2 | 0) < ($6 | 0);
	            var $fputc6 = _fputc(9, $fp);
	            if (!$34) {
	              break;
	            }
	            var $l_2 = $l_2 + 8 | 0;
	          }
	          var $39 = HEAP32[HEAP32[$25$s2] + 8 >> 2];
	          if (($39 | 0) == 0) {
	            var $l_3 = 0;
	            __label__ = 16;
	          } else {
	            var $fputs7 = _fputs($39, $fp);
	            var $44 = HEAP32[HEAP32[$25$s2] + 8 >> 2];
	            var $45 = _strlen($44);
	            var $l_3 = $45;
	          }
	          while (1) {
	            var $l_3;
	            var $46 = ($l_3 | 0) < ($8 | 0);
	            var $fputc10 = _fputc(9, $fp);
	            if (!$46) {
	              break;
	            }
	            var $l_3 = $l_3 + 8 | 0;
	          }
	          var $49 = HEAP32[$25$s2];
	          $_$28 : do {
	            if ($17) {
	              var $52 = HEAP32[$49 + 12 >> 2];
	              if (($52 | 0) == 0) {
	                break;
	              }
	              var $fputs11 = _fputs($52, $fp);
	            } else {
	              var $57 = HEAP32[$49 >> 2];
	              var $cmdln_idx_val = HEAP32[$cmdln_idx >> 2];
	              var $58 = _cmd_ln_access_r($cmdln_idx_val, $57), $58$s2 = $58 >> 2;
	              if (($58 | 0) == 0) {
	                break;
	              }
	              var $63 = HEAP32[HEAP32[$25$s2] + 4 >> 2];
	              if (($63 | 0) == 2 || ($63 | 0) == 3) {
	                var $66 = HEAP32[$58$s2];
	                var $67 = _fprintf($fp, STRING_TABLE.__str402169 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $66, tempInt));
	              } else if (($63 | 0) == 4 || ($63 | 0) == 5) {
	                var $69 = $58 | 0;
	                var $70 = (tempDoubleI32[0] = HEAP32[$69 >> 2], tempDoubleI32[1] = HEAP32[$69 + 4 >> 2], tempDoubleF64[0]);
	                var $71 = _fprintf($fp, STRING_TABLE.__str412170 | 0, (tempInt = STACKTOP, STACKTOP += 8, tempDoubleF64[0] = $70, HEAP32[tempInt >> 2] = tempDoubleI32[0], HEAP32[tempInt + 4 >> 2] = tempDoubleI32[1], tempInt));
	              } else if (($63 | 0) == 8 || ($63 | 0) == 9) {
	                var $74 = HEAP32[$58$s2];
	                if (($74 | 0) == 0) {
	                  break;
	                }
	                var $fputs12 = _fputs($74, $fp);
	              } else if (($63 | 0) == 32) {
	                var $79 = HEAP32[$58$s2];
	                var $80 = $79;
	                if (($79 | 0) == 0) {
	                  break;
	                }
	                var $82 = HEAP32[$80 >> 2];
	                if (($82 | 0) == 0) {
	                  break;
	                }
	                var $l_420 = 0;
	                var $84 = $82;
	                while (1) {
	                  var $84;
	                  var $l_420;
	                  var $85 = _fprintf($fp, STRING_TABLE.__str422171 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $84, tempInt));
	                  var $86 = $l_420 + 1 | 0;
	                  var $88 = HEAP32[$80 + ($86 << 2) >> 2];
	                  if (($88 | 0) == 0) {
	                    break $_$28;
	                  }
	                  var $l_420 = $86;
	                  var $84 = $88;
	                }
	              } else if (($63 | 0) == 16 || ($63 | 0) == 17) {
	                var $94 = (HEAP32[$58$s2] | 0) != 0 ? STRING_TABLE.__str522621 | 0 : STRING_TABLE.__str202589 | 0;
	                var $fputs13 = _fputs($94, $fp);
	              } else {
	                __E__pr_header(STRING_TABLE.__str12130 | 0, 322, STRING_TABLE.__str102579 | 0);
	                var $98 = HEAP32[HEAP32[$25$s2] + 4 >> 2];
	                __E__pr_warn(STRING_TABLE.__str452174 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $98, tempInt));
	              }
	            }
	          } while (0);
	          var $fputc16 = _fputc(10, $fp);
	          var $99 = $i_022 + 1 | 0;
	          if (($99 | 0) == ($4 | 0)) {
	            break $_$16;
	          }
	          var $i_022 = $99;
	        }
	      }
	    } while (0);
	    var $100 = $23;
	    _ckd_free($100);
	    var $fputc19 = _fputc(10, $fp);
	    var $101 = _fflush($fp);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	_arg_dump_r["X"] = 1;

	function _parse_options($cmdln, $defn, $argc, $argv, $strict) {
	  var $14$s2;
	  var $1 = _cmd_ln_parse_r($cmdln, $defn, $argc, $argv, $strict);
	  if (($1 | 0) == 0) {
	    var $3 = ($argc | 0) > 0;
	    $_$50 : do {
	      if ($3) {
	        var $i_01 = 0;
	        while (1) {
	          var $i_01;
	          var $5 = HEAP32[$argv + ($i_01 << 2) >> 2];
	          _ckd_free($5);
	          var $6 = $i_01 + 1 | 0;
	          if (($6 | 0) == ($argc | 0)) {
	            break $_$50;
	          }
	          var $i_01 = $6;
	        }
	      }
	    } while (0);
	    var $7 = $argv;
	    _ckd_free($7);
	    var $_0 = 0;
	  } else {
	    if (($1 | 0) == ($cmdln | 0)) {
	      var $11 = $cmdln + 8 | 0;
	      var $13 = HEAP32[$11 >> 2];
	      var $14$s2 = ($cmdln + 12 | 0) >> 2;
	      var $17 = HEAP32[$14$s2] + $argc << 2;
	      var $18 = ___ckd_realloc__($13, $17, STRING_TABLE.__str12130 | 0, 454);
	      var $19 = $18;
	      HEAP32[$11 >> 2] = $19;
	      var $22 = (HEAP32[$14$s2] << 2) + $19 | 0;
	      var $23 = $argv;
	      var $24 = $argc << 2;
	      _memcpy($22, $23, $24, 4);
	      _ckd_free($23);
	      var $26 = HEAP32[$14$s2] + $argc | 0;
	      HEAP32[$14$s2] = $26;
	      var $_0 = $cmdln;
	    } else {
	      HEAP32[$1 + 12 >> 2] = $argc;
	      HEAP32[$1 + 8 >> 2] = $argv;
	      var $_0 = $1;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _cmd_ln_parse_file_r($inout_cmdln, $defn, $filename, $strict) {
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = _fopen($filename, STRING_TABLE.__str2415 | 0);
	  var $2 = ($1 | 0) == 0;
	  $_$60 : do {
	    if ($2) {
	      __E__pr_header(STRING_TABLE.__str12130 | 0, 787, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str282157 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	      var $_0 = 0;
	    } else {
	      var $5 = _fgetc($1);
	      var $ch_0 = $5;
	      while (1) {
	        var $ch_0;
	        if (($ch_0 | 0) == -1) {
	          var $12 = _fclose($1);
	          var $_0 = 0;
	          break $_$60;
	        }
	        var $memchr = _memchr(STRING_TABLE._cmd_ln_parse_file_r_separator | 0, $ch_0, 5);
	        if (($memchr | 0) == 0) {
	          break;
	        }
	        var $10 = _fgetc($1);
	        var $ch_0 = $10;
	      }
	      var $13 = ___ckd_calloc__(10, 4, STRING_TABLE.__str12130 | 0, 806);
	      var $14 = $13;
	      var $15 = ___ckd_calloc__(513, 1, STRING_TABLE.__str12130 | 0, 808);
	      var $f_argv_0_ph = $14;
	      var $ch_1_ph = $ch_0;
	      var $quoting_0_ph = 0;
	      var $argc_0_ph = 0;
	      var $argv_size_0_ph = 10;
	      var $str_0_ph = $15;
	      var $arg_max_length_0_ph = 512;
	      var $len_0_ph = 0;
	      $_$70 : while (1) {
	        var $len_0_ph;
	        var $arg_max_length_0_ph;
	        var $str_0_ph;
	        var $argv_size_0_ph;
	        var $argc_0_ph;
	        var $quoting_0_ph;
	        var $ch_1_ph;
	        var $f_argv_0_ph;
	        var $16 = ($quoting_0_ph | 0) == 0;
	        var $f_argv_0 = $f_argv_0_ph;
	        var $ch_1 = $ch_1_ph;
	        var $argc_0 = $argc_0_ph;
	        var $argv_size_0 = $argv_size_0_ph;
	        var $len_0 = $len_0_ph;
	        $_$72 : while (1) {
	          var $len_0;
	          var $argv_size_0;
	          var $argc_0;
	          var $ch_1;
	          var $f_argv_0;
	          var $17 = ($len_0 | 0) == 0;
	          $_$74 : do {
	            if ($17) {
	              if (($argc_0 & 1 | 0) != 0) {
	                var $ch_5 = $ch_1;
	                break;
	              }
	              var $ch_2 = $ch_1;
	              $_$76 : while (1) {
	                var $ch_2;
	                if (($ch_2 | 0) != 35) if (($ch_2 | 0) == -1) {
	                  var $rv_0 = 0;
	                  var $f_argv_2 = $f_argv_0;
	                  var $argc_1 = $argc_0;
	                  break $_$70;
	                } else {
	                  var $ch_5 = $ch_2;
	                  break $_$74;
	                }
	                var $22 = _fgetc($1);
	                var $ch_3 = $22;
	                while (1) {
	                  var $ch_3;
	                  var $24 = _fgetc($1);
	                  if (($ch_3 | 0) == -1 || ($ch_3 | 0) == 10) {
	                    var $ch_4 = $24;
	                    break;
	                  }
	                  var $ch_3 = $24;
	                }
	                while (1) {
	                  var $ch_4;
	                  if (($ch_4 | 0) == -1) {
	                    var $ch_2 = -1;
	                    continue $_$76;
	                  }
	                  var $memchr8 = _memchr(STRING_TABLE._cmd_ln_parse_file_r_separator | 0, $ch_4, 5);
	                  if (($memchr8 | 0) == 0) {
	                    var $ch_2 = $ch_4;
	                    continue $_$76;
	                  }
	                  var $29 = _fgetc($1);
	                  var $ch_4 = $29;
	                }
	              }
	            } else {
	              var $ch_5 = $ch_1;
	            }
	          } while (0);
	          var $ch_5;
	          do {
	            if (($ch_5 | 0) == 39 || ($ch_5 | 0) == 34) {
	              if (($quoting_0_ph | 0) == ($ch_5 | 0)) {
	                var $quoting_1 = 0;
	                var $str_2 = $str_0_ph;
	                var $arg_max_length_2 = $arg_max_length_0_ph;
	                var $len_1 = $len_0;
	                break $_$72;
	              }
	              if ($16) {
	                var $quoting_1 = $ch_5;
	                var $str_2 = $str_0_ph;
	                var $arg_max_length_2 = $arg_max_length_0_ph;
	                var $len_1 = $len_0;
	                break $_$72;
	              }
	              __E__pr_header(STRING_TABLE.__str12130 | 0, 831, STRING_TABLE.__str102579 | 0);
	              __E__pr_warn(STRING_TABLE.__str292158 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	              var $rv_0 = 1;
	              var $f_argv_2 = $f_argv_0;
	              var $argc_1 = $argc_0;
	              break $_$70;
	            } else if (($ch_5 | 0) != -1) {
	              if ($16) {
	                var $memchr9 = _memchr(STRING_TABLE._cmd_ln_parse_file_r_separator | 0, $ch_5, 5);
	                if (($memchr9 | 0) != 0) {
	                  break;
	                }
	              }
	              if (($len_0 | 0) < ($arg_max_length_0_ph | 0)) {
	                var $str_1 = $str_0_ph;
	                var $arg_max_length_1 = $arg_max_length_0_ph;
	              } else {
	                var $59 = $arg_max_length_0_ph << 1;
	                var $61 = ___ckd_realloc__($str_0_ph, $59 | 1, STRING_TABLE.__str12130 | 0, 872);
	                if (($61 | 0) == 0) {
	                  var $rv_0 = 1;
	                  var $f_argv_2 = $f_argv_0;
	                  var $argc_1 = $argc_0;
	                  break $_$70;
	                }
	                var $str_1 = $61;
	                var $arg_max_length_1 = $59;
	              }
	              var $arg_max_length_1;
	              var $str_1;
	              var $65 = $len_0 + 1 | 0;
	              HEAP8[$str_1 + $len_0 | 0] = $ch_5 & 255;
	              HEAP8[$str_1 + $65 | 0] = 0;
	              var $quoting_1 = $quoting_0_ph;
	              var $str_2 = $str_1;
	              var $arg_max_length_2 = $arg_max_length_1;
	              var $len_1 = $65;
	              break $_$72;
	            }
	          } while (0);
	          if (($argc_0 | 0) < ($argv_size_0 | 0)) {
	            var $f_argv_1 = $f_argv_0;
	            var $argv_size_1 = $argv_size_0;
	          } else {
	            var $42 = ___ckd_realloc__($f_argv_0, $argv_size_0 << 3, STRING_TABLE.__str12130 | 0, 843);
	            if (($42 | 0) == 0) {
	              var $rv_0 = 1;
	              var $f_argv_2 = $f_argv_0;
	              var $argc_1 = $argc_0;
	              break $_$70;
	            }
	            var $f_argv_1 = $42;
	            var $argv_size_1 = $argv_size_0 << 1;
	          }
	          var $argv_size_1;
	          var $f_argv_1;
	          var $48 = ___ckd_salloc__($str_0_ph, STRING_TABLE.__str12130 | 0, 851);
	          HEAP32[$f_argv_1 + ($argc_0 << 2) >> 2] = $48;
	          HEAP8[$str_0_ph] = 0;
	          var $50 = $argc_0 + 1 | 0;
	          if ($16) {
	            var $ch_6 = $ch_5;
	            __label__ = 30;
	          } else {
	            __E__pr_header(STRING_TABLE.__str12130 | 0, 857, STRING_TABLE.__str212436 | 0);
	            __E__pr_warn(STRING_TABLE.__str312160 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	            var $ch_6 = $ch_5;
	          }
	          while (1) {
	            var $ch_6;
	            if (($ch_6 | 0) == -1) {
	              var $rv_0 = 0;
	              var $f_argv_2 = $f_argv_1;
	              var $argc_1 = $50;
	              break $_$70;
	            }
	            var $memchr10 = _memchr(STRING_TABLE._cmd_ln_parse_file_r_separator | 0, $ch_6, 5);
	            if (($memchr10 | 0) == 0) {
	              var $f_argv_0 = $f_argv_1;
	              var $ch_1 = $ch_6;
	              var $argc_0 = $50;
	              var $argv_size_0 = $argv_size_1;
	              var $len_0 = 0;
	              continue $_$72;
	            }
	            var $55 = _fgetc($1);
	            var $ch_6 = $55;
	          }
	        }
	        var $len_1;
	        var $arg_max_length_2;
	        var $str_2;
	        var $quoting_1;
	        var $69 = _fgetc($1);
	        var $f_argv_0_ph = $f_argv_0;
	        var $ch_1_ph = $69;
	        var $quoting_0_ph = $quoting_1;
	        var $argc_0_ph = $argc_0;
	        var $argv_size_0_ph = $argv_size_0;
	        var $str_0_ph = $str_2;
	        var $arg_max_length_0_ph = $arg_max_length_2;
	        var $len_0_ph = $len_1;
	      }
	      var $argc_1;
	      var $f_argv_2;
	      var $rv_0;
	      var $70 = _fclose($1);
	      _ckd_free($str_0_ph);
	      if ($rv_0) {
	        var $71 = ($argc_1 | 0) > 0;
	        $_$112 : do {
	          if ($71) {
	            var $ch_711 = 0;
	            while (1) {
	              var $ch_711;
	              var $73 = HEAP32[$f_argv_2 + ($ch_711 << 2) >> 2];
	              _ckd_free($73);
	              var $74 = $ch_711 + 1 | 0;
	              if (($74 | 0) == ($argc_1 | 0)) {
	                break $_$112;
	              }
	              var $ch_711 = $74;
	            }
	          }
	        } while (0);
	        _ckd_free($f_argv_2);
	        var $_0 = 0;
	      } else {
	        var $77 = _parse_options($inout_cmdln, $defn, $argc_1, $f_argv_2, $strict);
	        var $_0 = $77;
	      }
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_cmd_ln_parse_file_r["X"] = 1;

	function _cmd_ln_access_r($cmdln_0_1_val, $name) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $val = __stackBase__;
	  var $1 = _hash_table_lookup($cmdln_0_1_val, $name, $val);
	  if (($1 | 0) < 0) {
	    __E__pr_header(STRING_TABLE.__str12130 | 0, 942, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str332162 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
	    var $_0 = 0;
	  } else {
	    var $_0 = HEAP32[$val >> 2];
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _cmd_ln_int_r($cmdln_0_1_val, $name) {
	  var $1 = _cmd_ln_access_r($cmdln_0_1_val, $name);
	  if (($1 | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    var $_0 = HEAP32[$1 >> 2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _cmd_ln_float_r($cmdln_0_1_val, $name) {
	  var $1 = _cmd_ln_access_r($cmdln_0_1_val, $name);
	  if (($1 | 0) == 0) {
	    var $_0 = 0;
	  } else {
	    var $4 = $1 | 0;
	    var $5 = (tempDoubleI32[0] = HEAP32[$4 >> 2], tempDoubleI32[1] = HEAP32[$4 + 4 >> 2], tempDoubleF64[0]);
	    var $_0 = $5;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _cmd_ln_set_str_r($cmdln_0_1_val, $name, $str) {
	  var $5$s2;
	  var __stackBase__ = STACKTOP;
	  var $1 = _cmd_ln_access_r($cmdln_0_1_val, $name);
	  if (($1 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str12130 | 0, 994, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str332162 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $name, tempInt));
	  } else {
	    var $5$s2 = $1 >> 2;
	    var $6 = HEAP32[$5$s2];
	    _ckd_free($6);
	    if (($str | 0) == 0) {
	      HEAP32[$5$s2] = 0;
	    } else {
	      var $10 = ___ckd_salloc__($str, STRING_TABLE.__str12130 | 0, 1001);
	      HEAP32[$5$s2] = $10;
	    }
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _arg_strlen($defn, $namelen, $deflen) {
	  HEAP32[$deflen >> 2] = 0;
	  HEAP32[$namelen >> 2] = 0;
	  var $2 = HEAP32[$defn >> 2];
	  var $3 = ($2 | 0) == 0;
	  $_$141 : do {
	    if ($3) {
	      var $i_0_lcssa = 0;
	    } else {
	      var $i_01 = 0;
	      var $5 = $2;
	      var $4 = 0;
	      while (1) {
	        var $4;
	        var $5;
	        var $i_01;
	        var $6 = _strlen($5);
	        if (($4 | 0) < ($6 | 0)) {
	          HEAP32[$namelen >> 2] = $6;
	        }
	        var $11 = HEAP32[$defn + ($i_01 << 4) + 8 >> 2];
	        if (($11 | 0) == 0) {
	          var $l_0 = 6;
	        } else {
	          var $14 = _strlen($11);
	          var $l_0 = $14;
	        }
	        var $l_0;
	        if ((HEAP32[$deflen >> 2] | 0) < ($l_0 | 0)) {
	          HEAP32[$deflen >> 2] = $l_0;
	        }
	        var $19 = $i_01 + 1 | 0;
	        var $21 = HEAP32[$defn + ($19 << 4) >> 2];
	        if (($21 | 0) == 0) {
	          var $i_0_lcssa = $19;
	          break $_$141;
	        }
	        var $i_01 = $19;
	        var $5 = $21;
	        var $4 = HEAP32[$namelen >> 2];
	      }
	    }
	  } while (0);
	  var $i_0_lcssa;
	  return $i_0_lcssa;
	  return null;
	}

	function _arg_sort($defn, $n) {
	  var $1 = ___ckd_calloc__($n, 4, STRING_TABLE.__str12130 | 0, 144);
	  var $2 = $1;
	  var $3 = ($n | 0) > 0;
	  $_$156 : do {
	    if ($3) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        HEAP32[$2 + ($i_01 << 2) >> 2] = ($i_01 << 4) + $defn | 0;
	        var $6 = $i_01 + 1 | 0;
	        if (($6 | 0) == ($n | 0)) {
	          break $_$156;
	        }
	        var $i_01 = $6;
	      }
	    }
	  } while (0);
	  _qsort($1, $n, 4, 18);
	  return $2;
	  return null;
	}

	function _cmp_name($a, $b) {
	  var $4 = HEAP32[HEAP32[$a >> 2] >> 2];
	  var $8 = HEAP32[HEAP32[$b >> 2] >> 2];
	  var $9 = _strcmp_nocase($4, $8);
	  return $9;
	  return null;
	}

	function _arg_resolve_env($str) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 108;
	  var $resolved_str = __stackBase__;
	  var $env_name = __stackBase__ + 4;
	  var $alloced = __stackBase__ + 104;
	  HEAP32[$resolved_str >> 2] = 0;
	  HEAP32[$alloced >> 2] = 0;
	  var $1 = $env_name | 0;
	  var $i_0 = $str;
	  while (1) {
	    var $i_0;
	    var $3 = _strstr($i_0, STRING_TABLE.__str482177 | 0);
	    if (($3 | 0) == 0) {
	      _strappend($resolved_str, $alloced, $i_0);
	      break;
	    }
	    if (($3 | 0) == ($i_0 | 0)) {
	      var $i_1 = $i_0;
	    } else {
	      var $10 = $3 - $i_0 | 0;
	      _strnappend($resolved_str, $alloced, $i_0, $10);
	      var $i_1 = $3;
	    }
	    var $i_1;
	    var $12 = $i_1 + 2 | 0;
	    var $13 = _strchr($12, 41);
	    if (($13 | 0) == 0) {
	      _strnappend($resolved_str, $alloced, $i_1, 2);
	      var $j_0 = $12;
	      var $i_2 = $12;
	    } else {
	      var $18 = $13 - $12 | 0;
	      var $19 = ($18 | 0) < 100;
	      do {
	        if ($19) {
	          var $21 = _strncpy($1, $12, $18);
	          HEAP8[$env_name + $18 | 0] = 0;
	          var $23 = _getenv($1);
	          if (($23 | 0) == 0) {
	            break;
	          }
	          _strappend($resolved_str, $alloced, $23);
	        }
	      } while (0);
	      var $j_0 = $13;
	      var $i_2 = $13 + 1 | 0;
	    }
	    var $i_2;
	    var $j_0;
	    if (($j_0 | 0) == 0) {
	      break;
	    }
	    var $i_0 = $i_2;
	  }
	  var $31 = HEAP32[$resolved_str >> 2];
	  STACKTOP = __stackBase__;
	  return $31;
	  return null;
	}

	function _parse_string_list($str) {
	  var $p_0 = $str;
	  var $count_0 = 1;
	  while (1) {
	    var $count_0;
	    var $p_0;
	    var $2 = HEAP8[$p_0];
	    if ($2 << 24 >> 24 == 0) {
	      break;
	    } else if ($2 << 24 >> 24 == 44) {
	      var $count_1 = $count_0 + 1 | 0;
	    } else {
	      var $count_1 = $count_0;
	    }
	    var $count_1;
	    var $p_0 = $p_0 + 1 | 0;
	    var $count_0 = $count_1;
	  }
	  var $9 = ___ckd_calloc__($count_0 + 1 | 0, 4, STRING_TABLE.__str12130 | 0, 350);
	  var $10 = $9;
	  var $11 = ($count_0 | 0) > 0;
	  $_$186 : do {
	    if ($11) {
	      var $i_01 = 0;
	      var $p_12 = $str;
	      while (1) {
	        var $p_12;
	        var $i_01;
	        var $j_0 = 0;
	        while (1) {
	          var $j_0;
	          var $14 = HEAP8[$p_12 + $j_0 | 0];
	          if ($14 << 24 >> 24 == 44 || $14 << 24 >> 24 == 0) {
	            break;
	          }
	          var $j_0 = $j_0 + 1 | 0;
	        }
	        var $17 = $j_0 + 1 | 0;
	        var $18 = ___ckd_calloc__($17, 1, STRING_TABLE.__str12130 | 0, 354);
	        HEAP32[$10 + ($i_01 << 2) >> 2] = $18;
	        var $20 = _strncpy($18, $p_12, $j_0);
	        var $22 = $i_01 + 1 | 0;
	        if (($22 | 0) == ($count_0 | 0)) {
	          break $_$186;
	        }
	        var $i_01 = $22;
	        var $p_12 = $p_12 + $17 | 0;
	      }
	    }
	  } while (0);
	  return $10;
	  return null;
	}

	function _strnappend($dest, $dest_allocation, $source, $n) {
	  var $or_cond = ($dest | 0) == 0 | ($dest_allocation | 0) == 0;
	  do {
	    if (!$or_cond) {
	      var $4 = HEAPU32[$dest >> 2];
	      var $5 = ($4 | 0) == 0;
	      if ($5) {
	        if ((HEAP32[$dest_allocation >> 2] | 0) != 0 | ($source | 0) == 0) {
	          break;
	        }
	      } else {
	        if (($source | 0) == 0) {
	          break;
	        }
	      }
	      var $12 = _strlen($source);
	      var $source_len_0 = ($n | 0) != 0 & $12 >>> 0 > $n >>> 0 ? $n : $12;
	      if ($5) {
	        var $17 = 0;
	      } else {
	        var $16 = _strlen($4);
	        var $17 = $16;
	      }
	      var $17;
	      var $19 = $17 + ($source_len_0 + 1) | 0;
	      var $20 = HEAPU32[$dest_allocation >> 2];
	      if ($20 >>> 0 < $19 >>> 0) {
	        var $24 = $19 << 1;
	        if (($20 | 0) == 0) {
	          var $26 = ___ckd_calloc__($24, 1, STRING_TABLE.__str12130 | 0, 172);
	          var $storemerge = $26;
	        } else {
	          var $28 = ___ckd_realloc__($4, $24, STRING_TABLE.__str12130 | 0, 174);
	          var $storemerge = $28;
	        }
	        var $storemerge;
	        HEAP32[$dest >> 2] = $storemerge;
	        HEAP32[$dest_allocation >> 2] = $24;
	        var $31 = HEAP32[$dest >> 2];
	      } else {
	        var $31 = $4;
	      }
	      var $31;
	      var $32 = _strncat($31, $source, $source_len_0);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _strappend($dest, $dest_allocation, $source) {
	  _strnappend($dest, $dest_allocation, $source, 0);
	  return;
	  return;
	}

	function _sb_strtod($s00) {
	  var $385$s2;
	  var $384$s2;
	  var $279$s2;
	  var $1$s2;
	  var $rv$s2;
	  var $s$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 20;
	  var __label__;
	  var $bbe = __stackBase__;
	  var $bbbits = __stackBase__ + 4;
	  var $s = __stackBase__ + 8, $s$s2 = $s >> 2;
	  var $rv = __stackBase__ + 12, $rv$s2 = $rv >> 2;
	  var $1$s2 = ($rv | 0) >> 2;
	  tempDoubleF64[0] = 0, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	  var $3 = $s00;
	  while (1) {
	    var $3;
	    HEAP32[$s$s2] = $3;
	    var $4 = HEAP8[$3];
	    var $5 = $4 << 24 >> 24;
	    if (($5 | 0) == 45) {
	      var $sign_0 = 1;
	      __label__ = 5;
	      break;
	    } else if (($5 | 0) == 43) {
	      var $sign_0 = 0;
	      __label__ = 5;
	      break;
	    } else if (($5 | 0) == 0) {
	      var $_1 = $s00;
	      __label__ = 60;
	      break;
	    } else if (($5 | 0) == 9 || ($5 | 0) == 10 || ($5 | 0) == 11 || ($5 | 0) == 12 || ($5 | 0) == 13 || ($5 | 0) == 32) {
	      var $3 = $3 + 1 | 0;
	    } else {
	      var $sign_1 = 0;
	      var $12 = $3;
	      var $11 = $4;
	      __label__ = 7;
	      break;
	    }
	  }
	  do {
	    if (__label__ == 5) {
	      var $sign_0;
	      var $6 = $3 + 1 | 0;
	      HEAP32[$s$s2] = $6;
	      var $7 = HEAP8[$6];
	      if ($7 << 24 >> 24 == 0) {
	        var $_1 = $s00;
	        __label__ = 60;
	        break;
	      }
	      var $sign_1 = $sign_0;
	      var $12 = $6;
	      var $11 = $7;
	      __label__ = 7;
	      break;
	    }
	  } while (0);
	  $_$9 : do {
	    if (__label__ == 7) {
	      var $11;
	      var $12;
	      var $sign_1;
	      var $13 = $11 << 24 >> 24 == 48;
	      $_$11 : do {
	        if ($13) {
	          var $14 = $12;
	          while (1) {
	            var $14;
	            var $15 = $14 + 1 | 0;
	            HEAP32[$s$s2] = $15;
	            var $16 = HEAP8[$15];
	            if ($16 << 24 >> 24 == 48) {
	              var $14 = $15;
	            } else if ($16 << 24 >> 24 == 0) {
	              __label__ = 174;
	              break $_$11;
	            } else {
	              var $nz0_0 = 1;
	              var $18 = $15;
	              var $17 = $16;
	              __label__ = 9;
	              break $_$11;
	            }
	          }
	        } else {
	          var $nz0_0 = 0;
	          var $18 = $12;
	          var $17 = $11;
	          __label__ = 9;
	        }
	      } while (0);
	      $_$14 : do {
	        if (__label__ == 9) {
	          var $17;
	          var $18;
	          var $nz0_0;
	          var $19 = $17 << 24 >> 24;
	          var $20 = ($17 - 48 & 255 & 255) < 10;
	          $_$16 : do {
	            if ($20) {
	              var $z_0107 = 0;
	              var $y_0108 = 0;
	              var $nd_0109 = 0;
	              var $22 = $19;
	              var $21 = $18;
	              while (1) {
	                var $21;
	                var $22;
	                var $nd_0109;
	                var $y_0108;
	                var $z_0107;
	                var $23 = ($nd_0109 | 0) < 9;
	                do {
	                  if ($23) {
	                    var $y_1 = $y_0108 * 10 - 48 + $22 | 0;
	                    var $z_1 = $z_0107;
	                  } else {
	                    if (($nd_0109 | 0) >= 16) {
	                      var $y_1 = $y_0108;
	                      var $z_1 = $z_0107;
	                      break;
	                    }
	                    var $y_1 = $y_0108;
	                    var $z_1 = $z_0107 * 10 - 48 + $22 | 0;
	                  }
	                } while (0);
	                var $z_1;
	                var $y_1;
	                var $35 = $nd_0109 + 1 | 0;
	                var $36 = $21 + 1 | 0;
	                HEAP32[$s$s2] = $36;
	                var $37 = HEAPU8[$36];
	                var $38 = $37 << 24 >> 24;
	                if (($37 - 48 & 255 & 255) >= 10) {
	                  var $z_0_lcssa = $z_1;
	                  var $y_0_lcssa = $y_1;
	                  var $nd_0_lcssa = $35;
	                  var $_lcssa104 = $37;
	                  var $_lcssa105 = $38;
	                  var $40 = $36;
	                  break $_$16;
	                }
	                var $z_0107 = $z_1;
	                var $y_0108 = $y_1;
	                var $nd_0109 = $35;
	                var $22 = $38;
	                var $21 = $36;
	              }
	            } else {
	              var $z_0_lcssa = 0;
	              var $y_0_lcssa = 0;
	              var $nd_0_lcssa = 0;
	              var $_lcssa104 = $17;
	              var $_lcssa105 = $19;
	              var $40 = $18;
	            }
	          } while (0);
	          var $40;
	          var $_lcssa105;
	          var $_lcssa104;
	          var $nd_0_lcssa;
	          var $y_0_lcssa;
	          var $z_0_lcssa;
	          var $41 = $_lcssa104 << 24 >> 24 == 46;
	          $_$25 : do {
	            if ($41) {
	              var $43 = $40 + 1 | 0;
	              HEAP32[$s$s2] = $43;
	              var $44 = HEAP8[$43];
	              var $45 = $44 << 24 >> 24;
	              var $46 = ($nd_0_lcssa | 0) == 0;
	              do {
	                if ($46) {
	                  if ($44 << 24 >> 24 == 48) {
	                    var $nz_098 = 0;
	                    var $48 = $43;
	                    while (1) {
	                      var $48;
	                      var $nz_098;
	                      var $49 = $nz_098 + 1 | 0;
	                      var $50 = $48 + 1 | 0;
	                      HEAP32[$s$s2] = $50;
	                      var $51 = HEAP8[$50];
	                      if ($51 << 24 >> 24 != 48) {
	                        break;
	                      }
	                      var $nz_098 = $49;
	                      var $48 = $50;
	                    }
	                    var $nz_0_lcssa = $49;
	                    var $c_0_lcssa = $51 << 24 >> 24;
	                    var $55 = $50;
	                  } else {
	                    var $nz_0_lcssa = 0;
	                    var $c_0_lcssa = $45;
	                    var $55 = $43;
	                  }
	                  var $55;
	                  var $c_0_lcssa;
	                  var $nz_0_lcssa;
	                  if (($c_0_lcssa - 49 | 0) >>> 0 < 9) {
	                    var $c_2 = $c_0_lcssa;
	                    var $nd_2 = 0;
	                    var $nf_1 = $nz_0_lcssa;
	                    var $nz_2 = 0;
	                    var $s0_1 = $55;
	                    var $y_3 = $y_0_lcssa;
	                    var $z_3 = $z_0_lcssa;
	                    var $61 = $55;
	                    __label__ = 22;
	                    break;
	                  }
	                  var $c_3 = $c_0_lcssa;
	                  var $nd_5 = 0;
	                  var $nf_3 = 0;
	                  var $nz_4 = $nz_0_lcssa;
	                  var $s0_2 = $18;
	                  var $y_8 = $y_0_lcssa;
	                  var $z_8 = $z_0_lcssa;
	                  var $99 = $55;
	                  break $_$25;
	                } else {
	                  var $c_1 = $45;
	                  var $nd_1 = $nd_0_lcssa;
	                  var $nf_0 = 0;
	                  var $nz_1 = 0;
	                  var $s0_0 = $18;
	                  var $y_2 = $y_0_lcssa;
	                  var $z_2 = $z_0_lcssa;
	                  var $58 = $43;
	                  __label__ = 21;
	                }
	              } while (0);
	              while (1) {
	                if (__label__ == 21) {
	                  var $58;
	                  var $z_2;
	                  var $y_2;
	                  var $s0_0;
	                  var $nz_1;
	                  var $nf_0;
	                  var $nd_1;
	                  var $c_1;
	                  if (($c_1 - 48 | 0) >>> 0 < 10) {
	                    var $c_2 = $c_1;
	                    var $nd_2 = $nd_1;
	                    var $nf_1 = $nf_0;
	                    var $nz_2 = $nz_1;
	                    var $s0_1 = $s0_0;
	                    var $y_3 = $y_2;
	                    var $z_3 = $z_2;
	                    var $61 = $58;
	                    __label__ = 22;
	                    continue;
	                  }
	                  var $c_3 = $c_1;
	                  var $nd_5 = $nd_1;
	                  var $nf_3 = $nf_0;
	                  var $nz_4 = $nz_1;
	                  var $s0_2 = $s0_0;
	                  var $y_8 = $y_2;
	                  var $z_8 = $z_2;
	                  var $99 = $58;
	                  break $_$25;
	                } else if (__label__ == 22) {
	                  var $61;
	                  var $z_3;
	                  var $y_3;
	                  var $s0_1;
	                  var $nz_2;
	                  var $nf_1;
	                  var $nd_2;
	                  var $c_2;
	                  var $62 = $nz_2 + 1 | 0;
	                  var $63 = $c_2 - 48 | 0;
	                  var $64 = ($63 | 0) == 0;
	                  do {
	                    if ($64) {
	                      var $nd_4 = $nd_2;
	                      var $nf_2 = $nf_1;
	                      var $nz_3 = $62;
	                      var $y_7 = $y_3;
	                      var $z_7 = $z_3;
	                    } else {
	                      var $66 = $nf_1 + $62 | 0;
	                      var $67 = ($nz_2 | 0) > 0;
	                      var $68 = $nd_2 + 1 | 0;
	                      var $69 = ($nd_2 | 0) < 9;
	                      do {
	                        if ($67) {
	                          var $smax = ($62 | 0) > 2 ? $62 : 2;
	                          var $z_437 = $z_3;
	                          var $y_438 = $y_3;
	                          var $i_039 = 1;
	                          var $73 = $68;
	                          var $72 = $69;
	                          while (1) {
	                            var $72;
	                            var $73;
	                            var $i_039;
	                            var $y_438;
	                            var $z_437;
	                            do {
	                              if ($72) {
	                                var $y_5 = $y_438 * 10 | 0;
	                                var $z_5 = $z_437;
	                              } else {
	                                if (($73 | 0) >= 17) {
	                                  var $y_5 = $y_438;
	                                  var $z_5 = $z_437;
	                                  break;
	                                }
	                                var $y_5 = $y_438;
	                                var $z_5 = $z_437 * 10 | 0;
	                              }
	                            } while (0);
	                            var $z_5;
	                            var $y_5;
	                            var $81 = $i_039 + 1 | 0;
	                            var $84 = ($73 | 0) < 9;
	                            if (($81 | 0) >= ($62 | 0)) {
	                              break;
	                            }
	                            var $z_437 = $z_5;
	                            var $y_438 = $y_5;
	                            var $i_039 = $81;
	                            var $73 = $73 + 1 | 0;
	                            var $72 = $84;
	                          }
	                          var $85 = $nd_2 + $smax | 0;
	                          if ($84) {
	                            var $_lcssa176 = $85;
	                            var $y_4_lcssa177 = $y_5;
	                            var $z_4_lcssa180 = $z_5;
	                            __label__ = 32;
	                            break;
	                          }
	                          var $_lcssa175 = $85;
	                          var $y_4_lcssa178 = $y_5;
	                          var $z_4_lcssa179 = $z_5;
	                          __label__ = 33;
	                          break;
	                        } else {
	                          if ($69) {
	                            var $_lcssa176 = $68;
	                            var $y_4_lcssa177 = $y_3;
	                            var $z_4_lcssa180 = $z_3;
	                            __label__ = 32;
	                            break;
	                          }
	                          var $_lcssa175 = $68;
	                          var $y_4_lcssa178 = $y_3;
	                          var $z_4_lcssa179 = $z_3;
	                          __label__ = 33;
	                          break;
	                        }
	                      } while (0);
	                      if (__label__ == 32) {
	                        var $z_4_lcssa180;
	                        var $y_4_lcssa177;
	                        var $_lcssa176;
	                        var $nd_4 = $_lcssa176;
	                        var $nf_2 = $66;
	                        var $nz_3 = 0;
	                        var $y_7 = $y_4_lcssa177 * 10 + $63 | 0;
	                        var $z_7 = $z_4_lcssa180;
	                      } else if (__label__ == 33) {
	                        var $z_4_lcssa179;
	                        var $y_4_lcssa178;
	                        var $_lcssa175;
	                        if (($_lcssa175 | 0) >= 17) {
	                          var $nd_4 = $_lcssa175;
	                          var $nf_2 = $66;
	                          var $nz_3 = 0;
	                          var $y_7 = $y_4_lcssa178;
	                          var $z_7 = $z_4_lcssa179;
	                          break;
	                        }
	                        var $nd_4 = $_lcssa175;
	                        var $nf_2 = $66;
	                        var $nz_3 = 0;
	                        var $y_7 = $y_4_lcssa178;
	                        var $z_7 = $z_4_lcssa179 * 10 + $63 | 0;
	                      }
	                    }
	                  } while (0);
	                  var $z_7;
	                  var $y_7;
	                  var $nz_3;
	                  var $nf_2;
	                  var $nd_4;
	                  var $96 = $61 + 1 | 0;
	                  HEAP32[$s$s2] = $96;
	                  var $c_1 = HEAP8[$96] << 24 >> 24;
	                  var $nd_1 = $nd_4;
	                  var $nf_0 = $nf_2;
	                  var $nz_1 = $nz_3;
	                  var $s0_0 = $s0_1;
	                  var $y_2 = $y_7;
	                  var $z_2 = $z_7;
	                  var $58 = $96;
	                  __label__ = 21;
	                  continue;
	                }
	              }
	            } else {
	              var $c_3 = $_lcssa105;
	              var $nd_5 = $nd_0_lcssa;
	              var $nf_3 = 0;
	              var $nz_4 = 0;
	              var $s0_2 = $18;
	              var $y_8 = $y_0_lcssa;
	              var $z_8 = $z_0_lcssa;
	              var $99 = $40;
	            }
	          } while (0);
	          var $99;
	          var $z_8;
	          var $y_8;
	          var $s0_2;
	          var $nz_4;
	          var $nf_3;
	          var $nd_5;
	          var $c_3;
	          do {
	            if (($c_3 | 0) == 101 || ($c_3 | 0) == 69) {
	              if (($nz_4 | $nz0_0 | $nd_5 | 0) == 0) {
	                var $_1 = $s00;
	                __label__ = 60;
	                break $_$9;
	              }
	              var $105 = $99 + 1 | 0;
	              HEAP32[$s$s2] = $105;
	              var $107 = HEAP8[$105] << 24 >> 24;
	              do {
	                if (($107 | 0) == 45) {
	                  var $esign_0 = 1;
	                  __label__ = 40;
	                  break;
	                } else if (($107 | 0) == 43) {
	                  var $esign_0 = 0;
	                  __label__ = 40;
	                } else {
	                  var $c_4 = $107;
	                  var $esign_1 = 0;
	                  var $114 = $105;
	                  __label__ = 41;
	                }
	              } while (0);
	              if (__label__ == 40) {
	                var $esign_0;
	                var $110 = $99 + 2 | 0;
	                HEAP32[$s$s2] = $110;
	                var $c_4 = HEAP8[$110] << 24 >> 24;
	                var $esign_1 = $esign_0;
	                var $114 = $110;
	              }
	              var $114;
	              var $esign_1;
	              var $c_4;
	              if (($c_4 - 48 | 0) >>> 0 < 10) {
	                if (($c_4 | 0) == 48) {
	                  var $117 = $114;
	                  while (1) {
	                    var $117;
	                    var $118 = $117 + 1 | 0;
	                    HEAP32[$s$s2] = $118;
	                    var $119 = HEAP8[$118];
	                    if ($119 << 24 >> 24 != 48) {
	                      break;
	                    }
	                    var $117 = $118;
	                  }
	                  var $c_5_lcssa = $119 << 24 >> 24;
	                  var $123 = $118;
	                } else {
	                  var $c_5_lcssa = $c_4;
	                  var $123 = $114;
	                }
	                var $123;
	                var $c_5_lcssa;
	                if (($c_5_lcssa - 49 | 0) >>> 0 >= 9) {
	                  var $_0 = $99;
	                  var $c_6 = $c_5_lcssa;
	                  var $e_1 = 0;
	                  break;
	                }
	                var $L_045 = $c_5_lcssa - 48 | 0;
	                var $126 = $123 + 1 | 0;
	                HEAP32[$s$s2] = $126;
	                var $127 = HEAP8[$126];
	                var $128 = $127 << 24 >> 24;
	                var $129 = ($127 - 48 & 255 & 255) < 10;
	                $_$73 : do {
	                  if ($129) {
	                    var $L_047 = $L_045;
	                    var $131 = $128;
	                    var $130 = $126;
	                    while (1) {
	                      var $130;
	                      var $131;
	                      var $L_047;
	                      var $L_0 = $131 + $L_047 * 10 - 48 | 0;
	                      var $134 = $130 + 1 | 0;
	                      HEAP32[$s$s2] = $134;
	                      var $135 = HEAP8[$134];
	                      var $136 = $135 << 24 >> 24;
	                      if (($135 - 48 & 255 & 255) >= 10) {
	                        var $L_0_lcssa = $L_0;
	                        var $_lcssa43 = $134;
	                        var $_lcssa44 = $136;
	                        break $_$73;
	                      }
	                      var $L_047 = $L_0;
	                      var $131 = $136;
	                      var $130 = $134;
	                    }
	                  } else {
	                    var $L_0_lcssa = $L_045;
	                    var $_lcssa43 = $126;
	                    var $_lcssa44 = $128;
	                  }
	                } while (0);
	                var $_lcssa44;
	                var $_lcssa43;
	                var $L_0_lcssa;
	                var $e_0 = ($_lcssa43 - $123 | 0) > 8 | ($L_0_lcssa | 0) > 19999 ? 19999 : $L_0_lcssa;
	                var $e_0_ = ($esign_1 | 0) == 0 ? $e_0 : -$e_0 | 0;
	                var $_0 = $99;
	                var $c_6 = $_lcssa44;
	                var $e_1 = $e_0_;
	              } else {
	                HEAP32[$s$s2] = $99;
	                var $_0 = $99;
	                var $c_6 = $c_4;
	                var $e_1 = 0;
	              }
	            } else {
	              var $_0 = $s00;
	              var $c_6 = $c_3;
	              var $e_1 = 0;
	            }
	          } while (0);
	          var $e_1;
	          var $c_6;
	          var $_0;
	          if (($nd_5 | 0) == 0) {
	            if (($nz_4 | $nz0_0 | 0) != 0) {
	              break;
	            }
	            if (($c_6 | 0) == 105 || ($c_6 | 0) == 73) {
	              var $153 = _match($s, STRING_TABLE.__str2200 | 0);
	              if (($153 | 0) == 0) {
	                var $_1 = $_0;
	                __label__ = 60;
	                break $_$9;
	              }
	              var $157 = HEAP32[$s$s2] - 1 | 0;
	              HEAP32[$s$s2] = $157;
	              var $158 = _match($s, STRING_TABLE.__str12201 | 0);
	              if (($158 | 0) == 0) {
	                var $162 = HEAP32[$s$s2] + 1 | 0;
	                HEAP32[$s$s2] = $162;
	              }
	              HEAP32[$rv$s2 + 1] = 2146435072;
	              HEAP32[$rv$s2] = 0;
	            } else if (($c_6 | 0) == 110 || ($c_6 | 0) == 78) {
	              var $168 = _match($s, STRING_TABLE.__str22202 | 0);
	              if (($168 | 0) == 0) {
	                var $_1 = $_0;
	                __label__ = 60;
	                break $_$9;
	              }
	              HEAP32[$rv$s2 + 1] = 2146959360;
	              HEAP32[$rv$s2] = 0;
	              if (HEAP8[HEAP32[$s$s2]] << 24 >> 24 != 40) {
	                break;
	              }
	              _hexnan($rv, $s);
	            } else {
	              var $_1 = $_0;
	              __label__ = 60;
	              break $_$9;
	            }
	          } else {
	            var $179 = $e_1 - $nf_3 | 0;
	            var $nd_5_nd_0 = ($nd_0_lcssa | 0) == 0 ? $nd_5 : $nd_0_lcssa;
	            var $181 = ($nd_5 | 0) < 16;
	            var $182 = $181 ? $nd_5 : 16;
	            var $183 = $y_8 >>> 0;
	            tempDoubleF64[0] = $183, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	            tempDoubleF64[0] = $183;
	            var $187 = tempDoubleI32[1];
	            var $188 = tempDoubleI32[0];
	            if (($182 | 0) > 9) {
	              var $191 = ($182 - 9 << 3) + _tens | 0;
	              var $192 = (tempDoubleI32[0] = HEAP32[$191 >> 2], tempDoubleI32[1] = HEAP32[$191 + 4 >> 2], tempDoubleF64[0]);
	              var $195 = $192 * $183 + ($z_8 >>> 0);
	              tempDoubleF64[0] = $195, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	              tempDoubleF64[0] = $195;
	              var $203 = $195;
	              var $202 = tempDoubleI32[1];
	              var $201 = tempDoubleI32[0];
	            } else {
	              var $203 = $183;
	              var $202 = $187;
	              var $201 = $188;
	            }
	            var $201;
	            var $202;
	            var $203;
	            do {
	              if ($181) {
	                if (($e_1 | 0) == ($nf_3 | 0)) {
	                  break $_$14;
	                }
	                if (($179 | 0) <= 0) {
	                  if (($179 | 0) <= -23) {
	                    break;
	                  }
	                  var $230 = (-$179 << 3) + _tens | 0;
	                  var $231 = (tempDoubleI32[0] = HEAP32[$230 >> 2], tempDoubleI32[1] = HEAP32[$230 + 4 >> 2], tempDoubleF64[0]);
	                  var $232 = $203 / $231;
	                  tempDoubleF64[0] = $232, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                  break $_$14;
	                }
	                if (($179 | 0) < 23) {
	                  var $211 = ($179 << 3) + _tens | 0;
	                  var $212 = (tempDoubleI32[0] = HEAP32[$211 >> 2], tempDoubleI32[1] = HEAP32[$211 + 4 >> 2], tempDoubleF64[0]);
	                  var $213 = $203 * $212;
	                  tempDoubleF64[0] = $213, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                  break $_$14;
	                }
	                var $215 = 15 - $nd_5 | 0;
	                if (($179 | 0) > ($215 + 22 | 0)) {
	                  break;
	                }
	                var $220 = ($215 << 3) + _tens | 0;
	                var $221 = (tempDoubleI32[0] = HEAP32[$220 >> 2], tempDoubleI32[1] = HEAP32[$220 + 4 >> 2], tempDoubleF64[0]);
	                var $222 = $203 * $221;
	                var $223 = ($179 - $215 << 3) + _tens | 0;
	                var $224 = (tempDoubleI32[0] = HEAP32[$223 >> 2], tempDoubleI32[1] = HEAP32[$223 + 4 >> 2], tempDoubleF64[0]);
	                var $225 = $222 * $224;
	                tempDoubleF64[0] = $225, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                break $_$14;
	              }
	            } while (0);
	            var $235 = $179 + ($nd_5 - $182) | 0;
	            var $236 = ($235 | 0) > 0;
	            do {
	              if ($236) {
	                var $238 = $235 & 15;
	                if (($238 | 0) == 0) {
	                  var $249 = $202;
	                  var $248 = $203;
	                } else {
	                  var $241 = ($238 << 3) + _tens | 0;
	                  var $242 = (tempDoubleI32[0] = HEAP32[$241 >> 2], tempDoubleI32[1] = HEAP32[$241 + 4 >> 2], tempDoubleF64[0]);
	                  var $243 = $203 * $242;
	                  tempDoubleF64[0] = $243, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                  tempDoubleF64[0] = $243;
	                  var $249 = tempDoubleI32[1];
	                  var $248 = $243;
	                }
	                var $248;
	                var $249;
	                var $250 = $235 & -16;
	                if (($250 | 0) == 0) {
	                  var $scale_1 = 0;
	                  __label__ = 105;
	                  break;
	                }
	                if (($250 | 0) > 308) {
	                  var $bd0_0 = 0;
	                  var $_pre_phi174 = $rv + 4 | 0;
	                  __label__ = 78;
	                  break;
	                }
	                var $258 = $235 >> 4;
	                var $259 = ($258 | 0) > 1;
	                $_$116 : do {
	                  if ($259) {
	                    var $j_061 = 0;
	                    var $e1_062 = $258;
	                    var $261 = $249;
	                    var $260 = $248;
	                    while (1) {
	                      var $260;
	                      var $261;
	                      var $e1_062;
	                      var $j_061;
	                      if (($e1_062 & 1 | 0) == 0) {
	                        var $273 = $261;
	                        var $272 = $260;
	                      } else {
	                        var $265 = ($j_061 << 3) + _bigtens | 0;
	                        var $266 = (tempDoubleI32[0] = HEAP32[$265 >> 2], tempDoubleI32[1] = HEAP32[$265 + 4 >> 2], tempDoubleF64[0]);
	                        var $267 = $260 * $266;
	                        tempDoubleF64[0] = $267, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                        tempDoubleF64[0] = $267;
	                        var $273 = tempDoubleI32[1];
	                        var $272 = $267;
	                      }
	                      var $272;
	                      var $273;
	                      var $274 = $j_061 + 1 | 0;
	                      var $275 = $e1_062 >> 1;
	                      if (($275 | 0) <= 1) {
	                        var $j_0_lcssa = $274;
	                        var $277 = $273;
	                        break $_$116;
	                      }
	                      var $j_061 = $274;
	                      var $e1_062 = $275;
	                      var $261 = $273;
	                      var $260 = $272;
	                    }
	                  } else {
	                    var $j_0_lcssa = 0;
	                    var $277 = $249;
	                  }
	                } while (0);
	                var $277;
	                var $j_0_lcssa;
	                var $279 = $rv + 4 | 0, $279$s2 = $279 >> 2;
	                HEAP32[$279$s2] = $277 - 55574528 | 0;
	                var $281 = ($j_0_lcssa << 3) + _bigtens | 0;
	                var $282 = (tempDoubleI32[0] = HEAP32[$281 >> 2], tempDoubleI32[1] = HEAP32[$281 + 4 >> 2], tempDoubleF64[0]);
	                var $283 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	                var $284 = $283 * $282;
	                tempDoubleF64[0] = $284, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                tempDoubleF64[0] = $284;
	                var $287 = tempDoubleI32[1];
	                var $288 = $287 & 2146435072;
	                if ($288 >>> 0 > 2090860544) {
	                  var $bd0_0 = 0;
	                  var $_pre_phi174 = $279;
	                  __label__ = 78;
	                  break;
	                }
	                if ($288 >>> 0 > 2089811968) {
	                  HEAP32[$279$s2] = 2146435071;
	                  HEAP32[$rv$s2] = -1;
	                  var $scale_1 = 0;
	                  __label__ = 105;
	                  break;
	                }
	                HEAP32[$279$s2] = $287 + 55574528 | 0;
	                var $scale_1 = 0;
	                __label__ = 105;
	                break;
	              } else {
	                if (($235 | 0) >= 0) {
	                  var $scale_1 = 0;
	                  __label__ = 105;
	                  break;
	                }
	                var $299 = -$235 | 0;
	                var $300 = $299 & 15;
	                if (($300 | 0) == 0) {
	                  var $313 = $202;
	                  var $312 = $201;
	                  var $311 = $203;
	                } else {
	                  var $303 = ($300 << 3) + _tens | 0;
	                  var $304 = (tempDoubleI32[0] = HEAP32[$303 >> 2], tempDoubleI32[1] = HEAP32[$303 + 4 >> 2], tempDoubleF64[0]);
	                  var $305 = $203 / $304;
	                  tempDoubleF64[0] = $305, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                  tempDoubleF64[0] = $305;
	                  var $313 = tempDoubleI32[1];
	                  var $312 = tempDoubleI32[0];
	                  var $311 = $305;
	                }
	                var $311;
	                var $312;
	                var $313;
	                var $314 = $299 >> 4;
	                if (($314 | 0) == 0) {
	                  var $scale_1 = 0;
	                  __label__ = 105;
	                  break;
	                }
	                if (($314 | 0) > 31) {
	                  var $bd0_1 = 0;
	                  __label__ = 104;
	                  break;
	                }
	                var $320 = ($314 & 16 | 0) == 0;
	                var $_ = $320 ? 0 : 106;
	                var $321 = ($314 | 0) > 0;
	                $_$134 : do {
	                  if ($321) {
	                    var $j_156 = 0;
	                    var $e1_157 = $314;
	                    var $325 = $313;
	                    var $324 = $313;
	                    var $323 = $312;
	                    var $322 = $311;
	                    while (1) {
	                      var $322;
	                      var $323;
	                      var $324;
	                      var $325;
	                      var $e1_157;
	                      var $j_156;
	                      if (($e1_157 & 1 | 0) == 0) {
	                        var $340 = $325;
	                        var $339 = $324;
	                        var $338 = $323;
	                        var $337 = $322;
	                      } else {
	                        var $329 = ($j_156 << 3) + _tinytens | 0;
	                        var $330 = (tempDoubleI32[0] = HEAP32[$329 >> 2], tempDoubleI32[1] = HEAP32[$329 + 4 >> 2], tempDoubleF64[0]);
	                        var $331 = $322 * $330;
	                        tempDoubleF64[0] = $331, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                        tempDoubleF64[0] = $331;
	                        var $334 = tempDoubleI32[1];
	                        var $340 = $334;
	                        var $339 = $334;
	                        var $338 = tempDoubleI32[0];
	                        var $337 = $331;
	                      }
	                      var $337;
	                      var $338;
	                      var $339;
	                      var $340;
	                      var $342 = $e1_157 >> 1;
	                      if (($342 | 0) <= 0) {
	                        var $346 = $340;
	                        var $345 = $339;
	                        var $344 = $338;
	                        break $_$134;
	                      }
	                      var $j_156 = $j_156 + 1 | 0;
	                      var $e1_157 = $342;
	                      var $325 = $340;
	                      var $324 = $339;
	                      var $323 = $338;
	                      var $322 = $337;
	                    }
	                  } else {
	                    var $346 = $313;
	                    var $345 = $313;
	                    var $344 = $312;
	                  }
	                } while (0);
	                var $344;
	                var $345;
	                var $346;
	                do {
	                  if (!$320) {
	                    var $349 = $rv + 4 | 0;
	                    var $352 = 107 - ($346 >>> 20 & 2047) | 0;
	                    if (($352 | 0) <= 0) {
	                      break;
	                    }
	                    if (($352 | 0) > 31) {
	                      HEAP32[$rv$s2] = 0;
	                      if (($352 | 0) > 52) {
	                        HEAP32[$349 >> 2] = 57671680;
	                      } else {
	                        HEAP32[$349 >> 2] = $345 & -1 << $352 - 32;
	                      }
	                    } else {
	                      HEAP32[$rv$s2] = $344 & -1 << $352;
	                    }
	                  }
	                } while (0);
	                var $369 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	                if ($369 != 0) {
	                  var $scale_1 = $_;
	                  __label__ = 105;
	                  break;
	                }
	                var $bd0_1 = 0;
	                __label__ = 104;
	                break;
	              }
	            } while (0);
	            $_$151 : do {
	              if (__label__ == 105) {
	                var $scale_1;
	                var $374 = _s2b($s0_2, $nd_5_nd_0, $nd_5, $y_8);
	                var $375 = $374 + 4 | 0;
	                var $377 = $374 + 12 | 0;
	                var $378 = $374 + 16 | 0;
	                var $379 = ($179 | 0) > -1;
	                var $bd5_0 = $379 ? $179 : 0;
	                var $bb5_0 = $379 ? 0 : -$179 | 0;
	                var $bd2_1 = $scale_1 + $bd5_0 | 0;
	                var $381 = ($bb5_0 | 0) > 0;
	                var $382 = ($bd5_0 | 0) > 0;
	                var $384 = $rv + 4 | 0, $384$s2 = $384 >> 2;
	                var $385$s2 = $rv >> 2;
	                var $386 = ($scale_1 | 0) == 0;
	                var $387 = ($scale_1 | 0) != 0;
	                $_$153 : while (1) {
	                  var $389 = HEAP32[$375 >> 2];
	                  var $390 = _Balloc($389);
	                  var $392 = $390 + 12 | 0;
	                  var $395 = (HEAP32[$378 >> 2] << 2) + 8 | 0;
	                  _memcpy($392, $377, $395, 1);
	                  var $396 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	                  var $397 = _d2b($396, $bbe, $bbbits);
	                  var $398 = _i2b(1);
	                  var $399 = HEAP32[$bbe >> 2];
	                  var $400 = ($399 | 0) > -1;
	                  var $_neg = $400 ? 0 : -$399 | 0;
	                  var $401 = $400 ? $399 : 0;
	                  var $bb2_1 = $401 + $bb5_0 | 0;
	                  var $402 = $399 - $scale_1 | 0;
	                  var $403 = HEAP32[$bbbits >> 2];
	                  var $j_2 = ($403 - 1 + $402 | 0) < -1022 ? $402 + 1075 | 0 : 54 - $403 | 0;
	                  var $409 = $j_2 + $bb2_1 | 0;
	                  var $411 = $bd2_1 + $_neg + $j_2 | 0;
	                  var $413 = ($409 | 0) < ($411 | 0) ? $409 : $411;
	                  var $bb2_1_ = ($413 | 0) > ($bb2_1 | 0) ? $bb2_1 : $413;
	                  var $415 = ($bb2_1_ | 0) > 0;
	                  tempDoubleF64[0] = $396;
	                  var $416$0 = tempDoubleI32[0];
	                  var $416$1 = tempDoubleI32[1];
	                  var $417 = $416$0;
	                  if ($415) {
	                    var $bb2_2 = $409 - $bb2_1_ | 0;
	                    var $bd2_2 = $411 - $bb2_1_ | 0;
	                    var $bs2_0 = $bb2_1 - $bb2_1_ | 0;
	                  } else {
	                    var $bb2_2 = $409;
	                    var $bd2_2 = $411;
	                    var $bs2_0 = $bb2_1;
	                  }
	                  var $bs2_0;
	                  var $bd2_2;
	                  var $bb2_2;
	                  if ($381) {
	                    var $424 = _pow5mult($398, $bb5_0);
	                    var $425 = _mult($424, $397);
	                    _Bfree($397);
	                    var $bs_2 = $424;
	                    var $bb_2 = $425;
	                  } else {
	                    var $bs_2 = $398;
	                    var $bb_2 = $397;
	                  }
	                  var $bb_2;
	                  var $bs_2;
	                  if (($bb2_2 | 0) > 0) {
	                    var $429 = _lshift($bb_2, $bb2_2);
	                    var $bb_3 = $429;
	                  } else {
	                    var $bb_3 = $bb_2;
	                  }
	                  var $bb_3;
	                  if ($382) {
	                    var $432 = _pow5mult($390, $bd5_0);
	                    var $bd_2 = $432;
	                  } else {
	                    var $bd_2 = $390;
	                  }
	                  var $bd_2;
	                  if (($bd2_2 | 0) > 0) {
	                    var $436 = _lshift($bd_2, $bd2_2);
	                    var $bd_3 = $436;
	                  } else {
	                    var $bd_3 = $bd_2;
	                  }
	                  var $bd_3;
	                  if (($bs2_0 | 0) > 0) {
	                    var $440 = _lshift($bs_2, $bs2_0);
	                    var $bs_3 = $440;
	                  } else {
	                    var $bs_3 = $bs_2;
	                  }
	                  var $bs_3;
	                  var $442 = _diff($bb_3, $bd_3);
	                  var $443 = $442 + 12 | 0;
	                  var $444 = HEAPU32[$443 >> 2];
	                  HEAP32[$443 >> 2] = 0;
	                  var $445 = _cmp($442, $bs_3);
	                  if (($445 | 0) < 0) {
	                    if (($444 | $417 | 0) != 0) {
	                      var $delta_3 = $442;
	                      __label__ = 170;
	                      break;
	                    }
	                    var $451 = HEAPU32[$384$s2];
	                    if (($451 & 1048575 | 0) != 0 | ($451 & 2146435072) >>> 0 < 112197633) {
	                      var $delta_3 = $442;
	                      __label__ = 170;
	                      break;
	                    }
	                    if ((HEAP32[$442 + 20 >> 2] | 0) == 0) {
	                      if ((HEAP32[$442 + 16 >> 2] | 0) < 2) {
	                        var $delta_3 = $442;
	                        __label__ = 170;
	                        break;
	                      }
	                    }
	                    var $465 = _lshift($442, 1);
	                    var $466 = _cmp($465, $bs_3);
	                    if (($466 | 0) > 0) {
	                      var $delta_2 = $465;
	                      var $494 = $451;
	                      __label__ = 133;
	                      break;
	                    }
	                    var $delta_3 = $465;
	                    __label__ = 170;
	                    break;
	                  } else {
	                    if (($445 | 0) == 0) {
	                      var $471 = ($444 | 0) != 0;
	                      var $472 = HEAPU32[$384$s2];
	                      var $473 = $472 & 1048575;
	                      do {
	                        if ($471) {
	                          if (($473 | 0) != 1048575) {
	                            break;
	                          }
	                          do {
	                            if ($386) {
	                              var $485 = -1;
	                            } else {
	                              var $478 = $472 & 2146435072;
	                              if ($478 >>> 0 >= 111149057) {
	                                var $485 = -1;
	                                break;
	                              }
	                              var $485 = -1 << 107 - ($478 >>> 20);
	                            }
	                          } while (0);
	                          var $485;
	                          if (($417 | 0) != ($485 | 0)) {
	                            break;
	                          }
	                          HEAP32[$384$s2] = ($472 & 2146435072) + 1048576 | 0;
	                          HEAP32[$385$s2] = 0;
	                          var $delta_3 = $442;
	                          __label__ = 170;
	                          break $_$153;
	                        }
	                        if (($473 | $417 | 0) == 0) {
	                          var $delta_2 = $442;
	                          var $494 = $472;
	                          __label__ = 133;
	                          break $_$153;
	                        }
	                      } while (0);
	                      if (($417 & 1 | 0) == 0) {
	                        var $delta_3 = $442;
	                        __label__ = 170;
	                        break;
	                      }
	                      var $504 = _ulp($396);
	                      if ($471) {
	                        var $506 = $396 + $504;
	                        tempDoubleF64[0] = $506, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                        var $delta_3 = $442;
	                        __label__ = 170;
	                        break;
	                      }
	                      var $508 = $396 - $504;
	                      tempDoubleF64[0] = $508, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                      if ($508 != 0) {
	                        var $delta_3 = $442;
	                        __label__ = 170;
	                        break;
	                      }
	                      var $delta_1 = $442;
	                      var $bs_1 = $bs_3;
	                      var $bd0_1 = $374;
	                      var $bb_1 = $bb_3;
	                      var $bd_1 = $bd_3;
	                      __label__ = 104;
	                      break $_$151;
	                    } else {
	                      var $511 = _ratio($442, $bs_3);
	                      var $512 = $511 > 2;
	                      do {
	                        if ($512) {
	                          var $531 = $511 * .5;
	                          if (($444 | 0) == 0) {
	                            var $536 = -$531;
	                          } else {
	                            var $536 = $531;
	                          }
	                          var $536;
	                          tempDoubleF64[0] = $536;
	                          var $aadj_1 = $531;
	                          var $aadj1_0$1 = tempDoubleI32[1];
	                          var $aadj1_0$0 = tempDoubleI32[0];
	                        } else {
	                          if (($444 | 0) != 0) {
	                            var $aadj_1 = 1;
	                            var $aadj1_0$1 = 1072693248;
	                            var $aadj1_0$0 = 0;
	                            break;
	                          }
	                          if (($417 | 0) == 0) {
	                            if ((HEAP32[$384$s2] & 1048575 | 0) != 0) {
	                              var $aadj_1 = 1;
	                              var $aadj1_0$1 = -1074790400;
	                              var $aadj1_0$0 = 0;
	                              break;
	                            }
	                            if ($511 < 1) {
	                              var $aadj_0 = .5;
	                            } else {
	                              var $aadj_0 = $511 * .5;
	                            }
	                            var $aadj_0;
	                            tempDoubleF64[0] = -$aadj_0;
	                            var $aadj_1 = $aadj_0;
	                            var $aadj1_0$1 = tempDoubleI32[1];
	                            var $aadj1_0$0 = tempDoubleI32[0];
	                          } else if (($417 | 0) == 1) {
	                            if ((HEAP32[$384$s2] | 0) == 0) {
	                              var $delta_1 = $442;
	                              var $bs_1 = $bs_3;
	                              var $bd0_1 = $374;
	                              var $bb_1 = $bb_3;
	                              var $bd_1 = $bd_3;
	                              __label__ = 104;
	                              break $_$151;
	                            }
	                            var $aadj_1 = 1;
	                            var $aadj1_0$1 = -1074790400;
	                            var $aadj1_0$0 = 0;
	                          } else {
	                            var $aadj_1 = 1;
	                            var $aadj1_0$1 = -1074790400;
	                            var $aadj1_0$0 = 0;
	                            break;
	                          }
	                        }
	                      } while (0);
	                      var $aadj1_0$0;
	                      var $aadj1_0$1;
	                      var $aadj_1;
	                      var $538 = HEAP32[$384$s2];
	                      var $539 = $538 & 2146435072;
	                      var $540 = ($539 | 0) == 2145386496;
	                      do {
	                        if (!$540) {
	                          if ($387 & $539 >>> 0 < 111149057) {
	                            if ($aadj_1 > 2147483647) {
	                              var $aadj_2 = $aadj_1;
	                              var $aadj1_1$1 = $aadj1_0$1;
	                              var $aadj1_1$0 = $aadj1_0$0;
	                            } else {
	                              var $564 = $aadj_1 >= 0 ? Math.floor($aadj_1) : Math.ceil($aadj_1);
	                              var $567 = ($564 | 0) == 0 ? 1 : $564 >>> 0;
	                              if (($444 | 0) == 0) {
	                                var $572 = -$567;
	                              } else {
	                                var $572 = $567;
	                              }
	                              var $572;
	                              tempDoubleF64[0] = $572;
	                              var $aadj_2 = $567;
	                              var $aadj1_1$1 = tempDoubleI32[1];
	                              var $aadj1_1$0 = tempDoubleI32[0];
	                            }
	                            var $aadj1_1$0;
	                            var $aadj1_1$1;
	                            var $aadj_2;
	                            var $aadj_3 = $aadj_2;
	                            var $aadj1_2$1 = 112197632 - $539 + $aadj1_1$1 | $aadj1_1$1 & 0;
	                            var $aadj1_2$0 = 0 | $aadj1_1$0 & -1;
	                          } else {
	                            var $aadj_3 = $aadj_1;
	                            var $aadj1_2$1 = $aadj1_0$1;
	                            var $aadj1_2$0 = $aadj1_0$0;
	                          }
	                          var $aadj1_2$0;
	                          var $aadj1_2$1;
	                          var $aadj_3;
	                          var $582 = (tempDoubleI32[0] = $aadj1_2$0, tempDoubleI32[1] = $aadj1_2$1, tempDoubleF64[0]);
	                          var $583 = _ulp($396);
	                          var $585 = $396 + $582 * $583;
	                          tempDoubleF64[0] = $585, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                          tempDoubleF64[0] = $585;
	                          var $aadj_4 = $aadj_3;
	                          var $592 = tempDoubleI32[1];
	                          var $591 = tempDoubleI32[0];
	                          __label__ = 163;
	                          break;
	                        }
	                        var $542 = $538 - 55574528 | 0;
	                        HEAP32[$384$s2] = $542;
	                        var $543 = (tempDoubleI32[0] = $aadj1_0$0, tempDoubleI32[1] = $aadj1_0$1, tempDoubleF64[0]);
	                        var $544 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	                        var $545 = _ulp($544);
	                        var $547 = $544 + $543 * $545;
	                        tempDoubleF64[0] = $547, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                        tempDoubleF64[0] = $547;
	                        var $548$0 = tempDoubleI32[0];
	                        var $550 = tempDoubleI32[1];
	                        if (($550 & 2145386496) >>> 0 > 2090860543) {
	                          if ($416$0 == -1 && $416$1 == 2146435071) {
	                            var $delta_0 = $442;
	                            var $bs_0 = $bs_3;
	                            var $bd0_0 = $374;
	                            var $bb_0 = $bb_3;
	                            var $bd_0 = $bd_3;
	                            var $_pre_phi174 = $384;
	                            __label__ = 78;
	                            break $_$151;
	                          }
	                          HEAP32[$384$s2] = 2146435071;
	                          HEAP32[$385$s2] = -1;
	                          __label__ = 169;
	                          break;
	                        }
	                        var $557 = $548$0;
	                        var $558 = $550 + 55574528 | 0;
	                        HEAP32[$384$s2] = $558;
	                        var $aadj_4 = $aadj_1;
	                        var $592 = $558;
	                        var $591 = $557;
	                        __label__ = 163;
	                        break;
	                      } while (0);
	                      $_$229 : do {
	                        if (__label__ == 163) {
	                          var $591;
	                          var $592;
	                          var $aadj_4;
	                          if (!$386) {
	                            break;
	                          }
	                          if (($539 | 0) != ($592 & 2146435072 | 0)) {
	                            break;
	                          }
	                          var $599 = $aadj_4 - ($aadj_4 & -1 | 0);
	                          var $601 = ($444 | $591 | 0) == 0;
	                          do {
	                            if ($601) {
	                              if (($592 & 1048575 | 0) != 0) {
	                                break;
	                              }
	                              if ($599 < .24999995) {
	                                var $delta_4 = $442;
	                                var $bs_4 = $bs_3;
	                                var $bd0_2 = $374;
	                                var $bb_4 = $bb_3;
	                                var $bd_4 = $bd_3;
	                                __label__ = 173;
	                                break $_$151;
	                              }
	                              break $_$229;
	                            }
	                          } while (0);
	                          if ($599 < .4999999 | $599 > .5000001) {
	                            var $delta_3 = $442;
	                            __label__ = 170;
	                            break $_$153;
	                          }
	                        }
	                      } while (0);
	                      _Bfree($bb_3);
	                      _Bfree($bd_3);
	                      _Bfree($bs_3);
	                      _Bfree($442);
	                    }
	                  }
	                }
	                if (__label__ == 133) {
	                  var $494;
	                  var $delta_2;
	                  var $_pre = $494 & 2146435072;
	                  if ($_pre >>> 0 < 112197633 & ($386 ^ 1)) {
	                    if ($_pre >>> 0 <= 57671680) {
	                      var $delta_1 = $delta_2;
	                      var $bs_1 = $bs_3;
	                      var $bd0_1 = $374;
	                      var $bb_1 = $bb_3;
	                      var $bd_1 = $bd_3;
	                      __label__ = 104;
	                      break;
	                    }
	                    var $delta_3 = $delta_2;
	                  } else {
	                    HEAP32[$384$s2] = $_pre - 1048576 | 1048575;
	                    HEAP32[$385$s2] = -1;
	                    var $delta_3 = $delta_2;
	                  }
	                }
	                var $delta_3;
	                if ($386) {
	                  var $delta_4 = $delta_3;
	                  var $bs_4 = $bs_3;
	                  var $bd0_2 = $374;
	                  var $bb_4 = $bb_3;
	                  var $bd_4 = $bd_3;
	                  __label__ = 173;
	                  break;
	                }
	                var $612 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	                var $613 = $612 * 1.232595164407831e-32;
	                tempDoubleF64[0] = $613, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	                tempDoubleF64[0] = $613;
	                var $614$0 = tempDoubleI32[0];
	                var $614$1 = tempDoubleI32[1];
	                var $$emscripten$temp$2$1 = 1;
	                if (!(($614$1 >>> 0 < $$emscripten$temp$2$1 >>> 0 || $614$1 >>> 0 == $$emscripten$temp$2$1 >>> 0 && $614$0 >>> 0 < 0 >>> 0) & ($614$0 | 0) == 0)) {
	                  var $delta_4 = $delta_3;
	                  var $bs_4 = $bs_3;
	                  var $bd0_2 = $374;
	                  var $bb_4 = $bb_3;
	                  var $bd_4 = $bd_3;
	                  __label__ = 173;
	                  break;
	                }
	                var $619 = ___errno();
	                HEAP32[$619 >> 2] = 34;
	                var $delta_4 = $delta_3;
	                var $bs_4 = $bs_3;
	                var $bd0_2 = $374;
	                var $bb_4 = $bb_3;
	                var $bd_4 = $bd_3;
	                __label__ = 173;
	                break;
	              }
	            } while (0);
	            if (__label__ == 78) {
	              var $_pre_phi174;
	              var $bd_0;
	              var $bb_0;
	              var $bd0_0;
	              var $bs_0;
	              var $delta_0;
	              var $254 = ___errno();
	              HEAP32[$254 >> 2] = 34;
	              HEAP32[$_pre_phi174 >> 2] = 2146435072;
	              HEAP32[$rv$s2] = 0;
	              if (($bd0_0 | 0) == 0) {
	                break;
	              }
	              var $delta_4 = $delta_0;
	              var $bs_4 = $bs_0;
	              var $bd0_2 = $bd0_0;
	              var $bb_4 = $bb_0;
	              var $bd_4 = $bd_0;
	            } else if (__label__ == 104) {
	              var $bd_1;
	              var $bb_1;
	              var $bd0_1;
	              var $bs_1;
	              var $delta_1;
	              tempDoubleF64[0] = 0, HEAP32[$1$s2] = tempDoubleI32[0], HEAP32[$1$s2 + 1] = tempDoubleI32[1];
	              var $371 = ___errno();
	              HEAP32[$371 >> 2] = 34;
	              if (($bd0_1 | 0) == 0) {
	                break;
	              }
	              var $delta_4 = $delta_1;
	              var $bs_4 = $bs_1;
	              var $bd0_2 = $bd0_1;
	              var $bb_4 = $bb_1;
	              var $bd_4 = $bd_1;
	            }
	            var $bd_4;
	            var $bb_4;
	            var $bd0_2;
	            var $bs_4;
	            var $delta_4;
	            _Bfree($bb_4);
	            _Bfree($bd_4);
	            _Bfree($bs_4);
	            _Bfree($bd0_2);
	            _Bfree($delta_4);
	          }
	        }
	      } while (0);
	      var $621 = (tempDoubleI32[0] = HEAP32[$1$s2], tempDoubleI32[1] = HEAP32[$1$s2 + 1], tempDoubleF64[0]);
	      if (($sign_1 | 0) == 0) {
	        var $625 = $621;
	        __label__ = 176;
	        break;
	      }
	      var $625 = -$621;
	      __label__ = 176;
	      break;
	    }
	  } while (0);
	  if (__label__ == 60) {
	    var $_1;
	    HEAP32[$s$s2] = $_1;
	    var $625 = 0;
	  }
	  var $625;
	  STACKTOP = __stackBase__;
	  return $625;
	  return null;
	}

	_sb_strtod["X"] = 1;

	function _ulp($x) {
	  tempDoubleF64[0] = $x;
	  var $7$1 = (tempDoubleI32[1] & 2146435072) - 54525952 | 0;
	  var $8 = (tempDoubleI32[0] = 0, tempDoubleI32[1] = $7$1, tempDoubleF64[0]);
	  return $8;
	  return null;
	}

	function _match($sp, $t) {
	  var $s_0 = HEAP32[$sp >> 2];
	  var $_01 = $t;
	  while (1) {
	    var $_01;
	    var $s_0;
	    var $3 = HEAP8[$_01];
	    var $5 = $s_0 + 1 | 0;
	    if ($3 << 24 >> 24 == 0) {
	      HEAP32[$sp >> 2] = $5;
	      var $_0 = 1;
	      break;
	    }
	    var $9 = HEAP8[$5];
	    var $10 = $9 << 24 >> 24;
	    var $c_0 = ($9 - 65 & 255 & 255) < 26 ? $10 + 32 | 0 : $10;
	    if (($c_0 | 0) != ($3 << 24 >> 24 | 0)) {
	      var $_0 = 0;
	      break;
	    }
	    var $s_0 = $5;
	    var $_01 = $_01 + 1 | 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _hexnan($rvp, $sp) {
	  var __label__;
	  var $s_0 = HEAP32[$sp >> 2];
	  while (1) {
	    var $s_0;
	    var $3 = $s_0 + 1 | 0;
	    var $4 = HEAPU8[$3];
	    if (!(($4 & 255) < 33 & $4 << 24 >> 24 != 0)) {
	      break;
	    }
	    var $s_0 = $3;
	  }
	  var $7 = $4 << 24 >> 24 == 48;
	  do {
	    if ($7) {
	      var $9 = $s_0 + 2 | 0;
	      var $10 = HEAP8[$9];
	      if (!($10 << 24 >> 24 == 120 || $10 << 24 >> 24 == 88)) {
	        var $udx0_0_ph = 1;
	        var $s_1_ph13 = $s_0;
	        var $havedig_0_ph = 1;
	        var $x_0_0_ph = 0;
	        var $x_1_0_ph = 0;
	        break;
	      }
	      var $udx0_0_ph = 1;
	      var $s_1_ph13 = $9;
	      var $havedig_0_ph = 1;
	      var $x_0_0_ph = 0;
	      var $x_1_0_ph = 0;
	    } else {
	      var $udx0_0_ph = 1;
	      var $s_1_ph13 = $s_0;
	      var $havedig_0_ph = 1;
	      var $x_0_0_ph = 0;
	      var $x_1_0_ph = 0;
	      __label__ = 7;
	    }
	  } while (0);
	  $_$15 : while (1) {
	    var $x_1_0_ph;
	    var $x_0_0_ph;
	    var $havedig_0_ph;
	    var $s_1_ph13;
	    var $udx0_0_ph;
	    $_$17 : do {
	      if ($havedig_0_ph) {
	        var $s_1_us = $s_1_ph13;
	        while (1) {
	          var $s_1_us;
	          var $12 = $s_1_us + 1 | 0;
	          var $13 = HEAPU8[$12];
	          if ($13 << 24 >> 24 == 0) {
	            __label__ = 29;
	            break $_$15;
	          }
	          if (($13 - 48 & 255 & 255) < 10) {
	            var $udx0_0_lcssa14 = $udx0_0_ph;
	            var $xshift_0_lcssa19 = 0;
	            var $_lcssa25 = $12;
	            var $_lcssa30_in = $13;
	            __label__ = 15;
	            break $_$17;
	          }
	          if (($13 - 97 & 255 & 255) < 6) {
	            var $udx0_0_lcssa16 = $udx0_0_ph;
	            var $xshift_0_lcssa21 = 0;
	            var $_lcssa27 = $12;
	            var $_lcssa32_in = $13;
	            __label__ = 17;
	            break $_$17;
	          }
	          if (($13 - 65 & 255 & 255) < 6) {
	            var $udx0_0_lcssa15 = $udx0_0_ph;
	            var $xshift_0_lcssa20 = 0;
	            var $_lcssa26 = $12;
	            var $_lcssa31_in = $13;
	            __label__ = 19;
	            break $_$17;
	          }
	          if (($13 & 255) >= 33) {
	            var $c_0_ph_in = $13;
	            var $s_2_ph = $12;
	            __label__ = 21;
	            break $_$15;
	          }
	          var $s_1_us = $12;
	        }
	      } else {
	        var $xshift_0 = 0;
	        var $udx0_0 = $udx0_0_ph;
	        var $s_1 = $s_1_ph13;
	        while (1) {
	          var $s_1;
	          var $udx0_0;
	          var $xshift_0;
	          var $23 = $s_1 + 1 | 0;
	          var $24 = HEAPU8[$23];
	          if ($24 << 24 >> 24 == 0) {
	            __label__ = 29;
	            break $_$15;
	          }
	          if (($24 - 48 & 255 & 255) < 10) {
	            var $udx0_0_lcssa14 = $udx0_0;
	            var $xshift_0_lcssa19 = $xshift_0;
	            var $_lcssa25 = $23;
	            var $_lcssa30_in = $24;
	            __label__ = 15;
	            break $_$17;
	          }
	          if (($24 - 97 & 255 & 255) < 6) {
	            var $udx0_0_lcssa16 = $udx0_0;
	            var $xshift_0_lcssa21 = $xshift_0;
	            var $_lcssa27 = $23;
	            var $_lcssa32_in = $24;
	            __label__ = 17;
	            break $_$17;
	          }
	          if (($24 - 65 & 255 & 255) < 6) {
	            var $udx0_0_lcssa15 = $udx0_0;
	            var $xshift_0_lcssa20 = $xshift_0;
	            var $_lcssa26 = $23;
	            var $_lcssa31_in = $24;
	            __label__ = 19;
	            break $_$17;
	          }
	          if (($24 & 255) >= 33) {
	            var $c_0_ph_in = $24;
	            var $s_2_ph = $23;
	            __label__ = 21;
	            break $_$15;
	          }
	          var $xshift_0_9 = ($udx0_0 | 0) == 0 ? $xshift_0 : 1;
	          var $xshift_0 = $xshift_0_9;
	          var $udx0_0 = 0;
	          var $s_1 = $23;
	        }
	      }
	    } while (0);
	    if (__label__ == 15) {
	      var $_lcssa30_in;
	      var $_lcssa25;
	      var $xshift_0_lcssa19;
	      var $udx0_0_lcssa14;
	      var $c_1 = ($_lcssa30_in & 255) - 48 | 0;
	      var $udx0_018 = $udx0_0_lcssa14;
	      var $xshift_023 = $xshift_0_lcssa19;
	      var $47 = $_lcssa25;
	    } else if (__label__ == 17) {
	      var $_lcssa32_in;
	      var $_lcssa27;
	      var $xshift_0_lcssa21;
	      var $udx0_0_lcssa16;
	      var $c_1 = ($_lcssa32_in & 255) - 87 | 0;
	      var $udx0_018 = $udx0_0_lcssa16;
	      var $xshift_023 = $xshift_0_lcssa21;
	      var $47 = $_lcssa27;
	    } else if (__label__ == 19) {
	      var $_lcssa31_in;
	      var $_lcssa26;
	      var $xshift_0_lcssa20;
	      var $udx0_0_lcssa15;
	      var $c_1 = ($_lcssa31_in & 255) - 55 | 0;
	      var $udx0_018 = $udx0_0_lcssa15;
	      var $xshift_023 = $xshift_0_lcssa20;
	      var $47 = $_lcssa26;
	    }
	    var $47;
	    var $xshift_023;
	    var $udx0_018;
	    var $c_1;
	    var $48 = ($xshift_023 | 0) == 0;
	    var $x_1_0_ = $48 ? $x_1_0_ph : 0;
	    var $x_0_0_x_1_0 = $48 ? $x_0_0_ph : $x_1_0_ph;
	    if (($udx0_018 | 0) == 0) {
	      var $x_0_2 = $x_0_0_x_1_0;
	    } else {
	      var $x_0_2 = $x_0_0_x_1_0 << 4 | $x_1_0_ >>> 28;
	    }
	    var $x_0_2;
	    var $udx0_0_ph = $udx0_018;
	    var $s_1_ph13 = $47;
	    var $havedig_0_ph = 0;
	    var $x_0_0_ph = $x_0_2;
	    var $x_1_0_ph = $c_1 | $x_1_0_ << 4;
	  }
	  $_$39 : do {
	    if (__label__ == 21) {
	      var $s_2_ph;
	      var $c_0_ph_in;
	      var $c_0 = $c_0_ph_in & 255;
	      var $s_2 = $s_2_ph;
	      while (1) {
	        var $s_2;
	        var $c_0;
	        var $40 = $s_2 + 1 | 0;
	        if (($c_0 | 0) == 41) {
	          break;
	        }
	        var $43 = HEAP8[$40];
	        if ($43 << 24 >> 24 == 0) {
	          break $_$39;
	        }
	        var $c_0 = $43 << 24 >> 24;
	        var $s_2 = $40;
	      }
	      HEAP32[$sp >> 2] = $40;
	    }
	  } while (0);
	  var $57 = $x_0_0_ph & 1048575;
	  if (($57 | $x_1_0_ph | 0) != 0) {
	    HEAP32[$rvp + 4 >> 2] = $57 | 2146435072;
	    HEAP32[$rvp >> 2] = $x_1_0_ph;
	  }
	  return;
	  return;
	}

	_hexnan["X"] = 1;

	function _cmp($a, $b) {
	  var $2 = HEAP32[$a + 16 >> 2];
	  var $4 = HEAP32[$b + 16 >> 2];
	  var $5 = ($2 | 0) == ($4 | 0);
	  $_$146 : do {
	    if ($5) {
	      var $9 = $a + 20 | 0;
	      var $xb_0 = ($2 << 2) + $b + 20 | 0;
	      var $xa_0 = ($2 << 2) + $a + 20 | 0;
	      while (1) {
	        var $xa_0;
	        var $xb_0;
	        var $13 = $xa_0 - 4 | 0;
	        var $14 = HEAPU32[$13 >> 2];
	        var $15 = $xb_0 - 4 | 0;
	        var $16 = HEAPU32[$15 >> 2];
	        if (($14 | 0) != ($16 | 0)) {
	          break;
	        }
	        if ($13 >>> 0 <= $9 >>> 0) {
	          var $_0 = 0;
	          break $_$146;
	        }
	        var $xb_0 = $15;
	        var $xa_0 = $13;
	      }
	      var $20 = $14 >>> 0 < $16 >>> 0 ? -1 : 1;
	      var $_0 = $20;
	    } else {
	      var $_0 = $2 - $4 | 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _s2b($s, $nd0, $nd, $y9) {
	  var $1 = $nd + 8 | 0;
	  var $2 = ($1 | 0) / 9 & -1;
	  var $3 = ($1 | 0) > 17;
	  $_$50 : do {
	    if ($3) {
	      var $k_05 = 0;
	      var $y_06 = 1;
	      while (1) {
	        var $y_06;
	        var $k_05;
	        var $4 = $y_06 << 1;
	        var $5 = $k_05 + 1 | 0;
	        if (($2 | 0) <= ($4 | 0)) {
	          var $k_0_lcssa = $5;
	          break $_$50;
	        }
	        var $k_05 = $5;
	        var $y_06 = $4;
	      }
	    } else {
	      var $k_0_lcssa = 0;
	    }
	  } while (0);
	  var $k_0_lcssa;
	  var $7 = _Balloc($k_0_lcssa);
	  HEAP32[$7 + 20 >> 2] = $y9;
	  HEAP32[$7 + 16 >> 2] = 1;
	  if (($nd0 | 0) > 9) {
	    var $lftr_limit13 = $s + $nd0 | 0;
	    var $_0 = $s + 9 | 0;
	    var $b_0 = $7;
	    while (1) {
	      var $b_0;
	      var $_0;
	      var $14 = $_0 + 1 | 0;
	      var $17 = (HEAP8[$_0] << 24 >> 24) - 48 | 0;
	      var $18 = _multadd($b_0, 10, $17);
	      if (($14 | 0) == ($lftr_limit13 | 0)) {
	        break;
	      }
	      var $_0 = $14;
	      var $b_0 = $18;
	    }
	    var $_1_ph = $nd0 + ($s + 1) | 0;
	    var $i_1_ph = $nd0;
	    var $b_1_ph = $18;
	  } else {
	    var $_1_ph = $s + 10 | 0;
	    var $i_1_ph = 9;
	    var $b_1_ph = $7;
	  }
	  var $b_1_ph;
	  var $i_1_ph;
	  var $_1_ph;
	  var $23 = ($i_1_ph | 0) < ($nd | 0);
	  $_$61 : do {
	    if ($23) {
	      var $lftr_limit = $_1_ph + ($nd - $i_1_ph) | 0;
	      var $b_11 = $b_1_ph;
	      var $_13 = $_1_ph;
	      while (1) {
	        var $_13;
	        var $b_11;
	        var $26 = $_13 + 1 | 0;
	        var $29 = (HEAP8[$_13] << 24 >> 24) - 48 | 0;
	        var $30 = _multadd($b_11, 10, $29);
	        if (($26 | 0) == ($lftr_limit | 0)) {
	          var $b_1_lcssa = $30;
	          break $_$61;
	        }
	        var $b_11 = $30;
	        var $_13 = $26;
	      }
	    } else {
	      var $b_1_lcssa = $b_1_ph;
	    }
	  } while (0);
	  var $b_1_lcssa;
	  return $b_1_lcssa;
	  return null;
	}

	_s2b["X"] = 1;

	function _Balloc($k) {
	  var $5$s2;
	  var $1 = 1 << $k;
	  var $4 = ($1 << 2) + 27 & -8;
	  var $5 = ___ckd_malloc__($4, STRING_TABLE.__str32203 | 0, 524), $5$s2 = $5 >> 2;
	  var $6 = $5;
	  HEAP32[$5$s2 + 1] = $k;
	  HEAP32[$5$s2 + 2] = $1;
	  HEAP32[$5$s2 + 4] = 0;
	  HEAP32[$5$s2 + 3] = 0;
	  return $6;
	  return null;
	}

	function _d2b($_d, $e, $bits) {
	  var $3$s2;
	  var $2$s2;
	  var $z$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $y = __stackBase__;
	  var $z = __stackBase__ + 4, $z$s2 = $z >> 2;
	  tempDoubleF64[0] = $_d;
	  var $1$0 = tempDoubleI32[0];
	  var $1$1 = tempDoubleI32[1];
	  var $2 = _Balloc(1), $2$s2 = $2 >> 2;
	  var $3$s2 = ($2 + 20 | 0) >> 2;
	  var $6 = $1$1 & 1048575;
	  var $7 = ($1$1 >>> 20 | 0 << 12) & 2047;
	  var $8 = ($7 | 0) != 0;
	  var $storemerge2 = $8 ? $6 | 1048576 : $6;
	  HEAP32[$z$s2] = $storemerge2;
	  var $10 = $1$0;
	  HEAP32[$y >> 2] = $10;
	  if (($10 | 0) == 0) {
	    var $29 = _lo0bits($z);
	    var $30 = HEAP32[$z$s2];
	    HEAP32[$3$s2] = $30;
	    HEAP32[$2$s2 + 4] = 1;
	    var $i_0 = 1;
	    var $k_0 = $29 + 32 | 0;
	  } else {
	    var $13 = _lo0bits($y);
	    var $15 = HEAPU32[$y >> 2];
	    if (($13 | 0) == 0) {
	      HEAP32[$3$s2] = $15;
	      var $23 = $storemerge2;
	    } else {
	      HEAP32[$3$s2] = $storemerge2 << 32 - $13 | $15;
	      var $20 = $storemerge2 >>> ($13 >>> 0);
	      HEAP32[$z$s2] = $20;
	      var $23 = $20;
	    }
	    var $23;
	    HEAP32[$2$s2 + 6] = $23;
	    var $26 = ($23 | 0) != 0 ? 2 : 1;
	    HEAP32[$2$s2 + 4] = $26;
	    var $i_0 = $26;
	    var $k_0 = $13;
	  }
	  var $k_0;
	  var $i_0;
	  if ($8) {
	    HEAP32[$e >> 2] = $7 - 1075 + $k_0 | 0;
	    var $storemerge = 53 - $k_0 | 0;
	  } else {
	    HEAP32[$e >> 2] = $k_0 - 1074 | 0;
	    var $40 = $i_0 << 5;
	    var $43 = HEAP32[(($i_0 - 1 << 2) + 20 >> 2) + $2$s2];
	    var $44 = _hi0bits($43);
	    var $storemerge = $40 - $44 | 0;
	  }
	  var $storemerge;
	  HEAP32[$bits >> 2] = $storemerge;
	  STACKTOP = __stackBase__;
	  return $2;
	  return null;
	}

	_d2b["X"] = 1;

	function _i2b($i) {
	  var $1 = _Balloc(1);
	  HEAP32[$1 + 20 >> 2] = $i;
	  HEAP32[$1 + 16 >> 2] = 1;
	  return $1;
	  return null;
	}

	function _pow5mult($b, $k) {
	  var $1 = $k & 3;
	  if (($1 | 0) == 0) {
	    var $_01 = $b;
	  } else {
	    var $6 = HEAP32[_pow5mult_p05 + ($1 - 1 << 2) >> 2];
	    var $7 = _multadd($b, $6, 0);
	    var $_01 = $7;
	  }
	  var $_01;
	  var $9 = $k >> 2;
	  if (($9 | 0) == 0) {
	    var $_0 = $_01;
	  } else {
	    var $12 = _i2b(625);
	    var $_1 = $_01;
	    var $_02 = $9;
	    var $p5_0 = $12;
	    while (1) {
	      var $p5_0;
	      var $_02;
	      var $_1;
	      if (($_02 & 1 | 0) == 0) {
	        var $_2 = $_1;
	      } else {
	        var $17 = _mult($_1, $p5_0);
	        _Bfree($_1);
	        var $_2 = $17;
	      }
	      var $_2;
	      var $19 = $_02 >> 1;
	      if (($19 | 0) == 0) {
	        break;
	      }
	      var $22 = _mult($p5_0, $p5_0);
	      _Bfree($p5_0);
	      var $_1 = $_2;
	      var $_02 = $19;
	      var $p5_0 = $22;
	    }
	    _Bfree($p5_0);
	    var $_0 = $_2;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _mult($a, $b) {
	  var $b_a$s2;
	  var __label__;
	  var $5 = (HEAP32[$a + 16 >> 2] | 0) < (HEAP32[$b + 16 >> 2] | 0);
	  var $a_b = $5 ? $a : $b;
	  var $b_a = $5 ? $b : $a, $b_a$s2 = $b_a >> 2;
	  var $9 = HEAPU32[$b_a$s2 + 4];
	  var $11 = HEAPU32[$a_b + 16 >> 2];
	  var $12 = $11 + $9 | 0;
	  var $k_0 = (($12 | 0) > (HEAP32[$b_a$s2 + 2] | 0) & 1) + HEAP32[$b_a$s2 + 1] | 0;
	  var $17 = _Balloc($k_0);
	  var $18 = $17 + 20 | 0;
	  var $19 = ($12 << 2) + $17 + 20 | 0;
	  var $20 = ($12 | 0) > 0;
	  $_$96 : do {
	    if ($20) {
	      var $x_06 = $18;
	      while (1) {
	        var $x_06;
	        HEAP32[$x_06 >> 2] = 0;
	        var $21 = $x_06 + 4 | 0;
	        if ($21 >>> 0 >= $19 >>> 0) {
	          break $_$96;
	        }
	        var $x_06 = $21;
	      }
	    }
	  } while (0);
	  var $23 = $b_a + 20 | 0;
	  var $24 = ($9 << 2) + $b_a + 20 | 0;
	  var $25 = ($11 << 2) + $a_b + 20 | 0;
	  var $26 = ($11 | 0) > 0;
	  $_$100 : do {
	    if ($26) {
	      var $xb_04 = $a_b + 20 | 0;
	      var $xc0_05 = $18;
	      while (1) {
	        var $xc0_05;
	        var $xb_04;
	        var $29 = $xb_04 + 4 | 0;
	        var $30 = HEAP32[$xb_04 >> 2];
	        if (($30 | 0) != 0) {
	          var $32$0 = $30;
	          var $32$1 = 0;
	          var $carry_0$1 = 0;
	          var $carry_0$0 = 0;
	          var $x_1 = $23;
	          var $xc_0 = $xc0_05;
	          while (1) {
	            var $xc_0;
	            var $x_1;
	            var $carry_0$0;
	            var $carry_0$1;
	            var $34 = $x_1 + 4 | 0;
	            var $36$0 = HEAP32[$x_1 >> 2];
	            var $37$0 = (i64Math.multiply($36$0, 0, $32$0, $32$1), i64Math.result[0]);
	            var $37$1 = i64Math.result[1];
	            var $39$0 = HEAP32[$xc_0 >> 2];
	            var $40$0 = (i64Math.add($39$0, 0, $carry_0$0, $carry_0$1), i64Math.result[0]);
	            var $40$1 = i64Math.result[1];
	            var $41$0 = (i64Math.add($40$0, $40$1, $37$0, $37$1), i64Math.result[0]);
	            var $41$1 = i64Math.result[1];
	            var $42$0 = $41$1;
	            var $43 = $41$0;
	            var $44 = $xc_0 + 4 | 0;
	            HEAP32[$xc_0 >> 2] = $43;
	            if ($34 >>> 0 >= $24 >>> 0) {
	              break;
	            }
	            var $carry_0$1 = 0;
	            var $carry_0$0 = $42$0;
	            var $x_1 = $34;
	            var $xc_0 = $44;
	          }
	          HEAP32[$44 >> 2] = $42$0;
	        }
	        if ($29 >>> 0 >= $25 >>> 0) {
	          var $wc_0 = $12;
	          var $xc_1 = $19;
	          break $_$100;
	        }
	        var $xb_04 = $29;
	        var $xc0_05 = $xc0_05 + 4 | 0;
	      }
	    } else {
	      var $wc_0 = $12;
	      var $xc_1 = $19;
	      __label__ = 11;
	    }
	  } while (0);
	  while (1) {
	    var $xc_1;
	    var $wc_0;
	    if (($wc_0 | 0) <= 0) {
	      break;
	    }
	    var $53 = $xc_1 - 4 | 0;
	    if ((HEAP32[$53 >> 2] | 0) != 0) {
	      break;
	    }
	    var $wc_0 = $wc_0 - 1 | 0;
	    var $xc_1 = $53;
	  }
	  var $57 = $17 + 16 | 0;
	  HEAP32[$57 >> 2] = $wc_0;
	  return $17;
	  return null;
	}

	_mult["X"] = 1;

	function _Bfree($v) {
	  var $1 = $v;
	  _ckd_free($1);
	  return;
	  return;
	}

	function _lshift($b, $k) {
	  var $1 = $k >> 5;
	  var $3 = HEAP32[$b + 4 >> 2];
	  var $4 = $b + 16 | 0;
	  var $6 = HEAP32[$4 >> 2] + $1 | 0;
	  var $7 = $6 + 1 | 0;
	  var $9 = HEAP32[$b + 8 >> 2];
	  var $10 = ($7 | 0) > ($9 | 0);
	  $_$116 : do {
	    if ($10) {
	      var $k1_04 = $3;
	      var $i_05 = $9;
	      while (1) {
	        var $i_05;
	        var $k1_04;
	        var $11 = $k1_04 + 1 | 0;
	        var $12 = $i_05 << 1;
	        if (($7 | 0) <= ($12 | 0)) {
	          var $k1_0_lcssa = $11;
	          break $_$116;
	        }
	        var $k1_04 = $11;
	        var $i_05 = $12;
	      }
	    } else {
	      var $k1_0_lcssa = $3;
	    }
	  } while (0);
	  var $k1_0_lcssa;
	  var $14 = _Balloc($k1_0_lcssa);
	  var $15 = $14 + 20 | 0;
	  if (($1 | 0) > 0) {
	    var $19 = $k >> 3 & -4;
	    var $uglygep = $19 + ($14 + 20) | 0;
	    var $scevgep13 = $15;
	    _memset($scevgep13, 0, $19, 4);
	    var $x1_0_lcssa = $uglygep;
	  } else {
	    var $x1_0_lcssa = $15;
	  }
	  var $x1_0_lcssa;
	  var $22 = $b + 20 | 0;
	  var $24 = (HEAP32[$4 >> 2] << 2) + $b + 20 | 0;
	  var $25 = $k & 31;
	  var $26 = ($25 | 0) == 0;
	  $_$123 : do {
	    if ($26) {
	      var $x1_2 = $x1_0_lcssa;
	      var $x_1 = $22;
	      while (1) {
	        var $x_1;
	        var $x1_2;
	        var $41 = $x_1 + 4 | 0;
	        var $42 = HEAP32[$x_1 >> 2];
	        HEAP32[$x1_2 >> 2] = $42;
	        if ($41 >>> 0 >= $24 >>> 0) {
	          var $n1_0 = $7;
	          break $_$123;
	        }
	        var $x1_2 = $x1_2 + 4 | 0;
	        var $x_1 = $41;
	      }
	    } else {
	      var $28 = 32 - $25 | 0;
	      var $z_0 = 0;
	      var $x1_1 = $x1_0_lcssa;
	      var $x_0 = $22;
	      while (1) {
	        var $x_0;
	        var $x1_1;
	        var $z_0;
	        var $32 = HEAP32[$x_0 >> 2] << $25 | $z_0;
	        var $33 = $x1_1 + 4 | 0;
	        HEAP32[$x1_1 >> 2] = $32;
	        var $34 = $x_0 + 4 | 0;
	        var $36 = HEAPU32[$x_0 >> 2] >>> ($28 >>> 0);
	        if ($34 >>> 0 >= $24 >>> 0) {
	          break;
	        }
	        var $z_0 = $36;
	        var $x1_1 = $33;
	        var $x_0 = $34;
	      }
	      HEAP32[$33 >> 2] = $36;
	      var $_ = ($36 | 0) == 0 ? $7 : $6 + 2 | 0;
	      var $n1_0 = $_;
	    }
	  } while (0);
	  var $n1_0;
	  HEAP32[$14 + 16 >> 2] = $n1_0 - 1 | 0;
	  _Bfree($b);
	  return $14;
	  return null;
	}

	_lshift["X"] = 1;

	function _diff($a, $b) {
	  var __label__;
	  var $1 = _cmp($a, $b);
	  if (($1 | 0) == 0) {
	    var $4 = _Balloc(0);
	    HEAP32[$4 + 16 >> 2] = 1;
	    HEAP32[$4 + 20 >> 2] = 0;
	    var $_0 = $4;
	  } else {
	    var $8 = ($1 | 0) < 0;
	    var $_lobit = $1 >>> 31;
	    var $a_b = $8 ? $a : $b;
	    var $b_a = $8 ? $b : $a;
	    var $10 = HEAP32[$b_a + 4 >> 2];
	    var $11 = _Balloc($10);
	    var $12 = $11 + 12 | 0;
	    HEAP32[$12 >> 2] = $_lobit;
	    var $14 = HEAPU32[$b_a + 16 >> 2];
	    var $19 = (HEAP32[$a_b + 16 >> 2] << 2) + $a_b + 20 | 0;
	    var $xa_0 = $b_a + 20 | 0;
	    var $borrow_0$1 = 0;
	    var $borrow_0$0 = 0;
	    var $xb_0 = $a_b + 20 | 0;
	    var $xc_0 = $11 + 20 | 0;
	    while (1) {
	      var $xc_0;
	      var $xb_0;
	      var $borrow_0$0;
	      var $borrow_0$1;
	      var $xa_0;
	      var $22 = $xa_0 + 4 | 0;
	      var $24$0 = HEAP32[$xa_0 >> 2];
	      var $25 = $xb_0 + 4 | 0;
	      var $27$0 = HEAP32[$xb_0 >> 2];
	      var $28$0 = (i64Math.subtract($24$0, 0, $27$0, 0), i64Math.result[0]);
	      var $28$1 = i64Math.result[1];
	      var $29$0 = (i64Math.subtract($28$0, $28$1, $borrow_0$0, $borrow_0$1), i64Math.result[0]);
	      var $29$1 = i64Math.result[1];
	      var $31$0 = $29$1 & 1;
	      var $31$1 = 0 & 0;
	      var $32 = $29$0;
	      var $33 = $xc_0 + 4 | 0;
	      HEAP32[$xc_0 >> 2] = $32;
	      if ($25 >>> 0 >= $19 >>> 0) {
	        break;
	      }
	      var $xa_0 = $22;
	      var $borrow_0$1 = $31$1;
	      var $borrow_0$0 = $31$0;
	      var $xb_0 = $25;
	      var $xc_0 = $33;
	    }
	    var $35 = ($14 << 2) + $b_a + 20 | 0;
	    var $36 = $22 >>> 0 < $35 >>> 0;
	    $_$138 : do {
	      if ($36) {
	        var $xc_14 = $33;
	        var $borrow_15$1 = $31$1;
	        var $borrow_15$0 = $31$0;
	        var $xa_16 = $22;
	        while (1) {
	          var $xa_16;
	          var $borrow_15$0;
	          var $borrow_15$1;
	          var $xc_14;
	          var $37 = $xa_16 + 4 | 0;
	          var $39$0 = HEAP32[$xa_16 >> 2];
	          var $40$0 = (i64Math.subtract($39$0, 0, $borrow_15$0, $borrow_15$1), i64Math.result[0]);
	          var $40$1 = i64Math.result[1];
	          var $42$0 = $40$1 & 1;
	          var $43 = $40$0;
	          var $44 = $xc_14 + 4 | 0;
	          HEAP32[$xc_14 >> 2] = $43;
	          if ($37 >>> 0 >= $35 >>> 0) {
	            var $wa_0 = $14;
	            var $xc_2 = $44;
	            break $_$138;
	          }
	          var $xc_14 = $44;
	          var $borrow_15$1 = 0 & 0;
	          var $borrow_15$0 = $42$0;
	          var $xa_16 = $37;
	        }
	      } else {
	        var $wa_0 = $14;
	        var $xc_2 = $33;
	        __label__ = 8;
	      }
	    } while (0);
	    while (1) {
	      var $xc_2;
	      var $wa_0;
	      var $46 = $xc_2 - 4 | 0;
	      if ((HEAP32[$46 >> 2] | 0) != 0) {
	        break;
	      }
	      var $wa_0 = $wa_0 - 1 | 0;
	      var $xc_2 = $46;
	    }
	    var $51 = $11 + 16 | 0;
	    HEAP32[$51 >> 2] = $wa_0;
	    var $_0 = $11;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_diff["X"] = 1;

	function _ratio($a, $b) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 8;
	  var $ka = __stackBase__;
	  var $kb = __stackBase__ + 4;
	  var $1 = _b2d($a, $ka);
	  tempDoubleF64[0] = $1;
	  var $2$0 = tempDoubleI32[0];
	  var $2$1 = tempDoubleI32[1];
	  var $3 = _b2d($b, $kb);
	  tempDoubleF64[0] = $3;
	  var $4$0 = tempDoubleI32[0];
	  var $4$1 = tempDoubleI32[1];
	  var $14 = (HEAP32[$a + 16 >> 2] - HEAP32[$b + 16 >> 2] << 5) + (HEAP32[$ka >> 2] - HEAP32[$kb >> 2]) | 0;
	  if (($14 | 0) > 0) {
	    var $da_0$1 = ($14 << 20) + $2$1 | $2$1 & 0;
	    var $da_0$0 = 0 | $2$0 & -1;
	    var $db_0$1 = $4$1;
	    var $db_0$0 = $4$0;
	  } else {
	    var $da_0$1 = $2$1;
	    var $da_0$0 = $2$0;
	    var $db_0$1 = $14 * -1048576 + $4$1 | $4$1 & 0;
	    var $db_0$0 = 0 | $4$0 & -1;
	  }
	  var $db_0$0;
	  var $db_0$1;
	  var $da_0$0;
	  var $da_0$1;
	  var $31 = (tempDoubleI32[0] = $da_0$0, tempDoubleI32[1] = $da_0$1, tempDoubleF64[0]);
	  var $32 = (tempDoubleI32[0] = $db_0$0, tempDoubleI32[1] = $db_0$1, tempDoubleF64[0]);
	  var $33 = $31 / $32;
	  STACKTOP = __stackBase__;
	  return $33;
	  return null;
	}

	_ratio["X"] = 1;

	function _b2d($a, $e) {
	  var $1 = $a + 20 | 0;
	  var $3 = HEAPU32[$a + 16 >> 2];
	  var $_sum = $3 - 1 | 0;
	  var $4 = ($_sum << 2) + $a + 20 | 0;
	  var $5 = HEAPU32[$4 >> 2];
	  var $6 = _hi0bits($5);
	  HEAP32[$e >> 2] = 32 - $6 | 0;
	  if (($6 | 0) < 11) {
	    var $10 = 11 - $6 | 0;
	    if (($_sum | 0) > 0) {
	      var $20 = HEAP32[$a + ($3 - 2 << 2) + 20 >> 2];
	    } else {
	      var $20 = 0;
	    }
	    var $20;
	    var $d_0$1 = 0 | ($5 >>> ($10 >>> 0) | 1072693248);
	    var $d_0$0 = $20 >>> ($10 >>> 0) | $5 << $6 + 21 | 0;
	  } else {
	    if (($_sum | 0) > 0) {
	      var $29 = ($3 - 2 << 2) + $a + 20 | 0;
	      var $32 = HEAP32[$29 >> 2];
	      var $xa_0 = $29;
	    } else {
	      var $32 = 0;
	      var $xa_0 = $4;
	    }
	    var $xa_0;
	    var $32;
	    var $33 = $6 - 11 | 0;
	    if (($33 | 0) == 0) {
	      var $d_0$1 = 0 | ($5 | 1072693248);
	      var $d_0$0 = $32 | 0;
	    } else {
	      var $37 = 43 - $6 | 0;
	      if ($xa_0 >>> 0 > $1 >>> 0) {
	        var $48 = HEAP32[$xa_0 - 4 >> 2];
	      } else {
	        var $48 = 0;
	      }
	      var $48;
	      var $d_0$1 = 0 | ($5 << $33 | $32 >>> ($37 >>> 0) | 1072693248);
	      var $d_0$0 = $48 >>> ($37 >>> 0) | $32 << $33 | 0;
	    }
	  }
	  var $d_0$0;
	  var $d_0$1;
	  var $59 = (tempDoubleI32[0] = $d_0$0, tempDoubleI32[1] = $d_0$1, tempDoubleF64[0]);
	  return $59;
	  return null;
	}

	_b2d["X"] = 1;

	function _hi0bits($x) {
	  var __label__;
	  var $1 = $x >>> 0 > 65535;
	  var $_ = $1 ? 0 : 16;
	  var $x_ = $1 ? $x : $x << 16;
	  if ($x_ >>> 0 > 16777215) {
	    var $_1 = $x_;
	    var $k_1 = $_;
	  } else {
	    var $_1 = $x_ << 8;
	    var $k_1 = $_ | 8;
	  }
	  var $k_1;
	  var $_1;
	  if ($_1 >>> 0 > 268435455) {
	    var $_2 = $_1;
	    var $k_2 = $k_1;
	  } else {
	    var $_2 = $_1 << 4;
	    var $k_2 = $k_1 + 4 | 0;
	  }
	  var $k_2;
	  var $_2;
	  if ($_2 >>> 0 > 1073741823) {
	    var $_3 = $_2;
	    var $k_3 = $k_2;
	  } else {
	    var $_3 = $_2 << 2;
	    var $k_3 = $k_2 + 2 | 0;
	  }
	  var $k_3;
	  var $_3;
	  var $18 = ($_3 | 0) < 0;
	  do {
	    if ($18) {
	      var $k_4 = $k_3;
	      __label__ = 10;
	    } else {
	      if (($_3 & 1073741824 | 0) == 0) {
	        var $_0 = 32;
	        __label__ = 11;
	        break;
	      }
	      var $k_4 = $k_3 + 1 | 0;
	      __label__ = 10;
	      break;
	    }
	  } while (0);
	  if (__label__ == 10) {
	    var $k_4;
	    var $_0 = $k_4;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lo0bits($y) {
	  var $1 = HEAPU32[$y >> 2];
	  var $3 = ($1 & 7 | 0) == 0;
	  do {
	    if ($3) {
	      var $16 = ($1 & 65535 | 0) == 0;
	      var $_ = $16 ? 16 : 0;
	      var $_1 = $16 ? $1 >>> 16 : $1;
	      if (($_1 & 255 | 0) == 0) {
	        var $x_1 = $_1 >>> 8;
	        var $k_1 = $_ | 8;
	      } else {
	        var $x_1 = $_1;
	        var $k_1 = $_;
	      }
	      var $k_1;
	      var $x_1;
	      if (($x_1 & 15 | 0) == 0) {
	        var $x_2 = $x_1 >>> 4;
	        var $k_2 = $k_1 + 4 | 0;
	      } else {
	        var $x_2 = $x_1;
	        var $k_2 = $k_1;
	      }
	      var $k_2;
	      var $x_2;
	      if (($x_2 & 3 | 0) == 0) {
	        var $x_3 = $x_2 >>> 2;
	        var $k_3 = $k_2 + 2 | 0;
	      } else {
	        var $x_3 = $x_2;
	        var $k_3 = $k_2;
	      }
	      var $k_3;
	      var $x_3;
	      if (($x_3 & 1 | 0) == 0) {
	        var $40 = $x_3 >>> 1;
	        if (($40 | 0) == 0) {
	          var $_0 = 32;
	          break;
	        }
	        var $x_4 = $40;
	        var $k_4 = $k_3 + 1 | 0;
	      } else {
	        var $x_4 = $x_3;
	        var $k_4 = $k_3;
	      }
	      var $k_4;
	      var $x_4;
	      HEAP32[$y >> 2] = $x_4;
	      var $_0 = $k_4;
	    } else {
	      if (($1 & 1 | 0) != 0) {
	        var $_0 = 0;
	        break;
	      }
	      if (($1 & 2 | 0) == 0) {
	        HEAP32[$y >> 2] = $1 >>> 2;
	        var $_0 = 2;
	      } else {
	        HEAP32[$y >> 2] = $1 >>> 1;
	        var $_0 = 1;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_lo0bits["X"] = 1;

	function _path_is_absolute($path_val) {
	  return $path_val << 24 >> 24 == 47 & 1;
	  return null;
	}

	function _init_genrand($s) {
	  HEAP32[_mt >> 2] = $s;
	  HEAP32[_mti >> 2] = 1;
	  var $3 = 1;
	  var $2 = $s;
	  while (1) {
	    var $2;
	    var $3;
	    var $7 = ($2 >>> 30 ^ $2) * 1812433253 + $3 | 0;
	    HEAP32[_mt + ($3 << 2) >> 2] = $7;
	    var $9 = $3 + 1 | 0;
	    if (($9 | 0) == 624) {
	      break;
	    }
	    var $3 = $9;
	    var $2 = $7;
	  }
	  HEAP32[_mti >> 2] = 624;
	  return;
	  return;
	}

	function _glist_count($g) {
	  var $1 = ($g | 0) == 0;
	  $_$127 : do {
	    if ($1) {
	      var $n_0_lcssa = 0;
	    } else {
	      var $gn_01 = $g;
	      var $n_02 = 0;
	      while (1) {
	        var $n_02;
	        var $gn_01;
	        var $3 = HEAP32[$gn_01 + 8 >> 2];
	        var $4 = $n_02 + 1 | 0;
	        if (($3 | 0) == 0) {
	          var $n_0_lcssa = $4;
	          break $_$127;
	        }
	        var $gn_01 = $3;
	        var $n_02 = $4;
	      }
	    }
	  } while (0);
	  var $n_0_lcssa;
	  return $n_0_lcssa;
	  return null;
	}

	function _glist_reverse($g) {
	  var $1 = ($g | 0) == 0;
	  $_$132 : do {
	    if ($1) {
	      var $rev_0_lcssa = 0;
	    } else {
	      var $gn_01 = $g;
	      var $rev_02 = 0;
	      while (1) {
	        var $rev_02;
	        var $gn_01;
	        var $2 = $gn_01 + 8 | 0;
	        var $3 = HEAP32[$2 >> 2];
	        HEAP32[$2 >> 2] = $rev_02;
	        if (($3 | 0) == 0) {
	          var $rev_0_lcssa = $gn_01;
	          break $_$132;
	        }
	        var $rev_02 = $gn_01;
	        var $gn_01 = $3;
	      }
	    }
	  } while (0);
	  var $rev_0_lcssa;
	  return $rev_0_lcssa;
	  return null;
	}

	function _key2hash($h, $key) {
	  var $3 = (HEAP32[$h + 12 >> 2] | 0) == 0;
	  var $4 = HEAPU8[$key];
	  var $5 = $4 << 24 >> 24 == 0;
	  $_$158 : do {
	    if ($3) {
	      if ($5) {
	        var $hash_2 = 0;
	        break;
	      }
	      var $cp_17 = $key;
	      var $s_28 = 0;
	      var $hash_19 = 0;
	      var $19 = $4;
	      while (1) {
	        var $19;
	        var $hash_19;
	        var $s_28;
	        var $cp_17;
	        var $22 = ($19 << 24 >> 24 << $s_28) + $hash_19 | 0;
	        var $23 = $s_28 + 5 | 0;
	        var $_1 = ($23 | 0) > 24 ? $s_28 - 19 | 0 : $23;
	        var $26 = $cp_17 + 1 | 0;
	        var $27 = HEAPU8[$26];
	        if ($27 << 24 >> 24 == 0) {
	          var $hash_2 = $22;
	          break $_$158;
	        }
	        var $cp_17 = $26;
	        var $s_28 = $_1;
	        var $hash_19 = $22;
	        var $19 = $27;
	      }
	    } else {
	      if ($5) {
	        var $hash_2 = 0;
	        break;
	      }
	      var $cp_02 = $key;
	      var $s_03 = 0;
	      var $hash_04 = 0;
	      var $6 = $4;
	      while (1) {
	        var $6;
	        var $hash_04;
	        var $s_03;
	        var $cp_02;
	        var $9 = ($6 - 97 & 255 & 255) < 26 ? $6 - 32 & 255 : $6;
	        var $12 = (($9 & 255) << $s_03) + $hash_04 | 0;
	        var $13 = $s_03 + 5 | 0;
	        var $_ = ($13 | 0) > 24 ? $s_03 - 19 | 0 : $13;
	        var $16 = $cp_02 + 1 | 0;
	        var $17 = HEAPU8[$16];
	        if ($17 << 24 >> 24 == 0) {
	          var $hash_2 = $12;
	          break $_$158;
	        }
	        var $cp_02 = $16;
	        var $s_03 = $_;
	        var $hash_04 = $12;
	        var $6 = $17;
	      }
	    }
	  } while (0);
	  var $hash_2;
	  return ($hash_2 >>> 0) % (HEAPU32[$h + 4 >> 2] >>> 0);
	  return null;
	}

	function _multadd($b, $m, $a) {
	  var $1 = $b + 16 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $4$1 = ($a | 0) < 0 ? -1 : 0;
	  var $5$0 = $m;
	  var $5$1 = ($m | 0) < 0 ? -1 : 0;
	  var $carry_0$1 = $4$1;
	  var $carry_0$0 = $a;
	  var $x_0 = $b + 20 | 0;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    var $x_0;
	    var $carry_0$0;
	    var $carry_0$1;
	    var $8$0 = HEAP32[$x_0 >> 2];
	    var $9$0 = (i64Math.multiply($8$0, 0, $5$0, $5$1), i64Math.result[0]);
	    var $9$1 = i64Math.result[1];
	    var $10$0 = (i64Math.add($9$0, $9$1, $carry_0$0, $carry_0$1), i64Math.result[0]);
	    var $10$1 = i64Math.result[1];
	    var $11$0 = $10$1;
	    var $11$1 = 0;
	    var $12 = $10$0;
	    HEAP32[$x_0 >> 2] = $12;
	    var $14 = $i_0 + 1 | 0;
	    if (($14 | 0) >= ($2 | 0)) {
	      break;
	    }
	    var $carry_0$1 = $11$1;
	    var $carry_0$0 = $11$0;
	    var $x_0 = $x_0 + 4 | 0;
	    var $i_0 = $14;
	  }
	  if ($11$0 == 0 && $11$1 == 0) {
	    var $_1 = $b;
	  } else {
	    if (($2 | 0) < (HEAP32[$b + 8 >> 2] | 0)) {
	      var $_0 = $b;
	    } else {
	      var $25 = HEAP32[$b + 4 >> 2] + 1 | 0;
	      var $26 = _Balloc($25);
	      var $28 = $26 + 12 | 0;
	      var $30 = $b + 12 | 0;
	      var $33 = (HEAP32[$1 >> 2] << 2) + 8 | 0;
	      _memcpy($28, $30, $33, 1);
	      _Bfree($b);
	      var $_0 = $26;
	    }
	    var $_0;
	    var $36 = $2 + 1 | 0;
	    var $37 = ($2 << 2) + $_0 + 20 | 0;
	    HEAP32[$37 >> 2] = $11$0;
	    HEAP32[$_0 + 16 >> 2] = $36;
	    var $_1 = $_0;
	  }
	  var $_1;
	  return $_1;
	  return null;
	}

	_multadd["X"] = 1;

	function _logfp_index_alloc() {
	  var $1 = _pthread_key_create(_logfp_index, 0);
	  return;
	  return;
	}

	function _err_get_logfp() {
	  var $1 = _pthread_once(_logfp_index_once, 20);
	  var $2 = HEAP32[_logfp_index >> 2];
	  var $3 = _pthread_getspecific($2);
	  var $magicptr = $3;
	  if (($magicptr | 0) == 0) {
	    var $_0 = HEAP32[_stderr >> 2];
	  } else if (($magicptr | 0) == -1) {
	    var $_0 = 0;
	  } else {
	    var $_0 = $3;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _internal_set_logfp($fh) {
	  var $2 = HEAP32[_logfp_index >> 2];
	  var $4 = ($fh | 0) == 0 ? -1 : $fh;
	  var $5 = _pthread_setspecific($2, $4);
	  return;
	  return;
	}

	function _err_set_logfile($file) {
	  var $1 = _fopen($file, STRING_TABLE.__str2204 | 0);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if (!$2) {
	      var $4 = _err_get_logfp();
	      _internal_set_logfp($1);
	      if (($4 | 0) == 0 | ($4 | 0) == (HEAP32[_stdout >> 2] | 0) | ($4 | 0) == (HEAP32[_stderr >> 2] | 0)) {
	        break;
	      }
	      var $11 = _fclose($4);
	    }
	  } while (0);
	  return;
	  return;
	}

	function __E__pr_info_header_wofn() {
	  var __stackBase__ = STACKTOP;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    var $4 = _fprintf($1, STRING_TABLE.__str12205 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = STRING_TABLE.__str22571 | 0, tempInt));
	    var $5 = _fflush($1);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function __E__pr_header($f, $ln, $msg) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    var $4 = _strrchr($f, 92);
	    if (($4 | 0) == 0) {
	      var $7 = _strrchr($f, 47);
	      var $fname_0 = $7;
	    } else {
	      var $fname_0 = $4;
	    }
	    var $fname_0;
	    var $11 = ($fname_0 | 0) == 0 ? $f : $fname_0 + 1 | 0;
	    var $12 = _fprintf($1, STRING_TABLE.__str22206 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $msg, HEAP32[tempInt + 4 >> 2] = $11, HEAP32[tempInt + 8 >> 2] = $ln, tempInt));
	    var $13 = _fflush($1);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function __E__pr_info_header($f, $ln) {
	  var __stackBase__ = STACKTOP;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    var $4 = _strrchr($f, 92);
	    if (($4 | 0) == 0) {
	      var $7 = _strrchr($f, 47);
	      var $fname_0 = $7;
	    } else {
	      var $fname_0 = $4;
	    }
	    var $fname_0;
	    var $11 = ($fname_0 | 0) == 0 ? $f : $fname_0 + 1 | 0;
	    var $12 = _fprintf($1, STRING_TABLE.__str32207 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str22571 | 0, HEAP32[tempInt + 4 >> 2] = $11, HEAP32[tempInt + 8 >> 2] = $ln, tempInt));
	    var $13 = _fflush($1);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function __E__pr_warn($fmt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $pvar = __stackBase__;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    HEAP32[$pvar >> 2] = arguments[__E__pr_warn.length];
	    var $5 = HEAP32[$pvar >> 2];
	    var $6 = _vfprintf($1, $fmt, $5);
	    var $7 = _fflush($1);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function __E__pr_info($fmt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $pvar = __stackBase__;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    HEAP32[$pvar >> 2] = arguments[__E__pr_info.length];
	    var $5 = HEAP32[$pvar >> 2];
	    var $6 = _vfprintf($1, $fmt, $5);
	    var $7 = _fflush($1);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function __E__sys_error($fmt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $pvar = __stackBase__;
	  var $1 = ___errno();
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = _err_get_logfp();
	  if (($3 | 0) != 0) {
	    HEAP32[$pvar >> 2] = arguments[__E__sys_error.length];
	    var $7 = HEAP32[$pvar >> 2];
	    var $8 = _vfprintf($3, $fmt, $7);
	    var $9 = _strerror($2);
	    var $10 = _fprintf($3, STRING_TABLE.__str52209 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $9, tempInt));
	    var $11 = _fflush($3);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _genrand_seed($s) {
	  _init_genrand($s);
	  return;
	  return;
	}

	function _genrand_int32() {
	  var $1 = HEAP32[_mti >> 2];
	  if (($1 | 0) > 623) {
	    if (($1 | 0) == 625) {
	      _init_genrand(5489);
	    }
	    var $kk_03 = 0;
	    var $7 = HEAP32[_mt >> 2];
	    while (1) {
	      var $7;
	      var $kk_03;
	      var $10 = $kk_03 + 1 | 0;
	      var $12 = HEAPU32[_mt + ($10 << 2) >> 2];
	      var $23 = HEAP32[_genrand_int32_mag01 + (($12 & 1) << 2) >> 2] ^ HEAP32[_mt + ($kk_03 + 397 << 2) >> 2] ^ ($12 & 2147483646 | $7 & -2147483648) >>> 1;
	      HEAP32[_mt + ($kk_03 << 2) >> 2] = $23;
	      if (($10 | 0) == 227) {
	        break;
	      }
	      var $kk_03 = $10;
	      var $7 = $12;
	    }
	    var $kk_11 = 227;
	    var $25 = HEAP32[_mt + 908 >> 2];
	    while (1) {
	      var $25;
	      var $kk_11;
	      var $28 = $kk_11 + 1 | 0;
	      var $30 = HEAPU32[_mt + ($28 << 2) >> 2];
	      var $41 = HEAP32[_genrand_int32_mag01 + (($30 & 1) << 2) >> 2] ^ HEAP32[_mt + ($kk_11 - 227 << 2) >> 2] ^ ($30 & 2147483646 | $25 & -2147483648) >>> 1;
	      HEAP32[_mt + ($kk_11 << 2) >> 2] = $41;
	      if (($28 | 0) == 623) {
	        break;
	      }
	      var $kk_11 = $28;
	      var $25 = $30;
	    }
	    var $44 = HEAPU32[_mt >> 2];
	    var $53 = HEAP32[_genrand_int32_mag01 + (($44 & 1) << 2) >> 2] ^ HEAP32[_mt + 1584 >> 2] ^ ($44 & 2147483646 | HEAP32[_mt + 2492 >> 2] & -2147483648) >>> 1;
	    HEAP32[_mt + 2492 >> 2] = $53;
	    HEAP32[_mti >> 2] = 0;
	    var $56 = 1;
	    var $55 = $44;
	  } else {
	    var $56 = $1 + 1 | 0;
	    var $55 = HEAP32[_mt + ($1 << 2) >> 2];
	  }
	  var $55;
	  var $56;
	  HEAP32[_mti >> 2] = $56;
	  var $58 = $55 >>> 11 ^ $55;
	  var $61 = $58 << 7 & -1658038656 ^ $58;
	  var $64 = $61 << 15 & -272236544 ^ $61;
	  return $64 >>> 18 ^ $64;
	  return null;
	}

	_genrand_int32["X"] = 1;

	function _genrand_int31() {
	  var $1 = _genrand_int32();
	  return $1 >>> 1;
	  return null;
	}

	function _glist_add_ptr($g, $ptr) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str2238 | 0, 78);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $ptr;
	  HEAP32[$1 + 8 >> 2] = $g;
	  return $2;
	  return null;
	}

	function _glist_add_int32($g, $val) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str2238 | 0, 90);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $val;
	  HEAP32[$1 + 8 >> 2] = $g;
	  return $2;
	  return null;
	}

	function _glist_add_float32($g, $val) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str2238 | 0, 114);
	  var $2 = $1;
	  var $4 = $1;
	  tempDoubleF64[0] = $val, HEAP32[$4 >> 2] = tempDoubleI32[0], HEAP32[$4 + 4 >> 2] = tempDoubleI32[1];
	  HEAP32[$1 + 8 >> 2] = $g;
	  return $2;
	  return null;
	}

	function _glist_free($g) {
	  var $1 = ($g | 0) == 0;
	  $_$122 : do {
	    if (!$1) {
	      var $_01 = $g;
	      while (1) {
	        var $_01;
	        var $3 = HEAP32[$_01 + 8 >> 2];
	        _ckd_free($_01);
	        if (($3 | 0) == 0) {
	          break $_$122;
	        }
	        var $_01 = $3;
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	function _glist_insert_ptr($gn, $ptr) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str2238 | 0, 191);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $ptr;
	  var $4 = $gn + 8 | 0;
	  var $5 = HEAP32[$4 >> 2];
	  HEAP32[$1 + 8 >> 2] = $5;
	  HEAP32[$4 >> 2] = $2;
	  return $2;
	  return null;
	}

	function _gnode_free($gn, $pred) {
	  var $2 = HEAP32[$gn + 8 >> 2];
	  if (($pred | 0) != 0) {
	    var $5 = $pred + 8 | 0;
	    if ((HEAP32[$5 >> 2] | 0) != ($gn | 0)) {
	      ___assert_func(STRING_TABLE.__str2238 | 0, 263, STRING_TABLE.___func___gnode_free | 0, STRING_TABLE.__str12239 | 0);
	    }
	    HEAP32[$5 >> 2] = $2;
	  }
	  var $11 = $gn;
	  _ckd_free($11);
	  return $2;
	  return null;
	}

	function _hash_table_new($size, $casearg) {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 16, STRING_TABLE.__str2256 | 0, 162), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $4 = ($size >> 1) + $size | 0;
	  var $5 = _prime_size($4);
	  HEAP32[$1$s2 + 1] = $5;
	  HEAP32[$1$s2 + 3] = ($casearg | 0) == 1 & 1;
	  var $12 = ___ckd_calloc__($5, 16, STRING_TABLE.__str2256 | 0, 165);
	  HEAP32[$1$s2] = $12;
	  return $2;
	  return null;
	}

	function _prime_size($size) {
	  var __stackBase__ = STACKTOP;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    if (($i_0 | 0) == 45) {
	      __E__pr_header(STRING_TABLE.__str2256 | 0, 150, STRING_TABLE.__str212436 | 0);
	      __E__pr_warn(STRING_TABLE.__str92265 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $size, tempInt));
	      var $8 = 900001;
	      break;
	    }
	    var $4 = HEAP32[_prime + ($i_0 << 2) >> 2];
	    if (($4 | 0) >= ($size | 0)) {
	      var $8 = $4;
	      break;
	    }
	    var $i_0 = $i_0 + 1 | 0;
	  }
	  var $8;
	  STACKTOP = __stackBase__;
	  return $8;
	  return null;
	}

	function _hash_table_lookup($h, $key, $val) {
	  var $1 = _key2hash($h, $key);
	  var $2 = _strlen($key);
	  var $3 = _lookup($h, $1, $key, $2);
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = -1;
	    } else {
	      if (($val | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $9 = HEAP32[$3 + 8 >> 2];
	      HEAP32[$val >> 2] = $9;
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _lookup($h, $hash, $key, $len) {
	  var $entry_0$s2;
	  var $entry_1$s2;
	  var $3 = ($hash << 4) + HEAP32[$h >> 2] | 0;
	  var $6 = (HEAP32[$3 >> 2] | 0) == 0;
	  $_$167 : do {
	    if ($6) {
	      var $_0 = 0;
	    } else {
	      if ((HEAP32[$h + 12 >> 2] | 0) == 0) {
	        var $entry_1 = $3, $entry_1$s2 = $entry_1 >> 2;
	        while (1) {
	          var $entry_1;
	          if (($entry_1 | 0) == 0) {
	            var $_0 = 0;
	            break $_$167;
	          }
	          if ((HEAP32[$entry_1$s2 + 1] | 0) == ($len | 0)) {
	            var $entry_1_idx_val = HEAP32[$entry_1$s2];
	            var $27 = _keycmp_case($entry_1_idx_val, $len, $key);
	            if (($27 | 0) == 0) {
	              var $_0 = $entry_1;
	              break $_$167;
	            }
	          }
	          var $entry_1 = HEAP32[$entry_1$s2 + 3], $entry_1$s2 = $entry_1 >> 2;
	        }
	      } else {
	        var $entry_0 = $3, $entry_0$s2 = $entry_0 >> 2;
	        while (1) {
	          var $entry_0;
	          if (($entry_0 | 0) == 0) {
	            var $_0 = 0;
	            break $_$167;
	          }
	          if ((HEAP32[$entry_0$s2 + 1] | 0) == ($len | 0)) {
	            var $entry_0_idx_val = HEAP32[$entry_0$s2];
	            var $17 = _keycmp_nocase($entry_0_idx_val, $len, $key);
	            if (($17 | 0) == 0) {
	              var $_0 = $entry_0;
	              break $_$167;
	            }
	          }
	          var $entry_0 = HEAP32[$entry_0$s2 + 3], $entry_0$s2 = $entry_0 >> 2;
	        }
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _hash_table_lookup_int32($h, $key, $val) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $vval = __stackBase__;
	  var $1 = _hash_table_lookup($h, $key, $vval);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if ($2) {
	      if (($val | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $7 = HEAP32[$vval >> 2];
	      HEAP32[$val >> 2] = $7;
	      var $_0 = 0;
	    } else {
	      var $_0 = $1;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _hash_table_lookup_bkey($h, $key, $val) {
	  var $1 = _makekey($key, 4);
	  var $2 = _key2hash($h, $1);
	  _ckd_free($1);
	  var $3 = _lookup($h, $2, $key, 4);
	  var $4 = ($3 | 0) == 0;
	  do {
	    if ($4) {
	      var $_0 = -1;
	    } else {
	      if (($val | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $9 = HEAP32[$3 + 8 >> 2];
	      HEAP32[$val >> 2] = $9;
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _makekey($data, $len) {
	  var $1 = $len << 1;
	  var $2 = $1 | 1;
	  var $3 = ___ckd_calloc__($2, 1, STRING_TABLE.__str2256 | 0, 228);
	  var $4 = ($len | 0) > 0;
	  $_$194 : do {
	    if ($4) {
	      var $i_01 = 0;
	      var $j_02 = 0;
	      while (1) {
	        var $j_02;
	        var $i_01;
	        var $5 = $data + $i_01 | 0;
	        var $8 = (HEAP8[$5] & 15) + 65 & 255;
	        HEAP8[$3 + $j_02 | 0] = $8;
	        HEAP8[$3 + ($j_02 | 1) | 0] = ((HEAPU8[$5] & 255) >>> 4) + 74 & 255;
	        var $15 = $i_01 + 1 | 0;
	        if (($15 | 0) == ($len | 0)) {
	          var $j_0_lcssa = $1;
	          break $_$194;
	        }
	        var $i_01 = $15;
	        var $j_02 = $j_02 + 2 | 0;
	      }
	    } else {
	      var $j_0_lcssa = 0;
	    }
	  } while (0);
	  var $j_0_lcssa;
	  HEAP8[$3 + $j_0_lcssa | 0] = 0;
	  return $3;
	  return null;
	}

	function __E__die_error($fmt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $pvar = __stackBase__;
	  var $1 = _err_get_logfp();
	  if (($1 | 0) != 0) {
	    HEAP32[$pvar >> 2] = arguments[__E__die_error.length];
	    var $5 = HEAP32[$pvar >> 2];
	    var $6 = _vfprintf($1, $fmt, $5);
	    var $7 = _fflush($1);
	  }
	  _exit(-1);
	}

	function __E__fatal_sys_error($fmt) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $pvar = __stackBase__;
	  var $1 = ___errno();
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = _err_get_logfp();
	  if (($3 | 0) != 0) {
	    HEAP32[$pvar >> 2] = arguments[__E__fatal_sys_error.length];
	    var $7 = HEAP32[$pvar >> 2];
	    var $8 = _vfprintf($3, $fmt, $7);
	    var $9 = _strerror($2);
	    var $10 = _fprintf($3, STRING_TABLE.__str42208 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $9, tempInt));
	    var $11 = _fflush($3);
	  }
	  _exit(-1);
	}

	function _logmath_get_base($lmath_0_3_val) {
	  return $lmath_0_3_val;
	  return null;
	}

	function _logmath_get_zero($lmath_0_8_val) {
	  return $lmath_0_8_val;
	  return null;
	}

	function _logmath_get_width($lmath_0_0_2_val) {
	  return $lmath_0_0_2_val & 255;
	  return null;
	}

	function _logmath_get_shift($lmath_0_0_3_val) {
	  return $lmath_0_0_3_val << 24 >> 24;
	  return null;
	}

	function _logmath_ln_to_log($lmath_0_0_3_val, $lmath_0_6_val, $log_p) {
	  return ($lmath_0_6_val * $log_p & -1) >> ($lmath_0_0_3_val << 24 >> 24);
	  return null;
	}

	function _logmath_log10_to_log($lmath_0_0_3_val, $lmath_0_7_val, $log_p) {
	  return ($lmath_0_7_val * $log_p & -1) >> ($lmath_0_0_3_val << 24 >> 24);
	  return null;
	}

	function _keycmp_nocase($entry_0_0_val, $entry_0_1_val, $key) {
	  var $str_0 = $entry_0_0_val;
	  var $_01 = $key;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    var $_01;
	    var $str_0;
	    if ($i_0 >>> 0 >= $entry_0_1_val >>> 0) {
	      var $_0 = 0;
	      break;
	    }
	    var $4 = HEAPU8[$str_0];
	    var $7 = ($4 - 97 & 255 & 255) < 26 ? $4 - 32 & 255 : $4;
	    var $8 = HEAPU8[$_01];
	    var $11 = ($8 - 97 & 255 & 255) < 26 ? $8 - 32 & 255 : $8;
	    if ($7 << 24 >> 24 != $11 << 24 >> 24) {
	      var $_0 = ($7 << 24 >> 24) - ($11 << 24 >> 24) | 0;
	      break;
	    }
	    var $str_0 = $str_0 + 1 | 0;
	    var $_01 = $_01 + 1 | 0;
	    var $i_0 = $i_0 + 1 | 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _keycmp_case($entry_0_0_val, $entry_0_1_val, $key) {
	  var $str_0 = $entry_0_0_val;
	  var $_01 = $key;
	  var $i_0 = 0;
	  while (1) {
	    var $i_0;
	    var $_01;
	    var $str_0;
	    if ($i_0 >>> 0 >= $entry_0_1_val >>> 0) {
	      var $_0 = 0;
	      break;
	    }
	    var $4 = HEAP8[$str_0];
	    var $5 = HEAPU8[$_01];
	    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
	      var $_0 = ($4 << 24 >> 24) - ($5 << 24 >> 24) | 0;
	      break;
	    }
	    var $str_0 = $str_0 + 1 | 0;
	    var $_01 = $_01 + 1 | 0;
	    var $i_0 = $i_0 + 1 | 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function ___listelem_free__($list, $elem) {
	  var $1 = $elem;
	  var $2 = $list | 0;
	  var $4 = HEAP32[$2 >> 2];
	  HEAP32[$1 >> 2] = $4;
	  HEAP32[$2 >> 2] = $1;
	  var $5 = $list + 28 | 0;
	  var $7 = HEAP32[$5 >> 2] + 1 | 0;
	  HEAP32[$5 >> 2] = $7;
	  return;
	  return;
	}

	function _logmath_retain($lmath) {
	  var $1 = $lmath + 12 | 0;
	  var $3 = HEAP32[$1 >> 2] + 1 | 0;
	  HEAP32[$1 >> 2] = $3;
	  return $lmath;
	  return null;
	}

	function _hash_table_empty($h) {
	  var $17$s2;
	  var $1 = $h + 4 | 0;
	  var $3 = (HEAP32[$1 >> 2] | 0) > 0;
	  $_$2 : do {
	    if ($3) {
	      var $4 = $h | 0;
	      var $i_02 = 0;
	      while (1) {
	        var $i_02;
	        var $6 = HEAP32[$4 >> 2];
	        var $8 = HEAP32[$6 + ($i_02 << 4) + 12 >> 2];
	        if (($8 | 0) == 0) {
	          var $15 = $6;
	        } else {
	          var $e_01 = $8;
	          while (1) {
	            var $e_01;
	            var $11 = HEAP32[$e_01 + 12 >> 2];
	            _ckd_free($e_01);
	            if (($11 | 0) == 0) {
	              break;
	            }
	            var $e_01 = $11;
	          }
	          var $15 = HEAP32[$4 >> 2];
	        }
	        var $15;
	        var $17$s2 = (($i_02 << 4) + $15 | 0) >> 2;
	        HEAP32[$17$s2] = 0;
	        HEAP32[$17$s2 + 1] = 0;
	        HEAP32[$17$s2 + 2] = 0;
	        HEAP32[$17$s2 + 3] = 0;
	        var $18 = $i_02 + 1 | 0;
	        if (($18 | 0) >= (HEAP32[$1 >> 2] | 0)) {
	          break $_$2;
	        }
	        var $i_02 = $18;
	      }
	    }
	  } while (0);
	  HEAP32[$h + 8 >> 2] = 0;
	  return;
	  return;
	}

	function _hash_table_enter($h, $key, $val) {
	  var $1 = _key2hash($h, $key);
	  var $2 = _strlen($key);
	  var $3 = _enter($h, $1, $key, $2, $val, 0);
	  return $3;
	  return null;
	}

	function _enter($h, $hash, $key, $len, $val, $replace) {
	  var $20$s2;
	  var $1 = _lookup($h, $hash, $key, $len);
	  var $2 = ($1 | 0) == 0;
	  do {
	    if ($2) {
	      var $11 = HEAP32[$h >> 2];
	      var $12 = ($hash << 4) + $11 | 0;
	      if ((HEAP32[$12 >> 2] | 0) == 0) {
	        HEAP32[$12 >> 2] = $key;
	        var $16 = ($hash << 4) + $11 + 4 | 0;
	        HEAP32[$16 >> 2] = $len;
	        var $17 = ($hash << 4) + $11 + 8 | 0;
	        HEAP32[$17 >> 2] = $val;
	        var $18 = ($hash << 4) + $11 + 12 | 0;
	        HEAP32[$18 >> 2] = 0;
	      } else {
	        var $20 = ___ckd_calloc__(1, 16, STRING_TABLE.__str2256 | 0, 411), $20$s2 = $20 >> 2;
	        var $21 = $20;
	        HEAP32[$20$s2] = $key;
	        HEAP32[$20$s2 + 1] = $len;
	        HEAP32[$20$s2 + 2] = $val;
	        var $27 = ($hash << 4) + $11 + 12 | 0;
	        var $28 = HEAP32[$27 >> 2];
	        HEAP32[$20$s2 + 3] = $28;
	        HEAP32[$27 >> 2] = $21;
	      }
	      var $32 = $h + 8 | 0;
	      var $34 = HEAP32[$32 >> 2] + 1 | 0;
	      HEAP32[$32 >> 2] = $34;
	      var $_0 = $val;
	    } else {
	      var $4 = $1 + 8 | 0;
	      var $5 = HEAP32[$4 >> 2];
	      if (($replace | 0) == 0) {
	        var $_0 = $5;
	        break;
	      }
	      HEAP32[$1 >> 2] = $key;
	      HEAP32[$4 >> 2] = $val;
	      var $_0 = $5;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _hash_table_replace($h, $key, $val) {
	  var $1 = _key2hash($h, $key);
	  var $2 = _strlen($key);
	  var $3 = _enter($h, $1, $key, $2, $val, 1);
	  return $3;
	  return null;
	}

	function _hash_table_enter_bkey($h, $key, $len, $val) {
	  var $1 = _makekey($key, $len);
	  var $2 = _key2hash($h, $1);
	  _ckd_free($1);
	  var $3 = _enter($h, $2, $key, $len, $val, 0);
	  return $3;
	  return null;
	}

	function _hash_table_replace_bkey($h, $key, $val) {
	  var $1 = _makekey($key, 4);
	  var $2 = _key2hash($h, $1);
	  _ckd_free($1);
	  var $3 = _enter($h, $2, $key, 4, $val, 1);
	  return;
	  return;
	}

	function _hash_table_tolist($h, $count) {
	  var $1 = $h + 4 | 0;
	  var $2 = HEAP32[$1 >> 2];
	  var $3 = ($2 | 0) > 0;
	  $_$27 : do {
	    if ($3) {
	      var $4 = $h | 0;
	      var $g_07 = 0;
	      var $i_08 = 0;
	      var $j_09 = 0;
	      var $5 = $2;
	      while (1) {
	        var $5;
	        var $j_09;
	        var $i_08;
	        var $g_07;
	        var $6 = HEAP32[$4 >> 2];
	        var $7 = ($i_08 << 4) + $6 | 0;
	        if ((HEAP32[$7 >> 2] | 0) == 0) {
	          var $j_2 = $j_09;
	          var $g_2 = $g_07;
	          var $21 = $5;
	        } else {
	          var $12 = $7;
	          var $13 = _glist_add_ptr($g_07, $12);
	          var $j_11 = $j_09 + 1 | 0;
	          var $e_02 = HEAP32[$6 + ($i_08 << 4) + 12 >> 2];
	          var $15 = ($e_02 | 0) == 0;
	          $_$33 : do {
	            if ($15) {
	              var $g_1_lcssa = $13;
	              var $j_1_lcssa = $j_11;
	            } else {
	              var $g_13 = $13;
	              var $j_14 = $j_11;
	              var $e_05 = $e_02;
	              while (1) {
	                var $e_05;
	                var $j_14;
	                var $g_13;
	                var $17 = _glist_add_ptr($g_13, $e_05);
	                var $j_1 = $j_14 + 1 | 0;
	                var $e_0 = HEAP32[$e_05 + 12 >> 2];
	                if (($e_0 | 0) == 0) {
	                  var $g_1_lcssa = $17;
	                  var $j_1_lcssa = $j_1;
	                  break $_$33;
	                }
	                var $g_13 = $17;
	                var $j_14 = $j_1;
	                var $e_05 = $e_0;
	              }
	            }
	          } while (0);
	          var $j_1_lcssa;
	          var $g_1_lcssa;
	          var $j_2 = $j_1_lcssa;
	          var $g_2 = $g_1_lcssa;
	          var $21 = HEAP32[$1 >> 2];
	        }
	        var $21;
	        var $g_2;
	        var $j_2;
	        var $22 = $i_08 + 1 | 0;
	        if (($22 | 0) >= ($21 | 0)) {
	          var $g_0_lcssa = $g_2;
	          var $j_0_lcssa = $j_2;
	          break $_$27;
	        }
	        var $g_07 = $g_2;
	        var $i_08 = $22;
	        var $j_09 = $j_2;
	        var $5 = $21;
	      }
	    } else {
	      var $g_0_lcssa = 0;
	      var $j_0_lcssa = 0;
	    }
	  } while (0);
	  var $j_0_lcssa;
	  var $g_0_lcssa;
	  if (($count | 0) != 0) {
	    HEAP32[$count >> 2] = $j_0_lcssa;
	  }
	  return $g_0_lcssa;
	  return null;
	}

	_hash_table_tolist["X"] = 1;

	function _hash_table_iter($h) {
	  var $1 = ___ckd_calloc__(1, 12, STRING_TABLE.__str2256 | 0, 656);
	  var $2 = $1;
	  HEAP32[$1 >> 2] = $h;
	  var $4 = _hash_table_iter_next($2);
	  return $4;
	  return null;
	}

	function _hash_table_iter_next($itor) {
	  var $8$s2;
	  var $1$s2;
	  var __label__;
	  var $1$s2 = ($itor + 4 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      __label__ = 4;
	    } else {
	      var $6 = HEAP32[$2 + 12 >> 2];
	      HEAP32[$1$s2] = $6;
	      if (($6 | 0) == 0) {
	        __label__ = 4;
	        break;
	      }
	      var $_0 = $itor;
	      __label__ = 11;
	      break;
	    }
	  } while (0);
	  if (__label__ == 4) {
	    var $8$s2 = ($itor + 8 | 0) >> 2;
	    var $_pre6 = HEAP32[$itor >> 2];
	    var $10 = $_pre6 | 0;
	    var $11 = $_pre6 + 4 | 0;
	    var $12 = HEAP32[$8$s2];
	    while (1) {
	      var $12;
	      var $13 = HEAPU32[$11 >> 2];
	      if ($12 >>> 0 >= $13 >>> 0) {
	        break;
	      }
	      if ((HEAP32[HEAP32[$10 >> 2] + ($12 << 4) >> 2] | 0) != 0) {
	        break;
	      }
	      var $21 = $12 + 1 | 0;
	      HEAP32[$8$s2] = $21;
	      var $12 = $21;
	    }
	    if (($12 | 0) == ($13 | 0)) {
	      _hash_table_iter_free($itor);
	      var $_0 = 0;
	    } else {
	      var $26 = ($12 << 4) + HEAP32[$10 >> 2] | 0;
	      HEAP32[$1$s2] = $26;
	      HEAP32[$8$s2] = $12 + 1 | 0;
	      var $_0 = $itor;
	    }
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _hash_table_iter_free($itor) {
	  var $1 = $itor;
	  _ckd_free($1);
	  return;
	  return;
	}

	function _hash_table_free($h) {
	  if (($h | 0) != 0) {
	    var $2 = $h + 4 | 0;
	    var $3 = HEAP32[$2 >> 2];
	    var $4 = ($3 | 0) > 0;
	    var $5 = $h | 0;
	    var $6 = HEAP32[$5 >> 2];
	    $_$61 : do {
	      if ($4) {
	        var $i_02 = 0;
	        var $8 = $6;
	        var $7 = $3;
	        while (1) {
	          var $7;
	          var $8;
	          var $i_02;
	          var $10 = HEAP32[$8 + ($i_02 << 4) + 12 >> 2];
	          if (($10 | 0) == 0) {
	            var $18 = $7;
	            var $17 = $8;
	          } else {
	            var $e_01 = $10;
	            while (1) {
	              var $e_01;
	              var $13 = HEAP32[$e_01 + 12 >> 2];
	              _ckd_free($e_01);
	              if (($13 | 0) == 0) {
	                break;
	              }
	              var $e_01 = $13;
	            }
	            var $18 = HEAP32[$2 >> 2];
	            var $17 = HEAP32[$5 >> 2];
	          }
	          var $17;
	          var $18;
	          var $19 = $i_02 + 1 | 0;
	          if (($19 | 0) >= ($18 | 0)) {
	            var $_lcssa = $17;
	            break $_$61;
	          }
	          var $i_02 = $19;
	          var $8 = $17;
	          var $7 = $18;
	        }
	      } else {
	        var $_lcssa = $6;
	      }
	    } while (0);
	    var $_lcssa;
	    _ckd_free($_lcssa);
	    var $22 = $h;
	    _ckd_free($22);
	  }
	  return;
	  return;
	}

	function _listelem_alloc_init($elemsize) {
	  var $7$s2;
	  var __stackBase__ = STACKTOP;
	  if (($elemsize & 3 | 0) == 0) {
	    var $_01 = $elemsize;
	  } else {
	    var $5 = $elemsize + 3 & -4;
	    __E__pr_header(STRING_TABLE.__str2320 | 0, 93, STRING_TABLE.__str212436 | 0);
	    __E__pr_warn(STRING_TABLE.__str22322 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $elemsize, HEAP32[tempInt + 4 >> 2] = $5, tempInt));
	    var $_01 = $5;
	  }
	  var $_01;
	  var $7 = ___ckd_calloc__(1, 32, STRING_TABLE.__str2320 | 0, 99), $7$s2 = $7 >> 2;
	  var $8 = $7;
	  HEAP32[$7$s2] = 0;
	  HEAP32[$7$s2 + 1] = 0;
	  HEAP32[$7$s2 + 3] = $_01;
	  var $15 = Math.floor(262144 / (($_01 * 50 | 0) >>> 0));
	  HEAP32[$7$s2 + 4] = $15;
	  if (($15 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str2320 | 0, 108, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str42324 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	    _ckd_free($7);
	    var $_0 = 0;
	  } else {
	    HEAP32[$7$s2 + 6] = 0;
	    HEAP32[$7$s2 + 7] = 0;
	    _listelem_add_block($8, STRING_TABLE.__str2320 | 0, 116);
	    var $_0 = $8;
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _listelem_add_block($list, $caller_file, $caller_line) {
	  var $9$s2;
	  var $1$s2;
	  var $1$s2 = ($list + 8 | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if (($2 | 0) == 0) {
	    var $8 = 50;
	  } else {
	    var $8 = HEAP32[$2 >> 2];
	  }
	  var $8;
	  var $9$s2 = ($list + 16 | 0) >> 2;
	  if ((HEAP32[$9$s2] | 0) == 0) {
	    var $13 = $8 << 1;
	    var $15 = HEAPU32[$list + 12 >> 2];
	    if (($15 * $13 | 0) >>> 0 > 262144) {
	      var $19 = Math.floor(262144 / ($15 >>> 0));
	      var $blocksize_0 = $19;
	    } else {
	      var $blocksize_0 = $13;
	    }
	    var $blocksize_0;
	    var $21 = $15 * $blocksize_0 | 0;
	    var $22 = Math.floor(262144 / ($21 >>> 0));
	    HEAP32[$9$s2] = $22;
	    var $blocksize_1 = $blocksize_0;
	    var $24 = $15;
	  } else {
	    var $blocksize_1 = $8;
	    var $24 = HEAP32[$list + 12 >> 2];
	  }
	  var $24;
	  var $blocksize_1;
	  var $25 = $list + 12 | 0;
	  var $26 = ___ckd_calloc__($blocksize_1, $24, $caller_file, $caller_line);
	  var $27 = $26;
	  HEAP32[$list >> 2] = $27;
	  var $29 = $list + 4 | 0;
	  var $30 = HEAP32[$29 >> 2];
	  var $31 = _glist_add_ptr($30, $26);
	  HEAP32[$29 >> 2] = $31;
	  var $32 = HEAP32[$1$s2];
	  var $33 = _glist_add_int32($32, $blocksize_1);
	  HEAP32[$1$s2] = $33;
	  var $j_01 = $blocksize_1 - 1 | 0;
	  var $34 = ($j_01 | 0) == 0;
	  $_$106 : do {
	    if ($34) {
	      var $cpp_0_lcssa = $27;
	    } else {
	      var $cpp_02 = $27;
	      var $cp_03 = $26;
	      var $j_04 = $j_01;
	      while (1) {
	        var $j_04;
	        var $cp_03;
	        var $cpp_02;
	        var $36 = $cp_03 + HEAP32[$25 >> 2] | 0;
	        HEAP32[$cpp_02 >> 2] = $36;
	        var $37 = $36;
	        var $j_0 = $j_04 - 1 | 0;
	        if (($j_0 | 0) == 0) {
	          var $cpp_0_lcssa = $37;
	          break $_$106;
	        }
	        var $cpp_02 = $37;
	        var $cp_03 = $36;
	        var $j_04 = $j_0;
	      }
	    }
	  } while (0);
	  var $cpp_0_lcssa;
	  HEAP32[$cpp_0_lcssa >> 2] = 0;
	  var $40 = HEAP32[$9$s2] - 1 | 0;
	  HEAP32[$9$s2] = $40;
	  var $41 = $list + 20 | 0;
	  var $43 = HEAP32[$41 >> 2] + 1 | 0;
	  HEAP32[$41 >> 2] = $43;
	  return;
	  return;
	}

	_listelem_add_block["X"] = 1;

	function _listelem_alloc_free($list) {
	  if (($list | 0) != 0) {
	    var $3 = $list + 4 | 0;
	    var $gn_01 = HEAP32[$3 >> 2];
	    if (($gn_01 | 0) == 0) {
	      var $10 = 0;
	    } else {
	      var $gn_02 = $gn_01;
	      while (1) {
	        var $gn_02;
	        var $6 = HEAP32[$gn_02 >> 2];
	        _ckd_free($6);
	        var $gn_0 = HEAP32[$gn_02 + 8 >> 2];
	        if (($gn_0 | 0) == 0) {
	          break;
	        }
	        var $gn_02 = $gn_0;
	      }
	      var $10 = HEAP32[$3 >> 2];
	    }
	    var $10;
	    _glist_free($10);
	    var $12 = HEAP32[$list + 8 >> 2];
	    _glist_free($12);
	    var $13 = $list;
	    _ckd_free($13);
	  }
	  return;
	  return;
	}

	function ___listelem_malloc__($list, $caller_file, $caller_line) {
	  var $1$s2;
	  var $1$s2 = ($list | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  if (($2 | 0) == 0) {
	    _listelem_add_block($list, $caller_file, $caller_line);
	    var $6 = HEAP32[$1$s2];
	  } else {
	    var $6 = $2;
	  }
	  var $6;
	  var $8 = HEAP32[$6 >> 2];
	  HEAP32[$1$s2] = $8;
	  var $9 = $list + 24 | 0;
	  var $11 = HEAP32[$9 >> 2] + 1 | 0;
	  HEAP32[$9 >> 2] = $11;
	  return $6;
	  return null;
	}

	function _logmath_init($base, $shift, $use_table) {
	  var $65$s2;
	  var $19$s2;
	  var $12$s2;
	  var $4$s2;
	  var __stackBase__ = STACKTOP;
	  var __label__;
	  var $1 = $base > 1;
	  $_$125 : do {
	    if ($1) {
	      var $4 = ___ckd_calloc__(1, 64, STRING_TABLE.__str2340 | 0, 76), $4$s2 = $4 >> 2;
	      var $5 = $4;
	      HEAP32[$4$s2 + 3] = 1;
	      var $9 = $4 + 20 | 0;
	      tempDoubleF64[0] = $base, HEAP32[$9 >> 2] = tempDoubleI32[0], HEAP32[$9 + 4 >> 2] = tempDoubleI32[1];
	      var $10 = _log($base);
	      var $12$s2 = ($4 + 28 | 0) >> 2;
	      tempDoubleF64[0] = $10, HEAP32[$12$s2] = tempDoubleI32[0], HEAP32[$12$s2 + 1] = tempDoubleI32[1];
	      var $13 = _log10($base);
	      var $15 = $4 + 36 | 0;
	      tempDoubleF64[0] = $13, HEAP32[$15 >> 2] = tempDoubleI32[0], HEAP32[$15 + 4 >> 2] = tempDoubleI32[1];
	      var $16 = (tempDoubleI32[0] = HEAP32[$12$s2], tempDoubleI32[1] = HEAP32[$12$s2 + 1], tempDoubleF64[0]);
	      var $17 = 1 / $16;
	      var $19$s2 = ($4 + 44 | 0) >> 2;
	      tempDoubleF64[0] = $17, HEAP32[$19$s2] = tempDoubleI32[0], HEAP32[$19$s2 + 1] = tempDoubleI32[1];
	      var $22 = $4 + 52 | 0;
	      tempDoubleF64[0] = 1 / $13, HEAP32[$22 >> 2] = tempDoubleI32[0], HEAP32[$22 + 4 >> 2] = tempDoubleI32[1];
	      HEAP8[$4 + 9 | 0] = $shift & 255;
	      HEAP32[$4$s2 + 15] = -2147483648 >> $shift + 2;
	      if (($use_table | 0) == 0) {
	        var $_0 = $5;
	        break;
	      }
	      var $31 = _log($base);
	      var $33 = .6931471805599453 / $31 + .5;
	      var $34 = $33 >= 0 ? Math.floor($33) : Math.ceil($33);
	      var $35 = $34 >>> ($shift >>> 0);
	      if ($35 >>> 0 < 256) {
	        var $width_0 = 1;
	      } else {
	        var $_ = $35 >>> 0 < 65536 ? 2 : 4;
	        var $width_0 = $_;
	      }
	      var $width_0;
	      HEAP8[$4 + 8 | 0] = $width_0 & 255;
	      var $42 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	      var $46 = (1 << $shift | 0) * .5;
	      var $50 = (($42 * .6931471805599453 + $46 & -1) >> $shift | 0) < 1;
	      $_$132 : do {
	        if ($50) {
	          var $i_0_lcssa = 0;
	        } else {
	          var $i_02 = 0;
	          var $byx_03 = 1;
	          while (1) {
	            var $byx_03;
	            var $i_02;
	            var $51 = $byx_03 / $base;
	            var $52 = $i_02 + 1 | 0;
	            var $53 = $51 + 1;
	            var $54 = _log($53);
	            var $55 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	            if ((($54 * $55 + $46 & -1) >> $shift | 0) < 1) {
	              var $i_0_lcssa = $52;
	              break $_$132;
	            }
	            var $i_02 = $52;
	            var $byx_03 = $51;
	          }
	        }
	      } while (0);
	      var $i_0_lcssa;
	      var $61 = $i_0_lcssa >>> ($shift >>> 0);
	      var $63 = $61 >>> 0 < 255 ? 256 : $61 + 1 | 0;
	      var $64 = ___ckd_calloc__($63, $width_0, STRING_TABLE.__str2340 | 0, 118);
	      var $65$s2 = $4 >> 2;
	      HEAP32[$65$s2] = $64;
	      HEAP32[$4$s2 + 1] = $63;
	      var $byx_1 = 1;
	      var $i_2 = 0;
	      while (1) {
	        var $i_2;
	        var $byx_1;
	        var $70 = _log($byx_1 + 1);
	        var $71 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	        var $75 = ($70 * $71 + $46 & -1) >> $shift;
	        do {
	          if (($width_0 | 0) == 1) {
	            var $78 = HEAPU32[$65$s2];
	            var $prev_0 = HEAPU8[$78 + ($i_2 >>> ($shift >>> 0)) | 0] & 255;
	            var $96 = $78;
	            __label__ = 14;
	            break;
	          } else if (($width_0 | 0) == 2) {
	            var $84 = HEAPU32[$65$s2];
	            var $prev_0 = HEAPU16[$84 + ($i_2 >>> ($shift >>> 0) << 1) >> 1] & 65535;
	            var $96 = $84;
	            __label__ = 14;
	            break;
	          } else if (($width_0 | 0) == 4) {
	            var $91 = HEAPU32[$65$s2];
	            var $prev_0 = HEAP32[$91 + ($i_2 >>> ($shift >>> 0) << 2) >> 2];
	            var $96 = $91;
	            __label__ = 14;
	            break;
	          } else {
	            __label__ = 19;
	          }
	        } while (0);
	        do {
	          if (__label__ == 14) {
	            var $96;
	            var $prev_0;
	            if (($prev_0 | 0) != 0) {
	              break;
	            }
	            if (($width_0 | 0) == 1) {
	              HEAP8[$96 + ($i_2 >>> ($shift >>> 0)) | 0] = $75 & 255;
	            } else if (($width_0 | 0) == 2) {
	              HEAP16[$96 + ($i_2 >>> ($shift >>> 0) << 1) >> 1] = $75 & 65535;
	            } else if (($width_0 | 0) == 4) {
	              HEAP32[$96 + ($i_2 >>> ($shift >>> 0) << 2) >> 2] = $75;
	            } else {
	              break;
	            }
	          }
	        } while (0);
	        if (($75 | 0) < 1) {
	          var $_0 = $5;
	          break $_$125;
	        }
	        var $byx_1 = $byx_1 / $base;
	        var $i_2 = $i_2 + 1 | 0;
	      }
	    } else {
	      __E__pr_header(STRING_TABLE.__str2340 | 0, 71, STRING_TABLE.__str102579 | 0);
	      __E__pr_warn(STRING_TABLE.__str22342 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_logmath_init["X"] = 1;

	function _logmath_free($lmath) {
	  var $1 = ($lmath | 0) == 0;
	  do {
	    if (!$1) {
	      var $3 = $lmath + 12 | 0;
	      var $5 = HEAP32[$3 >> 2] - 1 | 0;
	      HEAP32[$3 >> 2] = $5;
	      if (($5 | 0) > 0) {
	        break;
	      }
	      var $9 = HEAP32[$lmath + 16 >> 2];
	      if (($9 | 0) == 0) {
	        var $14 = HEAP32[$lmath >> 2];
	        _ckd_free($14);
	      } else {
	        _mmio_file_unmap($9);
	      }
	      var $16 = $lmath;
	      _ckd_free($16);
	    }
	  } while (0);
	  return;
	  return;
	}

	function _logmath_add($lmath, $logb_x, $logb_y) {
	  var $2 = HEAP32[$lmath + 60 >> 2];
	  var $3 = ($2 | 0) < ($logb_x | 0);
	  do {
	    if ($3) {
	      if (($2 | 0) >= ($logb_y | 0)) {
	        var $_0 = $logb_x;
	        break;
	      }
	      var $8 = HEAPU32[$lmath >> 2];
	      if (($8 | 0) == 0) {
	        var $11 = _logmath_add_exact($lmath, $logb_x, $logb_y);
	        var $_0 = $11;
	      } else {
	        var $13 = ($logb_x | 0) > ($logb_y | 0);
	        var $d_0 = $13 ? $logb_x - $logb_y | 0 : $logb_y - $logb_x | 0;
	        var $r_0 = $13 ? $logb_x : $logb_y;
	        if (($d_0 | 0) < 0) {
	          var $_0 = $r_0;
	          break;
	        }
	        if ($d_0 >>> 0 >= HEAPU32[$lmath + 4 >> 2] >>> 0) {
	          var $_0 = $r_0;
	          break;
	        }
	        var $24 = HEAPU8[$lmath + 8 | 0] & 255;
	        if (($24 | 0) == 1) {
	          var $_0 = (HEAPU8[$8 + $d_0 | 0] & 255) + $r_0 | 0;
	        } else if (($24 | 0) == 2) {
	          var $_0 = (HEAPU16[$8 + ($d_0 << 1) >> 1] & 65535) + $r_0 | 0;
	        } else if (($24 | 0) == 4) {
	          var $_0 = HEAP32[$8 + ($d_0 << 2) >> 2] + $r_0 | 0;
	        } else {
	          var $_0 = $r_0;
	          break;
	        }
	      }
	    } else {
	      var $_0 = $logb_y;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _logmath_add_exact($lmath, $logb_p, $logb_q) {
	  var $lmath_idx2_val = HEAP8[$lmath + 9 | 0];
	  var $lmath_idx3 = $lmath + 20 | 0;
	  var $lmath_idx3_val = (tempDoubleI32[0] = HEAP32[$lmath_idx3 >> 2], tempDoubleI32[1] = HEAP32[$lmath_idx3 + 4 >> 2], tempDoubleF64[0]);
	  var $1 = _logmath_exp($lmath_idx2_val, $lmath_idx3_val, $logb_p);
	  var $2 = _logmath_exp($lmath_idx2_val, $lmath_idx3_val, $logb_q);
	  var $3 = $1 + $2;
	  var $4 = _logmath_log($lmath, $3);
	  return $4;
	  return null;
	}

	function _logmath_log($lmath, $p) {
	  if ($p > 0) {
	    var $6 = _log($p);
	    var $7 = $lmath + 44 | 0;
	    var $8 = (tempDoubleI32[0] = HEAP32[$7 >> 2], tempDoubleI32[1] = HEAP32[$7 + 4 >> 2], tempDoubleF64[0]);
	    var $_0 = ($6 * $8 & -1) >> (HEAP8[$lmath + 9 | 0] << 24 >> 24);
	  } else {
	    var $_0 = HEAP32[$lmath + 60 >> 2];
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _logmath_exp($lmath_0_0_3_val, $lmath_0_3_val, $logb_p) {
	  var $3 = $logb_p << ($lmath_0_0_3_val << 24 >> 24) | 0;
	  var $4 = _llvm_pow_f64($lmath_0_3_val, $3);
	  return $4;
	  return null;
	}

	function _mmio_file_ptr($mf_0_0_val) {
	  return $mf_0_0_val;
	  return null;
	}

	function _make_sec($s_0_0_val, $s_0_1_val) {
	  return ($s_0_0_val | 0) + ($s_0_1_val | 0) * 1e-6;
	  return null;
	}

	function _mmio_file_read($filename) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 72;
	  var $buf = __stackBase__;
	  var $1 = _open($filename, 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  if (($1 | 0) == -1) {
	    __E__pr_header(STRING_TABLE.__str2403 | 0, 215, STRING_TABLE.__str232533 | 0);
	    __E__sys_error(STRING_TABLE.__str22405 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	    var $_0 = 0;
	  } else {
	    var $5 = _fstat($1, $buf);
	    if (($5 | 0) == -1) {
	      __E__pr_header(STRING_TABLE.__str2403 | 0, 219, STRING_TABLE.__str232533 | 0);
	      __E__sys_error(STRING_TABLE.__str32406 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $filename, tempInt));
	      var $_0 = 0;
	    } else {
	      var $10 = HEAP32[$buf + 28 >> 2];
	      var $11 = _mmap(0, $10, 1, 1, $1, 0);
	      if (($11 | 0) == -1) {
	        __E__pr_header(STRING_TABLE.__str2403 | 0, 224, STRING_TABLE.__str232533 | 0);
	        var $14$0 = $10;
	        var $14$1 = ($10 | 0) < 0 ? -1 : 0;
	        var $$emscripten$temp$0 = STRING_TABLE.__str42407 | 0;
	        __E__sys_error($$emscripten$temp$0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $14$0, HEAP32[tempInt + 4 >> 2] = $14$1, tempInt));
	        var $_0 = 0;
	      } else {
	        var $16 = _close($1);
	        var $17 = ___ckd_calloc__(1, 8, STRING_TABLE.__str2403 | 0, 228);
	        var $18 = $17;
	        HEAP32[$17 >> 2] = $11;
	        var $20 = _getpagesize();
	        var $22 = $20 - 1 + $10 | 0;
	        var $24 = $22 - ($22 >>> 0) % ($20 >>> 0) | 0;
	        HEAP32[$17 + 4 >> 2] = $24;
	        var $_0 = $18;
	      }
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	function _mmio_file_unmap($mf) {
	  var __stackBase__ = STACKTOP;
	  if (($mf | 0) != 0) {
	    var $3 = $mf | 0;
	    var $4 = HEAP32[$3 >> 2];
	    var $5 = $mf + 4 | 0;
	    var $6 = HEAP32[$5 >> 2];
	    var $7 = _munmap($4, $6);
	    if (($7 | 0) < 0) {
	      __E__pr_header(STRING_TABLE.__str2403 | 0, 243, STRING_TABLE.__str232533 | 0);
	      var $10 = HEAP32[$5 >> 2];
	      var $11 = HEAP32[$3 >> 2];
	      __E__sys_error(STRING_TABLE.__str52408 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $10, HEAP32[tempInt + 4 >> 2] = $11, tempInt));
	    }
	    var $13 = $mf;
	    _ckd_free($13);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _guess_comptype($file, $ispipe, $isgz) {
	  var $1 = _strlen($file);
	  HEAP32[$ispipe >> 2] = 0;
	  HEAP32[$isgz >> 2] = 0;
	  var $2 = ($1 | 0) > 2;
	  $_$50 : do {
	    if ($2) {
	      var $4 = $file + ($1 - 2) | 0;
	      var $5 = _strcmp($4, STRING_TABLE.__str242439 | 0);
	      var $6 = ($5 | 0) == 0;
	      do {
	        if (!$6) {
	          var $8 = _strcmp($4, STRING_TABLE.__str282443 | 0);
	          if (($8 | 0) == 0) {
	            break;
	          }
	          if (($1 | 0) <= 3) {
	            break $_$50;
	          }
	          var $14 = $file + ($1 - 3) | 0;
	          var $15 = _strcmp($14, STRING_TABLE.__str202435 | 0);
	          var $16 = ($15 | 0) == 0;
	          do {
	            if (!$16) {
	              var $18 = _strcmp($14, STRING_TABLE.__str292444 | 0);
	              if (($18 | 0) == 0) {
	                break;
	              }
	              if (($1 | 0) <= 4) {
	                break $_$50;
	              }
	              var $24 = $file + ($1 - 4) | 0;
	              var $25 = _strcmp($24, STRING_TABLE.__str232438 | 0);
	              if (($25 | 0) != 0) {
	                var $28 = _strcmp($24, STRING_TABLE.__str302445 | 0);
	                if (($28 | 0) != 0) {
	                  break $_$50;
	                }
	              }
	              HEAP32[$ispipe >> 2] = 1;
	              HEAP32[$isgz >> 2] = 3;
	              break $_$50;
	            }
	          } while (0);
	          HEAP32[$ispipe >> 2] = 1;
	          HEAP32[$isgz >> 2] = 2;
	          break $_$50;
	        }
	      } while (0);
	      HEAP32[$ispipe >> 2] = 1;
	      HEAP32[$isgz >> 2] = 1;
	    }
	  } while (0);
	  return;
	  return;
	}

	function _fclose_comp($fp, $ispipe) {
	  if (($ispipe | 0) == 0) {
	    var $5 = _fclose($fp);
	  } else {
	    var $3 = _pclose($fp);
	  }
	  return;
	  return;
	}

	function _lineiter_start($fh) {
	  var $1$s2;
	  var $1 = ___ckd_calloc__(1, 16, STRING_TABLE.__str62421 | 0, 259), $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $3 = ___ckd_malloc__(128, STRING_TABLE.__str62421 | 0, 260);
	  HEAP32[$1$s2] = $3;
	  HEAP8[$3] = 0;
	  HEAP32[$1$s2 + 1] = 128;
	  HEAP32[$1$s2 + 2] = 0;
	  HEAP32[$1$s2 + 3] = $fh;
	  var $11 = _lineiter_next($2);
	  return $11;
	  return null;
	}

	function _lineiter_next($li) {
	  var $13$s2;
	  var $3$s2;
	  var $1$s2;
	  var $1$s2 = ($li | 0) >> 2;
	  var $2 = HEAP32[$1$s2];
	  var $3$s2 = ($li + 4 | 0) >> 2;
	  var $4 = HEAP32[$3$s2];
	  var $5 = $li + 12 | 0;
	  var $6 = HEAP32[$5 >> 2];
	  var $7 = _fgets($2, $4, $6);
	  var $8 = ($7 | 0) == 0;
	  $_$73 : do {
	    if ($8) {
	      _lineiter_free($li);
	      var $_0 = 0;
	    } else {
	      var $11 = HEAPU32[$1$s2];
	      var $12 = _strlen($11);
	      var $13$s2 = ($li + 8 | 0) >> 2;
	      HEAP32[$13$s2] = $12;
	      var $14 = HEAPU32[$3$s2];
	      if ($12 >>> 0 < ($14 - 1 | 0) >>> 0) {
	        var $_0 = $li;
	        break;
	      }
	      if (HEAP8[$11 + ($12 - 1) | 0] << 24 >> 24 == 10) {
	        var $_0 = $li;
	        break;
	      }
	      var $23 = $14;
	      var $22 = $11;
	      while (1) {
	        var $22;
	        var $23;
	        var $24 = $23 << 1;
	        HEAP32[$3$s2] = $24;
	        var $25 = ___ckd_realloc__($22, $24, STRING_TABLE.__str62421 | 0, 286);
	        HEAP32[$1$s2] = $25;
	        var $26 = HEAP32[$13$s2];
	        var $27 = $25 + $26 | 0;
	        var $29 = HEAP32[$3$s2] - $26 | 0;
	        var $30 = HEAP32[$5 >> 2];
	        var $31 = _fgets($27, $29, $30);
	        var $32 = ($31 | 0) == 0;
	        var $33 = HEAPU32[$1$s2];
	        var $34 = HEAP32[$13$s2];
	        var $35 = $33 + $34 | 0;
	        var $36 = _strlen($35);
	        var $37 = $36 + $34 | 0;
	        HEAP32[$13$s2] = $37;
	        if ($32) {
	          var $_0 = $li;
	          break $_$73;
	        }
	        var $39 = HEAPU32[$3$s2];
	        if ($37 >>> 0 < ($39 - 1 | 0) >>> 0) {
	          var $_0 = $li;
	          break $_$73;
	        }
	        if (HEAP8[$33 + ($37 - 1) | 0] << 24 >> 24 == 10) {
	          var $_0 = $li;
	          break $_$73;
	        }
	        var $23 = $39;
	        var $22 = $33;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_lineiter_next["X"] = 1;

	function _lineiter_free($li) {
	  if (($li | 0) != 0) {
	    var $4 = HEAP32[$li >> 2];
	    _ckd_free($4);
	    var $5 = $li;
	    _ckd_free($5);
	  }
	  return;
	  return;
	}

	function _fread_line($stream, $out_len) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 128;
	  var $buf = __stackBase__;
	  var $1 = $buf | 0;
	  var $outptr_0 = 0;
	  var $output_0 = 0;
	  while (1) {
	    var $output_0;
	    var $outptr_0;
	    var $3 = _fgets($1, 128, $stream);
	    if (($3 | 0) == 0) {
	      var $outptr_2 = $outptr_0;
	      var $output_2 = $output_0;
	      break;
	    }
	    var $6 = _strlen($1);
	    if (($output_0 | 0) == 0) {
	      var $9 = $6 + 1 | 0;
	      var $10 = ___ckd_malloc__($9, STRING_TABLE.__str62421 | 0, 322);
	      var $outptr_1 = $10;
	      var $output_1 = $10;
	      var $_pre_phi = $9;
	    } else {
	      var $14 = $outptr_0 - $output_0 | 0;
	      var $16 = $6 + ($14 + 1) | 0;
	      var $17 = ___ckd_realloc__($output_0, $16, STRING_TABLE.__str62421 | 0, 327);
	      var $outptr_1 = $17 + $14 | 0;
	      var $output_1 = $17;
	      var $_pre_phi = $6 + 1 | 0;
	    }
	    var $_pre_phi;
	    var $output_1;
	    var $outptr_1;
	    _memcpy($outptr_1, $1, $_pre_phi, 1);
	    var $20 = $outptr_1 + $6 | 0;
	    if ($6 >>> 0 < 127) {
	      var $outptr_2 = $20;
	      var $output_2 = $output_1;
	      break;
	    }
	    if (HEAP8[$buf + ($6 - 1) | 0] << 24 >> 24 == 10) {
	      var $outptr_2 = $20;
	      var $output_2 = $output_1;
	      break;
	    }
	    var $outptr_0 = $20;
	    var $output_0 = $output_1;
	  }
	  var $output_2;
	  var $outptr_2;
	  if (($out_len | 0) != 0) {
	    HEAP32[$out_len >> 2] = $outptr_2 - $output_2 | 0;
	  }
	  STACKTOP = __stackBase__;
	  return $output_2;
	  return null;
	}

	function _ptmr_start($tm) {
	  var $start$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 80;
	  var $e_start = __stackBase__;
	  var $start = __stackBase__ + 8, $start$s2 = $start >> 2;
	  var $1 = _getrusage(0, $start);
	  var $_idx3_val = HEAP32[$start$s2];
	  var $_idx4_val = HEAP32[$start$s2 + 1];
	  var $2 = _make_sec($_idx3_val, $_idx4_val);
	  var $_idx_val = HEAP32[$start$s2 + 2];
	  var $_idx2_val = HEAP32[$start$s2 + 3];
	  var $3 = _make_sec($_idx_val, $_idx2_val);
	  var $5 = $tm + 36 | 0;
	  tempDoubleF64[0] = $2 + $3, HEAP32[$5 >> 2] = tempDoubleI32[0], HEAP32[$5 + 4 >> 2] = tempDoubleI32[1];
	  var $6 = _gettimeofday($e_start, 0);
	  var $e_start_idx_val = HEAP32[$e_start >> 2];
	  var $e_start_idx1_val = HEAP32[$e_start + 4 >> 2];
	  var $7 = _make_sec($e_start_idx_val, $e_start_idx1_val);
	  var $8 = $tm + 44 | 0;
	  tempDoubleF64[0] = $7, HEAP32[$8 >> 2] = tempDoubleI32[0], HEAP32[$8 + 4 >> 2] = tempDoubleI32[1];
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ptmr_stop($tm) {
	  var $22$s2;
	  var $19$s2;
	  var $16$s2;
	  var $13$s2;
	  var $stop$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 80;
	  var $e_stop = __stackBase__;
	  var $stop = __stackBase__ + 8, $stop$s2 = $stop >> 2;
	  var $1 = _getrusage(0, $stop);
	  var $_idx3_val = HEAP32[$stop$s2];
	  var $_idx4_val = HEAP32[$stop$s2 + 1];
	  var $2 = _make_sec($_idx3_val, $_idx4_val);
	  var $_idx_val = HEAP32[$stop$s2 + 2];
	  var $_idx2_val = HEAP32[$stop$s2 + 3];
	  var $3 = _make_sec($_idx_val, $_idx2_val);
	  var $4 = $2 + $3;
	  var $5 = $tm + 36 | 0;
	  var $6 = (tempDoubleI32[0] = HEAP32[$5 >> 2], tempDoubleI32[1] = HEAP32[$5 + 4 >> 2], tempDoubleF64[0]);
	  var $7 = $4 - $6;
	  var $8 = _gettimeofday($e_stop, 0);
	  var $e_stop_idx_val = HEAP32[$e_stop >> 2];
	  var $e_stop_idx1_val = HEAP32[$e_stop + 4 >> 2];
	  var $9 = _make_sec($e_stop_idx_val, $e_stop_idx1_val);
	  var $10 = $tm + 44 | 0;
	  var $11 = (tempDoubleI32[0] = HEAP32[$10 >> 2], tempDoubleI32[1] = HEAP32[$10 + 4 >> 2], tempDoubleF64[0]);
	  var $12 = $9 - $11;
	  var $13$s2 = ($tm + 4 | 0) >> 2;
	  var $14 = (tempDoubleI32[0] = HEAP32[$13$s2], tempDoubleI32[1] = HEAP32[$13$s2 + 1], tempDoubleF64[0]);
	  var $15 = $14 + $7;
	  tempDoubleF64[0] = $15, HEAP32[$13$s2] = tempDoubleI32[0], HEAP32[$13$s2 + 1] = tempDoubleI32[1];
	  var $16$s2 = ($tm + 12 | 0) >> 2;
	  var $17 = (tempDoubleI32[0] = HEAP32[$16$s2], tempDoubleI32[1] = HEAP32[$16$s2 + 1], tempDoubleF64[0]);
	  var $18 = $17 + $12;
	  tempDoubleF64[0] = $18, HEAP32[$16$s2] = tempDoubleI32[0], HEAP32[$16$s2 + 1] = tempDoubleI32[1];
	  var $19$s2 = ($tm + 20 | 0) >> 2;
	  var $20 = (tempDoubleI32[0] = HEAP32[$19$s2], tempDoubleI32[1] = HEAP32[$19$s2 + 1], tempDoubleF64[0]);
	  var $21 = $20 + $7;
	  tempDoubleF64[0] = $21, HEAP32[$19$s2] = tempDoubleI32[0], HEAP32[$19$s2 + 1] = tempDoubleI32[1];
	  var $22$s2 = ($tm + 28 | 0) >> 2;
	  var $23 = (tempDoubleI32[0] = HEAP32[$22$s2], tempDoubleI32[1] = HEAP32[$22$s2 + 1], tempDoubleF64[0]);
	  var $24 = $23 + $12;
	  tempDoubleF64[0] = $24, HEAP32[$22$s2] = tempDoubleI32[0], HEAP32[$22$s2 + 1] = tempDoubleI32[1];
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _ptmr_reset($tm) {
	  var $2$s2;
	  var $2$s2 = ($tm + 4 | 0) >> 2;
	  HEAP32[$2$s2] = 0;
	  HEAP32[$2$s2 + 1] = 0;
	  HEAP32[$2$s2 + 2] = 0;
	  HEAP32[$2$s2 + 3] = 0;
	  return;
	  return;
	}

	function _ptmr_init($tm) {
	  var $2$s2;
	  var $2$s2 = ($tm + 4 | 0) >> 2;
	  HEAP32[$2$s2] = 0;
	  HEAP32[$2$s2 + 1] = 0;
	  HEAP32[$2$s2 + 2] = 0;
	  HEAP32[$2$s2 + 3] = 0;
	  HEAP32[$2$s2 + 4] = 0;
	  HEAP32[$2$s2 + 5] = 0;
	  HEAP32[$2$s2 + 6] = 0;
	  HEAP32[$2$s2 + 7] = 0;
	  return;
	  return;
	}

	function _atof_c($str) {
	  var $1 = _sb_strtod($str);
	  return $1;
	  return null;
	}

	function _string_join($base) {
	  var $args$s2;
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $args = __stackBase__, $args$s2 = $args >> 2;
	  var $1 = $args;
	  HEAP32[$1 >> 2] = arguments[_string_join.length];
	  var $2 = _strlen($base);
	  var $3 = HEAP32[$args$s2];
	  var $4 = $3;
	  var $5 = $3 + 4 | 0;
	  HEAP32[$args$s2] = $5;
	  var $6 = HEAP32[$4 >> 2];
	  var $7 = ($6 | 0) == 0;
	  $_$106 : do {
	    if ($7) {
	      var $len_0_lcssa = $2;
	    } else {
	      var $len_01 = $2;
	      var $9 = $6;
	      var $8 = $5;
	      while (1) {
	        var $8;
	        var $9;
	        var $len_01;
	        var $10 = _strlen($9);
	        var $11 = $10 + $len_01 | 0;
	        var $13 = $8 + 4 | 0;
	        HEAP32[$args$s2] = $13;
	        var $14 = HEAP32[$8 >> 2];
	        if (($14 | 0) == 0) {
	          var $len_0_lcssa = $11;
	          break $_$106;
	        }
	        var $len_01 = $11;
	        var $9 = $14;
	        var $8 = $13;
	      }
	    }
	  } while (0);
	  var $len_0_lcssa;
	  var $17 = ___ckd_calloc__($len_0_lcssa + 1 | 0, 1, STRING_TABLE.__str2499 | 0, 77);
	  HEAP32[$1 >> 2] = arguments[_string_join.length];
	  var $18 = _strcpy($17, $base);
	  var $19 = HEAP32[$args$s2];
	  var $20 = $19;
	  var $21 = $19 + 4 | 0;
	  HEAP32[$args$s2] = $21;
	  var $22 = HEAP32[$20 >> 2];
	  var $23 = ($22 | 0) == 0;
	  $_$110 : do {
	    if (!$23) {
	      var $24 = $22;
	      while (1) {
	        var $24;
	        var $25 = _strcat($17, $24);
	        var $26 = HEAP32[$args$s2];
	        var $27 = $26;
	        var $28 = $26 + 4 | 0;
	        HEAP32[$args$s2] = $28;
	        var $29 = HEAP32[$27 >> 2];
	        if (($29 | 0) == 0) {
	          break $_$110;
	        }
	        var $24 = $29;
	      }
	    }
	  } while (0);
	  STACKTOP = __stackBase__;
	  return $17;
	  return null;
	}

	function _string_trim($string) {
	  var __label__;
	  var $1 = _strlen($string);
	  var $2 = _strspn($string, STRING_TABLE.__str12500 | 0);
	  if (($2 | 0) == 0) {
	    var $sub1_0 = $1;
	    __label__ = 4;
	  } else {
	    var $5 = $string + $2 | 0;
	    var $7 = $1 + 1 - $2 | 0;
	    _llvm_memmove_p0i8_p0i8_i32($string, $5, $7, 1, 0);
	    var $sub1_0 = $1 - $2 | 0;
	  }
	  while (1) {
	    var $sub1_0;
	    var $9 = $sub1_0 - 1 | 0;
	    if (($sub1_0 | 0) <= 0) {
	      break;
	    }
	    var $14 = HEAP8[$string + $9 | 0] << 24 >> 24;
	    var $memchr = _memchr(STRING_TABLE.__str12500 | 0, $14, 6);
	    if (($memchr | 0) == 0) {
	      break;
	    }
	    var $sub1_0 = $9;
	  }
	  if (($sub1_0 | 0) == 0) {
	    HEAP8[$string] = 0;
	  } else {
	    HEAP8[$string + $sub1_0 | 0] = 0;
	  }
	  return;
	  return;
	}

	function _str2words($line, $ptr, $max_ptr) {
	  var __label__;
	  var $1 = ($ptr | 0) != 0;
	  var $_not = $1 ^ 1;
	  var $n_0_ph = 0;
	  var $i_0_ph = 0;
	  $_$126 : while (1) {
	    var $i_0_ph;
	    var $n_0_ph;
	    var $i_0 = $i_0_ph;
	    while (1) {
	      var $i_0;
	      var $3 = $line + $i_0 | 0;
	      var $4 = HEAPU8[$3];
	      if ($4 << 24 >> 24 == 0) {
	        var $_0 = $n_0_ph;
	        __label__ = 21;
	        break $_$126;
	      }
	      var $7 = $4 & 255;
	      var $8 = _isspace($7);
	      if (($8 | 0) == 0) {
	        break;
	      }
	      var $i_0 = $i_0 + 1 | 0;
	    }
	    var $_pr = HEAPU8[$3];
	    if ($_pr << 24 >> 24 == 0) {
	      var $_0 = $n_0_ph;
	      __label__ = 21;
	      break;
	    }
	    if (!(($n_0_ph | 0) < ($max_ptr | 0) | $_not)) {
	      __label__ = 8;
	      break;
	    }
	    if ($1) {
	      HEAP32[$ptr + ($n_0_ph << 2) >> 2] = $3;
	    }
	    var $26 = $n_0_ph + 1 | 0;
	    var $i_2 = $i_0;
	    while (1) {
	      var $i_2;
	      var $27 = $line + $i_2 | 0;
	      var $28 = HEAPU8[$27];
	      if ($28 << 24 >> 24 == 0) {
	        var $_0 = $26;
	        __label__ = 21;
	        break $_$126;
	      }
	      var $31 = $28 & 255;
	      var $32 = _isspace($31);
	      var $34 = $i_2 + 1 | 0;
	      if (($32 | 0) != 0) {
	        break;
	      }
	      var $i_2 = $34;
	    }
	    if (HEAP8[$27] << 24 >> 24 == 0) {
	      var $_0 = $26;
	      __label__ = 21;
	      break;
	    }
	    if (!$1) {
	      var $n_0_ph = $26;
	      var $i_0_ph = $34;
	      continue;
	    }
	    HEAP8[$27] = 0;
	    var $n_0_ph = $26;
	    var $i_0_ph = $34;
	  }
	  $_$143 : do {
	    if (__label__ == 8) {
	      if (($i_0 | 0) <= -1) {
	        var $_0 = -1;
	        break;
	      }
	      var $i_13 = $i_0;
	      var $15 = $_pr;
	      while (1) {
	        var $15;
	        var $i_13;
	        if ($15 << 24 >> 24 == 0) {
	          HEAP8[$line + $i_13 | 0] = 32;
	        }
	        var $20 = $i_13 - 1 | 0;
	        if (($i_13 | 0) <= 0) {
	          var $_0 = -1;
	          break $_$143;
	        }
	        var $_pre = HEAP8[$line + $20 | 0];
	        var $i_13 = $20;
	        var $15 = $_pre;
	      }
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_str2words["X"] = 1;

	function _main($argc, $argv) {
	  var __stackBase__ = STACKTOP;
	  if (($argc | 0) == 2) {
	    var $4 = HEAP32[$argv + 4 >> 2];
	    var $5 = _cmd_ln_parse_file_r(0, _cont_args_def | 0, $4, 1);
	    var $storemerge = $5;
	  } else {
	    var $7 = _cmd_ln_parse_r(0, _cont_args_def | 0, $argc, $argv, 0);
	    var $storemerge = $7;
	  }
	  var $storemerge;
	  HEAP32[_config >> 2] = $storemerge;
	  var $9 = ($storemerge | 0) == 0;
	  do {
	    if ($9) {
	      var $_0 = 1;
	    } else {
	      var $storemerge_idx_val = HEAP32[$storemerge + 4 >> 2];
	      var $11 = _cmd_ln_str_r($storemerge_idx_val, STRING_TABLE.__str2569 | 0);
	      var $_pr = HEAP32[_config >> 2];
	      if (($11 | 0) == 0) {
	        var $15 = $_pr;
	      } else {
	        var $14 = _cmd_ln_parse_file_r($_pr, _cont_args_def | 0, $11, 0);
	        HEAP32[_config >> 2] = $14;
	        var $15 = $14;
	      }
	      var $15;
	      if (($15 | 0) == 0) {
	        var $_0 = 1;
	        break;
	      }
	      var $18 = _ps_init($15);
	      HEAP32[_ps >> 2] = $18;
	      if (($18 | 0) == 0) {
	        var $_0 = 1;
	        break;
	      }
	      __E__pr_info_header(STRING_TABLE.__str12570 | 0, 122);
	      var $21 = HEAP32[$argv >> 2];
	      __E__pr_info(STRING_TABLE.__str32572 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = $21, HEAP32[tempInt + 4 >> 2] = STRING_TABLE.__str42573 | 0, HEAP32[tempInt + 8 >> 2] = STRING_TABLE.__str52574 | 0, tempInt));
	      var $_idx1_val = HEAP32[HEAP32[_config >> 2] + 4 >> 2];
	      var $23 = _cmd_ln_str_r($_idx1_val, STRING_TABLE.__str62575 | 0);
	      if (($23 | 0) == 0) {
	        __E__pr_info_header(STRING_TABLE.__str12570 | 0, 131);
	        __E__pr_info(STRING_TABLE.__str82577 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	      } else {
	        __E__pr_info_header(STRING_TABLE.__str12570 | 0, 126);
	        var $_idx_val = HEAP32[HEAP32[_config >> 2] + 4 >> 2];
	        var $27 = _cmd_ln_str_r($_idx_val, STRING_TABLE.__str62575 | 0);
	        __E__pr_info(STRING_TABLE.__str72576 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $27, tempInt));
	        _recognize_from_file();
	      }
	      var $30 = HEAP32[_ps >> 2];
	      _ps_free($30);
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	Module["_main"] = _main;

	_main["X"] = 1;

	function _recognize_from_file() {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 28;
	  var $uttid = __stackBase__;
	  var $out_nspeech = __stackBase__ + 4;
	  var $out_ncpu = __stackBase__ + 12;
	  var $out_nwall = __stackBase__ + 20;
	  var $_idx1_val = HEAP32[HEAP32[_config >> 2] + 4 >> 2];
	  var $2 = _cmd_ln_str_r($_idx1_val, STRING_TABLE.__str62575 | 0);
	  var $3 = _fopen($2, STRING_TABLE.__str92578 | 0);
	  HEAP32[_rawfd >> 2] = $3;
	  if (($3 | 0) == 0) {
	    __E__pr_header(STRING_TABLE.__str12570 | 0, 73, STRING_TABLE.__str102579 | 0);
	    __E__pr_warn(STRING_TABLE.__str112580 | 0, (tempInt = STACKTOP, STACKTOP += 1, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
	  } else {
	    __E__pr_info_header(STRING_TABLE.__str12570 | 0, 76);
	    var $_idx_val = HEAP32[HEAP32[_config >> 2] + 4 >> 2];
	    var $8 = _cmd_ln_str_r($_idx_val, STRING_TABLE.__str62575 | 0);
	    __E__pr_info(STRING_TABLE.__str122581 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $8, tempInt));
	    var $9 = HEAP32[_ps >> 2];
	    var $10 = HEAP32[_rawfd >> 2];
	    _ps_decode_raw($9, $10);
	    var $11 = HEAP32[_ps >> 2];
	    var $12 = _ps_get_hyp($11, 0, $uttid);
	    var $13 = HEAP32[$uttid >> 2];
	    var $14 = _printf(STRING_TABLE.__str142583 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = $12, tempInt));
	    var $15 = HEAP32[_ps >> 2];
	    _print_nbest($15);
	    var $16 = HEAP32[_ps >> 2];
	    _ps_get_utt_time($16, $out_nspeech, $out_ncpu, $out_nwall);
	    __E__pr_info_header_wofn();
	    var $17 = (tempDoubleI32[0] = HEAP32[$out_nspeech >> 2], tempDoubleI32[1] = HEAP32[$out_nspeech + 4 >> 2], tempDoubleF64[0]);
	    var $18 = (tempDoubleI32[0] = HEAP32[$out_ncpu >> 2], tempDoubleI32[1] = HEAP32[$out_ncpu + 4 >> 2], tempDoubleF64[0]);
	    var $19 = (tempDoubleI32[0] = HEAP32[$out_nwall >> 2], tempDoubleI32[1] = HEAP32[$out_nwall + 4 >> 2], tempDoubleF64[0]);
	    var $20 = $19 / $17;
	    __E__pr_info(STRING_TABLE.__str162585 | 0, (tempInt = STACKTOP, STACKTOP += 28, HEAP32[tempInt >> 2] = 0, tempDoubleF64[0] = $17, HEAP32[tempInt + 4 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 8 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $18, HEAP32[tempInt + 12 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 16 >> 2] = tempDoubleI32[1], tempDoubleF64[0] = $20, HEAP32[tempInt + 20 >> 2] = tempDoubleI32[0], HEAP32[tempInt + 24 >> 2] = tempDoubleI32[1], tempInt));
	    var $21 = HEAP32[_stdout >> 2];
	    var $22 = _fflush($21);
	    var $23 = HEAP32[_rawfd >> 2];
	    var $24 = _fclose($23);
	  }
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _print_nbest($ps) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $score = __stackBase__;
	  var $_idx_val = HEAP32[HEAP32[_config >> 2] + 4 >> 2];
	  var $2 = _cmd_ln_int_r($_idx_val, STRING_TABLE.__str172586 | 0);
	  var $3 = _ps_nbest($ps);
	  var $4 = ($2 | 0) > 0;
	  $_$175 : do {
	    if ($4) {
	      var $i_01 = 0;
	      while (1) {
	        var $i_01;
	        _ps_nbest_next($3);
	        var $5 = _ps_nbest_hyp($3, $score);
	        var $6 = HEAP32[$score >> 2];
	        var $7 = _printf(STRING_TABLE.__str182587 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str152584 | 0, HEAP32[tempInt + 4 >> 2] = $5, HEAP32[tempInt + 8 >> 2] = $6, tempInt));
	        var $8 = $i_01 + 1 | 0;
	        if (($8 | 0) == ($2 | 0)) {
	          break $_$175;
	        }
	        var $i_01 = $8;
	      }
	    }
	  } while (0);
	  _ps_nbest_free($3);
	  STACKTOP = __stackBase__;
	  return;
	  return;
	}

	function _fopen_comp($file, $mode, $ispipe) {
	  var __stackBase__ = STACKTOP;
	  STACKTOP += 4;
	  var $isgz = __stackBase__;
	  _guess_comptype($file, $ispipe, $isgz);
	  if ((HEAP32[$ispipe >> 2] | 0) == 0) {
	    var $39 = _fopen($file, $mode);
	    var $_0 = $39;
	  } else {
	    var $4 = _strcmp($mode, STRING_TABLE.__str2415 | 0);
	    if (($4 | 0) == 0) {
	      var $7 = HEAP32[$isgz >> 2];
	      if (($7 | 0) == 2) {
	        var $9 = _string_join(STRING_TABLE.__str12416 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str22417 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	        var $command_0 = $9;
	      } else if (($7 | 0) == 1) {
	        var $11 = _string_join(STRING_TABLE.__str32418 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str42419 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	        var $command_0 = $11;
	      } else if (($7 | 0) == 3) {
	        var $13 = _string_join(STRING_TABLE.__str52420 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str22417 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	        var $command_0 = $13;
	      } else {
	        __E__pr_header(STRING_TABLE.__str62421 | 0, 128, STRING_TABLE.__str72422 | 0);
	        __E__die_error(STRING_TABLE.__str82423 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $7, tempInt));
	      }
	      var $command_0;
	      var $16 = _popen($command_0, $mode);
	      if (($16 | 0) == 0) {
	        __E__pr_header(STRING_TABLE.__str62421 | 0, 131, STRING_TABLE.__str232533 | 0);
	        __E__sys_error(STRING_TABLE.__str102425 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $command_0, HEAP32[tempInt + 4 >> 2] = $mode, tempInt));
	        _ckd_free($command_0);
	        var $_0 = 0;
	      } else {
	        _ckd_free($command_0);
	        var $_0 = $16;
	      }
	    } else {
	      var $21 = _strcmp($mode, STRING_TABLE.__str112426 | 0);
	      if (($21 | 0) == 0) {
	        var $24 = HEAP32[$isgz >> 2];
	        if (($24 | 0) == 2) {
	          var $26 = _string_join(STRING_TABLE.__str122427 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str132428 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	          var $command1_0 = $26;
	        } else if (($24 | 0) == 1) {
	          var $28 = _string_join(STRING_TABLE.__str142429 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str152430 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	          var $command1_0 = $28;
	        } else if (($24 | 0) == 3) {
	          var $30 = _string_join(STRING_TABLE.__str162431 | 0, (tempInt = STACKTOP, STACKTOP += 12, HEAP32[tempInt >> 2] = STRING_TABLE.__str132428 | 0, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = 0, tempInt));
	          var $command1_0 = $30;
	        } else {
	          __E__pr_header(STRING_TABLE.__str62421 | 0, 151, STRING_TABLE.__str72422 | 0);
	          __E__die_error(STRING_TABLE.__str172432 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $24, tempInt));
	        }
	        var $command1_0;
	        var $33 = _popen($command1_0, $mode);
	        if (($33 | 0) == 0) {
	          __E__pr_header(STRING_TABLE.__str62421 | 0, 154, STRING_TABLE.__str232533 | 0);
	          __E__sys_error(STRING_TABLE.__str102425 | 0, (tempInt = STACKTOP, STACKTOP += 8, HEAP32[tempInt >> 2] = $command1_0, HEAP32[tempInt + 4 >> 2] = $mode, tempInt));
	          _ckd_free($command1_0);
	          var $_0 = 0;
	        } else {
	          _ckd_free($command1_0);
	          var $_0 = $33;
	        }
	      } else {
	        __E__pr_header(STRING_TABLE.__str62421 | 0, 161, STRING_TABLE.__str102579 | 0);
	        __E__pr_warn(STRING_TABLE.__str192434 | 0, (tempInt = STACKTOP, STACKTOP += 4, HEAP32[tempInt >> 2] = $mode, tempInt));
	        var $_0 = 0;
	      }
	    }
	  }
	  var $_0;
	  STACKTOP = __stackBase__;
	  return $_0;
	  return null;
	}

	_fopen_comp["X"] = 1;

	function _malloc($bytes) {
	  var __label__;
	  var $1 = $bytes >>> 0 < 245;
	  do {
	    if ($1) {
	      if ($bytes >>> 0 < 11) {
	        var $8 = 16;
	      } else {
	        var $8 = $bytes + 11 & -8;
	      }
	      var $8;
	      var $9 = $8 >>> 3;
	      var $10 = HEAPU32[__gm_ >> 2];
	      var $11 = $10 >>> ($9 >>> 0);
	      if (($11 & 3 | 0) != 0) {
	        var $17 = ($11 & 1 ^ 1) + $9 | 0;
	        var $18 = $17 << 1;
	        var $20 = ($18 << 2) + __gm_ + 40 | 0;
	        var $21 = ($18 + 2 << 2) + __gm_ + 40 | 0;
	        var $22 = HEAPU32[$21 >> 2];
	        var $23 = $22 + 8 | 0;
	        var $24 = HEAPU32[$23 >> 2];
	        if (($20 | 0) == ($24 | 0)) {
	          HEAP32[__gm_ >> 2] = $10 & (1 << $17 ^ -1);
	        } else {
	          if ($24 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	            _abort();
	          } else {
	            HEAP32[$21 >> 2] = $24;
	            HEAP32[$24 + 12 >> 2] = $20;
	          }
	        }
	        var $38 = $17 << 3;
	        HEAP32[$22 + 4 >> 2] = $38 | 3;
	        var $43 = $22 + ($38 | 4) | 0;
	        var $45 = HEAP32[$43 >> 2] | 1;
	        HEAP32[$43 >> 2] = $45;
	        var $mem_0 = $23;
	        __label__ = 39;
	        break;
	      }
	      if ($8 >>> 0 <= HEAPU32[__gm_ + 8 >> 2] >>> 0) {
	        var $nb_0 = $8;
	        __label__ = 31;
	        break;
	      }
	      if (($11 | 0) != 0) {
	        var $54 = 2 << $9;
	        var $57 = $11 << $9 & ($54 | -$54);
	        var $60 = ($57 & -$57) - 1 | 0;
	        var $62 = $60 >>> 12 & 16;
	        var $63 = $60 >>> ($62 >>> 0);
	        var $65 = $63 >>> 5 & 8;
	        var $66 = $63 >>> ($65 >>> 0);
	        var $68 = $66 >>> 2 & 4;
	        var $69 = $66 >>> ($68 >>> 0);
	        var $71 = $69 >>> 1 & 2;
	        var $72 = $69 >>> ($71 >>> 0);
	        var $74 = $72 >>> 1 & 1;
	        var $80 = ($65 | $62 | $68 | $71 | $74) + ($72 >>> ($74 >>> 0)) | 0;
	        var $81 = $80 << 1;
	        var $83 = ($81 << 2) + __gm_ + 40 | 0;
	        var $84 = ($81 + 2 << 2) + __gm_ + 40 | 0;
	        var $85 = HEAPU32[$84 >> 2];
	        var $86 = $85 + 8 | 0;
	        var $87 = HEAPU32[$86 >> 2];
	        if (($83 | 0) == ($87 | 0)) {
	          HEAP32[__gm_ >> 2] = $10 & (1 << $80 ^ -1);
	        } else {
	          if ($87 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	            _abort();
	          } else {
	            HEAP32[$84 >> 2] = $87;
	            HEAP32[$87 + 12 >> 2] = $83;
	          }
	        }
	        var $101 = $80 << 3;
	        var $102 = $101 - $8 | 0;
	        HEAP32[$85 + 4 >> 2] = $8 | 3;
	        var $105 = $85;
	        var $107 = $105 + $8 | 0;
	        HEAP32[$105 + ($8 | 4) >> 2] = $102 | 1;
	        HEAP32[$105 + $101 >> 2] = $102;
	        var $113 = HEAPU32[__gm_ + 8 >> 2];
	        if (($113 | 0) != 0) {
	          var $116 = HEAP32[__gm_ + 20 >> 2];
	          var $119 = $113 >>> 2 & 1073741822;
	          var $121 = ($119 << 2) + __gm_ + 40 | 0;
	          var $122 = HEAPU32[__gm_ >> 2];
	          var $123 = 1 << ($113 >>> 3);
	          var $125 = ($122 & $123 | 0) == 0;
	          do {
	            if ($125) {
	              HEAP32[__gm_ >> 2] = $122 | $123;
	              var $F4_0 = $121;
	              var $_pre_phi = ($119 + 2 << 2) + __gm_ + 40 | 0;
	            } else {
	              var $129 = ($119 + 2 << 2) + __gm_ + 40 | 0;
	              var $130 = HEAPU32[$129 >> 2];
	              if ($130 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                var $F4_0 = $130;
	                var $_pre_phi = $129;
	                break;
	              }
	              _abort();
	            }
	          } while (0);
	          var $_pre_phi;
	          var $F4_0;
	          HEAP32[$_pre_phi >> 2] = $116;
	          HEAP32[$F4_0 + 12 >> 2] = $116;
	          var $137 = $116 + 8 | 0;
	          HEAP32[$137 >> 2] = $F4_0;
	          var $138 = $116 + 12 | 0;
	          HEAP32[$138 >> 2] = $121;
	        }
	        HEAP32[__gm_ + 8 >> 2] = $102;
	        HEAP32[__gm_ + 20 >> 2] = $107;
	        var $mem_0 = $86;
	        __label__ = 39;
	        break;
	      }
	      if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
	        var $nb_0 = $8;
	        __label__ = 31;
	        break;
	      }
	      var $145 = _tmalloc_small($8);
	      if (($145 | 0) == 0) {
	        var $nb_0 = $8;
	        __label__ = 31;
	        break;
	      }
	      var $mem_0 = $145;
	      __label__ = 39;
	      break;
	    } else {
	      if ($bytes >>> 0 > 4294967231) {
	        var $nb_0 = -1;
	        __label__ = 31;
	        break;
	      }
	      var $151 = $bytes + 11 & -8;
	      if ((HEAP32[__gm_ + 4 >> 2] | 0) == 0) {
	        var $nb_0 = $151;
	        __label__ = 31;
	        break;
	      }
	      var $155 = _tmalloc_large($151);
	      if (($155 | 0) == 0) {
	        var $nb_0 = $151;
	        __label__ = 31;
	        break;
	      }
	      var $mem_0 = $155;
	      __label__ = 39;
	      break;
	    }
	  } while (0);
	  if (__label__ == 31) {
	    var $nb_0;
	    var $157 = HEAPU32[__gm_ + 8 >> 2];
	    if ($nb_0 >>> 0 > $157 >>> 0) {
	      var $186 = HEAPU32[__gm_ + 12 >> 2];
	      if ($nb_0 >>> 0 < $186 >>> 0) {
	        var $189 = $186 - $nb_0 | 0;
	        HEAP32[__gm_ + 12 >> 2] = $189;
	        var $190 = HEAPU32[__gm_ + 24 >> 2];
	        var $191 = $190;
	        HEAP32[__gm_ + 24 >> 2] = $191 + $nb_0 | 0;
	        HEAP32[$nb_0 + ($191 + 4) >> 2] = $189 | 1;
	        HEAP32[$190 + 4 >> 2] = $nb_0 | 3;
	        var $mem_0 = $190 + 8 | 0;
	      } else {
	        var $202 = _sys_alloc($nb_0);
	        var $mem_0 = $202;
	      }
	    } else {
	      var $160 = $157 - $nb_0 | 0;
	      var $161 = HEAPU32[__gm_ + 20 >> 2];
	      if ($160 >>> 0 > 15) {
	        var $164 = $161;
	        HEAP32[__gm_ + 20 >> 2] = $164 + $nb_0 | 0;
	        HEAP32[__gm_ + 8 >> 2] = $160;
	        HEAP32[$nb_0 + ($164 + 4) >> 2] = $160 | 1;
	        HEAP32[$164 + $157 >> 2] = $160;
	        HEAP32[$161 + 4 >> 2] = $nb_0 | 3;
	      } else {
	        HEAP32[__gm_ + 8 >> 2] = 0;
	        HEAP32[__gm_ + 20 >> 2] = 0;
	        HEAP32[$161 + 4 >> 2] = $157 | 3;
	        var $179 = $157 + ($161 + 4) | 0;
	        var $181 = HEAP32[$179 >> 2] | 1;
	        HEAP32[$179 >> 2] = $181;
	      }
	      var $mem_0 = $161 + 8 | 0;
	    }
	  }
	  var $mem_0;
	  return $mem_0;
	  return null;
	}

	Module["_malloc"] = _malloc;

	_malloc["X"] = 1;

	function _tmalloc_small($nb) {
	  var $R_1$s2;
	  var $v_0$s2;
	  var __label__;
	  var $1 = HEAP32[__gm_ + 4 >> 2];
	  var $4 = ($1 & -$1) - 1 | 0;
	  var $6 = $4 >>> 12 & 16;
	  var $7 = $4 >>> ($6 >>> 0);
	  var $9 = $7 >>> 5 & 8;
	  var $10 = $7 >>> ($9 >>> 0);
	  var $12 = $10 >>> 2 & 4;
	  var $13 = $10 >>> ($12 >>> 0);
	  var $15 = $13 >>> 1 & 2;
	  var $16 = $13 >>> ($15 >>> 0);
	  var $18 = $16 >>> 1 & 1;
	  var $26 = HEAPU32[__gm_ + (($9 | $6 | $12 | $15 | $18) + ($16 >>> ($18 >>> 0)) << 2) + 304 >> 2];
	  var $t_0 = $26;
	  var $v_0 = $26, $v_0$s2 = $v_0 >> 2;
	  var $rsize_0 = (HEAP32[$26 + 4 >> 2] & -8) - $nb | 0;
	  while (1) {
	    var $rsize_0;
	    var $v_0;
	    var $t_0;
	    var $33 = HEAP32[$t_0 + 16 >> 2];
	    if (($33 | 0) == 0) {
	      var $37 = HEAP32[$t_0 + 20 >> 2];
	      if (($37 | 0) == 0) {
	        break;
	      }
	      var $39 = $37;
	    } else {
	      var $39 = $33;
	    }
	    var $39;
	    var $43 = (HEAP32[$39 + 4 >> 2] & -8) - $nb | 0;
	    var $44 = $43 >>> 0 < $rsize_0 >>> 0;
	    var $_rsize_0 = $44 ? $43 : $rsize_0;
	    var $_v_0 = $44 ? $39 : $v_0;
	    var $t_0 = $39;
	    var $v_0 = $_v_0, $v_0$s2 = $v_0 >> 2;
	    var $rsize_0 = $_rsize_0;
	  }
	  var $46 = $v_0;
	  var $47 = HEAPU32[__gm_ + 16 >> 2];
	  var $48 = $46 >>> 0 < $47 >>> 0;
	  do {
	    if (!$48) {
	      var $50 = $46 + $nb | 0;
	      var $51 = $50;
	      if ($46 >>> 0 >= $50 >>> 0) {
	        break;
	      }
	      var $55 = HEAPU32[$v_0$s2 + 6];
	      var $57 = HEAPU32[$v_0$s2 + 3];
	      var $58 = ($57 | 0) == ($v_0 | 0);
	      do {
	        if ($58) {
	          var $69 = $v_0 + 20 | 0;
	          var $70 = HEAP32[$69 >> 2];
	          if (($70 | 0) == 0) {
	            var $73 = $v_0 + 16 | 0;
	            var $74 = HEAP32[$73 >> 2];
	            if (($74 | 0) == 0) {
	              var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
	              break;
	            }
	            var $RP_0 = $73;
	            var $R_0 = $74;
	          } else {
	            var $RP_0 = $69;
	            var $R_0 = $70;
	            __label__ = 14;
	          }
	          while (1) {
	            var $R_0;
	            var $RP_0;
	            var $76 = $R_0 + 20 | 0;
	            var $77 = HEAP32[$76 >> 2];
	            if (($77 | 0) != 0) {
	              var $RP_0 = $76;
	              var $R_0 = $77;
	              continue;
	            }
	            var $80 = $R_0 + 16 | 0;
	            var $81 = HEAPU32[$80 >> 2];
	            if (($81 | 0) == 0) {
	              break;
	            }
	            var $RP_0 = $80;
	            var $R_0 = $81;
	          }
	          if ($RP_0 >>> 0 < $47 >>> 0) {
	            _abort();
	          } else {
	            HEAP32[$RP_0 >> 2] = 0;
	            var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
	          }
	        } else {
	          var $61 = HEAPU32[$v_0$s2 + 2];
	          if ($61 >>> 0 < $47 >>> 0) {
	            _abort();
	          } else {
	            HEAP32[$61 + 12 >> 2] = $57;
	            HEAP32[$57 + 8 >> 2] = $61;
	            var $R_1 = $57, $R_1$s2 = $R_1 >> 2;
	          }
	        }
	      } while (0);
	      var $R_1;
	      var $89 = ($55 | 0) == 0;
	      $_$79 : do {
	        if (!$89) {
	          var $91 = $v_0 + 28 | 0;
	          var $93 = (HEAP32[$91 >> 2] << 2) + __gm_ + 304 | 0;
	          var $95 = ($v_0 | 0) == (HEAP32[$93 >> 2] | 0);
	          do {
	            if ($95) {
	              HEAP32[$93 >> 2] = $R_1;
	              if (($R_1 | 0) != 0) {
	                break;
	              }
	              var $101 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$91 >> 2] ^ -1);
	              HEAP32[__gm_ + 4 >> 2] = $101;
	              break $_$79;
	            }
	            if ($55 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	              _abort();
	            } else {
	              var $107 = $55 + 16 | 0;
	              if ((HEAP32[$107 >> 2] | 0) == ($v_0 | 0)) {
	                HEAP32[$107 >> 2] = $R_1;
	              } else {
	                HEAP32[$55 + 20 >> 2] = $R_1;
	              }
	              if (($R_1 | 0) == 0) {
	                break $_$79;
	              }
	            }
	          } while (0);
	          if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	            _abort();
	          } else {
	            HEAP32[$R_1$s2 + 6] = $55;
	            var $123 = HEAPU32[$v_0$s2 + 4];
	            if (($123 | 0) != 0) {
	              if ($123 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                _abort();
	              } else {
	                HEAP32[$R_1$s2 + 4] = $123;
	                HEAP32[$123 + 24 >> 2] = $R_1;
	              }
	            }
	            var $135 = HEAPU32[$v_0$s2 + 5];
	            if (($135 | 0) == 0) {
	              break;
	            }
	            if ($135 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	              _abort();
	            } else {
	              HEAP32[$R_1$s2 + 5] = $135;
	              HEAP32[$135 + 24 >> 2] = $R_1;
	            }
	          }
	        }
	      } while (0);
	      if ($rsize_0 >>> 0 < 16) {
	        var $149 = $rsize_0 + $nb | 0;
	        HEAP32[$v_0$s2 + 1] = $149 | 3;
	        var $153 = $149 + ($46 + 4) | 0;
	        var $155 = HEAP32[$153 >> 2] | 1;
	        HEAP32[$153 >> 2] = $155;
	      } else {
	        HEAP32[$v_0$s2 + 1] = $nb | 3;
	        HEAP32[$nb + ($46 + 4) >> 2] = $rsize_0 | 1;
	        HEAP32[$46 + $rsize_0 + $nb >> 2] = $rsize_0;
	        var $164 = HEAPU32[__gm_ + 8 >> 2];
	        if (($164 | 0) != 0) {
	          var $167 = HEAPU32[__gm_ + 20 >> 2];
	          var $170 = $164 >>> 2 & 1073741822;
	          var $172 = ($170 << 2) + __gm_ + 40 | 0;
	          var $173 = HEAPU32[__gm_ >> 2];
	          var $174 = 1 << ($164 >>> 3);
	          var $176 = ($173 & $174 | 0) == 0;
	          do {
	            if ($176) {
	              HEAP32[__gm_ >> 2] = $173 | $174;
	              var $F1_0 = $172;
	              var $_pre_phi = ($170 + 2 << 2) + __gm_ + 40 | 0;
	            } else {
	              var $180 = ($170 + 2 << 2) + __gm_ + 40 | 0;
	              var $181 = HEAPU32[$180 >> 2];
	              if ($181 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                var $F1_0 = $181;
	                var $_pre_phi = $180;
	                break;
	              }
	              _abort();
	            }
	          } while (0);
	          var $_pre_phi;
	          var $F1_0;
	          HEAP32[$_pre_phi >> 2] = $167;
	          HEAP32[$F1_0 + 12 >> 2] = $167;
	          HEAP32[$167 + 8 >> 2] = $F1_0;
	          HEAP32[$167 + 12 >> 2] = $172;
	        }
	        HEAP32[__gm_ + 8 >> 2] = $rsize_0;
	        HEAP32[__gm_ + 20 >> 2] = $51;
	      }
	      return $v_0 + 8 | 0;
	    }
	  } while (0);
	  _abort();
	  return null;
	}

	_tmalloc_small["X"] = 1;

	function _sys_alloc($nb) {
	  var $sp_0$s2;
	  var __label__;
	  if ((HEAP32[_mparams >> 2] | 0) == 0) {
	    _init_mparams();
	  }
	  var $7 = (HEAP32[__gm_ + 440 >> 2] & 4 | 0) == 0;
	  $_$117 : do {
	    if ($7) {
	      var $9 = HEAP32[__gm_ + 24 >> 2];
	      var $10 = ($9 | 0) == 0;
	      do {
	        if (!$10) {
	          var $12 = $9;
	          var $13 = _segment_holding($12);
	          if (($13 | 0) == 0) {
	            __label__ = 7;
	            break;
	          }
	          var $41 = HEAP32[_mparams + 8 >> 2];
	          var $46 = $nb + 47 - HEAP32[__gm_ + 12 >> 2] + $41 & -$41;
	          if ($46 >>> 0 >= 2147483647) {
	            var $tsize_0121720_ph = 0;
	            __label__ = 22;
	            break;
	          }
	          var $49 = _sbrk($46);
	          var $55 = ($49 | 0) == (HEAP32[$13 >> 2] + HEAP32[$13 + 4 >> 2] | 0);
	          var $_1 = $55 ? $46 : 0;
	          var $_2 = $55 ? $49 : -1;
	          var $tbase_0 = $_2;
	          var $tsize_0 = $_1;
	          var $asize_1 = $46;
	          var $br_0 = $49;
	          __label__ = 14;
	          break;
	        }
	        __label__ = 7;
	      } while (0);
	      do {
	        if (__label__ == 7) {
	          var $15 = _sbrk(0);
	          if (($15 | 0) == -1) {
	            var $tsize_0121720_ph = 0;
	            __label__ = 22;
	            break;
	          }
	          var $18 = HEAP32[_mparams + 8 >> 2];
	          var $22 = $18 + ($nb + 47) & -$18;
	          var $23 = $15;
	          var $24 = HEAP32[_mparams + 4 >> 2];
	          var $25 = $24 - 1 | 0;
	          if (($25 & $23 | 0) == 0) {
	            var $asize_0 = $22;
	          } else {
	            var $asize_0 = $22 - $23 + ($25 + $23 & -$24) | 0;
	          }
	          var $asize_0;
	          if ($asize_0 >>> 0 >= 2147483647) {
	            var $tsize_0121720_ph = 0;
	            __label__ = 22;
	            break;
	          }
	          var $37 = _sbrk($asize_0);
	          var $38 = ($37 | 0) == ($15 | 0);
	          var $asize_0_ = $38 ? $asize_0 : 0;
	          var $_ = $38 ? $15 : -1;
	          var $tbase_0 = $_;
	          var $tsize_0 = $asize_0_;
	          var $asize_1 = $asize_0;
	          var $br_0 = $37;
	          __label__ = 14;
	          break;
	        }
	      } while (0);
	      $_$130 : do {
	        if (__label__ == 14) {
	          var $br_0;
	          var $asize_1;
	          var $tsize_0;
	          var $tbase_0;
	          var $57 = -$asize_1 | 0;
	          if (($tbase_0 | 0) != -1) {
	            var $tsize_229 = $tsize_0;
	            var $tbase_230 = $tbase_0;
	            __label__ = 27;
	            break $_$117;
	          }
	          var $or_cond = ($br_0 | 0) != -1 & $asize_1 >>> 0 < 2147483647;
	          do {
	            if ($or_cond) {
	              if ($asize_1 >>> 0 >= ($nb + 48 | 0) >>> 0) {
	                var $asize_2 = $asize_1;
	                break;
	              }
	              var $66 = HEAP32[_mparams + 8 >> 2];
	              var $71 = $nb + 47 - $asize_1 + $66 & -$66;
	              if ($71 >>> 0 >= 2147483647) {
	                var $asize_2 = $asize_1;
	                break;
	              }
	              var $74 = _sbrk($71);
	              if (($74 | 0) == -1) {
	                var $79 = _sbrk($57);
	                var $tsize_0121720_ph = $tsize_0;
	                break $_$130;
	              }
	              var $asize_2 = $71 + $asize_1 | 0;
	            } else {
	              var $asize_2 = $asize_1;
	            }
	          } while (0);
	          var $asize_2;
	          if (($br_0 | 0) != -1) {
	            var $tsize_229 = $asize_2;
	            var $tbase_230 = $br_0;
	            __label__ = 27;
	            break $_$117;
	          }
	          var $85 = HEAP32[__gm_ + 440 >> 2] | 4;
	          HEAP32[__gm_ + 440 >> 2] = $85;
	          var $tsize_125 = $tsize_0;
	          __label__ = 24;
	          break $_$117;
	        }
	      } while (0);
	      var $tsize_0121720_ph;
	      var $83 = HEAP32[__gm_ + 440 >> 2] | 4;
	      HEAP32[__gm_ + 440 >> 2] = $83;
	      var $tsize_125 = $tsize_0121720_ph;
	      __label__ = 24;
	      break;
	    }
	    var $tsize_125 = 0;
	    __label__ = 24;
	  } while (0);
	  do {
	    if (__label__ == 24) {
	      var $tsize_125;
	      var $86 = HEAP32[_mparams + 8 >> 2];
	      var $90 = $86 + ($nb + 47) & -$86;
	      if ($90 >>> 0 >= 2147483647) {
	        __label__ = 50;
	        break;
	      }
	      var $93 = _sbrk($90);
	      var $94 = _sbrk(0);
	      if (!(($94 | 0) != -1 & ($93 | 0) != -1 & $93 >>> 0 < $94 >>> 0)) {
	        __label__ = 50;
	        break;
	      }
	      var $98 = $94 - $93 | 0;
	      var $100 = $98 >>> 0 > ($nb + 40 | 0) >>> 0;
	      var $_tsize_1 = $100 ? $98 : $tsize_125;
	      var $_tbase_1 = $100 ? $93 : -1;
	      if (($_tbase_1 | 0) == -1) {
	        __label__ = 50;
	        break;
	      }
	      var $tsize_229 = $_tsize_1;
	      var $tbase_230 = $_tbase_1;
	      __label__ = 27;
	      break;
	    }
	  } while (0);
	  $_$147 : do {
	    if (__label__ == 27) {
	      var $tbase_230;
	      var $tsize_229;
	      var $103 = HEAP32[__gm_ + 432 >> 2] + $tsize_229 | 0;
	      HEAP32[__gm_ + 432 >> 2] = $103;
	      if ($103 >>> 0 > HEAPU32[__gm_ + 436 >> 2] >>> 0) {
	        HEAP32[__gm_ + 436 >> 2] = $103;
	      }
	      var $108 = HEAPU32[__gm_ + 24 >> 2];
	      var $109 = ($108 | 0) == 0;
	      $_$152 : do {
	        if ($109) {
	          var $111 = HEAPU32[__gm_ + 16 >> 2];
	          if (($111 | 0) == 0 | $tbase_230 >>> 0 < $111 >>> 0) {
	            HEAP32[__gm_ + 16 >> 2] = $tbase_230;
	          }
	          HEAP32[__gm_ + 444 >> 2] = $tbase_230;
	          HEAP32[__gm_ + 448 >> 2] = $tsize_229;
	          HEAP32[__gm_ + 456 >> 2] = 0;
	          var $116 = HEAP32[_mparams >> 2];
	          HEAP32[__gm_ + 36 >> 2] = $116;
	          HEAP32[__gm_ + 32 >> 2] = -1;
	          _init_bins();
	          _init_top($tbase_230, $tsize_229 - 40 | 0);
	        } else {
	          var $sp_0 = __gm_ + 444 | 0, $sp_0$s2 = $sp_0 >> 2;
	          while (1) {
	            var $sp_0;
	            if (($sp_0 | 0) == 0) {
	              break;
	            }
	            var $122 = HEAPU32[$sp_0$s2];
	            var $123 = $sp_0 + 4 | 0;
	            var $124 = HEAPU32[$123 >> 2];
	            if (($tbase_230 | 0) == ($122 + $124 | 0)) {
	              if ((HEAP32[$sp_0$s2 + 3] & 8 | 0) != 0) {
	                break;
	              }
	              var $135 = $108;
	              if (!($135 >>> 0 >= $122 >>> 0 & $135 >>> 0 < $tbase_230 >>> 0)) {
	                break;
	              }
	              HEAP32[$123 >> 2] = $124 + $tsize_229 | 0;
	              var $140 = HEAP32[__gm_ + 24 >> 2];
	              var $142 = HEAP32[__gm_ + 12 >> 2] + $tsize_229 | 0;
	              _init_top($140, $142);
	              break $_$152;
	            }
	            var $sp_0 = HEAP32[$sp_0$s2 + 2], $sp_0$s2 = $sp_0 >> 2;
	          }
	          if ($tbase_230 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	            HEAP32[__gm_ + 16 >> 2] = $tbase_230;
	          }
	          var $146 = $tbase_230 + $tsize_229 | 0;
	          var $sp_1 = __gm_ + 444 | 0;
	          while (1) {
	            var $sp_1;
	            if (($sp_1 | 0) == 0) {
	              break;
	            }
	            var $150 = $sp_1 | 0;
	            if ((HEAP32[$150 >> 2] | 0) == ($146 | 0)) {
	              if ((HEAP32[$sp_1 + 12 >> 2] & 8 | 0) != 0) {
	                break;
	              }
	              HEAP32[$150 >> 2] = $tbase_230;
	              var $161 = $sp_1 + 4 | 0;
	              var $163 = HEAP32[$161 >> 2] + $tsize_229 | 0;
	              HEAP32[$161 >> 2] = $163;
	              var $164 = _prepend_alloc($tbase_230, $146, $nb);
	              var $_0 = $164;
	              __label__ = 51;
	              break $_$147;
	            }
	            var $sp_1 = HEAP32[$sp_1 + 8 >> 2];
	          }
	          _add_segment($tbase_230, $tsize_229);
	        }
	      } while (0);
	      var $166 = HEAPU32[__gm_ + 12 >> 2];
	      if ($166 >>> 0 <= $nb >>> 0) {
	        __label__ = 50;
	        break;
	      }
	      var $169 = $166 - $nb | 0;
	      HEAP32[__gm_ + 12 >> 2] = $169;
	      var $170 = HEAPU32[__gm_ + 24 >> 2];
	      var $171 = $170;
	      HEAP32[__gm_ + 24 >> 2] = $171 + $nb | 0;
	      HEAP32[$nb + ($171 + 4) >> 2] = $169 | 1;
	      HEAP32[$170 + 4 >> 2] = $nb | 3;
	      var $_0 = $170 + 8 | 0;
	      __label__ = 51;
	      break;
	    }
	  } while (0);
	  if (__label__ == 50) {
	    var $181 = ___errno();
	    HEAP32[$181 >> 2] = 12;
	    var $_0 = 0;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	_sys_alloc["X"] = 1;

	function _tmalloc_large($nb) {
	  var $R_1$s2;
	  var $112$s2;
	  var $t_224$s2;
	  var $v_3_lcssa$s2;
	  var $t_0$s2;
	  var $nb$s2 = $nb >> 2;
	  var __label__;
	  var $1 = -$nb | 0;
	  var $2 = $nb >>> 8;
	  var $3 = ($2 | 0) == 0;
	  do {
	    if ($3) {
	      var $idx_0 = 0;
	    } else {
	      if ($nb >>> 0 > 16777215) {
	        var $idx_0 = 31;
	        break;
	      }
	      var $9 = ($2 + 1048320 | 0) >>> 16 & 8;
	      var $10 = $2 << $9;
	      var $13 = ($10 + 520192 | 0) >>> 16 & 4;
	      var $14 = $10 << $13;
	      var $17 = ($14 + 245760 | 0) >>> 16 & 2;
	      var $23 = 14 - ($13 | $9 | $17) + ($14 << $17 >>> 15) | 0;
	      var $idx_0 = $nb >>> (($23 + 7 | 0) >>> 0) & 1 | $23 << 1;
	    }
	  } while (0);
	  var $idx_0;
	  var $31 = HEAPU32[__gm_ + ($idx_0 << 2) + 304 >> 2];
	  var $32 = ($31 | 0) == 0;
	  $_$6 : do {
	    if ($32) {
	      var $v_2 = 0;
	      var $rsize_2 = $1;
	      var $t_1 = 0;
	    } else {
	      if (($idx_0 | 0) == 31) {
	        var $39 = 0;
	      } else {
	        var $39 = 25 - ($idx_0 >>> 1) | 0;
	      }
	      var $39;
	      var $v_0 = 0;
	      var $rsize_0 = $1;
	      var $t_0 = $31, $t_0$s2 = $t_0 >> 2;
	      var $sizebits_0 = $nb << $39;
	      var $rst_0 = 0;
	      while (1) {
	        var $rst_0;
	        var $sizebits_0;
	        var $t_0;
	        var $rsize_0;
	        var $v_0;
	        var $44 = HEAP32[$t_0$s2 + 1] & -8;
	        var $45 = $44 - $nb | 0;
	        if ($45 >>> 0 < $rsize_0 >>> 0) {
	          if (($44 | 0) == ($nb | 0)) {
	            var $v_2 = $t_0;
	            var $rsize_2 = $45;
	            var $t_1 = $t_0;
	            break $_$6;
	          }
	          var $v_1 = $t_0;
	          var $rsize_1 = $45;
	        } else {
	          var $v_1 = $v_0;
	          var $rsize_1 = $rsize_0;
	        }
	        var $rsize_1;
	        var $v_1;
	        var $51 = HEAPU32[$t_0$s2 + 5];
	        var $54 = HEAPU32[(($sizebits_0 >>> 31 << 2) + 16 >> 2) + $t_0$s2];
	        var $rst_1 = ($51 | 0) == 0 | ($51 | 0) == ($54 | 0) ? $rst_0 : $51;
	        if (($54 | 0) == 0) {
	          var $v_2 = $v_1;
	          var $rsize_2 = $rsize_1;
	          var $t_1 = $rst_1;
	          break $_$6;
	        }
	        var $v_0 = $v_1;
	        var $rsize_0 = $rsize_1;
	        var $t_0 = $54, $t_0$s2 = $t_0 >> 2;
	        var $sizebits_0 = $sizebits_0 << 1;
	        var $rst_0 = $rst_1;
	      }
	    }
	  } while (0);
	  var $t_1;
	  var $rsize_2;
	  var $v_2;
	  var $or_cond19 = ($t_1 | 0) == 0 & ($v_2 | 0) == 0;
	  do {
	    if ($or_cond19) {
	      var $62 = 2 << $idx_0;
	      var $66 = HEAP32[__gm_ + 4 >> 2] & ($62 | -$62);
	      if (($66 | 0) == 0) {
	        var $_0 = 0;
	        __label__ = 80;
	        break;
	      }
	      var $71 = ($66 & -$66) - 1 | 0;
	      var $73 = $71 >>> 12 & 16;
	      var $74 = $71 >>> ($73 >>> 0);
	      var $76 = $74 >>> 5 & 8;
	      var $77 = $74 >>> ($76 >>> 0);
	      var $79 = $77 >>> 2 & 4;
	      var $80 = $77 >>> ($79 >>> 0);
	      var $82 = $80 >>> 1 & 2;
	      var $83 = $80 >>> ($82 >>> 0);
	      var $85 = $83 >>> 1 & 1;
	      var $t_2_ph = HEAP32[__gm_ + (($76 | $73 | $79 | $82 | $85) + ($83 >>> ($85 >>> 0)) << 2) + 304 >> 2];
	      __label__ = 15;
	      break;
	    }
	    var $t_2_ph = $t_1;
	    __label__ = 15;
	  } while (0);
	  $_$20 : do {
	    if (__label__ == 15) {
	      var $t_2_ph;
	      var $94 = ($t_2_ph | 0) == 0;
	      $_$22 : do {
	        if ($94) {
	          var $rsize_3_lcssa = $rsize_2;
	          var $v_3_lcssa = $v_2, $v_3_lcssa$s2 = $v_3_lcssa >> 2;
	        } else {
	          var $t_224 = $t_2_ph, $t_224$s2 = $t_224 >> 2;
	          var $rsize_325 = $rsize_2;
	          var $v_326 = $v_2;
	          while (1) {
	            var $v_326;
	            var $rsize_325;
	            var $t_224;
	            var $98 = (HEAP32[$t_224$s2 + 1] & -8) - $nb | 0;
	            var $99 = $98 >>> 0 < $rsize_325 >>> 0;
	            var $_rsize_3 = $99 ? $98 : $rsize_325;
	            var $t_2_v_3 = $99 ? $t_224 : $v_326;
	            var $101 = HEAPU32[$t_224$s2 + 4];
	            if (($101 | 0) != 0) {
	              var $t_224 = $101, $t_224$s2 = $t_224 >> 2;
	              var $rsize_325 = $_rsize_3;
	              var $v_326 = $t_2_v_3;
	              continue;
	            }
	            var $104 = HEAPU32[$t_224$s2 + 5];
	            if (($104 | 0) == 0) {
	              var $rsize_3_lcssa = $_rsize_3;
	              var $v_3_lcssa = $t_2_v_3, $v_3_lcssa$s2 = $v_3_lcssa >> 2;
	              break $_$22;
	            }
	            var $t_224 = $104, $t_224$s2 = $t_224 >> 2;
	            var $rsize_325 = $_rsize_3;
	            var $v_326 = $t_2_v_3;
	          }
	        }
	      } while (0);
	      var $v_3_lcssa;
	      var $rsize_3_lcssa;
	      if (($v_3_lcssa | 0) == 0) {
	        var $_0 = 0;
	        break;
	      }
	      if ($rsize_3_lcssa >>> 0 >= (HEAP32[__gm_ + 8 >> 2] - $nb | 0) >>> 0) {
	        var $_0 = 0;
	        break;
	      }
	      var $112 = $v_3_lcssa, $112$s2 = $112 >> 2;
	      var $113 = HEAPU32[__gm_ + 16 >> 2];
	      var $114 = $112 >>> 0 < $113 >>> 0;
	      do {
	        if (!$114) {
	          var $116 = $112 + $nb | 0;
	          var $117 = $116;
	          if ($112 >>> 0 >= $116 >>> 0) {
	            break;
	          }
	          var $121 = HEAPU32[$v_3_lcssa$s2 + 6];
	          var $123 = HEAPU32[$v_3_lcssa$s2 + 3];
	          var $124 = ($123 | 0) == ($v_3_lcssa | 0);
	          do {
	            if ($124) {
	              var $135 = $v_3_lcssa + 20 | 0;
	              var $136 = HEAP32[$135 >> 2];
	              if (($136 | 0) == 0) {
	                var $139 = $v_3_lcssa + 16 | 0;
	                var $140 = HEAP32[$139 >> 2];
	                if (($140 | 0) == 0) {
	                  var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
	                  break;
	                }
	                var $RP_0 = $139;
	                var $R_0 = $140;
	              } else {
	                var $RP_0 = $135;
	                var $R_0 = $136;
	                __label__ = 28;
	              }
	              while (1) {
	                var $R_0;
	                var $RP_0;
	                var $142 = $R_0 + 20 | 0;
	                var $143 = HEAP32[$142 >> 2];
	                if (($143 | 0) != 0) {
	                  var $RP_0 = $142;
	                  var $R_0 = $143;
	                  continue;
	                }
	                var $146 = $R_0 + 16 | 0;
	                var $147 = HEAPU32[$146 >> 2];
	                if (($147 | 0) == 0) {
	                  break;
	                }
	                var $RP_0 = $146;
	                var $R_0 = $147;
	              }
	              if ($RP_0 >>> 0 < $113 >>> 0) {
	                _abort();
	              } else {
	                HEAP32[$RP_0 >> 2] = 0;
	                var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
	              }
	            } else {
	              var $127 = HEAPU32[$v_3_lcssa$s2 + 2];
	              if ($127 >>> 0 < $113 >>> 0) {
	                _abort();
	              } else {
	                HEAP32[$127 + 12 >> 2] = $123;
	                HEAP32[$123 + 8 >> 2] = $127;
	                var $R_1 = $123, $R_1$s2 = $R_1 >> 2;
	              }
	            }
	          } while (0);
	          var $R_1;
	          var $155 = ($121 | 0) == 0;
	          $_$48 : do {
	            if ($155) {
	              var $v_3_lcssa1 = $v_3_lcssa;
	            } else {
	              var $157 = $v_3_lcssa + 28 | 0;
	              var $159 = (HEAP32[$157 >> 2] << 2) + __gm_ + 304 | 0;
	              var $161 = ($v_3_lcssa | 0) == (HEAP32[$159 >> 2] | 0);
	              do {
	                if ($161) {
	                  HEAP32[$159 >> 2] = $R_1;
	                  if (($R_1 | 0) != 0) {
	                    break;
	                  }
	                  var $167 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$157 >> 2] ^ -1);
	                  HEAP32[__gm_ + 4 >> 2] = $167;
	                  var $v_3_lcssa1 = $v_3_lcssa;
	                  break $_$48;
	                }
	                if ($121 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  _abort();
	                } else {
	                  var $173 = $121 + 16 | 0;
	                  if ((HEAP32[$173 >> 2] | 0) == ($v_3_lcssa | 0)) {
	                    HEAP32[$173 >> 2] = $R_1;
	                  } else {
	                    HEAP32[$121 + 20 >> 2] = $R_1;
	                  }
	                  if (($R_1 | 0) == 0) {
	                    var $v_3_lcssa1 = $v_3_lcssa;
	                    break $_$48;
	                  }
	                }
	              } while (0);
	              if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                _abort();
	              } else {
	                HEAP32[$R_1$s2 + 6] = $121;
	                var $189 = HEAPU32[$v_3_lcssa$s2 + 4];
	                if (($189 | 0) != 0) {
	                  if ($189 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$R_1$s2 + 4] = $189;
	                    HEAP32[$189 + 24 >> 2] = $R_1;
	                  }
	                }
	                var $201 = HEAPU32[$v_3_lcssa$s2 + 5];
	                if (($201 | 0) == 0) {
	                  var $v_3_lcssa1 = $v_3_lcssa;
	                  break;
	                }
	                if ($201 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  _abort();
	                } else {
	                  HEAP32[$R_1$s2 + 5] = $201;
	                  HEAP32[$201 + 24 >> 2] = $R_1;
	                  var $v_3_lcssa1 = $v_3_lcssa;
	                }
	              }
	            }
	          } while (0);
	          var $v_3_lcssa1;
	          var $213 = $rsize_3_lcssa >>> 0 < 16;
	          $_$76 : do {
	            if ($213) {
	              var $215 = $rsize_3_lcssa + $nb | 0;
	              HEAP32[$v_3_lcssa1 + 4 >> 2] = $215 | 3;
	              var $219 = $215 + ($112 + 4) | 0;
	              var $221 = HEAP32[$219 >> 2] | 1;
	              HEAP32[$219 >> 2] = $221;
	            } else {
	              HEAP32[$v_3_lcssa1 + 4 >> 2] = $nb | 3;
	              HEAP32[$nb$s2 + ($112$s2 + 1)] = $rsize_3_lcssa | 1;
	              HEAP32[($rsize_3_lcssa >> 2) + $112$s2 + $nb$s2] = $rsize_3_lcssa;
	              if ($rsize_3_lcssa >>> 0 < 256) {
	                var $234 = $rsize_3_lcssa >>> 2 & 1073741822;
	                var $236 = ($234 << 2) + __gm_ + 40 | 0;
	                var $237 = HEAPU32[__gm_ >> 2];
	                var $238 = 1 << ($rsize_3_lcssa >>> 3);
	                var $240 = ($237 & $238 | 0) == 0;
	                do {
	                  if ($240) {
	                    HEAP32[__gm_ >> 2] = $237 | $238;
	                    var $F5_0 = $236;
	                    var $_pre_phi = ($234 + 2 << 2) + __gm_ + 40 | 0;
	                  } else {
	                    var $244 = ($234 + 2 << 2) + __gm_ + 40 | 0;
	                    var $245 = HEAPU32[$244 >> 2];
	                    if ($245 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                      var $F5_0 = $245;
	                      var $_pre_phi = $244;
	                      break;
	                    }
	                    _abort();
	                  }
	                } while (0);
	                var $_pre_phi;
	                var $F5_0;
	                HEAP32[$_pre_phi >> 2] = $117;
	                HEAP32[$F5_0 + 12 >> 2] = $117;
	                HEAP32[$nb$s2 + ($112$s2 + 2)] = $F5_0;
	                HEAP32[$nb$s2 + ($112$s2 + 3)] = $236;
	              } else {
	                var $257 = $116;
	                var $258 = $rsize_3_lcssa >>> 8;
	                var $259 = ($258 | 0) == 0;
	                do {
	                  if ($259) {
	                    var $I7_0 = 0;
	                  } else {
	                    if ($rsize_3_lcssa >>> 0 > 16777215) {
	                      var $I7_0 = 31;
	                      break;
	                    }
	                    var $265 = ($258 + 1048320 | 0) >>> 16 & 8;
	                    var $266 = $258 << $265;
	                    var $269 = ($266 + 520192 | 0) >>> 16 & 4;
	                    var $270 = $266 << $269;
	                    var $273 = ($270 + 245760 | 0) >>> 16 & 2;
	                    var $279 = 14 - ($269 | $265 | $273) + ($270 << $273 >>> 15) | 0;
	                    var $I7_0 = $rsize_3_lcssa >>> (($279 + 7 | 0) >>> 0) & 1 | $279 << 1;
	                  }
	                } while (0);
	                var $I7_0;
	                var $286 = ($I7_0 << 2) + __gm_ + 304 | 0;
	                HEAP32[$nb$s2 + ($112$s2 + 7)] = $I7_0;
	                var $289 = $nb + ($112 + 16) | 0;
	                HEAP32[$nb$s2 + ($112$s2 + 5)] = 0;
	                HEAP32[$289 >> 2] = 0;
	                var $293 = HEAP32[__gm_ + 4 >> 2];
	                var $294 = 1 << $I7_0;
	                if (($293 & $294 | 0) == 0) {
	                  var $298 = $293 | $294;
	                  HEAP32[__gm_ + 4 >> 2] = $298;
	                  HEAP32[$286 >> 2] = $257;
	                  HEAP32[$nb$s2 + ($112$s2 + 6)] = $286;
	                  HEAP32[$nb$s2 + ($112$s2 + 3)] = $257;
	                  HEAP32[$nb$s2 + ($112$s2 + 2)] = $257;
	                } else {
	                  if (($I7_0 | 0) == 31) {
	                    var $313 = 0;
	                  } else {
	                    var $313 = 25 - ($I7_0 >>> 1) | 0;
	                  }
	                  var $313;
	                  var $K12_0 = $rsize_3_lcssa << $313;
	                  var $T_0 = HEAP32[$286 >> 2];
	                  while (1) {
	                    var $T_0;
	                    var $K12_0;
	                    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa | 0)) {
	                      var $339 = $T_0 + 8 | 0;
	                      var $340 = HEAPU32[$339 >> 2];
	                      var $342 = HEAPU32[__gm_ + 16 >> 2];
	                      var $343 = $T_0 >>> 0 < $342 >>> 0;
	                      do {
	                        if (!$343) {
	                          if ($340 >>> 0 < $342 >>> 0) {
	                            break;
	                          }
	                          HEAP32[$340 + 12 >> 2] = $257;
	                          HEAP32[$339 >> 2] = $257;
	                          HEAP32[$nb$s2 + ($112$s2 + 2)] = $340;
	                          HEAP32[$nb$s2 + ($112$s2 + 3)] = $T_0;
	                          HEAP32[$nb$s2 + ($112$s2 + 6)] = 0;
	                          break $_$76;
	                        }
	                      } while (0);
	                      _abort();
	                    } else {
	                      var $322 = ($K12_0 >>> 31 << 2) + $T_0 + 16 | 0;
	                      var $323 = HEAPU32[$322 >> 2];
	                      if (($323 | 0) != 0) {
	                        var $K12_0 = $K12_0 << 1;
	                        var $T_0 = $323;
	                        continue;
	                      }
	                      if ($322 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                        HEAP32[$322 >> 2] = $257;
	                        HEAP32[$nb$s2 + ($112$s2 + 6)] = $T_0;
	                        HEAP32[$nb$s2 + ($112$s2 + 3)] = $257;
	                        HEAP32[$nb$s2 + ($112$s2 + 2)] = $257;
	                        break $_$76;
	                      }
	                      _abort();
	                    }
	                  }
	                }
	              }
	            }
	          } while (0);
	          var $_0 = $v_3_lcssa1 + 8 | 0;
	          break $_$20;
	        }
	      } while (0);
	      _abort();
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_tmalloc_large["X"] = 1;

	function _release_unused_segments() {
	  var $sp_0_in = __gm_ + 452 | 0;
	  while (1) {
	    var $sp_0_in;
	    var $sp_0 = HEAP32[$sp_0_in >> 2];
	    if (($sp_0 | 0) == 0) {
	      break;
	    }
	    var $sp_0_in = $sp_0 + 8 | 0;
	  }
	  HEAP32[__gm_ + 32 >> 2] = -1;
	  return;
	  return;
	}

	function _sys_trim() {
	  var $27$s2;
	  if ((HEAP32[_mparams >> 2] | 0) == 0) {
	    _init_mparams();
	  }
	  var $5 = HEAPU32[__gm_ + 24 >> 2];
	  var $6 = ($5 | 0) == 0;
	  $_$181 : do {
	    if (!$6) {
	      var $8 = HEAPU32[__gm_ + 12 >> 2];
	      var $9 = $8 >>> 0 > 40;
	      do {
	        if ($9) {
	          var $11 = HEAPU32[_mparams + 8 >> 2];
	          var $13 = $8 - 41 + $11 | 0;
	          var $14 = Math.floor(($13 >>> 0) / ($11 >>> 0));
	          var $16 = ($14 - 1) * $11 | 0;
	          var $17 = $5;
	          var $18 = _segment_holding($17);
	          if ((HEAP32[$18 + 12 >> 2] & 8 | 0) != 0) {
	            break;
	          }
	          var $24 = _sbrk(0);
	          var $27$s2 = ($18 + 4 | 0) >> 2;
	          if (($24 | 0) != (HEAP32[$18 >> 2] + HEAP32[$27$s2] | 0)) {
	            break;
	          }
	          var $_ = $16 >>> 0 > 2147483646 ? -2147483648 - $11 | 0 : $16;
	          var $34 = -$_ | 0;
	          var $35 = _sbrk($34);
	          var $36 = _sbrk(0);
	          if (!(($35 | 0) != -1 & $36 >>> 0 < $24 >>> 0)) {
	            break;
	          }
	          var $42 = $24 - $36 | 0;
	          if (($24 | 0) == ($36 | 0)) {
	            break;
	          }
	          var $46 = HEAP32[$27$s2] - $42 | 0;
	          HEAP32[$27$s2] = $46;
	          var $48 = HEAP32[__gm_ + 432 >> 2] - $42 | 0;
	          HEAP32[__gm_ + 432 >> 2] = $48;
	          var $49 = HEAP32[__gm_ + 24 >> 2];
	          var $51 = HEAP32[__gm_ + 12 >> 2] - $42 | 0;
	          _init_top($49, $51);
	          break $_$181;
	        }
	      } while (0);
	      if (HEAPU32[__gm_ + 12 >> 2] >>> 0 <= HEAPU32[__gm_ + 28 >> 2] >>> 0) {
	        break;
	      }
	      HEAP32[__gm_ + 28 >> 2] = -1;
	    }
	  } while (0);
	  return;
	  return;
	}

	_sys_trim["X"] = 1;

	function _free($mem) {
	  var $R7_1$s2;
	  var $R_1$s2;
	  var $p_0$s2;
	  var $165$s2;
	  var $_sum2$s2;
	  var $14$s2;
	  var $mem$s2 = $mem >> 2;
	  var __label__;
	  var $1 = ($mem | 0) == 0;
	  $_$2 : do {
	    if (!$1) {
	      var $3 = $mem - 8 | 0;
	      var $4 = $3;
	      var $5 = HEAPU32[__gm_ + 16 >> 2];
	      var $6 = $3 >>> 0 < $5 >>> 0;
	      $_$4 : do {
	        if (!$6) {
	          var $10 = HEAPU32[$mem - 4 >> 2];
	          var $11 = $10 & 3;
	          if (($11 | 0) == 1) {
	            break;
	          }
	          var $14 = $10 & -8, $14$s2 = $14 >> 2;
	          var $15 = $mem + ($14 - 8) | 0;
	          var $16 = $15;
	          var $18 = ($10 & 1 | 0) == 0;
	          $_$7 : do {
	            if ($18) {
	              var $21 = HEAPU32[$3 >> 2];
	              if (($11 | 0) == 0) {
	                break $_$2;
	              }
	              var $_sum2 = -8 - $21 | 0, $_sum2$s2 = $_sum2 >> 2;
	              var $24 = $mem + $_sum2 | 0;
	              var $25 = $24;
	              var $26 = $21 + $14 | 0;
	              if ($24 >>> 0 < $5 >>> 0) {
	                break $_$4;
	              }
	              if (($25 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
	                var $165$s2 = ($mem + ($14 - 4) | 0) >> 2;
	                if ((HEAP32[$165$s2] & 3 | 0) != 3) {
	                  var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                  var $psize_0 = $26;
	                  break;
	                }
	                HEAP32[__gm_ + 8 >> 2] = $26;
	                var $171 = HEAP32[$165$s2] & -2;
	                HEAP32[$165$s2] = $171;
	                HEAP32[$_sum2$s2 + ($mem$s2 + 1)] = $26 | 1;
	                HEAP32[$15 >> 2] = $26;
	                break $_$2;
	              }
	              if ($21 >>> 0 < 256) {
	                var $37 = HEAPU32[$_sum2$s2 + ($mem$s2 + 2)];
	                var $40 = HEAPU32[$_sum2$s2 + ($mem$s2 + 3)];
	                if (($37 | 0) == ($40 | 0)) {
	                  var $46 = HEAP32[__gm_ >> 2] & (1 << ($21 >>> 3) ^ -1);
	                  HEAP32[__gm_ >> 2] = $46;
	                  var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                  var $psize_0 = $26;
	                } else {
	                  var $51 = (($21 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
	                  var $or_cond = ($37 | 0) != ($51 | 0) & $37 >>> 0 < $5 >>> 0;
	                  do {
	                    if (!$or_cond) {
	                      if (!(($40 | 0) == ($51 | 0) | $40 >>> 0 >= $5 >>> 0)) {
	                        break;
	                      }
	                      HEAP32[$37 + 12 >> 2] = $40;
	                      HEAP32[$40 + 8 >> 2] = $37;
	                      var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                      var $psize_0 = $26;
	                      break $_$7;
	                    }
	                  } while (0);
	                  _abort();
	                }
	              } else {
	                var $62 = $24;
	                var $65 = HEAPU32[$_sum2$s2 + ($mem$s2 + 6)];
	                var $68 = HEAPU32[$_sum2$s2 + ($mem$s2 + 3)];
	                var $69 = ($68 | 0) == ($62 | 0);
	                do {
	                  if ($69) {
	                    var $82 = $_sum2 + ($mem + 20) | 0;
	                    var $83 = HEAP32[$82 >> 2];
	                    if (($83 | 0) == 0) {
	                      var $87 = $_sum2 + ($mem + 16) | 0;
	                      var $88 = HEAP32[$87 >> 2];
	                      if (($88 | 0) == 0) {
	                        var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
	                        break;
	                      }
	                      var $RP_0 = $87;
	                      var $R_0 = $88;
	                    } else {
	                      var $RP_0 = $82;
	                      var $R_0 = $83;
	                      __label__ = 22;
	                    }
	                    while (1) {
	                      var $R_0;
	                      var $RP_0;
	                      var $90 = $R_0 + 20 | 0;
	                      var $91 = HEAP32[$90 >> 2];
	                      if (($91 | 0) != 0) {
	                        var $RP_0 = $90;
	                        var $R_0 = $91;
	                        continue;
	                      }
	                      var $94 = $R_0 + 16 | 0;
	                      var $95 = HEAPU32[$94 >> 2];
	                      if (($95 | 0) == 0) {
	                        break;
	                      }
	                      var $RP_0 = $94;
	                      var $R_0 = $95;
	                    }
	                    if ($RP_0 >>> 0 < $5 >>> 0) {
	                      _abort();
	                    } else {
	                      HEAP32[$RP_0 >> 2] = 0;
	                      var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
	                    }
	                  } else {
	                    var $73 = HEAPU32[$_sum2$s2 + ($mem$s2 + 2)];
	                    if ($73 >>> 0 < $5 >>> 0) {
	                      _abort();
	                    } else {
	                      HEAP32[$73 + 12 >> 2] = $68;
	                      HEAP32[$68 + 8 >> 2] = $73;
	                      var $R_1 = $68, $R_1$s2 = $R_1 >> 2;
	                    }
	                  }
	                } while (0);
	                var $R_1;
	                if (($65 | 0) == 0) {
	                  var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                  var $psize_0 = $26;
	                  break;
	                }
	                var $106 = $_sum2 + ($mem + 28) | 0;
	                var $108 = (HEAP32[$106 >> 2] << 2) + __gm_ + 304 | 0;
	                var $110 = ($62 | 0) == (HEAP32[$108 >> 2] | 0);
	                do {
	                  if ($110) {
	                    HEAP32[$108 >> 2] = $R_1;
	                    if (($R_1 | 0) != 0) {
	                      break;
	                    }
	                    var $116 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$106 >> 2] ^ -1);
	                    HEAP32[__gm_ + 4 >> 2] = $116;
	                    var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                    var $psize_0 = $26;
	                    break $_$7;
	                  }
	                  if ($65 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    var $122 = $65 + 16 | 0;
	                    if ((HEAP32[$122 >> 2] | 0) == ($62 | 0)) {
	                      HEAP32[$122 >> 2] = $R_1;
	                    } else {
	                      HEAP32[$65 + 20 >> 2] = $R_1;
	                    }
	                    if (($R_1 | 0) == 0) {
	                      var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                      var $psize_0 = $26;
	                      break $_$7;
	                    }
	                  }
	                } while (0);
	                if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  _abort();
	                } else {
	                  HEAP32[$R_1$s2 + 6] = $65;
	                  var $139 = HEAPU32[$_sum2$s2 + ($mem$s2 + 4)];
	                  if (($139 | 0) != 0) {
	                    if ($139 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                      _abort();
	                    } else {
	                      HEAP32[$R_1$s2 + 4] = $139;
	                      HEAP32[$139 + 24 >> 2] = $R_1;
	                    }
	                  }
	                  var $152 = HEAPU32[$_sum2$s2 + ($mem$s2 + 5)];
	                  if (($152 | 0) == 0) {
	                    var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                    var $psize_0 = $26;
	                    break;
	                  }
	                  if ($152 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$R_1$s2 + 5] = $152;
	                    HEAP32[$152 + 24 >> 2] = $R_1;
	                    var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
	                    var $psize_0 = $26;
	                  }
	                }
	              }
	            } else {
	              var $p_0 = $4, $p_0$s2 = $p_0 >> 2;
	              var $psize_0 = $14;
	            }
	          } while (0);
	          var $psize_0;
	          var $p_0;
	          var $177 = $p_0;
	          if ($177 >>> 0 >= $15 >>> 0) {
	            break;
	          }
	          var $181 = $mem + ($14 - 4) | 0;
	          var $182 = HEAPU32[$181 >> 2];
	          if (($182 & 1 | 0) == 0) {
	            break;
	          }
	          var $187 = ($182 & 2 | 0) == 0;
	          do {
	            if ($187) {
	              if (($16 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0)) {
	                var $193 = HEAP32[__gm_ + 12 >> 2] + $psize_0 | 0;
	                HEAP32[__gm_ + 12 >> 2] = $193;
	                HEAP32[__gm_ + 24 >> 2] = $p_0;
	                var $194 = $193 | 1;
	                HEAP32[$p_0$s2 + 1] = $194;
	                if (($p_0 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
	                  HEAP32[__gm_ + 20 >> 2] = 0;
	                  HEAP32[__gm_ + 8 >> 2] = 0;
	                }
	                if ($193 >>> 0 <= HEAPU32[__gm_ + 28 >> 2] >>> 0) {
	                  break $_$2;
	                }
	                _sys_trim();
	                break $_$2;
	              }
	              if (($16 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
	                var $208 = HEAP32[__gm_ + 8 >> 2] + $psize_0 | 0;
	                HEAP32[__gm_ + 8 >> 2] = $208;
	                HEAP32[__gm_ + 20 >> 2] = $p_0;
	                var $209 = $208 | 1;
	                HEAP32[$p_0$s2 + 1] = $209;
	                var $212 = $177 + $208 | 0;
	                HEAP32[$212 >> 2] = $208;
	                break $_$2;
	              }
	              var $215 = ($182 & -8) + $psize_0 | 0;
	              var $216 = $182 >>> 3;
	              var $217 = $182 >>> 0 < 256;
	              $_$82 : do {
	                if ($217) {
	                  var $221 = HEAPU32[$mem$s2 + $14$s2];
	                  var $224 = HEAPU32[(($14 | 4) >> 2) + $mem$s2];
	                  if (($221 | 0) == ($224 | 0)) {
	                    var $230 = HEAP32[__gm_ >> 2] & (1 << $216 ^ -1);
	                    HEAP32[__gm_ >> 2] = $230;
	                  } else {
	                    var $235 = (($182 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
	                    var $236 = ($221 | 0) == ($235 | 0);
	                    do {
	                      if ($236) {
	                        __label__ = 64;
	                      } else {
	                        if ($221 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                          __label__ = 67;
	                          break;
	                        }
	                        __label__ = 64;
	                        break;
	                      }
	                    } while (0);
	                    do {
	                      if (__label__ == 64) {
	                        if (($224 | 0) != ($235 | 0)) {
	                          if ($224 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                            break;
	                          }
	                        }
	                        HEAP32[$221 + 12 >> 2] = $224;
	                        HEAP32[$224 + 8 >> 2] = $221;
	                        break $_$82;
	                      }
	                    } while (0);
	                    _abort();
	                  }
	                } else {
	                  var $250 = $15;
	                  var $253 = HEAPU32[$14$s2 + ($mem$s2 + 4)];
	                  var $256 = HEAPU32[(($14 | 4) >> 2) + $mem$s2];
	                  var $257 = ($256 | 0) == ($250 | 0);
	                  do {
	                    if ($257) {
	                      var $271 = $14 + ($mem + 12) | 0;
	                      var $272 = HEAP32[$271 >> 2];
	                      if (($272 | 0) == 0) {
	                        var $276 = $14 + ($mem + 8) | 0;
	                        var $277 = HEAP32[$276 >> 2];
	                        if (($277 | 0) == 0) {
	                          var $R7_1 = 0, $R7_1$s2 = $R7_1 >> 2;
	                          break;
	                        }
	                        var $RP9_0 = $276;
	                        var $R7_0 = $277;
	                      } else {
	                        var $RP9_0 = $271;
	                        var $R7_0 = $272;
	                        __label__ = 74;
	                      }
	                      while (1) {
	                        var $R7_0;
	                        var $RP9_0;
	                        var $279 = $R7_0 + 20 | 0;
	                        var $280 = HEAP32[$279 >> 2];
	                        if (($280 | 0) != 0) {
	                          var $RP9_0 = $279;
	                          var $R7_0 = $280;
	                          continue;
	                        }
	                        var $283 = $R7_0 + 16 | 0;
	                        var $284 = HEAPU32[$283 >> 2];
	                        if (($284 | 0) == 0) {
	                          break;
	                        }
	                        var $RP9_0 = $283;
	                        var $R7_0 = $284;
	                      }
	                      if ($RP9_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                        _abort();
	                      } else {
	                        HEAP32[$RP9_0 >> 2] = 0;
	                        var $R7_1 = $R7_0, $R7_1$s2 = $R7_1 >> 2;
	                      }
	                    } else {
	                      var $261 = HEAPU32[$mem$s2 + $14$s2];
	                      if ($261 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                        _abort();
	                      } else {
	                        HEAP32[$261 + 12 >> 2] = $256;
	                        HEAP32[$256 + 8 >> 2] = $261;
	                        var $R7_1 = $256, $R7_1$s2 = $R7_1 >> 2;
	                      }
	                    }
	                  } while (0);
	                  var $R7_1;
	                  if (($253 | 0) == 0) {
	                    break;
	                  }
	                  var $296 = $14 + ($mem + 20) | 0;
	                  var $298 = (HEAP32[$296 >> 2] << 2) + __gm_ + 304 | 0;
	                  var $300 = ($250 | 0) == (HEAP32[$298 >> 2] | 0);
	                  do {
	                    if ($300) {
	                      HEAP32[$298 >> 2] = $R7_1;
	                      if (($R7_1 | 0) != 0) {
	                        break;
	                      }
	                      var $306 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$296 >> 2] ^ -1);
	                      HEAP32[__gm_ + 4 >> 2] = $306;
	                      break $_$82;
	                    }
	                    if ($253 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                      _abort();
	                    } else {
	                      var $312 = $253 + 16 | 0;
	                      if ((HEAP32[$312 >> 2] | 0) == ($250 | 0)) {
	                        HEAP32[$312 >> 2] = $R7_1;
	                      } else {
	                        HEAP32[$253 + 20 >> 2] = $R7_1;
	                      }
	                      if (($R7_1 | 0) == 0) {
	                        break $_$82;
	                      }
	                    }
	                  } while (0);
	                  if ($R7_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$R7_1$s2 + 6] = $253;
	                    var $329 = HEAPU32[$14$s2 + ($mem$s2 + 2)];
	                    if (($329 | 0) != 0) {
	                      if ($329 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                        _abort();
	                      } else {
	                        HEAP32[$R7_1$s2 + 4] = $329;
	                        HEAP32[$329 + 24 >> 2] = $R7_1;
	                      }
	                    }
	                    var $342 = HEAPU32[$14$s2 + ($mem$s2 + 3)];
	                    if (($342 | 0) == 0) {
	                      break;
	                    }
	                    if ($342 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                      _abort();
	                    } else {
	                      HEAP32[$R7_1$s2 + 5] = $342;
	                      HEAP32[$342 + 24 >> 2] = $R7_1;
	                    }
	                  }
	                }
	              } while (0);
	              HEAP32[$p_0$s2 + 1] = $215 | 1;
	              HEAP32[$177 + $215 >> 2] = $215;
	              if (($p_0 | 0) != (HEAP32[__gm_ + 20 >> 2] | 0)) {
	                var $psize_1 = $215;
	                break;
	              }
	              HEAP32[__gm_ + 8 >> 2] = $215;
	              break $_$2;
	            } else {
	              HEAP32[$181 >> 2] = $182 & -2;
	              HEAP32[$p_0$s2 + 1] = $psize_0 | 1;
	              HEAP32[$177 + $psize_0 >> 2] = $psize_0;
	              var $psize_1 = $psize_0;
	            }
	          } while (0);
	          var $psize_1;
	          if ($psize_1 >>> 0 < 256) {
	            var $372 = $psize_1 >>> 2 & 1073741822;
	            var $374 = ($372 << 2) + __gm_ + 40 | 0;
	            var $375 = HEAPU32[__gm_ >> 2];
	            var $376 = 1 << ($psize_1 >>> 3);
	            var $378 = ($375 & $376 | 0) == 0;
	            do {
	              if ($378) {
	                HEAP32[__gm_ >> 2] = $375 | $376;
	                var $F16_0 = $374;
	                var $_pre_phi = ($372 + 2 << 2) + __gm_ + 40 | 0;
	              } else {
	                var $382 = ($372 + 2 << 2) + __gm_ + 40 | 0;
	                var $383 = HEAPU32[$382 >> 2];
	                if ($383 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  var $F16_0 = $383;
	                  var $_pre_phi = $382;
	                  break;
	                }
	                _abort();
	              }
	            } while (0);
	            var $_pre_phi;
	            var $F16_0;
	            HEAP32[$_pre_phi >> 2] = $p_0;
	            HEAP32[$F16_0 + 12 >> 2] = $p_0;
	            HEAP32[$p_0$s2 + 2] = $F16_0;
	            HEAP32[$p_0$s2 + 3] = $374;
	            break $_$2;
	          }
	          var $393 = $p_0;
	          var $394 = $psize_1 >>> 8;
	          var $395 = ($394 | 0) == 0;
	          do {
	            if ($395) {
	              var $I18_0 = 0;
	            } else {
	              if ($psize_1 >>> 0 > 16777215) {
	                var $I18_0 = 31;
	                break;
	              }
	              var $401 = ($394 + 1048320 | 0) >>> 16 & 8;
	              var $402 = $394 << $401;
	              var $405 = ($402 + 520192 | 0) >>> 16 & 4;
	              var $406 = $402 << $405;
	              var $409 = ($406 + 245760 | 0) >>> 16 & 2;
	              var $415 = 14 - ($405 | $401 | $409) + ($406 << $409 >>> 15) | 0;
	              var $I18_0 = $psize_1 >>> (($415 + 7 | 0) >>> 0) & 1 | $415 << 1;
	            }
	          } while (0);
	          var $I18_0;
	          var $422 = ($I18_0 << 2) + __gm_ + 304 | 0;
	          HEAP32[$p_0$s2 + 7] = $I18_0;
	          HEAP32[$p_0$s2 + 5] = 0;
	          HEAP32[$p_0$s2 + 4] = 0;
	          var $426 = HEAP32[__gm_ + 4 >> 2];
	          var $427 = 1 << $I18_0;
	          var $429 = ($426 & $427 | 0) == 0;
	          $_$154 : do {
	            if ($429) {
	              var $431 = $426 | $427;
	              HEAP32[__gm_ + 4 >> 2] = $431;
	              HEAP32[$422 >> 2] = $393;
	              HEAP32[$p_0$s2 + 6] = $422;
	              HEAP32[$p_0$s2 + 3] = $p_0;
	              HEAP32[$p_0$s2 + 2] = $p_0;
	            } else {
	              if (($I18_0 | 0) == 31) {
	                var $442 = 0;
	              } else {
	                var $442 = 25 - ($I18_0 >>> 1) | 0;
	              }
	              var $442;
	              var $K19_0 = $psize_1 << $442;
	              var $T_0 = HEAP32[$422 >> 2];
	              while (1) {
	                var $T_0;
	                var $K19_0;
	                if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
	                  var $465 = $T_0 + 8 | 0;
	                  var $466 = HEAPU32[$465 >> 2];
	                  var $468 = HEAPU32[__gm_ + 16 >> 2];
	                  var $469 = $T_0 >>> 0 < $468 >>> 0;
	                  do {
	                    if (!$469) {
	                      if ($466 >>> 0 < $468 >>> 0) {
	                        break;
	                      }
	                      HEAP32[$466 + 12 >> 2] = $393;
	                      HEAP32[$465 >> 2] = $393;
	                      HEAP32[$p_0$s2 + 2] = $466;
	                      HEAP32[$p_0$s2 + 3] = $T_0;
	                      HEAP32[$p_0$s2 + 6] = 0;
	                      break $_$154;
	                    }
	                  } while (0);
	                  _abort();
	                } else {
	                  var $451 = ($K19_0 >>> 31 << 2) + $T_0 + 16 | 0;
	                  var $452 = HEAPU32[$451 >> 2];
	                  if (($452 | 0) != 0) {
	                    var $K19_0 = $K19_0 << 1;
	                    var $T_0 = $452;
	                    continue;
	                  }
	                  if ($451 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    HEAP32[$451 >> 2] = $393;
	                    HEAP32[$p_0$s2 + 6] = $T_0;
	                    HEAP32[$p_0$s2 + 3] = $p_0;
	                    HEAP32[$p_0$s2 + 2] = $p_0;
	                    break $_$154;
	                  }
	                  _abort();
	                }
	              }
	            }
	          } while (0);
	          var $480 = HEAP32[__gm_ + 32 >> 2] - 1 | 0;
	          HEAP32[__gm_ + 32 >> 2] = $480;
	          if (($480 | 0) != 0) {
	            break $_$2;
	          }
	          _release_unused_segments();
	          break $_$2;
	        }
	      } while (0);
	      _abort();
	    }
	  } while (0);
	  return;
	  return;
	}

	Module["_free"] = _free;

	_free["X"] = 1;

	function _mmap_resize($oldp, $nb) {
	  var $3 = HEAP32[$oldp + 4 >> 2] & -8;
	  var $4 = $nb >>> 0 < 256;
	  do {
	    if ($4) {
	      var $_0 = 0;
	    } else {
	      if ($3 >>> 0 >= ($nb + 4 | 0) >>> 0) {
	        if (($3 - $nb | 0) >>> 0 <= HEAP32[_mparams + 8 >> 2] << 1 >>> 0) {
	          var $_0 = $oldp;
	          break;
	        }
	      }
	      var $_0 = 0;
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	function _segment_holding($addr) {
	  var $sp_0$s2;
	  var $sp_0 = __gm_ + 444 | 0, $sp_0$s2 = $sp_0 >> 2;
	  while (1) {
	    var $sp_0;
	    var $3 = HEAPU32[$sp_0$s2];
	    if ($3 >>> 0 <= $addr >>> 0) {
	      if (($3 + HEAP32[$sp_0$s2 + 1] | 0) >>> 0 > $addr >>> 0) {
	        var $_0 = $sp_0;
	        break;
	      }
	    }
	    var $12 = HEAPU32[$sp_0$s2 + 2];
	    if (($12 | 0) == 0) {
	      var $_0 = 0;
	      break;
	    }
	    var $sp_0 = $12, $sp_0$s2 = $sp_0 >> 2;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _init_top($p, $psize) {
	  var $1 = $p;
	  var $3 = $p + 8 | 0;
	  if (($3 & 7 | 0) == 0) {
	    var $10 = 0;
	  } else {
	    var $10 = -$3 & 7;
	  }
	  var $10;
	  var $13 = $psize - $10 | 0;
	  HEAP32[__gm_ + 24 >> 2] = $1 + $10 | 0;
	  HEAP32[__gm_ + 12 >> 2] = $13;
	  HEAP32[$10 + ($1 + 4) >> 2] = $13 | 1;
	  HEAP32[$psize + ($1 + 4) >> 2] = 40;
	  var $19 = HEAP32[_mparams + 16 >> 2];
	  HEAP32[__gm_ + 28 >> 2] = $19;
	  return;
	  return;
	}

	function _init_bins() {
	  var $i_02 = 0;
	  while (1) {
	    var $i_02;
	    var $2 = $i_02 << 1;
	    var $4 = ($2 << 2) + __gm_ + 40 | 0;
	    HEAP32[__gm_ + ($2 + 3 << 2) + 40 >> 2] = $4;
	    HEAP32[__gm_ + ($2 + 2 << 2) + 40 >> 2] = $4;
	    var $7 = $i_02 + 1 | 0;
	    if (($7 | 0) == 32) {
	      break;
	    }
	    var $i_02 = $7;
	  }
	  return;
	  return;
	}

	function _calloc($n_elements, $elem_size) {
	  var $1 = ($n_elements | 0) == 0;
	  do {
	    if ($1) {
	      var $req_0 = 0;
	    } else {
	      var $3 = $elem_size * $n_elements | 0;
	      if (($elem_size | $n_elements) >>> 0 <= 65535) {
	        var $req_0 = $3;
	        break;
	      }
	      var $7 = Math.floor(($3 >>> 0) / ($n_elements >>> 0));
	      var $_ = ($7 | 0) == ($elem_size | 0) ? $3 : -1;
	      var $req_0 = $_;
	    }
	  } while (0);
	  var $req_0;
	  var $10 = _malloc($req_0);
	  var $11 = ($10 | 0) == 0;
	  do {
	    if (!$11) {
	      if ((HEAP32[$10 - 4 >> 2] & 3 | 0) == 0) {
	        break;
	      }
	      _memset($10, 0, $req_0, 1);
	    }
	  } while (0);
	  return $10;
	  return null;
	}

	function _realloc($oldmem, $bytes) {
	  if (($oldmem | 0) == 0) {
	    var $3 = _malloc($bytes);
	    var $_0 = $3;
	  } else {
	    var $5 = _internal_realloc($oldmem, $bytes);
	    var $_0 = $5;
	  }
	  var $_0;
	  return $_0;
	  return null;
	}

	function _internal_realloc($oldmem, $bytes) {
	  var $21$s2;
	  var $8$s2;
	  var __label__;
	  var $1 = $bytes >>> 0 > 4294967231;
	  $_$16 : do {
	    if ($1) {
	      var $3 = ___errno();
	      HEAP32[$3 >> 2] = 12;
	      var $_0 = 0;
	    } else {
	      var $5 = $oldmem - 8 | 0;
	      var $6 = $5;
	      var $8$s2 = ($oldmem - 4 | 0) >> 2;
	      var $9 = HEAPU32[$8$s2];
	      var $10 = $9 & -8;
	      var $_sum = $10 - 8 | 0;
	      var $12 = $oldmem + $_sum | 0;
	      var $14 = $5 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0;
	      do {
	        if (!$14) {
	          var $16 = $9 & 3;
	          if (!(($16 | 0) != 1 & ($_sum | 0) > -8)) {
	            break;
	          }
	          var $21$s2 = ($oldmem + ($10 - 4) | 0) >> 2;
	          if ((HEAP32[$21$s2] & 1 | 0) == 0) {
	            break;
	          }
	          if ($bytes >>> 0 < 11) {
	            var $31 = 16;
	          } else {
	            var $31 = $bytes + 11 & -8;
	          }
	          var $31;
	          var $32 = ($16 | 0) == 0;
	          do {
	            if ($32) {
	              var $34 = _mmap_resize($6, $31);
	              var $extra_0 = 0;
	              var $newp_0 = $34;
	              __label__ = 18;
	              break;
	            }
	            if ($10 >>> 0 < $31 >>> 0) {
	              if (($12 | 0) != (HEAP32[__gm_ + 24 >> 2] | 0)) {
	                __label__ = 22;
	                break;
	              }
	              var $55 = HEAP32[__gm_ + 12 >> 2] + $10 | 0;
	              if ($55 >>> 0 <= $31 >>> 0) {
	                __label__ = 22;
	                break;
	              }
	              var $58 = $55 - $31 | 0;
	              var $60 = $oldmem + ($31 - 8) | 0;
	              HEAP32[$8$s2] = $31 | $9 & 1 | 2;
	              var $66 = $58 | 1;
	              HEAP32[$oldmem + ($31 - 4) >> 2] = $66;
	              HEAP32[__gm_ + 24 >> 2] = $60;
	              HEAP32[__gm_ + 12 >> 2] = $58;
	              var $extra_0 = 0;
	              var $newp_0 = $6;
	              __label__ = 18;
	              break;
	            }
	            var $38 = $10 - $31 | 0;
	            if ($38 >>> 0 <= 15) {
	              var $extra_0 = 0;
	              var $newp_0 = $6;
	              __label__ = 18;
	              break;
	            }
	            HEAP32[$8$s2] = $31 | $9 & 1 | 2;
	            HEAP32[$oldmem + ($31 - 4) >> 2] = $38 | 3;
	            var $48 = HEAP32[$21$s2] | 1;
	            HEAP32[$21$s2] = $48;
	            var $extra_0 = $oldmem + $31 | 0;
	            var $newp_0 = $6;
	            __label__ = 18;
	            break;
	          } while (0);
	          do {
	            if (__label__ == 18) {
	              var $newp_0;
	              var $extra_0;
	              if (($newp_0 | 0) == 0) {
	                break;
	              }
	              if (($extra_0 | 0) != 0) {
	                _free($extra_0);
	              }
	              var $_0 = $newp_0 + 8 | 0;
	              break $_$16;
	            }
	          } while (0);
	          var $75 = _malloc($bytes);
	          if (($75 | 0) == 0) {
	            var $_0 = 0;
	            break $_$16;
	          }
	          var $81 = (HEAP32[$8$s2] & 3 | 0) == 0 ? 8 : 4;
	          var $82 = $10 - $81 | 0;
	          var $84 = $82 >>> 0 < $bytes >>> 0 ? $82 : $bytes;
	          _memcpy($75, $oldmem, $84, 1);
	          _free($oldmem);
	          var $_0 = $75;
	          break $_$16;
	        }
	      } while (0);
	      _abort();
	    }
	  } while (0);
	  var $_0;
	  return $_0;
	  return null;
	}

	_internal_realloc["X"] = 1;

	function _init_mparams() {
	  if ((HEAP32[_mparams >> 2] | 0) == 0) {
	    var $4 = _sysconf(8);
	    if (($4 - 1 & $4 | 0) == 0) {
	      HEAP32[_mparams + 8 >> 2] = $4;
	      HEAP32[_mparams + 4 >> 2] = $4;
	      HEAP32[_mparams + 12 >> 2] = -1;
	      HEAP32[_mparams + 16 >> 2] = 2097152;
	      HEAP32[_mparams + 20 >> 2] = 0;
	      HEAP32[__gm_ + 440 >> 2] = 0;
	      var $10 = _time(0);
	      HEAP32[_mparams >> 2] = $10 & -16 ^ 1431655768;
	    } else {
	      _abort();
	    }
	  }
	  return;
	  return;
	}

	function _prepend_alloc($newbase, $oldbase, $nb) {
	  var $R_1$s2;
	  var $_sum$s2;
	  var $19$s2;
	  var $oldbase$s2 = $oldbase >> 2;
	  var $newbase$s2 = $newbase >> 2;
	  var __label__;
	  var $2 = $newbase + 8 | 0;
	  if (($2 & 7 | 0) == 0) {
	    var $9 = 0;
	  } else {
	    var $9 = -$2 & 7;
	  }
	  var $9;
	  var $12 = $oldbase + 8 | 0;
	  if (($12 & 7 | 0) == 0) {
	    var $19 = 0, $19$s2 = $19 >> 2;
	  } else {
	    var $19 = -$12 & 7, $19$s2 = $19 >> 2;
	  }
	  var $19;
	  var $20 = $oldbase + $19 | 0;
	  var $21 = $20;
	  var $_sum = $9 + $nb | 0, $_sum$s2 = $_sum >> 2;
	  var $25 = $newbase + $_sum | 0;
	  var $26 = $25;
	  var $27 = $20 - ($newbase + $9) - $nb | 0;
	  HEAP32[($9 + 4 >> 2) + $newbase$s2] = $nb | 3;
	  var $32 = ($21 | 0) == (HEAP32[__gm_ + 24 >> 2] | 0);
	  $_$81 : do {
	    if ($32) {
	      var $35 = HEAP32[__gm_ + 12 >> 2] + $27 | 0;
	      HEAP32[__gm_ + 12 >> 2] = $35;
	      HEAP32[__gm_ + 24 >> 2] = $26;
	      var $36 = $35 | 1;
	      HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $36;
	    } else {
	      if (($21 | 0) == (HEAP32[__gm_ + 20 >> 2] | 0)) {
	        var $44 = HEAP32[__gm_ + 8 >> 2] + $27 | 0;
	        HEAP32[__gm_ + 8 >> 2] = $44;
	        HEAP32[__gm_ + 20 >> 2] = $26;
	        var $45 = $44 | 1;
	        HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $45;
	        var $49 = $newbase + $44 + $_sum | 0;
	        HEAP32[$49 >> 2] = $44;
	      } else {
	        var $53 = HEAPU32[$19$s2 + ($oldbase$s2 + 1)];
	        if (($53 & 3 | 0) == 1) {
	          var $57 = $53 & -8;
	          var $58 = $53 >>> 3;
	          var $59 = $53 >>> 0 < 256;
	          $_$89 : do {
	            if ($59) {
	              var $63 = HEAPU32[(($19 | 8) >> 2) + $oldbase$s2];
	              var $66 = HEAPU32[$19$s2 + ($oldbase$s2 + 3)];
	              if (($63 | 0) == ($66 | 0)) {
	                var $72 = HEAP32[__gm_ >> 2] & (1 << $58 ^ -1);
	                HEAP32[__gm_ >> 2] = $72;
	              } else {
	                var $77 = (($53 >>> 2 & 1073741822) << 2) + __gm_ + 40 | 0;
	                var $78 = ($63 | 0) == ($77 | 0);
	                do {
	                  if ($78) {
	                    __label__ = 16;
	                  } else {
	                    if ($63 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                      __label__ = 19;
	                      break;
	                    }
	                    __label__ = 16;
	                    break;
	                  }
	                } while (0);
	                do {
	                  if (__label__ == 16) {
	                    if (($66 | 0) != ($77 | 0)) {
	                      if ($66 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                        break;
	                      }
	                    }
	                    HEAP32[$63 + 12 >> 2] = $66;
	                    HEAP32[$66 + 8 >> 2] = $63;
	                    break $_$89;
	                  }
	                } while (0);
	                _abort();
	              }
	            } else {
	              var $92 = $20;
	              var $95 = HEAPU32[(($19 | 24) >> 2) + $oldbase$s2];
	              var $98 = HEAPU32[$19$s2 + ($oldbase$s2 + 3)];
	              var $99 = ($98 | 0) == ($92 | 0);
	              do {
	                if ($99) {
	                  var $_sum67 = $19 | 16;
	                  var $113 = $_sum67 + ($oldbase + 4) | 0;
	                  var $114 = HEAP32[$113 >> 2];
	                  if (($114 | 0) == 0) {
	                    var $118 = $oldbase + $_sum67 | 0;
	                    var $119 = HEAP32[$118 >> 2];
	                    if (($119 | 0) == 0) {
	                      var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
	                      break;
	                    }
	                    var $RP_0 = $118;
	                    var $R_0 = $119;
	                  } else {
	                    var $RP_0 = $113;
	                    var $R_0 = $114;
	                    __label__ = 26;
	                  }
	                  while (1) {
	                    var $R_0;
	                    var $RP_0;
	                    var $121 = $R_0 + 20 | 0;
	                    var $122 = HEAP32[$121 >> 2];
	                    if (($122 | 0) != 0) {
	                      var $RP_0 = $121;
	                      var $R_0 = $122;
	                      continue;
	                    }
	                    var $125 = $R_0 + 16 | 0;
	                    var $126 = HEAPU32[$125 >> 2];
	                    if (($126 | 0) == 0) {
	                      break;
	                    }
	                    var $RP_0 = $125;
	                    var $R_0 = $126;
	                  }
	                  if ($RP_0 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$RP_0 >> 2] = 0;
	                    var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
	                  }
	                } else {
	                  var $103 = HEAPU32[(($19 | 8) >> 2) + $oldbase$s2];
	                  if ($103 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$103 + 12 >> 2] = $98;
	                    HEAP32[$98 + 8 >> 2] = $103;
	                    var $R_1 = $98, $R_1$s2 = $R_1 >> 2;
	                  }
	                }
	              } while (0);
	              var $R_1;
	              if (($95 | 0) == 0) {
	                break;
	              }
	              var $138 = $19 + ($oldbase + 28) | 0;
	              var $140 = (HEAP32[$138 >> 2] << 2) + __gm_ + 304 | 0;
	              var $142 = ($92 | 0) == (HEAP32[$140 >> 2] | 0);
	              do {
	                if ($142) {
	                  HEAP32[$140 >> 2] = $R_1;
	                  if (($R_1 | 0) != 0) {
	                    break;
	                  }
	                  var $148 = HEAP32[__gm_ + 4 >> 2] & (1 << HEAP32[$138 >> 2] ^ -1);
	                  HEAP32[__gm_ + 4 >> 2] = $148;
	                  break $_$89;
	                }
	                if ($95 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  _abort();
	                } else {
	                  var $154 = $95 + 16 | 0;
	                  if ((HEAP32[$154 >> 2] | 0) == ($92 | 0)) {
	                    HEAP32[$154 >> 2] = $R_1;
	                  } else {
	                    HEAP32[$95 + 20 >> 2] = $R_1;
	                  }
	                  if (($R_1 | 0) == 0) {
	                    break $_$89;
	                  }
	                }
	              } while (0);
	              if ($R_1 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                _abort();
	              } else {
	                HEAP32[$R_1$s2 + 6] = $95;
	                var $_sum3132 = $19 | 16;
	                var $171 = HEAPU32[($_sum3132 >> 2) + $oldbase$s2];
	                if (($171 | 0) != 0) {
	                  if ($171 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                    _abort();
	                  } else {
	                    HEAP32[$R_1$s2 + 4] = $171;
	                    HEAP32[$171 + 24 >> 2] = $R_1;
	                  }
	                }
	                var $184 = HEAPU32[($_sum3132 + 4 >> 2) + $oldbase$s2];
	                if (($184 | 0) == 0) {
	                  break;
	                }
	                if ($184 >>> 0 < HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  _abort();
	                } else {
	                  HEAP32[$R_1$s2 + 5] = $184;
	                  HEAP32[$184 + 24 >> 2] = $R_1;
	                }
	              }
	            }
	          } while (0);
	          var $oldfirst_0 = $oldbase + ($57 | $19) | 0;
	          var $qsize_0 = $57 + $27 | 0;
	        } else {
	          var $oldfirst_0 = $21;
	          var $qsize_0 = $27;
	        }
	        var $qsize_0;
	        var $oldfirst_0;
	        var $200 = $oldfirst_0 + 4 | 0;
	        var $202 = HEAP32[$200 >> 2] & -2;
	        HEAP32[$200 >> 2] = $202;
	        HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $qsize_0 | 1;
	        HEAP32[($qsize_0 >> 2) + $newbase$s2 + $_sum$s2] = $qsize_0;
	        if ($qsize_0 >>> 0 < 256) {
	          var $212 = $qsize_0 >>> 2 & 1073741822;
	          var $214 = ($212 << 2) + __gm_ + 40 | 0;
	          var $215 = HEAPU32[__gm_ >> 2];
	          var $216 = 1 << ($qsize_0 >>> 3);
	          var $218 = ($215 & $216 | 0) == 0;
	          do {
	            if ($218) {
	              HEAP32[__gm_ >> 2] = $215 | $216;
	              var $F4_0 = $214;
	              var $_pre_phi = ($212 + 2 << 2) + __gm_ + 40 | 0;
	            } else {
	              var $222 = ($212 + 2 << 2) + __gm_ + 40 | 0;
	              var $223 = HEAPU32[$222 >> 2];
	              if ($223 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                var $F4_0 = $223;
	                var $_pre_phi = $222;
	                break;
	              }
	              _abort();
	            }
	          } while (0);
	          var $_pre_phi;
	          var $F4_0;
	          HEAP32[$_pre_phi >> 2] = $26;
	          HEAP32[$F4_0 + 12 >> 2] = $26;
	          HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $F4_0;
	          HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $214;
	        } else {
	          var $235 = $25;
	          var $236 = $qsize_0 >>> 8;
	          var $237 = ($236 | 0) == 0;
	          do {
	            if ($237) {
	              var $I7_0 = 0;
	            } else {
	              if ($qsize_0 >>> 0 > 16777215) {
	                var $I7_0 = 31;
	                break;
	              }
	              var $243 = ($236 + 1048320 | 0) >>> 16 & 8;
	              var $244 = $236 << $243;
	              var $247 = ($244 + 520192 | 0) >>> 16 & 4;
	              var $248 = $244 << $247;
	              var $251 = ($248 + 245760 | 0) >>> 16 & 2;
	              var $257 = 14 - ($247 | $243 | $251) + ($248 << $251 >>> 15) | 0;
	              var $I7_0 = $qsize_0 >>> (($257 + 7 | 0) >>> 0) & 1 | $257 << 1;
	            }
	          } while (0);
	          var $I7_0;
	          var $264 = ($I7_0 << 2) + __gm_ + 304 | 0;
	          HEAP32[$_sum$s2 + ($newbase$s2 + 7)] = $I7_0;
	          var $267 = $_sum + ($newbase + 16) | 0;
	          HEAP32[$_sum$s2 + ($newbase$s2 + 5)] = 0;
	          HEAP32[$267 >> 2] = 0;
	          var $271 = HEAP32[__gm_ + 4 >> 2];
	          var $272 = 1 << $I7_0;
	          if (($271 & $272 | 0) == 0) {
	            var $276 = $271 | $272;
	            HEAP32[__gm_ + 4 >> 2] = $276;
	            HEAP32[$264 >> 2] = $235;
	            HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = $264;
	            HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $235;
	            HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $235;
	          } else {
	            if (($I7_0 | 0) == 31) {
	              var $291 = 0;
	            } else {
	              var $291 = 25 - ($I7_0 >>> 1) | 0;
	            }
	            var $291;
	            var $K8_0 = $qsize_0 << $291;
	            var $T_0 = HEAP32[$264 >> 2];
	            while (1) {
	              var $T_0;
	              var $K8_0;
	              if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($qsize_0 | 0)) {
	                var $317 = $T_0 + 8 | 0;
	                var $318 = HEAPU32[$317 >> 2];
	                var $320 = HEAPU32[__gm_ + 16 >> 2];
	                var $321 = $T_0 >>> 0 < $320 >>> 0;
	                do {
	                  if (!$321) {
	                    if ($318 >>> 0 < $320 >>> 0) {
	                      break;
	                    }
	                    HEAP32[$318 + 12 >> 2] = $235;
	                    HEAP32[$317 >> 2] = $235;
	                    HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $318;
	                    HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $T_0;
	                    HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = 0;
	                    break $_$81;
	                  }
	                } while (0);
	                _abort();
	              } else {
	                var $300 = ($K8_0 >>> 31 << 2) + $T_0 + 16 | 0;
	                var $301 = HEAPU32[$300 >> 2];
	                if (($301 | 0) != 0) {
	                  var $K8_0 = $K8_0 << 1;
	                  var $T_0 = $301;
	                  continue;
	                }
	                if ($300 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                  HEAP32[$300 >> 2] = $235;
	                  HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = $T_0;
	                  HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $235;
	                  HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $235;
	                  break $_$81;
	                }
	                _abort();
	              }
	            }
	          }
	        }
	      }
	    }
	  } while (0);
	  return $newbase + ($9 | 8) | 0;
	  return null;
	}

	_prepend_alloc["X"] = 1;

	function _add_segment($tbase, $tsize) {
	  var $23$s2;
	  var $1$s2;
	  var $1 = HEAPU32[__gm_ + 24 >> 2], $1$s2 = $1 >> 2;
	  var $2 = $1;
	  var $3 = _segment_holding($2);
	  var $5 = HEAP32[$3 >> 2];
	  var $7 = HEAP32[$3 + 4 >> 2];
	  var $8 = $5 + $7 | 0;
	  var $10 = $5 + ($7 - 39) | 0;
	  if (($10 & 7 | 0) == 0) {
	    var $17 = 0;
	  } else {
	    var $17 = -$10 & 7;
	  }
	  var $17;
	  var $18 = $5 + ($7 - 47) + $17 | 0;
	  var $22 = $18 >>> 0 < ($1 + 16 | 0) >>> 0 ? $2 : $18;
	  var $23 = $22 + 8 | 0, $23$s2 = $23 >> 2;
	  var $24 = $23;
	  var $25 = $tbase;
	  var $26 = $tsize - 40 | 0;
	  _init_top($25, $26);
	  var $28 = $22 + 4 | 0;
	  HEAP32[$28 >> 2] = 27;
	  HEAP32[$23$s2] = HEAP32[__gm_ + 444 >> 2];
	  HEAP32[$23$s2 + 1] = HEAP32[__gm_ + 448 >> 2];
	  HEAP32[$23$s2 + 2] = HEAP32[__gm_ + 452 >> 2];
	  HEAP32[$23$s2 + 3] = HEAP32[__gm_ + 456 >> 2];
	  HEAP32[__gm_ + 444 >> 2] = $tbase;
	  HEAP32[__gm_ + 448 >> 2] = $tsize;
	  HEAP32[__gm_ + 456 >> 2] = 0;
	  HEAP32[__gm_ + 452 >> 2] = $24;
	  var $30 = $22 + 28 | 0;
	  HEAP32[$30 >> 2] = 7;
	  var $32 = ($22 + 32 | 0) >>> 0 < $8 >>> 0;
	  $_$5 : do {
	    if ($32) {
	      var $33 = $30;
	      while (1) {
	        var $33;
	        var $34 = $33 + 4 | 0;
	        HEAP32[$34 >> 2] = 7;
	        if (($33 + 8 | 0) >>> 0 >= $8 >>> 0) {
	          break $_$5;
	        }
	        var $33 = $34;
	      }
	    }
	  } while (0);
	  var $38 = ($22 | 0) == ($2 | 0);
	  $_$9 : do {
	    if (!$38) {
	      var $42 = $22 - $1 | 0;
	      var $43 = $2 + $42 | 0;
	      var $45 = $42 + ($2 + 4) | 0;
	      var $47 = HEAP32[$45 >> 2] & -2;
	      HEAP32[$45 >> 2] = $47;
	      var $48 = $42 | 1;
	      HEAP32[$1$s2 + 1] = $48;
	      var $50 = $43;
	      HEAP32[$50 >> 2] = $42;
	      if ($42 >>> 0 < 256) {
	        var $55 = $42 >>> 2 & 1073741822;
	        var $57 = ($55 << 2) + __gm_ + 40 | 0;
	        var $58 = HEAPU32[__gm_ >> 2];
	        var $59 = 1 << ($42 >>> 3);
	        var $61 = ($58 & $59 | 0) == 0;
	        do {
	          if ($61) {
	            var $63 = $58 | $59;
	            HEAP32[__gm_ >> 2] = $63;
	            var $F_0 = $57;
	            var $_pre_phi = ($55 + 2 << 2) + __gm_ + 40 | 0;
	          } else {
	            var $65 = ($55 + 2 << 2) + __gm_ + 40 | 0;
	            var $66 = HEAPU32[$65 >> 2];
	            if ($66 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	              var $F_0 = $66;
	              var $_pre_phi = $65;
	              break;
	            }
	            _abort();
	          }
	        } while (0);
	        var $_pre_phi;
	        var $F_0;
	        HEAP32[$_pre_phi >> 2] = $1;
	        HEAP32[$F_0 + 12 >> 2] = $1;
	        HEAP32[$1$s2 + 2] = $F_0;
	        HEAP32[$1$s2 + 3] = $57;
	      } else {
	        var $76 = $1;
	        var $77 = $42 >>> 8;
	        var $78 = ($77 | 0) == 0;
	        do {
	          if ($78) {
	            var $I1_0 = 0;
	          } else {
	            if ($42 >>> 0 > 16777215) {
	              var $I1_0 = 31;
	              break;
	            }
	            var $84 = ($77 + 1048320 | 0) >>> 16 & 8;
	            var $85 = $77 << $84;
	            var $88 = ($85 + 520192 | 0) >>> 16 & 4;
	            var $89 = $85 << $88;
	            var $92 = ($89 + 245760 | 0) >>> 16 & 2;
	            var $98 = 14 - ($88 | $84 | $92) + ($89 << $92 >>> 15) | 0;
	            var $I1_0 = $42 >>> (($98 + 7 | 0) >>> 0) & 1 | $98 << 1;
	          }
	        } while (0);
	        var $I1_0;
	        var $105 = ($I1_0 << 2) + __gm_ + 304 | 0;
	        HEAP32[$1$s2 + 7] = $I1_0;
	        HEAP32[$1$s2 + 5] = 0;
	        HEAP32[$1$s2 + 4] = 0;
	        var $109 = HEAP32[__gm_ + 4 >> 2];
	        var $110 = 1 << $I1_0;
	        if (($109 & $110 | 0) == 0) {
	          var $114 = $109 | $110;
	          HEAP32[__gm_ + 4 >> 2] = $114;
	          HEAP32[$105 >> 2] = $76;
	          HEAP32[$1$s2 + 6] = $105;
	          HEAP32[$1$s2 + 3] = $1;
	          HEAP32[$1$s2 + 2] = $1;
	        } else {
	          if (($I1_0 | 0) == 31) {
	            var $125 = 0;
	          } else {
	            var $125 = 25 - ($I1_0 >>> 1) | 0;
	          }
	          var $125;
	          var $K2_0 = $42 << $125;
	          var $T_0 = HEAP32[$105 >> 2];
	          while (1) {
	            var $T_0;
	            var $K2_0;
	            if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($42 | 0)) {
	              var $148 = $T_0 + 8 | 0;
	              var $149 = HEAPU32[$148 >> 2];
	              var $151 = HEAPU32[__gm_ + 16 >> 2];
	              var $152 = $T_0 >>> 0 < $151 >>> 0;
	              do {
	                if (!$152) {
	                  if ($149 >>> 0 < $151 >>> 0) {
	                    break;
	                  }
	                  HEAP32[$149 + 12 >> 2] = $76;
	                  HEAP32[$148 >> 2] = $76;
	                  HEAP32[$1$s2 + 2] = $149;
	                  HEAP32[$1$s2 + 3] = $T_0;
	                  HEAP32[$1$s2 + 6] = 0;
	                  break $_$9;
	                }
	              } while (0);
	              _abort();
	            } else {
	              var $134 = ($K2_0 >>> 31 << 2) + $T_0 + 16 | 0;
	              var $135 = HEAPU32[$134 >> 2];
	              if (($135 | 0) != 0) {
	                var $K2_0 = $K2_0 << 1;
	                var $T_0 = $135;
	                continue;
	              }
	              if ($134 >>> 0 >= HEAPU32[__gm_ + 16 >> 2] >>> 0) {
	                HEAP32[$134 >> 2] = $76;
	                HEAP32[$1$s2 + 6] = $T_0;
	                HEAP32[$1$s2 + 3] = $1;
	                HEAP32[$1$s2 + 2] = $1;
	                break $_$9;
	              }
	              _abort();
	            }
	          }
	        }
	      }
	    }
	  } while (0);
	  return;
	  return;
	}

	_add_segment["X"] = 1;

	var i64Math = (function() {
	  var goog = {
	    math: {}
	  };
	  goog.math.Long = (function(low, high) {
	    this.low_ = low | 0;
	    this.high_ = high | 0;
	  });
	  goog.math.Long.IntCache_ = {};
	  goog.math.Long.fromInt = (function(value) {
	    if (-128 <= value && value < 128) {
	      var cachedObj = goog.math.Long.IntCache_[value];
	      if (cachedObj) {
	        return cachedObj;
	      }
	    }
	    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
	    if (-128 <= value && value < 128) {
	      goog.math.Long.IntCache_[value] = obj;
	    }
	    return obj;
	  });
	  goog.math.Long.fromNumber = (function(value) {
	    if (isNaN(value) || !isFinite(value)) {
	      return goog.math.Long.ZERO;
	    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
	      return goog.math.Long.MIN_VALUE;
	    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
	      return goog.math.Long.MAX_VALUE;
	    } else if (value < 0) {
	      return goog.math.Long.fromNumber(-value).negate();
	    } else {
	      return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
	    }
	  });
	  goog.math.Long.fromBits = (function(lowBits, highBits) {
	    return new goog.math.Long(lowBits, highBits);
	  });
	  goog.math.Long.fromString = (function(str, opt_radix) {
	    if (str.length == 0) {
	      throw Error("number format error: empty string");
	    }
	    var radix = opt_radix || 10;
	    if (radix < 2 || 36 < radix) {
	      throw Error("radix out of range: " + radix);
	    }
	    if (str.charAt(0) == "-") {
	      return goog.math.Long.fromString(str.substring(1), radix).negate();
	    } else if (str.indexOf("-") >= 0) {
	      throw Error('number format error: interior "-" character: ' + str);
	    }
	    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
	    var result = goog.math.Long.ZERO;
	    for (var i = 0; i < str.length; i += 8) {
	      var size = Math.min(8, str.length - i);
	      var value = parseInt(str.substring(i, i + size), radix);
	      if (size < 8) {
	        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
	        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
	      } else {
	        result = result.multiply(radixToPower);
	        result = result.add(goog.math.Long.fromNumber(value));
	      }
	    }
	    return result;
	  });
	  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
	  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
	  goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
	  goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
	  goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
	  goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
	  goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
	  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
	  goog.math.Long.ONE = goog.math.Long.fromInt(1);
	  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
	  goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
	  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
	  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
	  goog.math.Long.prototype.toInt = (function() {
	    return this.low_;
	  });
	  goog.math.Long.prototype.toNumber = (function() {
	    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
	  });
	  goog.math.Long.prototype.toString = (function(opt_radix) {
	    var radix = opt_radix || 10;
	    if (radix < 2 || 36 < radix) {
	      throw Error("radix out of range: " + radix);
	    }
	    if (this.isZero()) {
	      return "0";
	    }
	    if (this.isNegative()) {
	      if (this.equals(goog.math.Long.MIN_VALUE)) {
	        var radixLong = goog.math.Long.fromNumber(radix);
	        var div = this.div(radixLong);
	        var rem = div.multiply(radixLong).subtract(this);
	        return div.toString(radix) + rem.toInt().toString(radix);
	      } else {
	        return "-" + this.negate().toString(radix);
	      }
	    }
	    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
	    var rem = this;
	    var result = "";
	    while (true) {
	      var remDiv = rem.div(radixToPower);
	      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
	      var digits = intval.toString(radix);
	      rem = remDiv;
	      if (rem.isZero()) {
	        return digits + result;
	      } else {
	        while (digits.length < 6) {
	          digits = "0" + digits;
	        }
	        result = "" + digits + result;
	      }
	    }
	  });
	  goog.math.Long.prototype.getHighBits = (function() {
	    return this.high_;
	  });
	  goog.math.Long.prototype.getLowBits = (function() {
	    return this.low_;
	  });
	  goog.math.Long.prototype.getLowBitsUnsigned = (function() {
	    return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
	  });
	  goog.math.Long.prototype.getNumBitsAbs = (function() {
	    if (this.isNegative()) {
	      if (this.equals(goog.math.Long.MIN_VALUE)) {
	        return 64;
	      } else {
	        return this.negate().getNumBitsAbs();
	      }
	    } else {
	      var val = this.high_ != 0 ? this.high_ : this.low_;
	      for (var bit = 31; bit > 0; bit--) {
	        if ((val & 1 << bit) != 0) {
	          break;
	        }
	      }
	      return this.high_ != 0 ? bit + 33 : bit + 1;
	    }
	  });
	  goog.math.Long.prototype.isZero = (function() {
	    return this.high_ == 0 && this.low_ == 0;
	  });
	  goog.math.Long.prototype.isNegative = (function() {
	    return this.high_ < 0;
	  });
	  goog.math.Long.prototype.isOdd = (function() {
	    return (this.low_ & 1) == 1;
	  });
	  goog.math.Long.prototype.equals = (function(other) {
	    return this.high_ == other.high_ && this.low_ == other.low_;
	  });
	  goog.math.Long.prototype.notEquals = (function(other) {
	    return this.high_ != other.high_ || this.low_ != other.low_;
	  });
	  goog.math.Long.prototype.lessThan = (function(other) {
	    return this.compare(other) < 0;
	  });
	  goog.math.Long.prototype.lessThanOrEqual = (function(other) {
	    return this.compare(other) <= 0;
	  });
	  goog.math.Long.prototype.greaterThan = (function(other) {
	    return this.compare(other) > 0;
	  });
	  goog.math.Long.prototype.greaterThanOrEqual = (function(other) {
	    return this.compare(other) >= 0;
	  });
	  goog.math.Long.prototype.compare = (function(other) {
	    if (this.equals(other)) {
	      return 0;
	    }
	    var thisNeg = this.isNegative();
	    var otherNeg = other.isNegative();
	    if (thisNeg && !otherNeg) {
	      return -1;
	    }
	    if (!thisNeg && otherNeg) {
	      return 1;
	    }
	    if (this.subtract(other).isNegative()) {
	      return -1;
	    } else {
	      return 1;
	    }
	  });
	  goog.math.Long.prototype.negate = (function() {
	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      return goog.math.Long.MIN_VALUE;
	    } else {
	      return this.not().add(goog.math.Long.ONE);
	    }
	  });
	  goog.math.Long.prototype.add = (function(other) {
	    var a48 = this.high_ >>> 16;
	    var a32 = this.high_ & 65535;
	    var a16 = this.low_ >>> 16;
	    var a00 = this.low_ & 65535;
	    var b48 = other.high_ >>> 16;
	    var b32 = other.high_ & 65535;
	    var b16 = other.low_ >>> 16;
	    var b00 = other.low_ & 65535;
	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 + b00;
	    c16 += c00 >>> 16;
	    c00 &= 65535;
	    c16 += a16 + b16;
	    c32 += c16 >>> 16;
	    c16 &= 65535;
	    c32 += a32 + b32;
	    c48 += c32 >>> 16;
	    c32 &= 65535;
	    c48 += a48 + b48;
	    c48 &= 65535;
	    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
	  });
	  goog.math.Long.prototype.subtract = (function(other) {
	    return this.add(other.negate());
	  });
	  goog.math.Long.prototype.multiply = (function(other) {
	    if (this.isZero()) {
	      return goog.math.Long.ZERO;
	    } else if (other.isZero()) {
	      return goog.math.Long.ZERO;
	    }
	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
	    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
	    }
	    if (this.isNegative()) {
	      if (other.isNegative()) {
	        return this.negate().multiply(other.negate());
	      } else {
	        return this.negate().multiply(other).negate();
	      }
	    } else if (other.isNegative()) {
	      return this.multiply(other.negate()).negate();
	    }
	    if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
	      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
	    }
	    var a48 = this.high_ >>> 16;
	    var a32 = this.high_ & 65535;
	    var a16 = this.low_ >>> 16;
	    var a00 = this.low_ & 65535;
	    var b48 = other.high_ >>> 16;
	    var b32 = other.high_ & 65535;
	    var b16 = other.low_ >>> 16;
	    var b00 = other.low_ & 65535;
	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 * b00;
	    c16 += c00 >>> 16;
	    c00 &= 65535;
	    c16 += a16 * b00;
	    c32 += c16 >>> 16;
	    c16 &= 65535;
	    c16 += a00 * b16;
	    c32 += c16 >>> 16;
	    c16 &= 65535;
	    c32 += a32 * b00;
	    c48 += c32 >>> 16;
	    c32 &= 65535;
	    c32 += a16 * b16;
	    c48 += c32 >>> 16;
	    c32 &= 65535;
	    c32 += a00 * b32;
	    c48 += c32 >>> 16;
	    c32 &= 65535;
	    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	    c48 &= 65535;
	    return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
	  });
	  goog.math.Long.prototype.div = (function(other) {
	    if (other.isZero()) {
	      throw Error("division by zero");
	    } else if (this.isZero()) {
	      return goog.math.Long.ZERO;
	    }
	    if (this.equals(goog.math.Long.MIN_VALUE)) {
	      if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
	        return goog.math.Long.MIN_VALUE;
	      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	        return goog.math.Long.ONE;
	      } else {
	        var halfThis = this.shiftRight(1);
	        var approx = halfThis.div(other).shiftLeft(1);
	        if (approx.equals(goog.math.Long.ZERO)) {
	          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
	        } else {
	          var rem = this.subtract(other.multiply(approx));
	          var result = approx.add(rem.div(other));
	          return result;
	        }
	      }
	    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
	      return goog.math.Long.ZERO;
	    }
	    if (this.isNegative()) {
	      if (other.isNegative()) {
	        return this.negate().div(other.negate());
	      } else {
	        return this.negate().div(other).negate();
	      }
	    } else if (other.isNegative()) {
	      return this.div(other.negate()).negate();
	    }
	    var res = goog.math.Long.ZERO;
	    var rem = this;
	    while (rem.greaterThanOrEqual(other)) {
	      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
	      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
	      var approxRes = goog.math.Long.fromNumber(approx);
	      var approxRem = approxRes.multiply(other);
	      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	        approx -= delta;
	        approxRes = goog.math.Long.fromNumber(approx);
	        approxRem = approxRes.multiply(other);
	      }
	      if (approxRes.isZero()) {
	        approxRes = goog.math.Long.ONE;
	      }
	      res = res.add(approxRes);
	      rem = rem.subtract(approxRem);
	    }
	    return res;
	  });
	  goog.math.Long.prototype.modulo = (function(other) {
	    return this.subtract(this.div(other).multiply(other));
	  });
	  goog.math.Long.prototype.not = (function() {
	    return goog.math.Long.fromBits(~this.low_, ~this.high_);
	  });
	  goog.math.Long.prototype.and = (function(other) {
	    return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
	  });
	  goog.math.Long.prototype.or = (function(other) {
	    return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
	  });
	  goog.math.Long.prototype.xor = (function(other) {
	    return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
	  });
	  goog.math.Long.prototype.shiftLeft = (function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var low = this.low_;
	      if (numBits < 32) {
	        var high = this.high_;
	        return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
	      } else {
	        return goog.math.Long.fromBits(0, low << numBits - 32);
	      }
	    }
	  });
	  goog.math.Long.prototype.shiftRight = (function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var high = this.high_;
	      if (numBits < 32) {
	        var low = this.low_;
	        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
	      } else {
	        return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
	      }
	    }
	  });
	  goog.math.Long.prototype.shiftRightUnsigned = (function(numBits) {
	    numBits &= 63;
	    if (numBits == 0) {
	      return this;
	    } else {
	      var high = this.high_;
	      if (numBits < 32) {
	        var low = this.low_;
	        return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
	      } else if (numBits == 32) {
	        return goog.math.Long.fromBits(high, 0);
	      } else {
	        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
	      }
	    }
	  });
	  var navigator = {
	    appName: "Modern Browser"
	  };
	  var dbits;
	  var canary = 0xdeadbeefcafe;
	  var j_lm = (canary & 16777215) == 15715070;
	  function BigInteger(a, b, c) {
	    if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c); else if (b == null && "string" != typeof a) this.fromString(a, 256); else this.fromString(a, b);
	  }
	  function nbi() {
	    return new BigInteger(null);
	  }
	  function am1(i, x, w, j, c, n) {
	    while (--n >= 0) {
	      var v = x * this[i++] + w[j] + c;
	      c = Math.floor(v / 67108864);
	      w[j++] = v & 67108863;
	    }
	    return c;
	  }
	  function am2(i, x, w, j, c, n) {
	    var xl = x & 32767, xh = x >> 15;
	    while (--n >= 0) {
	      var l = this[i] & 32767;
	      var h = this[i++] >> 15;
	      var m = xh * l + h * xl;
	      l = xl * l + ((m & 32767) << 15) + w[j] + (c & 1073741823);
	      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
	      w[j++] = l & 1073741823;
	    }
	    return c;
	  }
	  function am3(i, x, w, j, c, n) {
	    var xl = x & 16383, xh = x >> 14;
	    while (--n >= 0) {
	      var l = this[i] & 16383;
	      var h = this[i++] >> 14;
	      var m = xh * l + h * xl;
	      l = xl * l + ((m & 16383) << 14) + w[j] + c;
	      c = (l >> 28) + (m >> 14) + xh * h;
	      w[j++] = l & 268435455;
	    }
	    return c;
	  }
	  if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
	    BigInteger.prototype.am = am2;
	    dbits = 30;
	  } else if (j_lm && navigator.appName != "Netscape") {
	    BigInteger.prototype.am = am1;
	    dbits = 26;
	  } else {
	    BigInteger.prototype.am = am3;
	    dbits = 28;
	  }
	  BigInteger.prototype.DB = dbits;
	  BigInteger.prototype.DM = (1 << dbits) - 1;
	  BigInteger.prototype.DV = 1 << dbits;
	  var BI_FP = 52;
	  BigInteger.prototype.FV = Math.pow(2, BI_FP);
	  BigInteger.prototype.F1 = BI_FP - dbits;
	  BigInteger.prototype.F2 = 2 * dbits - BI_FP;
	  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	  var BI_RC = new Array;
	  var rr, vv;
	  rr = "0".charCodeAt(0);
	  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	  rr = "a".charCodeAt(0);
	  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	  rr = "A".charCodeAt(0);
	  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	  function int2char(n) {
	    return BI_RM.charAt(n);
	  }
	  function intAt(s, i) {
	    var c = BI_RC[s.charCodeAt(i)];
	    return c == null ? -1 : c;
	  }
	  function bnpCopyTo(r) {
	    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
	    r.t = this.t;
	    r.s = this.s;
	  }
	  function bnpFromInt(x) {
	    this.t = 1;
	    this.s = x < 0 ? -1 : 0;
	    if (x > 0) this[0] = x; else if (x < -1) this[0] = x + DV; else this.t = 0;
	  }
	  function nbv(i) {
	    var r = nbi();
	    r.fromInt(i);
	    return r;
	  }
	  function bnpFromString(s, b) {
	    var k;
	    if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 256) k = 8; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else {
	      this.fromRadix(s, b);
	      return;
	    }
	    this.t = 0;
	    this.s = 0;
	    var i = s.length, mi = false, sh = 0;
	    while (--i >= 0) {
	      var x = k == 8 ? s[i] & 255 : intAt(s, i);
	      if (x < 0) {
	        if (s.charAt(i) == "-") mi = true;
	        continue;
	      }
	      mi = false;
	      if (sh == 0) this[this.t++] = x; else if (sh + k > this.DB) {
	        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
	        this[this.t++] = x >> this.DB - sh;
	      } else this[this.t - 1] |= x << sh;
	      sh += k;
	      if (sh >= this.DB) sh -= this.DB;
	    }
	    if (k == 8 && (s[0] & 128) != 0) {
	      this.s = -1;
	      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
	    }
	    this.clamp();
	    if (mi) BigInteger.ZERO.subTo(this, this);
	  }
	  function bnpClamp() {
	    var c = this.s & this.DM;
	    while (this.t > 0 && this[this.t - 1] == c) --this.t;
	  }
	  function bnToString(b) {
	    if (this.s < 0) return "-" + this.negate().toString(b);
	    var k;
	    if (b == 16) k = 4; else if (b == 8) k = 3; else if (b == 2) k = 1; else if (b == 32) k = 5; else if (b == 4) k = 2; else return this.toRadix(b);
	    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
	    var p = this.DB - i * this.DB % k;
	    if (i-- > 0) {
	      if (p < this.DB && (d = this[i] >> p) > 0) {
	        m = true;
	        r = int2char(d);
	      }
	      while (i >= 0) {
	        if (p < k) {
	          d = (this[i] & (1 << p) - 1) << k - p;
	          d |= this[--i] >> (p += this.DB - k);
	        } else {
	          d = this[i] >> (p -= k) & km;
	          if (p <= 0) {
	            p += this.DB;
	            --i;
	          }
	        }
	        if (d > 0) m = true;
	        if (m) r += int2char(d);
	      }
	    }
	    return m ? r : "0";
	  }
	  function bnNegate() {
	    var r = nbi();
	    BigInteger.ZERO.subTo(this, r);
	    return r;
	  }
	  function bnAbs() {
	    return this.s < 0 ? this.negate() : this;
	  }
	  function bnCompareTo(a) {
	    var r = this.s - a.s;
	    if (r != 0) return r;
	    var i = this.t;
	    r = i - a.t;
	    if (r != 0) return r;
	    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
	    return 0;
	  }
	  function nbits(x) {
	    var r = 1, t;
	    if ((t = x >>> 16) != 0) {
	      x = t;
	      r += 16;
	    }
	    if ((t = x >> 8) != 0) {
	      x = t;
	      r += 8;
	    }
	    if ((t = x >> 4) != 0) {
	      x = t;
	      r += 4;
	    }
	    if ((t = x >> 2) != 0) {
	      x = t;
	      r += 2;
	    }
	    if ((t = x >> 1) != 0) {
	      x = t;
	      r += 1;
	    }
	    return r;
	  }
	  function bnBitLength() {
	    if (this.t <= 0) return 0;
	    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
	  }
	  function bnpDLShiftTo(n, r) {
	    var i;
	    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
	    for (i = n - 1; i >= 0; --i) r[i] = 0;
	    r.t = this.t + n;
	    r.s = this.s;
	  }
	  function bnpDRShiftTo(n, r) {
	    for (var i = n; i < this.t; ++i) r[i - n] = this[i];
	    r.t = Math.max(this.t - n, 0);
	    r.s = this.s;
	  }
	  function bnpLShiftTo(n, r) {
	    var bs = n % this.DB;
	    var cbs = this.DB - bs;
	    var bm = (1 << cbs) - 1;
	    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
	    for (i = this.t - 1; i >= 0; --i) {
	      r[i + ds + 1] = this[i] >> cbs | c;
	      c = (this[i] & bm) << bs;
	    }
	    for (i = ds - 1; i >= 0; --i) r[i] = 0;
	    r[ds] = c;
	    r.t = this.t + ds + 1;
	    r.s = this.s;
	    r.clamp();
	  }
	  function bnpRShiftTo(n, r) {
	    r.s = this.s;
	    var ds = Math.floor(n / this.DB);
	    if (ds >= this.t) {
	      r.t = 0;
	      return;
	    }
	    var bs = n % this.DB;
	    var cbs = this.DB - bs;
	    var bm = (1 << bs) - 1;
	    r[0] = this[ds] >> bs;
	    for (var i = ds + 1; i < this.t; ++i) {
	      r[i - ds - 1] |= (this[i] & bm) << cbs;
	      r[i - ds] = this[i] >> bs;
	    }
	    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
	    r.t = this.t - ds;
	    r.clamp();
	  }
	  function bnpSubTo(a, r) {
	    var i = 0, c = 0, m = Math.min(a.t, this.t);
	    while (i < m) {
	      c += this[i] - a[i];
	      r[i++] = c & this.DM;
	      c >>= this.DB;
	    }
	    if (a.t < this.t) {
	      c -= a.s;
	      while (i < this.t) {
	        c += this[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    } else {
	      c += this.s;
	      while (i < a.t) {
	        c -= a[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c -= a.s;
	    }
	    r.s = c < 0 ? -1 : 0;
	    if (c < -1) r[i++] = this.DV + c; else if (c > 0) r[i++] = c;
	    r.t = i;
	    r.clamp();
	  }
	  function bnpMultiplyTo(a, r) {
	    var x = this.abs(), y = a.abs();
	    var i = x.t;
	    r.t = i + y.t;
	    while (--i >= 0) r[i] = 0;
	    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
	    r.s = 0;
	    r.clamp();
	    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
	  }
	  function bnpSquareTo(r) {
	    var x = this.abs();
	    var i = r.t = 2 * x.t;
	    while (--i >= 0) r[i] = 0;
	    for (i = 0; i < x.t - 1; ++i) {
	      var c = x.am(i, x[i], r, 2 * i, 0, 1);
	      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
	        r[i + x.t] -= x.DV;
	        r[i + x.t + 1] = 1;
	      }
	    }
	    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
	    r.s = 0;
	    r.clamp();
	  }
	  function bnpDivRemTo(m, q, r) {
	    var pm = m.abs();
	    if (pm.t <= 0) return;
	    var pt = this.abs();
	    if (pt.t < pm.t) {
	      if (q != null) q.fromInt(0);
	      if (r != null) this.copyTo(r);
	      return;
	    }
	    if (r == null) r = nbi();
	    var y = nbi(), ts = this.s, ms = m.s;
	    var nsh = this.DB - nbits(pm[pm.t - 1]);
	    if (nsh > 0) {
	      pm.lShiftTo(nsh, y);
	      pt.lShiftTo(nsh, r);
	    } else {
	      pm.copyTo(y);
	      pt.copyTo(r);
	    }
	    var ys = y.t;
	    var y0 = y[ys - 1];
	    if (y0 == 0) return;
	    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
	    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
	    var i = r.t, j = i - ys, t = q == null ? nbi() : q;
	    y.dlShiftTo(j, t);
	    if (r.compareTo(t) >= 0) {
	      r[r.t++] = 1;
	      r.subTo(t, r);
	    }
	    BigInteger.ONE.dlShiftTo(ys, t);
	    t.subTo(y, y);
	    while (y.t < ys) y[y.t++] = 0;
	    while (--j >= 0) {
	      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
	      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
	        y.dlShiftTo(j, t);
	        r.subTo(t, r);
	        while (r[i] < --qd) r.subTo(t, r);
	      }
	    }
	    if (q != null) {
	      r.drShiftTo(ys, q);
	      if (ts != ms) BigInteger.ZERO.subTo(q, q);
	    }
	    r.t = ys;
	    r.clamp();
	    if (nsh > 0) r.rShiftTo(nsh, r);
	    if (ts < 0) BigInteger.ZERO.subTo(r, r);
	  }
	  function bnMod(a) {
	    var r = nbi();
	    this.abs().divRemTo(a, null, r);
	    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
	    return r;
	  }
	  function Classic(m) {
	    this.m = m;
	  }
	  function cConvert(x) {
	    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m); else return x;
	  }
	  function cRevert(x) {
	    return x;
	  }
	  function cReduce(x) {
	    x.divRemTo(this.m, null, x);
	  }
	  function cMulTo(x, y, r) {
	    x.multiplyTo(y, r);
	    this.reduce(r);
	  }
	  function cSqrTo(x, r) {
	    x.squareTo(r);
	    this.reduce(r);
	  }
	  Classic.prototype.convert = cConvert;
	  Classic.prototype.revert = cRevert;
	  Classic.prototype.reduce = cReduce;
	  Classic.prototype.mulTo = cMulTo;
	  Classic.prototype.sqrTo = cSqrTo;
	  function bnpInvDigit() {
	    if (this.t < 1) return 0;
	    var x = this[0];
	    if ((x & 1) == 0) return 0;
	    var y = x & 3;
	    y = y * (2 - (x & 15) * y) & 15;
	    y = y * (2 - (x & 255) * y) & 255;
	    y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
	    y = y * (2 - x * y % this.DV) % this.DV;
	    return y > 0 ? this.DV - y : -y;
	  }
	  function Montgomery(m) {
	    this.m = m;
	    this.mp = m.invDigit();
	    this.mpl = this.mp & 32767;
	    this.mph = this.mp >> 15;
	    this.um = (1 << m.DB - 15) - 1;
	    this.mt2 = 2 * m.t;
	  }
	  function montConvert(x) {
	    var r = nbi();
	    x.abs().dlShiftTo(this.m.t, r);
	    r.divRemTo(this.m, null, r);
	    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
	    return r;
	  }
	  function montRevert(x) {
	    var r = nbi();
	    x.copyTo(r);
	    this.reduce(r);
	    return r;
	  }
	  function montReduce(x) {
	    while (x.t <= this.mt2) x[x.t++] = 0;
	    for (var i = 0; i < this.m.t; ++i) {
	      var j = x[i] & 32767;
	      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
	      j = i + this.m.t;
	      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
	      while (x[j] >= x.DV) {
	        x[j] -= x.DV;
	        x[++j]++;
	      }
	    }
	    x.clamp();
	    x.drShiftTo(this.m.t, x);
	    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
	  }
	  function montSqrTo(x, r) {
	    x.squareTo(r);
	    this.reduce(r);
	  }
	  function montMulTo(x, y, r) {
	    x.multiplyTo(y, r);
	    this.reduce(r);
	  }
	  Montgomery.prototype.convert = montConvert;
	  Montgomery.prototype.revert = montRevert;
	  Montgomery.prototype.reduce = montReduce;
	  Montgomery.prototype.mulTo = montMulTo;
	  Montgomery.prototype.sqrTo = montSqrTo;
	  function bnpIsEven() {
	    return (this.t > 0 ? this[0] & 1 : this.s) == 0;
	  }
	  function bnpExp(e, z) {
	    if (e > 4294967295 || e < 1) return BigInteger.ONE;
	    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;
	    g.copyTo(r);
	    while (--i >= 0) {
	      z.sqrTo(r, r2);
	      if ((e & 1 << i) > 0) z.mulTo(r2, g, r); else {
	        var t = r;
	        r = r2;
	        r2 = t;
	      }
	    }
	    return z.revert(r);
	  }
	  function bnModPowInt(e, m) {
	    var z;
	    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	    return this.exp(e, z);
	  }
	  BigInteger.prototype.copyTo = bnpCopyTo;
	  BigInteger.prototype.fromInt = bnpFromInt;
	  BigInteger.prototype.fromString = bnpFromString;
	  BigInteger.prototype.clamp = bnpClamp;
	  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	  BigInteger.prototype.lShiftTo = bnpLShiftTo;
	  BigInteger.prototype.rShiftTo = bnpRShiftTo;
	  BigInteger.prototype.subTo = bnpSubTo;
	  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	  BigInteger.prototype.squareTo = bnpSquareTo;
	  BigInteger.prototype.divRemTo = bnpDivRemTo;
	  BigInteger.prototype.invDigit = bnpInvDigit;
	  BigInteger.prototype.isEven = bnpIsEven;
	  BigInteger.prototype.exp = bnpExp;
	  BigInteger.prototype.toString = bnToString;
	  BigInteger.prototype.negate = bnNegate;
	  BigInteger.prototype.abs = bnAbs;
	  BigInteger.prototype.compareTo = bnCompareTo;
	  BigInteger.prototype.bitLength = bnBitLength;
	  BigInteger.prototype.mod = bnMod;
	  BigInteger.prototype.modPowInt = bnModPowInt;
	  BigInteger.ZERO = nbv(0);
	  BigInteger.ONE = nbv(1);
	  function bnpFromRadix(s, b) {
	    this.fromInt(0);
	    if (b == null) b = 10;
	    var cs = this.chunkSize(b);
	    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;
	    for (var i = 0; i < s.length; ++i) {
	      var x = intAt(s, i);
	      if (x < 0) {
	        if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
	        continue;
	      }
	      w = b * w + x;
	      if (++j >= cs) {
	        this.dMultiply(d);
	        this.dAddOffset(w, 0);
	        j = 0;
	        w = 0;
	      }
	    }
	    if (j > 0) {
	      this.dMultiply(Math.pow(b, j));
	      this.dAddOffset(w, 0);
	    }
	    if (mi) BigInteger.ZERO.subTo(this, this);
	  }
	  function bnpChunkSize(r) {
	    return Math.floor(Math.LN2 * this.DB / Math.log(r));
	  }
	  function bnSigNum() {
	    if (this.s < 0) return -1; else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0; else return 1;
	  }
	  function bnpDMultiply(n) {
	    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
	    ++this.t;
	    this.clamp();
	  }
	  function bnpDAddOffset(n, w) {
	    if (n == 0) return;
	    while (this.t <= w) this[this.t++] = 0;
	    this[w] += n;
	    while (this[w] >= this.DV) {
	      this[w] -= this.DV;
	      if (++w >= this.t) this[this.t++] = 0;
	      ++this[w];
	    }
	  }
	  function bnpToRadix(b) {
	    if (b == null) b = 10;
	    if (this.signum() == 0 || b < 2 || b > 36) return "0";
	    var cs = this.chunkSize(b);
	    var a = Math.pow(b, cs);
	    var d = nbv(a), y = nbi(), z = nbi(), r = "";
	    this.divRemTo(d, y, z);
	    while (y.signum() > 0) {
	      r = (a + z.intValue()).toString(b).substr(1) + r;
	      y.divRemTo(d, y, z);
	    }
	    return z.intValue().toString(b) + r;
	  }
	  function bnIntValue() {
	    if (this.s < 0) {
	      if (this.t == 1) return this[0] - this.DV; else if (this.t == 0) return -1;
	    } else if (this.t == 1) return this[0]; else if (this.t == 0) return 0;
	    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
	  }
	  function bnpAddTo(a, r) {
	    var i = 0, c = 0, m = Math.min(a.t, this.t);
	    while (i < m) {
	      c += this[i] + a[i];
	      r[i++] = c & this.DM;
	      c >>= this.DB;
	    }
	    if (a.t < this.t) {
	      c += a.s;
	      while (i < this.t) {
	        c += this[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    } else {
	      c += this.s;
	      while (i < a.t) {
	        c += a[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += a.s;
	    }
	    r.s = c < 0 ? -1 : 0;
	    if (c > 0) r[i++] = c; else if (c < -1) r[i++] = this.DV + c;
	    r.t = i;
	    r.clamp();
	  }
	  BigInteger.prototype.fromRadix = bnpFromRadix;
	  BigInteger.prototype.chunkSize = bnpChunkSize;
	  BigInteger.prototype.signum = bnSigNum;
	  BigInteger.prototype.dMultiply = bnpDMultiply;
	  BigInteger.prototype.dAddOffset = bnpDAddOffset;
	  BigInteger.prototype.toRadix = bnpToRadix;
	  BigInteger.prototype.intValue = bnIntValue;
	  BigInteger.prototype.addTo = bnpAddTo;
	  var Wrapper = {
	    result: [ 0, 0 ],
	    add: (function(xl, xh, yl, yh) {
	      var x = new goog.math.Long(xl, xh);
	      var y = new goog.math.Long(yl, yh);
	      var ret = x.add(y);
	      Wrapper.result[0] = ret.low_;
	      Wrapper.result[1] = ret.high_;
	    }),
	    subtract: (function(xl, xh, yl, yh) {
	      var x = new goog.math.Long(xl, xh);
	      var y = new goog.math.Long(yl, yh);
	      var ret = x.subtract(y);
	      Wrapper.result[0] = ret.low_;
	      Wrapper.result[1] = ret.high_;
	    }),
	    multiply: (function(xl, xh, yl, yh) {
	      var x = new goog.math.Long(xl, xh);
	      var y = new goog.math.Long(yl, yh);
	      var ret = x.multiply(y);
	      Wrapper.result[0] = ret.low_;
	      Wrapper.result[1] = ret.high_;
	    }),
	    makeTwo32: (function() {
	      Wrapper.two32 = new BigInteger;
	      Wrapper.two32.fromString("4294967296", 10);
	    }),
	    lh2bignum: (function(l, h) {
	      var a = new BigInteger;
	      a.fromString(h.toString(), 10);
	      var b = new BigInteger;
	      a.multiplyTo(Wrapper.two32, b);
	      var c = new BigInteger;
	      c.fromString(l.toString(), 10);
	      var d = new BigInteger;
	      c.addTo(b, d);
	      return d;
	    }),
	    divide: (function(xl, xh, yl, yh, unsigned) {
	      if (!Wrapper.two32) Wrapper.makeTwo32();
	      if (!unsigned) {
	        var x = new goog.math.Long(xl, xh);
	        var y = new goog.math.Long(yl, yh);
	        var ret = x.div(y);
	        Wrapper.result[0] = ret.low_;
	        Wrapper.result[1] = ret.high_;
	      } else {
	        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
	        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
	        var z = new BigInteger;
	        x.divRemTo(y, z, null);
	        var l = new BigInteger;
	        var h = new BigInteger;
	        z.divRemTo(Wrapper.two32, h, l);
	        Wrapper.result[0] = parseInt(l.toString()) | 0;
	        Wrapper.result[1] = parseInt(h.toString()) | 0;
	      }
	    }),
	    modulo: (function(xl, xh, yl, yh, unsigned) {
	      if (!Wrapper.two32) Wrapper.makeTwo32();
	      if (!unsigned) {
	        var x = new goog.math.Long(xl, xh);
	        var y = new goog.math.Long(yl, yh);
	        var ret = x.modulo(y);
	        Wrapper.result[0] = ret.low_;
	        Wrapper.result[1] = ret.high_;
	      } else {
	        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
	        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
	        var z = new BigInteger;
	        x.divRemTo(y, null, z);
	        var l = new BigInteger;
	        var h = new BigInteger;
	        z.divRemTo(Wrapper.two32, h, l);
	        Wrapper.result[0] = parseInt(l.toString()) | 0;
	        Wrapper.result[1] = parseInt(h.toString()) | 0;
	      }
	    }),
	    stringify: (function(l, h, unsigned) {
	      var ret = (new goog.math.Long(l, h)).toString();
	      if (unsigned && ret[0] == "-") {
	        if (!Wrapper.two64) {
	          Wrapper.two64 = new BigInteger;
	          Wrapper.two64.fromString("18446744073709551616", 10);
	        }
	        var bignum = new BigInteger;
	        bignum.fromString(ret, 10);
	        ret = new BigInteger;
	        Wrapper.two64.addTo(bignum, ret);
	        ret = ret.toString(10);
	      }
	      return ret;
	    })
	  };
	  return Wrapper;
	})();

	var _llvm_dbg_declare;

	function _strncmp(px, py, n) {
	  var i = 0;
	  while (i < n) {
	    var x = HEAPU8[px + i];
	    var y = HEAPU8[py + i];
	    if (x == y && x == 0) return 0;
	    if (x == 0) return -1;
	    if (y == 0) return 1;
	    if (x == y) {
	      i++;
	      continue;
	    } else {
	      return x > y ? 1 : -1;
	    }
	  }
	  return 0;
	}

	function _strcmp(px, py) {
	  return _strncmp(px, py, TOTAL_MEMORY);
	}

	var ERRNO_CODES = {
	  E2BIG: 7,
	  EACCES: 13,
	  EADDRINUSE: 98,
	  EADDRNOTAVAIL: 99,
	  EAFNOSUPPORT: 97,
	  EAGAIN: 11,
	  EALREADY: 114,
	  EBADF: 9,
	  EBADMSG: 74,
	  EBUSY: 16,
	  ECANCELED: 125,
	  ECHILD: 10,
	  ECONNABORTED: 103,
	  ECONNREFUSED: 111,
	  ECONNRESET: 104,
	  EDEADLK: 35,
	  EDESTADDRREQ: 89,
	  EDOM: 33,
	  EDQUOT: 122,
	  EEXIST: 17,
	  EFAULT: 14,
	  EFBIG: 27,
	  EHOSTUNREACH: 113,
	  EIDRM: 43,
	  EILSEQ: 84,
	  EINPROGRESS: 115,
	  EINTR: 4,
	  EINVAL: 22,
	  EIO: 5,
	  EISCONN: 106,
	  EISDIR: 21,
	  ELOOP: 40,
	  EMFILE: 24,
	  EMLINK: 31,
	  EMSGSIZE: 90,
	  EMULTIHOP: 72,
	  ENAMETOOLONG: 36,
	  ENETDOWN: 100,
	  ENETRESET: 102,
	  ENETUNREACH: 101,
	  ENFILE: 23,
	  ENOBUFS: 105,
	  ENODATA: 61,
	  ENODEV: 19,
	  ENOENT: 2,
	  ENOEXEC: 8,
	  ENOLCK: 37,
	  ENOLINK: 67,
	  ENOMEM: 12,
	  ENOMSG: 42,
	  ENOPROTOOPT: 92,
	  ENOSPC: 28,
	  ENOSR: 63,
	  ENOSTR: 60,
	  ENOSYS: 38,
	  ENOTCONN: 107,
	  ENOTDIR: 20,
	  ENOTEMPTY: 39,
	  ENOTRECOVERABLE: 131,
	  ENOTSOCK: 88,
	  ENOTSUP: 95,
	  ENOTTY: 25,
	  ENXIO: 6,
	  EOVERFLOW: 75,
	  EOWNERDEAD: 130,
	  EPERM: 1,
	  EPIPE: 32,
	  EPROTO: 71,
	  EPROTONOSUPPORT: 93,
	  EPROTOTYPE: 91,
	  ERANGE: 34,
	  EROFS: 30,
	  ESPIPE: 29,
	  ESRCH: 3,
	  ESTALE: 116,
	  ETIME: 62,
	  ETIMEDOUT: 110,
	  ETXTBSY: 26,
	  EWOULDBLOCK: 11,
	  EXDEV: 18
	};

	function ___setErrNo(value) {
	  if (!___setErrNo.ret) ___setErrNo.ret = allocate([ 0 ], "i32", ALLOC_STATIC);
	  HEAP32[___setErrNo.ret >> 2] = value;
	  return value;
	}

	var _stdin = 0;

	var _stdout = 0;

	var _stderr = 0;

	var __impure_ptr = 0;

	var FS = {
	  currentPath: "/",
	  nextInode: 2,
	  streams: [ null ],
	  ignorePermissions: true,
	  joinPath: (function(parts, forceRelative) {
	    var ret = parts[0];
	    for (var i = 1; i < parts.length; i++) {
	      if (ret[ret.length - 1] != "/") ret += "/";
	      ret += parts[i];
	    }
	    if (forceRelative && ret[0] == "/") ret = ret.substr(1);
	    return ret;
	  }),
	  absolutePath: (function(relative, base) {
	    if (typeof relative !== "string") return null;
	    if (base === undefined) base = FS.currentPath;
	    if (relative && relative[0] == "/") base = "";
	    var full = base + "/" + relative;
	    var parts = full.split("/").reverse();
	    var absolute = [ "" ];
	    while (parts.length) {
	      var part = parts.pop();
	      if (part == "" || part == ".") {} else if (part == "..") {
	        if (absolute.length > 1) absolute.pop();
	      } else {
	        absolute.push(part);
	      }
	    }
	    return absolute.length == 1 ? "/" : absolute.join("/");
	  }),
	  analyzePath: (function(path, dontResolveLastLink, linksVisited) {
	    var ret = {
	      isRoot: false,
	      exists: false,
	      error: 0,
	      name: null,
	      path: null,
	      object: null,
	      parentExists: false,
	      parentPath: null,
	      parentObject: null
	    };
	    path = FS.absolutePath(path);
	    if (path == "/") {
	      ret.isRoot = true;
	      ret.exists = ret.parentExists = true;
	      ret.name = "/";
	      ret.path = ret.parentPath = "/";
	      ret.object = ret.parentObject = FS.root;
	    } else if (path !== null) {
	      linksVisited = linksVisited || 0;
	      path = path.slice(1).split("/");
	      var current = FS.root;
	      var traversed = [ "" ];
	      while (path.length) {
	        if (path.length == 1 && current.isFolder) {
	          ret.parentExists = true;
	          ret.parentPath = traversed.length == 1 ? "/" : traversed.join("/");
	          ret.parentObject = current;
	          ret.name = path[0];
	        }
	        var target = path.shift();
	        if (!current.isFolder) {
	          ret.error = ERRNO_CODES.ENOTDIR;
	          break;
	        } else if (!current.read) {
	          ret.error = ERRNO_CODES.EACCES;
	          break;
	        } else if (!current.contents.hasOwnProperty(target)) {
	          ret.error = ERRNO_CODES.ENOENT;
	          break;
	        }
	        current = current.contents[target];
	        if (current.link && !(dontResolveLastLink && path.length == 0)) {
	          if (linksVisited > 40) {
	            ret.error = ERRNO_CODES.ELOOP;
	            break;
	          }
	          var link = FS.absolutePath(current.link, traversed.join("/"));
	          ret = FS.analyzePath([ link ].concat(path).join("/"), dontResolveLastLink, linksVisited + 1);
	          return ret;
	        }
	        traversed.push(target);
	        if (path.length == 0) {
	          ret.exists = true;
	          ret.path = traversed.join("/");
	          ret.object = current;
	        }
	      }
	    }
	    return ret;
	  }),
	  findObject: (function(path, dontResolveLastLink) {
	    FS.ensureRoot();
	    var ret = FS.analyzePath(path, dontResolveLastLink);
	    if (ret.exists) {
	      return ret.object;
	    } else {
	      ___setErrNo(ret.error);
	      return null;
	    }
	  }),
	  createObject: (function(parent, name, properties, canRead, canWrite) {
	    if (!parent) parent = "/";
	    if (typeof parent === "string") parent = FS.findObject(parent);
	    if (!parent) {
	      ___setErrNo(ERRNO_CODES.EACCES);
	      throw new Error("Parent path must exist.");
	    }
	    if (!parent.isFolder) {
	      ___setErrNo(ERRNO_CODES.ENOTDIR);
	      throw new Error("Parent must be a folder.");
	    }
	    if (!parent.write && !FS.ignorePermissions) {
	      ___setErrNo(ERRNO_CODES.EACCES);
	      throw new Error("Parent folder must be writeable.");
	    }
	    if (!name || name == "." || name == "..") {
	      ___setErrNo(ERRNO_CODES.ENOENT);
	      throw new Error("Name must not be empty.");
	    }
	    if (parent.contents.hasOwnProperty(name)) {
	      ___setErrNo(ERRNO_CODES.EEXIST);
	      throw new Error("Can't overwrite object.");
	    }
	    parent.contents[name] = {
	      read: canRead === undefined ? true : canRead,
	      write: canWrite === undefined ? false : canWrite,
	      timestamp: Date.now(),
	      inodeNumber: FS.nextInode++
	    };
	    for (var key in properties) {
	      if (properties.hasOwnProperty(key)) {
	        parent.contents[name][key] = properties[key];
	      }
	    }
	    return parent.contents[name];
	  }),
	  createFolder: (function(parent, name, canRead, canWrite) {
	    var properties = {
	      isFolder: true,
	      isDevice: false,
	      contents: {}
	    };
	    return FS.createObject(parent, name, properties, canRead, canWrite);
	  }),
	  createPath: (function(parent, path, canRead, canWrite) {
	    var current = FS.findObject(parent);
	    if (current === null) throw new Error("Invalid parent.");
	    path = path.split("/").reverse();
	    while (path.length) {
	      var part = path.pop();
	      if (!part) continue;
	      if (!current.contents.hasOwnProperty(part)) {
	        FS.createFolder(current, part, canRead, canWrite);
	      }
	      current = current.contents[part];
	    }
	    return current;
	  }),
	  createFile: (function(parent, name, properties, canRead, canWrite) {
	    properties.isFolder = false;
	    return FS.createObject(parent, name, properties, canRead, canWrite);
	  }),
	  createDataFile: (function(parent, name, data, canRead, canWrite) {
	    if (typeof data === "string") {
	      var dataArray = new Array(data.length);
	      for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
	      data = dataArray;
	    }
	    var properties = {
	      isDevice: false,
	      contents: data.subarray ? data.subarray(0) : data
	    };
	    return FS.createFile(parent, name, properties, canRead, canWrite);
	  }),
	  createLazyFile: (function(parent, name, url, canRead, canWrite) {
	    if (typeof XMLHttpRequest !== "undefined") {
	      if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
	      var LazyUint8Array = (function(chunkSize, length) {
	        this.length = length;
	        this.chunkSize = chunkSize;
	        this.chunks = [];
	      });
	      LazyUint8Array.prototype.get = (function(idx) {
	        if (idx > this.length - 1 || idx < 0) {
	          return undefined;
	        }
	        var chunkOffset = idx % chunkSize;
	        var chunkNum = Math.floor(idx / chunkSize);
	        return this.getter(chunkNum)[chunkOffset];
	      });
	      LazyUint8Array.prototype.setDataGetter = (function(getter) {
	        this.getter = getter;
	      });
	      var xhr = new XMLHttpRequest;
	      xhr.open("HEAD", url, false);
	      xhr.send(null);
	      if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
	      var datalength = Number(xhr.getResponseHeader("Content-length"));
	      var header;
	      var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
	      var chunkSize = 1024 * 1024;
	      if (!hasByteServing) chunkSize = datalength;
	      var doXHR = (function(from, to) {
	        if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
	        if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
	        var xhr = new XMLHttpRequest;
	        xhr.open("GET", url, false);
	        if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
	        if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
	        if (xhr.overrideMimeType) {
	          xhr.overrideMimeType("text/plain; charset=x-user-defined");
	        }
	        xhr.send(null);
	        if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
	        if (xhr.response !== undefined) {
	          return new Uint8Array(xhr.response || []);
	        } else {
	          return intArrayFromString(xhr.responseText || "", true);
	        }
	      });
	      var lazyArray = new LazyUint8Array(chunkSize, datalength);
	      lazyArray.setDataGetter((function(chunkNum) {
	        var start = chunkNum * lazyArray.chunkSize;
	        var end = (chunkNum + 1) * lazyArray.chunkSize - 1;
	        end = Math.min(end, datalength - 1);
	        if (typeof lazyArray.chunks[chunkNum] === "undefined") {
	          lazyArray.chunks[chunkNum] = doXHR(start, end);
	        }
	        if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
	        return lazyArray.chunks[chunkNum];
	      }));
	      var properties = {
	        isDevice: false,
	        contents: lazyArray
	      };
	    } else {
	      var properties = {
	        isDevice: false,
	        url: url
	      };
	    }
	    return FS.createFile(parent, name, properties, canRead, canWrite);
	  }),
	  createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
	    Browser.ensureObjects();
	    var fullname = FS.joinPath([ parent, name ], true);
	    function processData(byteArray) {
	      function finish(byteArray) {
	        if (!dontCreateFile) {
	          FS.createDataFile(parent, name, byteArray, canRead, canWrite);
	        }
	        if (onload) onload();
	        removeRunDependency("cp " + fullname);
	      }
	      var handled = false;
	      Module["preloadPlugins"].forEach((function(plugin) {
	        if (handled) return;
	        if (plugin["canHandle"](fullname)) {
	          plugin["handle"](byteArray, fullname, finish, (function() {
	            if (onerror) onerror();
	            removeRunDependency("cp " + fullname);
	          }));
	          handled = true;
	        }
	      }));
	      if (!handled) finish(byteArray);
	    }
	    addRunDependency("cp " + fullname);
	    if (typeof url == "string") {
	      Browser.asyncLoad(url, (function(byteArray) {
	        processData(byteArray);
	      }), onerror);
	    } else {
	      processData(url);
	    }
	  }),
	  createLink: (function(parent, name, target, canRead, canWrite) {
	    var properties = {
	      isDevice: false,
	      link: target
	    };
	    return FS.createFile(parent, name, properties, canRead, canWrite);
	  }),
	  createDevice: (function(parent, name, input, output) {
	    if (!(input || output)) {
	      throw new Error("A device must have at least one callback defined.");
	    }
	    var ops = {
	      isDevice: true,
	      input: input,
	      output: output
	    };
	    return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
	  }),
	  forceLoadFile: (function(obj) {
	    if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
	    var success = true;
	    if (typeof XMLHttpRequest !== "undefined") {
	      throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
	    } else if (Module["read"]) {
	      try {
	        obj.contents = intArrayFromString(Module["read"](obj.url), true);
	      } catch (e) {
	        success = false;
	      }
	    } else {
	      throw new Error("Cannot load without read() or XMLHttpRequest.");
	    }
	    if (!success) ___setErrNo(ERRNO_CODES.EIO);
	    return success;
	  }),
	  ensureRoot: (function() {
	    if (FS.root) return;
	    FS.root = {
	      read: true,
	      write: true,
	      isFolder: true,
	      isDevice: false,
	      timestamp: Date.now(),
	      inodeNumber: 1,
	      contents: {}
	    };
	  }),
	  init: (function(input, output, error) {
	    assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
	    FS.init.initialized = true;
	    FS.ensureRoot();
	    input = input || Module["stdin"];
	    output = output || Module["stdout"];
	    error = error || Module["stderr"];
	    var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
	    if (!input) {
	      stdinOverridden = false;
	      input = (function() {
	        if (!input.cache || !input.cache.length) {
	          var result;
	          if (typeof window != "undefined" && typeof window.prompt == "function") {
	            result = window.prompt("Input: ");
	            if (result === null) result = String.fromCharCode(0);
	          } else if (typeof readline == "function") {
	            result = readline();
	          }
	          if (!result) result = "";
	          input.cache = intArrayFromString(result + "\n", true);
	        }
	        return input.cache.shift();
	      });
	    }
	    var utf8 = new Runtime.UTF8Processor;
	    function simpleOutput(val) {
	      if (val === null || val === "\n".charCodeAt(0)) {
	        output.printer(output.buffer.join(""));
	        output.buffer = [];
	      } else {
	        output.buffer.push(utf8.processCChar(val));
	      }
	    }
	    if (!output) {
	      stdoutOverridden = false;
	      output = simpleOutput;
	    }
	    if (!output.printer) output.printer = Module["print"];
	    if (!output.buffer) output.buffer = [];
	    if (!error) {
	      stderrOverridden = false;
	      error = simpleOutput;
	    }
	    if (!error.printer) error.printer = Module["print"];
	    if (!error.buffer) error.buffer = [];
	    try {
	      FS.createFolder("/", "tmp", true, true);
	    } catch (e) {}
	    var devFolder = FS.createFolder("/", "dev", true, true);
	    var stdin = FS.createDevice(devFolder, "stdin", input);
	    var stdout = FS.createDevice(devFolder, "stdout", null, output);
	    var stderr = FS.createDevice(devFolder, "stderr", null, error);
	    FS.createDevice(devFolder, "tty", input, output);
	    FS.streams[1] = {
	      path: "/dev/stdin",
	      object: stdin,
	      position: 0,
	      isRead: true,
	      isWrite: false,
	      isAppend: false,
	      isTerminal: !stdinOverridden,
	      error: false,
	      eof: false,
	      ungotten: []
	    };
	    FS.streams[2] = {
	      path: "/dev/stdout",
	      object: stdout,
	      position: 0,
	      isRead: false,
	      isWrite: true,
	      isAppend: false,
	      isTerminal: !stdoutOverridden,
	      error: false,
	      eof: false,
	      ungotten: []
	    };
	    FS.streams[3] = {
	      path: "/dev/stderr",
	      object: stderr,
	      position: 0,
	      isRead: false,
	      isWrite: true,
	      isAppend: false,
	      isTerminal: !stderrOverridden,
	      error: false,
	      eof: false,
	      ungotten: []
	    };
	    _stdin = allocate([ 1 ], "void*", ALLOC_STACK);
	    _stdout = allocate([ 2 ], "void*", ALLOC_STACK);
	    _stderr = allocate([ 3 ], "void*", ALLOC_STACK);
	    FS.createPath("/", "dev/shm/tmp", true, true);
	    for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
	      FS.streams[i] = null;
	    }
	    FS.streams[_stdin] = FS.streams[1];
	    FS.streams[_stdout] = FS.streams[2];
	    FS.streams[_stderr] = FS.streams[3];
	    __impure_ptr = allocate([ allocate([ 0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0 ], "void*", ALLOC_STATIC) ], "void*", ALLOC_STATIC);
	  }),
	  quit: (function() {
	    if (!FS.init.initialized) return;
	    if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output("\n".charCodeAt(0));
	    if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output("\n".charCodeAt(0));
	  }),
	  standardizePath: (function(path) {
	    if (path.substr(0, 2) == "./") path = path.substr(2);
	    return path;
	  }),
	  deleteFile: (function(path) {
	    var path = FS.analyzePath(path);
	    if (!path.parentExists || !path.exists) {
	      throw "Invalid path " + path;
	    }
	    delete path.parentObject.contents[path.name];
	  })
	};

	function _close(fildes) {
	  if (FS.streams[fildes]) {
	    if (FS.streams[fildes].currentEntry) {
	      _free(FS.streams[fildes].currentEntry);
	    }
	    FS.streams[fildes] = null;
	    return 0;
	  } else {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  }
	}

	function _fsync(fildes) {
	  if (FS.streams[fildes]) {
	    return 0;
	  } else {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  }
	}

	function _fclose(stream) {
	  _fsync(stream);
	  return _close(stream);
	}

	function __formatString(format, varargs) {
	  var textIndex = format;
	  var argIndex = 0;
	  function getNextArg(type) {
	    var ret;
	    if (type === "double") {
	      ret = (tempDoubleI32[0] = HEAP32[varargs + argIndex >> 2], tempDoubleI32[1] = HEAP32[varargs + (argIndex + 4) >> 2], tempDoubleF64[0]);
	    } else if (type == "i64") {
	      ret = [ HEAP32[varargs + argIndex >> 2], HEAP32[varargs + (argIndex + 4) >> 2] ];
	    } else {
	      type = "i32";
	      ret = HEAP32[varargs + argIndex >> 2];
	    }
	    argIndex += Runtime.getNativeFieldSize(type);
	    return ret;
	  }
	  var ret = [];
	  var curr, next, currArg;
	  while (1) {
	    var startTextIndex = textIndex;
	    curr = HEAP8[textIndex];
	    if (curr === 0) break;
	    next = HEAP8[textIndex + 1];
	    if (curr == "%".charCodeAt(0)) {
	      var flagAlwaysSigned = false;
	      var flagLeftAlign = false;
	      var flagAlternative = false;
	      var flagZeroPad = false;
	      flagsLoop : while (1) {
	        switch (next) {
	         case "+".charCodeAt(0):
	          flagAlwaysSigned = true;
	          break;
	         case "-".charCodeAt(0):
	          flagLeftAlign = true;
	          break;
	         case "#".charCodeAt(0):
	          flagAlternative = true;
	          break;
	         case "0".charCodeAt(0):
	          if (flagZeroPad) {
	            break flagsLoop;
	          } else {
	            flagZeroPad = true;
	            break;
	          }
	         default:
	          break flagsLoop;
	        }
	        textIndex++;
	        next = HEAP8[textIndex + 1];
	      }
	      var width = 0;
	      if (next == "*".charCodeAt(0)) {
	        width = getNextArg("i32");
	        textIndex++;
	        next = HEAP8[textIndex + 1];
	      } else {
	        while (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0)) {
	          width = width * 10 + (next - "0".charCodeAt(0));
	          textIndex++;
	          next = HEAP8[textIndex + 1];
	        }
	      }
	      var precisionSet = false;
	      if (next == ".".charCodeAt(0)) {
	        var precision = 0;
	        precisionSet = true;
	        textIndex++;
	        next = HEAP8[textIndex + 1];
	        if (next == "*".charCodeAt(0)) {
	          precision = getNextArg("i32");
	          textIndex++;
	        } else {
	          while (1) {
	            var precisionChr = HEAP8[textIndex + 1];
	            if (precisionChr < "0".charCodeAt(0) || precisionChr > "9".charCodeAt(0)) break;
	            precision = precision * 10 + (precisionChr - "0".charCodeAt(0));
	            textIndex++;
	          }
	        }
	        next = HEAP8[textIndex + 1];
	      } else {
	        var precision = 6;
	      }
	      var argSize;
	      switch (String.fromCharCode(next)) {
	       case "h":
	        var nextNext = HEAP8[textIndex + 2];
	        if (nextNext == "h".charCodeAt(0)) {
	          textIndex++;
	          argSize = 1;
	        } else {
	          argSize = 2;
	        }
	        break;
	       case "l":
	        var nextNext = HEAP8[textIndex + 2];
	        if (nextNext == "l".charCodeAt(0)) {
	          textIndex++;
	          argSize = 8;
	        } else {
	          argSize = 4;
	        }
	        break;
	       case "L":
	       case "q":
	       case "j":
	        argSize = 8;
	        break;
	       case "z":
	       case "t":
	       case "I":
	        argSize = 4;
	        break;
	       default:
	        argSize = null;
	      }
	      if (argSize) textIndex++;
	      next = HEAP8[textIndex + 1];
	      if ([ "d", "i", "u", "o", "x", "X", "p" ].indexOf(String.fromCharCode(next)) != -1) {
	        var signed = next == "d".charCodeAt(0) || next == "i".charCodeAt(0);
	        argSize = argSize || 4;
	        var currArg = getNextArg("i" + argSize * 8);
	        var origArg = currArg;
	        var argText;
	        if (argSize == 8) {
	          currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == "u".charCodeAt(0));
	        }
	        if (argSize <= 4) {
	          var limit = Math.pow(256, argSize) - 1;
	          currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
	        }
	        var currAbsArg = Math.abs(currArg);
	        var prefix = "";
	        if (next == "d".charCodeAt(0) || next == "i".charCodeAt(0)) {
	          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else argText = reSign(currArg, 8 * argSize, 1).toString(10);
	        } else if (next == "u".charCodeAt(0)) {
	          if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else argText = unSign(currArg, 8 * argSize, 1).toString(10);
	          currArg = Math.abs(currArg);
	        } else if (next == "o".charCodeAt(0)) {
	          argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
	        } else if (next == "x".charCodeAt(0) || next == "X".charCodeAt(0)) {
	          prefix = flagAlternative ? "0x" : "";
	          if (currArg < 0) {
	            currArg = -currArg;
	            argText = (currAbsArg - 1).toString(16);
	            var buffer = [];
	            for (var i = 0; i < argText.length; i++) {
	              buffer.push((15 - parseInt(argText[i], 16)).toString(16));
	            }
	            argText = buffer.join("");
	            while (argText.length < argSize * 2) argText = "f" + argText;
	          } else {
	            argText = currAbsArg.toString(16);
	          }
	          if (next == "X".charCodeAt(0)) {
	            prefix = prefix.toUpperCase();
	            argText = argText.toUpperCase();
	          }
	        } else if (next == "p".charCodeAt(0)) {
	          if (currAbsArg === 0) {
	            argText = "(nil)";
	          } else {
	            prefix = "0x";
	            argText = currAbsArg.toString(16);
	          }
	        }
	        if (precisionSet) {
	          while (argText.length < precision) {
	            argText = "0" + argText;
	          }
	        }
	        if (flagAlwaysSigned) {
	          if (currArg < 0) {
	            prefix = "-" + prefix;
	          } else {
	            prefix = "+" + prefix;
	          }
	        }
	        while (prefix.length + argText.length < width) {
	          if (flagLeftAlign) {
	            argText += " ";
	          } else {
	            if (flagZeroPad) {
	              argText = "0" + argText;
	            } else {
	              prefix = " " + prefix;
	            }
	          }
	        }
	        argText = prefix + argText;
	        argText.split("").forEach((function(chr) {
	          ret.push(chr.charCodeAt(0));
	        }));
	      } else if ([ "f", "F", "e", "E", "g", "G" ].indexOf(String.fromCharCode(next)) != -1) {
	        var currArg = getNextArg("double");
	        var argText;
	        if (isNaN(currArg)) {
	          argText = "nan";
	          flagZeroPad = false;
	        } else if (!isFinite(currArg)) {
	          argText = (currArg < 0 ? "-" : "") + "inf";
	          flagZeroPad = false;
	        } else {
	          var isGeneral = false;
	          var effectivePrecision = Math.min(precision, 20);
	          if (next == "g".charCodeAt(0) || next == "G".charCodeAt(0)) {
	            isGeneral = true;
	            precision = precision || 1;
	            var exponent = parseInt(currArg.toExponential(effectivePrecision).split("e")[1], 10);
	            if (precision > exponent && exponent >= -4) {
	              next = (next == "g".charCodeAt(0) ? "f" : "F").charCodeAt(0);
	              precision -= exponent + 1;
	            } else {
	              next = (next == "g".charCodeAt(0) ? "e" : "E").charCodeAt(0);
	              precision--;
	            }
	            effectivePrecision = Math.min(precision, 20);
	          }
	          if (next == "e".charCodeAt(0) || next == "E".charCodeAt(0)) {
	            argText = currArg.toExponential(effectivePrecision);
	            if (/[eE][-+]\d$/.test(argText)) {
	              argText = argText.slice(0, -1) + "0" + argText.slice(-1);
	            }
	          } else if (next == "f".charCodeAt(0) || next == "F".charCodeAt(0)) {
	            argText = currArg.toFixed(effectivePrecision);
	          }
	          var parts = argText.split("e");
	          if (isGeneral && !flagAlternative) {
	            while (parts[0].length > 1 && parts[0].indexOf(".") != -1 && (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")) {
	              parts[0] = parts[0].slice(0, -1);
	            }
	          } else {
	            if (flagAlternative && argText.indexOf(".") == -1) parts[0] += ".";
	            while (precision > effectivePrecision++) parts[0] += "0";
	          }
	          argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
	          if (next == "E".charCodeAt(0)) argText = argText.toUpperCase();
	          if (flagAlwaysSigned && currArg >= 0) {
	            argText = "+" + argText;
	          }
	        }
	        while (argText.length < width) {
	          if (flagLeftAlign) {
	            argText += " ";
	          } else {
	            if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
	              argText = argText[0] + "0" + argText.slice(1);
	            } else {
	              argText = (flagZeroPad ? "0" : " ") + argText;
	            }
	          }
	        }
	        if (next < "a".charCodeAt(0)) argText = argText.toUpperCase();
	        argText.split("").forEach((function(chr) {
	          ret.push(chr.charCodeAt(0));
	        }));
	      } else if (next == "s".charCodeAt(0)) {
	        var arg = getNextArg("i8*") || nullString;
	        var argLength = String_len(arg);
	        if (precisionSet) argLength = Math.min(argLength, precision);
	        if (!flagLeftAlign) {
	          while (argLength < width--) {
	            ret.push(" ".charCodeAt(0));
	          }
	        }
	        for (var i = 0; i < argLength; i++) {
	          ret.push(HEAPU8[arg++]);
	        }
	        if (flagLeftAlign) {
	          while (argLength < width--) {
	            ret.push(" ".charCodeAt(0));
	          }
	        }
	      } else if (next == "c".charCodeAt(0)) {
	        if (flagLeftAlign) ret.push(getNextArg("i8"));
	        while (--width > 0) {
	          ret.push(" ".charCodeAt(0));
	        }
	        if (!flagLeftAlign) ret.push(getNextArg("i8"));
	      } else if (next == "n".charCodeAt(0)) {
	        var ptr = getNextArg("i32*");
	        HEAP32[ptr >> 2] = ret.length;
	      } else if (next == "%".charCodeAt(0)) {
	        ret.push(curr);
	      } else {
	        for (var i = startTextIndex; i < textIndex + 2; i++) {
	          ret.push(HEAP8[i]);
	        }
	      }
	      textIndex += 2;
	    } else {
	      ret.push(curr);
	      textIndex += 1;
	    }
	  }
	  return ret;
	}

	function _snprintf(s, n, format, varargs) {
	  var result = __formatString(format, varargs);
	  var limit = n === undefined ? result.length : Math.min(result.length, n - 1);
	  for (var i = 0; i < limit; i++) {
	    HEAP8[s + i] = result[i];
	  }
	  HEAP8[s + i] = 0;
	  return result.length;
	}

	function _sprintf(s, format, varargs) {
	  return _snprintf(s, undefined, format, varargs);
	}

	function _pwrite(fildes, buf, nbyte, offset) {
	  var stream = FS.streams[fildes];
	  if (!stream || stream.object.isDevice) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  } else if (!stream.isWrite) {
	    ___setErrNo(ERRNO_CODES.EACCES);
	    return -1;
	  } else if (stream.object.isFolder) {
	    ___setErrNo(ERRNO_CODES.EISDIR);
	    return -1;
	  } else if (nbyte < 0 || offset < 0) {
	    ___setErrNo(ERRNO_CODES.EINVAL);
	    return -1;
	  } else {
	    var contents = stream.object.contents;
	    while (contents.length < offset) contents.push(0);
	    for (var i = 0; i < nbyte; i++) {
	      contents[offset + i] = HEAPU8[buf + i];
	    }
	    stream.object.timestamp = Date.now();
	    return i;
	  }
	}

	function _write(fildes, buf, nbyte) {
	  var stream = FS.streams[fildes];
	  if (!stream) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  } else if (!stream.isWrite) {
	    ___setErrNo(ERRNO_CODES.EACCES);
	    return -1;
	  } else if (nbyte < 0) {
	    ___setErrNo(ERRNO_CODES.EINVAL);
	    return -1;
	  } else {
	    if (stream.object.isDevice) {
	      if (stream.object.output) {
	        for (var i = 0; i < nbyte; i++) {
	          try {
	            stream.object.output(HEAP8[buf + i]);
	          } catch (e) {
	            ___setErrNo(ERRNO_CODES.EIO);
	            return -1;
	          }
	        }
	        stream.object.timestamp = Date.now();
	        return i;
	      } else {
	        ___setErrNo(ERRNO_CODES.ENXIO);
	        return -1;
	      }
	    } else {
	      var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
	      if (bytesWritten != -1) stream.position += bytesWritten;
	      return bytesWritten;
	    }
	  }
	}

	function _fwrite(ptr, size, nitems, stream) {
	  var bytesToWrite = nitems * size;
	  if (bytesToWrite == 0) return 0;
	  var bytesWritten = _write(stream, ptr, bytesToWrite);
	  if (bytesWritten == -1) {
	    if (FS.streams[stream]) FS.streams[stream].error = true;
	    return -1;
	  } else {
	    return Math.floor(bytesWritten / size);
	  }
	}

	function _memcpy(dest, src, num, align) {
	  if (num >= 20 && src % 2 == dest % 2) {
	    if (src % 4 == dest % 4) {
	      var stop = src + num;
	      while (src % 4) {
	        HEAP8[dest++] = HEAP8[src++];
	      }
	      var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
	      while (src4 < stop4) {
	        HEAP32[dest4++] = HEAP32[src4++];
	      }
	      src = src4 << 2;
	      dest = dest4 << 2;
	      while (src < stop) {
	        HEAP8[dest++] = HEAP8[src++];
	      }
	    } else {
	      var stop = src + num;
	      if (src % 2) {
	        HEAP8[dest++] = HEAP8[src++];
	      }
	      var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
	      while (src2 < stop2) {
	        HEAP16[dest2++] = HEAP16[src2++];
	      }
	      src = src2 << 1;
	      dest = dest2 << 1;
	      if (src < stop) {
	        HEAP8[dest++] = HEAP8[src++];
	      }
	    }
	  } else {
	    while (num--) {
	      HEAP8[dest++] = HEAP8[src++];
	    }
	  }
	}

	var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

	function _ftell(stream) {
	  if (FS.streams[stream]) {
	    stream = FS.streams[stream];
	    if (stream.object.isDevice) {
	      ___setErrNo(ERRNO_CODES.ESPIPE);
	      return -1;
	    } else {
	      return stream.position;
	    }
	  } else {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  }
	}

	function _lseek(fildes, offset, whence) {
	  if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
	    var stream = FS.streams[fildes];
	    var position = offset;
	    if (whence === 1) {
	      position += stream.position;
	    } else if (whence === 2) {
	      position += stream.object.contents.length;
	    }
	    if (position < 0) {
	      ___setErrNo(ERRNO_CODES.EINVAL);
	      return -1;
	    } else {
	      stream.ungotten = [];
	      stream.position = position;
	      return position;
	    }
	  } else {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  }
	}

	function _fseek(stream, offset, whence) {
	  var ret = _lseek(stream, offset, whence);
	  if (ret == -1) {
	    return -1;
	  } else {
	    FS.streams[stream].eof = false;
	    return 0;
	  }
	}

	function ___assert_func(filename, line, func, condition) {
	  throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ Pointer_stringify(filename), line, Pointer_stringify(func) ];
	}

	function _memset(ptr, value, num, align) {
	  if (num >= 20) {
	    var stop = ptr + num;
	    while (ptr % 4) {
	      HEAP8[ptr++] = value;
	    }
	    if (value < 0) value += 256;
	    var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | value << 8 | value << 16 | value << 24;
	    while (ptr4 < stop4) {
	      HEAP32[ptr4++] = value4;
	    }
	    ptr = ptr4 << 2;
	    while (ptr < stop) {
	      HEAP8[ptr++] = value;
	    }
	  } else {
	    while (num--) {
	      HEAP8[ptr++] = value;
	    }
	  }
	}

	var _llvm_memset_p0i8_i32 = _memset;

	function _pread(fildes, buf, nbyte, offset) {
	  var stream = FS.streams[fildes];
	  if (!stream || stream.object.isDevice) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  } else if (!stream.isRead) {
	    ___setErrNo(ERRNO_CODES.EACCES);
	    return -1;
	  } else if (stream.object.isFolder) {
	    ___setErrNo(ERRNO_CODES.EISDIR);
	    return -1;
	  } else if (nbyte < 0 || offset < 0) {
	    ___setErrNo(ERRNO_CODES.EINVAL);
	    return -1;
	  } else {
	    var bytesRead = 0;
	    while (stream.ungotten.length && nbyte > 0) {
	      HEAP8[buf++] = stream.ungotten.pop();
	      nbyte--;
	      bytesRead++;
	    }
	    var contents = stream.object.contents;
	    var size = Math.min(contents.length - offset, nbyte);
	    if (contents.subarray || contents.slice) {
	      for (var i = 0; i < size; i++) {
	        HEAP8[buf + i] = contents[offset + i];
	      }
	    } else {
	      for (var i = 0; i < size; i++) {
	        HEAP8[buf + i] = contents.get(offset + i);
	      }
	    }
	    bytesRead += size;
	    return bytesRead;
	  }
	}

	function _read(fildes, buf, nbyte) {
	  var stream = FS.streams[fildes];
	  if (!stream) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  } else if (!stream.isRead) {
	    ___setErrNo(ERRNO_CODES.EACCES);
	    return -1;
	  } else if (nbyte < 0) {
	    ___setErrNo(ERRNO_CODES.EINVAL);
	    return -1;
	  } else {
	    var bytesRead;
	    if (stream.object.isDevice) {
	      if (stream.object.input) {
	        bytesRead = 0;
	        while (stream.ungotten.length && nbyte > 0) {
	          HEAP8[buf++] = stream.ungotten.pop();
	          nbyte--;
	          bytesRead++;
	        }
	        for (var i = 0; i < nbyte; i++) {
	          try {
	            var result = stream.object.input();
	          } catch (e) {
	            ___setErrNo(ERRNO_CODES.EIO);
	            return -1;
	          }
	          if (result === null || result === undefined) break;
	          bytesRead++;
	          HEAP8[buf + i] = result;
	        }
	        return bytesRead;
	      } else {
	        ___setErrNo(ERRNO_CODES.ENXIO);
	        return -1;
	      }
	    } else {
	      var ungotSize = stream.ungotten.length;
	      bytesRead = _pread(fildes, buf, nbyte, stream.position);
	      if (bytesRead != -1) {
	        stream.position += stream.ungotten.length - ungotSize + bytesRead;
	      }
	      return bytesRead;
	    }
	  }
	}

	function _fread(ptr, size, nitems, stream) {
	  var bytesToRead = nitems * size;
	  if (bytesToRead == 0) return 0;
	  var bytesRead = _read(stream, ptr, bytesToRead);
	  var streamObj = FS.streams[stream];
	  if (bytesRead == -1) {
	    if (streamObj) streamObj.error = true;
	    return -1;
	  } else {
	    if (bytesRead < bytesToRead) streamObj.eof = true;
	    return Math.floor(bytesRead / size);
	  }
	}

	function _isspace(chr) {
	  return chr in {
	    32: 0,
	    9: 0,
	    10: 0,
	    11: 0,
	    12: 0,
	    13: 0
	  };
	}

	function __parseInt(str, endptr, base, min, max, bits, unsign) {
	  while (_isspace(HEAP8[str])) str++;
	  var multiplier = 1;
	  if (HEAP8[str] == "-".charCodeAt(0)) {
	    multiplier = -1;
	    str++;
	  } else if (HEAP8[str] == "+".charCodeAt(0)) {
	    str++;
	  }
	  var finalBase = base;
	  if (!finalBase) {
	    if (HEAP8[str] == "0".charCodeAt(0)) {
	      if (HEAP8[str + 1] == "x".charCodeAt(0) || HEAP8[str + 1] == "X".charCodeAt(0)) {
	        finalBase = 16;
	        str += 2;
	      } else {
	        finalBase = 8;
	        str++;
	      }
	    }
	  }
	  if (!finalBase) finalBase = 10;
	  var chr;
	  var ret = 0;
	  while ((chr = HEAP8[str]) != 0) {
	    var digit = parseInt(String.fromCharCode(chr), finalBase);
	    if (isNaN(digit)) {
	      break;
	    } else {
	      ret = ret * finalBase + digit;
	      str++;
	    }
	  }
	  ret *= multiplier;
	  if (endptr) {
	    HEAP32[endptr >> 2] = str;
	  }
	  if (unsign) {
	    if (Math.abs(ret) > max) {
	      ret = max;
	      ___setErrNo(ERRNO_CODES.ERANGE);
	    } else {
	      ret = unSign(ret, bits);
	    }
	  }
	  if (ret > max || ret < min) {
	    ret = ret > max ? max : min;
	    ___setErrNo(ERRNO_CODES.ERANGE);
	  }
	  if (bits == 64) {
	    ret = [ ret >>> 0, Math.min(Math.floor(ret / 4294967296), 4294967295) ];
	  }
	  return ret;
	}

	function _strtol(str, endptr, base) {
	  return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);
	}

	function _atoi(ptr) {
	  return _strtol(ptr, null, 10);
	}

	function _isdigit(chr) {
	  return chr >= "0".charCodeAt(0) && chr <= "9".charCodeAt(0);
	}

	function _strtod(str, endptr) {
	  var origin = str;
	  while (_isspace(HEAP8[str])) str++;
	  var multiplier = 1;
	  if (HEAP8[str] == "-".charCodeAt(0)) {
	    multiplier = -1;
	    str++;
	  } else if (HEAP8[str] == "+".charCodeAt(0)) {
	    str++;
	  }
	  var chr;
	  var ret = 0;
	  var whole = false;
	  while (1) {
	    chr = HEAP8[str];
	    if (!_isdigit(chr)) break;
	    whole = true;
	    ret = ret * 10 + chr - "0".charCodeAt(0);
	    str++;
	  }
	  var fraction = false;
	  if (HEAP8[str] == ".".charCodeAt(0)) {
	    str++;
	    var mul = 1 / 10;
	    while (1) {
	      chr = HEAP8[str];
	      if (!_isdigit(chr)) break;
	      fraction = true;
	      ret += mul * (chr - "0".charCodeAt(0));
	      mul /= 10;
	      str++;
	    }
	  }
	  if (!whole && !fraction) {
	    if (endptr) {
	      HEAP32[endptr >> 2] = origin;
	    }
	    return 0;
	  }
	  chr = HEAP8[str];
	  if (chr == "e".charCodeAt(0) || chr == "E".charCodeAt(0)) {
	    str++;
	    var exponent = 0;
	    var expNegative = false;
	    chr = HEAP8[str];
	    if (chr == "-".charCodeAt(0)) {
	      expNegative = true;
	      str++;
	    } else if (chr == "+".charCodeAt(0)) {
	      str++;
	    }
	    chr = HEAP8[str];
	    while (1) {
	      if (!_isdigit(chr)) break;
	      exponent = exponent * 10 + chr - "0".charCodeAt(0);
	      str++;
	      chr = HEAP8[str];
	    }
	    if (expNegative) exponent = -exponent;
	    ret *= Math.pow(10, exponent);
	  }
	  if (endptr) {
	    HEAP32[endptr >> 2] = str;
	  }
	  return ret * multiplier;
	}

	function _atof(ptr) {
	  return _strtod(ptr, null);
	}

	function _strchr(ptr, chr) {
	  ptr--;
	  do {
	    ptr++;
	    var val = HEAP8[ptr];
	    if (val == chr) return ptr;
	  } while (val);
	  return 0;
	}

	function _strlen(ptr) {
	  return String_len(ptr);
	}

	function _strcpy(pdest, psrc) {
	  var i = 0;
	  do {
	    HEAP8[pdest + i] = HEAP8[psrc + i];
	    i++;
	  } while (HEAP8[psrc + (i - 1)] != 0);
	  return pdest;
	}

	var ___dirent_struct_layout = null;

	function _open(path, oflag, varargs) {
	  var mode = HEAP32[varargs >> 2];
	  var accessMode = oflag & 3;
	  var isWrite = accessMode != 0;
	  var isRead = accessMode != 1;
	  var isCreate = Boolean(oflag & 512);
	  var isExistCheck = Boolean(oflag & 2048);
	  var isTruncate = Boolean(oflag & 1024);
	  var isAppend = Boolean(oflag & 8);
	  var origPath = path;
	  path = FS.analyzePath(Pointer_stringify(path));
	  if (!path.parentExists) {
	    ___setErrNo(path.error);
	    return -1;
	  }
	  var target = path.object || null;
	  var finalPath;
	  if (target) {
	    if (isCreate && isExistCheck) {
	      ___setErrNo(ERRNO_CODES.EEXIST);
	      return -1;
	    }
	    if ((isWrite || isCreate || isTruncate) && target.isFolder) {
	      ___setErrNo(ERRNO_CODES.EISDIR);
	      return -1;
	    }
	    if (isRead && !target.read || isWrite && !target.write) {
	      ___setErrNo(ERRNO_CODES.EACCES);
	      return -1;
	    }
	    if (isTruncate && !target.isDevice) {
	      target.contents = [];
	    } else {
	      if (!FS.forceLoadFile(target)) {
	        ___setErrNo(ERRNO_CODES.EIO);
	        return -1;
	      }
	    }
	    finalPath = path.path;
	  } else {
	    if (!isCreate) {
	      ___setErrNo(ERRNO_CODES.ENOENT);
	      return -1;
	    }
	    if (!path.parentObject.write) {
	      ___setErrNo(ERRNO_CODES.EACCES);
	      return -1;
	    }
	    target = FS.createDataFile(path.parentObject, path.name, [], mode & 256, mode & 128);
	    finalPath = path.parentPath + "/" + path.name;
	  }
	  var id = FS.streams.length;
	  if (target.isFolder) {
	    var entryBuffer = 0;
	    if (___dirent_struct_layout) {
	      entryBuffer = _malloc(___dirent_struct_layout.__size__);
	    }
	    var contents = [];
	    for (var key in target.contents) contents.push(key);
	    FS.streams[id] = {
	      path: finalPath,
	      object: target,
	      position: -2,
	      isRead: true,
	      isWrite: false,
	      isAppend: false,
	      error: false,
	      eof: false,
	      ungotten: [],
	      contents: contents,
	      currentEntry: entryBuffer
	    };
	  } else {
	    FS.streams[id] = {
	      path: finalPath,
	      object: target,
	      position: 0,
	      isRead: isRead,
	      isWrite: isWrite,
	      isAppend: isAppend,
	      error: false,
	      eof: false,
	      ungotten: []
	    };
	  }
	  return id;
	}

	function _fopen(filename, mode) {
	  var flags;
	  mode = Pointer_stringify(mode);
	  if (mode[0] == "r") {
	    if (mode.indexOf("+") != -1) {
	      flags = 2;
	    } else {
	      flags = 0;
	    }
	  } else if (mode[0] == "w") {
	    if (mode.indexOf("+") != -1) {
	      flags = 2;
	    } else {
	      flags = 1;
	    }
	    flags |= 512;
	    flags |= 1024;
	  } else if (mode[0] == "a") {
	    if (mode.indexOf("+") != -1) {
	      flags = 2;
	    } else {
	      flags = 1;
	    }
	    flags |= 512;
	    flags |= 8;
	  } else {
	    ___setErrNo(ERRNO_CODES.EINVAL);
	    return 0;
	  }
	  var ret = _open(filename, flags, allocate([ 511, 0, 0, 0 ], "i32", ALLOC_STACK));
	  return ret == -1 ? 0 : ret;
	}

	function _fprintf(stream, format, varargs) {
	  var result = __formatString(format, varargs);
	  var stack = Runtime.stackSave();
	  var ret = _fwrite(allocate(result, "i8", ALLOC_STACK), 1, result.length, stream);
	  Runtime.stackRestore(stack);
	  return ret;
	}

	function _strcat(pdest, psrc) {
	  var len = _strlen(pdest);
	  var i = 0;
	  do {
	    HEAP8[pdest + len + i] = HEAP8[psrc + i];
	    i++;
	  } while (HEAP8[psrc + (i - 1)] != 0);
	  return pdest;
	}

	function _rewind(stream) {
	  _fseek(stream, 0, 0);
	  if (FS.streams[stream]) FS.streams[stream].error = false;
	}

	function _fflush(stream) {
	  var flush = (function(filedes) {
	    if (FS.streams[filedes] && FS.streams[filedes].object.output) {
	      if (!FS.streams[filedes].isTerminal) {
	        FS.streams[filedes].object.output(null);
	      }
	    }
	  });
	  try {
	    if (stream === 0) {
	      for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
	    } else {
	      flush(stream);
	    }
	    return 0;
	  } catch (e) {
	    ___setErrNo(ERRNO_CODES.EIO);
	    return -1;
	  }
	}

	function __isFloat(text) {
	  return !!/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text);
	}

	function __scanString(format, _get, _unget, varargs) {
	  if (!__scanString.whiteSpace) {
	    __scanString.whiteSpace = {};
	    __scanString.whiteSpace[" ".charCodeAt(0)] = 1;
	    __scanString.whiteSpace["\t".charCodeAt(0)] = 1;
	    __scanString.whiteSpace["\n".charCodeAt(0)] = 1;
	    __scanString.whiteSpace[" "] = 1;
	    __scanString.whiteSpace["\t"] = 1;
	    __scanString.whiteSpace["\n"] = 1;
	  }
	  var soFar = 0;
	  function get() {
	    soFar++;
	    return _get();
	  }
	  function unget() {
	    soFar--;
	    return _unget();
	  }
	  format = Pointer_stringify(format);
	  var formatIndex = 0;
	  var argsi = 0;
	  var fields = 0;
	  var argIndex = 0;
	  var next;
	  while (1) {
	    next = get();
	    if (next == 0) return 0;
	    if (!(next in __scanString.whiteSpace)) break;
	  }
	  unget(next);
	  next = 1;
	  mainLoop : for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
	    if (next <= 0) return fields;
	    var next = get();
	    if (next <= 0) return fields;
	    if (format[formatIndex] === "%") {
	      formatIndex++;
	      var maxSpecifierStart = formatIndex;
	      while (format[formatIndex].charCodeAt(0) >= "0".charCodeAt(0) && format[formatIndex].charCodeAt(0) <= "9".charCodeAt(0)) {
	        formatIndex++;
	      }
	      var max_;
	      if (formatIndex != maxSpecifierStart) {
	        max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
	      }
	      var long_ = false;
	      var half = false;
	      if (format[formatIndex] == "l") {
	        long_ = true;
	        formatIndex++;
	      } else if (format[formatIndex] == "h") {
	        half = true;
	        formatIndex++;
	      }
	      var type = format[formatIndex];
	      formatIndex++;
	      var curr = 0;
	      var buffer = [];
	      if (type == "f") {
	        var last = -1;
	        while (next > 0) {
	          buffer.push(String.fromCharCode(next));
	          if (__isFloat(buffer.join(""))) {
	            last = buffer.length;
	          }
	          next = get();
	        }
	        unget(next);
	        while (buffer.length > last) {
	          unget(buffer.pop().charCodeAt(0));
	        }
	        next = get();
	      } else if (type != "n") {
	        var first = true;
	        while ((curr < max_ || isNaN(max_)) && next > 0) {
	          if (!(next in __scanString.whiteSpace) && (type == "s" || (type === "d" || type == "u" || type == "i") && (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0) || first && next == "-".charCodeAt(0)) || type === "x" && (next >= "0".charCodeAt(0) && next <= "9".charCodeAt(0) || next >= "a".charCodeAt(0) && next <= "f".charCodeAt(0) || next >= "A".charCodeAt(0) && next <= "F".charCodeAt(0))) && (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) {
	            buffer.push(String.fromCharCode(next));
	            next = get();
	            curr++;
	          } else {
	            break;
	          }
	          first = false;
	        }
	      }
	      if (buffer.length === 0 && type != "n") return 0;
	      var text = buffer.join("");
	      var argPtr = HEAP32[varargs + argIndex >> 2];
	      argIndex += Runtime.getNativeFieldSize("void*");
	      switch (type) {
	       case "d":
	       case "u":
	       case "i":
	        if (half) {
	          HEAP16[argPtr >> 1] = parseInt(text, 10);
	        } else {
	          HEAP32[argPtr >> 2] = parseInt(text, 10);
	        }
	        break;
	       case "x":
	        HEAP32[argPtr >> 2] = parseInt(text, 16);
	        break;
	       case "f":
	        if (long_) {
	          tempDoubleF64[0] = parseFloat(text), HEAP32[argPtr >> 2] = tempDoubleI32[0], HEAP32[argPtr + 4 >> 2] = tempDoubleI32[1];
	        } else {
	          HEAPF32[argPtr >> 2] = parseFloat(text);
	        }
	        break;
	       case "s":
	        var array = intArrayFromString(text);
	        for (var j = 0; j < array.length; j++) {
	          HEAP8[argPtr + j] = array[j];
	        }
	        break;
	       case "n":
	        HEAP32[argPtr >> 2] = soFar - 1;
	        break;
	      }
	      if (type != "n") fields++;
	    } else if (format[formatIndex] in __scanString.whiteSpace) {
	      while (next in __scanString.whiteSpace) {
	        next = get();
	        if (next <= 0) break mainLoop;
	      }
	      unget(next);
	    } else {
	      if (format[formatIndex].charCodeAt(0) !== next) {
	        unget(next);
	        break mainLoop;
	      }
	    }
	  }
	  if (format[formatIndex - 1] == "%" && format[formatIndex] == "n") {
	    var argPtr = HEAP32[varargs + argIndex >> 2];
	    HEAP32[argPtr >> 2] = soFar - 1;
	  }
	  return fields;
	}

	function _sscanf(s, format, varargs) {
	  var index = 0;
	  var get = (function() {
	    return HEAP8[s + index++];
	  });
	  var unget = (function() {
	    index--;
	  });
	  return __scanString(format, get, unget, varargs);
	}

	function _fgetc(stream) {
	  if (!FS.streams[stream]) return -1;
	  var streamObj = FS.streams[stream];
	  if (streamObj.eof || streamObj.error) return -1;
	  var ret = _read(stream, _fgetc.ret, 1);
	  if (ret == 0) {
	    streamObj.eof = true;
	    return -1;
	  } else if (ret == -1) {
	    streamObj.error = true;
	    return -1;
	  } else {
	    return HEAPU8[_fgetc.ret];
	  }
	}

	function _fgets(s, n, stream) {
	  if (!FS.streams[stream]) return 0;
	  var streamObj = FS.streams[stream];
	  if (streamObj.error || streamObj.eof) return 0;
	  var byte_;
	  for (var i = 0; i < n - 1 && byte_ != "\n".charCodeAt(0); i++) {
	    byte_ = _fgetc(stream);
	    if (byte_ == -1) {
	      if (streamObj.error) return 0; else if (streamObj.eof) break;
	    }
	    HEAP8[s + i] = byte_;
	  }
	  HEAP8[s + i] = 0;
	  return s;
	}

	function _printf(format, varargs) {
	  var stdout = HEAP32[_stdout >> 2];
	  return _fprintf(stdout, format, varargs);
	}

	var _sqrt = Math.sqrt;

	function _feof(stream) {
	  return Number(FS.streams[stream] && FS.streams[stream].eof);
	}

	var ERRNO_MESSAGES = {
	  1: "Operation not permitted",
	  2: "No such file or directory",
	  3: "No such process",
	  4: "Interrupted system call",
	  5: "Input/output error",
	  6: "No such device or address",
	  8: "Exec format error",
	  9: "Bad file descriptor",
	  10: "No child processes",
	  11: "Resource temporarily unavailable",
	  12: "Cannot allocate memory",
	  13: "Permission denied",
	  14: "Bad address",
	  16: "Device or resource busy",
	  17: "File exists",
	  18: "Invalid cross-device link",
	  19: "No such device",
	  20: "Not a directory",
	  21: "Is a directory",
	  22: "Invalid argument",
	  23: "Too many open files in system",
	  24: "Too many open files",
	  25: "Inappropriate ioctl for device",
	  26: "Text file busy",
	  27: "File too large",
	  28: "No space left on device",
	  29: "Illegal seek",
	  30: "Read-only file system",
	  31: "Too many links",
	  32: "Broken pipe",
	  33: "Numerical argument out of domain",
	  34: "Numerical result out of range",
	  35: "Resource deadlock avoided",
	  36: "File name too long",
	  37: "No locks available",
	  38: "Function not implemented",
	  39: "Directory not empty",
	  40: "Too many levels of symbolic links",
	  42: "No message of desired type",
	  43: "Identifier removed",
	  60: "Device not a stream",
	  61: "No data available",
	  62: "Timer expired",
	  63: "Out of streams resources",
	  67: "Link has been severed",
	  71: "Protocol error",
	  72: "Multihop attempted",
	  74: "Bad message",
	  75: "Value too large for defined data type",
	  84: "Invalid or incomplete multibyte or wide character",
	  88: "Socket operation on non-socket",
	  89: "Destination address required",
	  90: "Message too long",
	  91: "Protocol wrong type for socket",
	  92: "Protocol not available",
	  93: "Protocol not supported",
	  95: "Operation not supported",
	  97: "Address family not supported by protocol",
	  98: "Address already in use",
	  99: "Cannot assign requested address",
	  100: "Network is down",
	  101: "Network is unreachable",
	  102: "Network dropped connection on reset",
	  103: "Software caused connection abort",
	  104: "Connection reset by peer",
	  105: "No buffer space available",
	  106: "Transport endpoint is already connected",
	  107: "Transport endpoint is not connected",
	  110: "Connection timed out",
	  111: "Connection refused",
	  113: "No route to host",
	  114: "Operation already in progress",
	  115: "Operation now in progress",
	  116: "Stale NFS file handle",
	  122: "Disk quota exceeded",
	  125: "Operation canceled",
	  130: "Owner died",
	  131: "State not recoverable"
	};

	function _strerror_r(errnum, strerrbuf, buflen) {
	  if (errnum in ERRNO_MESSAGES) {
	    if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
	      return ___setErrNo(ERRNO_CODES.ERANGE);
	    } else {
	      var msg = ERRNO_MESSAGES[errnum];
	      for (var i = 0; i < msg.length; i++) {
	        HEAP8[strerrbuf + i] = msg.charCodeAt(i);
	      }
	      HEAP8[strerrbuf + i] = 0;
	      return 0;
	    }
	  } else {
	    return ___setErrNo(ERRNO_CODES.EINVAL);
	  }
	}

	function _strerror(errnum) {
	  if (!_strerror.buffer) _strerror.buffer = _malloc(256);
	  _strerror_r(errnum, _strerror.buffer, 256);
	  return _strerror.buffer;
	}

	function ___errno_location() {
	  return ___setErrNo.ret;
	}

	var ___errno = ___errno_location;

	function _strrchr(ptr, chr) {
	  var ptr2 = ptr + _strlen(ptr);
	  do {
	    if (HEAP8[ptr2] == chr) return ptr2;
	    ptr2--;
	  } while (ptr2 >= ptr);
	  return 0;
	}

	var _log = Math.log;

	var _getc = _fgetc;

	function _ungetc(c, stream) {
	  if (FS.streams[stream]) {
	    c = unSign(c & 255);
	    FS.streams[stream].ungotten.push(c);
	    return c;
	  } else {
	    return -1;
	  }
	}

	function _fscanf(stream, format, varargs) {
	  if (FS.streams[stream]) {
	    var get = (function() {
	      return _fgetc(stream);
	    });
	    var unget = (function(c) {
	      return _ungetc(c, stream);
	    });
	    return __scanString(format, get, unget, varargs);
	  } else {
	    return -1;
	  }
	}

	function _time(ptr) {
	  var ret = Math.floor(Date.now() / 1e3);
	  if (ptr) {
	    HEAP32[ptr >> 2] = ret;
	  }
	  return ret;
	}

	function _memmove(dest, src, num, align) {
	  if (src < dest && dest < src + num) {
	    src += num;
	    dest += num;
	    while (num--) {
	      dest--;
	      src--;
	      HEAP8[dest] = HEAP8[src];
	    }
	  } else {
	    _memcpy(dest, src, num, align);
	  }
	}

	var _llvm_memmove_p0i8_p0i8_i32 = _memmove;

	var _cos = Math.cos;

	var _sin = Math.sin;

	var _llvm_pow_f64 = Math.pow;

	function _log10(x) {
	  return Math.log(x) / Math.LN10;
	}

	var ___strtok_state = 0;

	function _strtok_r(s, delim, lasts) {
	  var skip_leading_delim = 1;
	  var spanp;
	  var c, sc;
	  var tok;
	  if (s == 0 && (s = getValue(lasts, "i8*")) == 0) {
	    return 0;
	  }
	  cont : while (1) {
	    c = getValue(s++, "i8");
	    for (spanp = delim; (sc = getValue(spanp++, "i8")) != 0; ) {
	      if (c == sc) {
	        if (skip_leading_delim) {
	          continue cont;
	        } else {
	          setValue(lasts, s, "i8*");
	          setValue(s - 1, 0, "i8");
	          return s - 1;
	        }
	      }
	    }
	    break;
	  }
	  if (c == 0) {
	    setValue(lasts, 0, "i8*");
	    return 0;
	  }
	  tok = s - 1;
	  for (;;) {
	    c = getValue(s++, "i8");
	    spanp = delim;
	    do {
	      if ((sc = getValue(spanp++, "i8")) == c) {
	        if (c == 0) {
	          s = 0;
	        } else {
	          setValue(s - 1, 0, "i8");
	        }
	        setValue(lasts, s, "i8*");
	        return tok;
	      }
	    } while (sc != 0);
	  }
	  abort("strtok_r error!");
	}

	function _strtok(s, delim) {
	  if (!___strtok_state) {
	    ___strtok_state = _malloc(4);
	  }
	  return _strtok_r(s, delim, ___strtok_state);
	}

	var _environ = null;

	var ___environ = null;

	function ___buildEnvironment(env) {
	  var MAX_ENV_VALUES = 64;
	  var TOTAL_ENV_SIZE = 1024;
	  var poolPtr;
	  var envPtr;
	  if (_environ === null) {
	    ENV["USER"] = "root";
	    ENV["PATH"] = "/";
	    ENV["PWD"] = "/";
	    ENV["HOME"] = "/home/emscripten";
	    ENV["LANG"] = "en_US.UTF-8";
	    ENV["_"] = "./this.program";
	    poolPtr = allocate(TOTAL_ENV_SIZE, "i8", ALLOC_STATIC);
	    envPtr = allocate(MAX_ENV_VALUES * 4, "i8*", ALLOC_STATIC);
	    HEAP32[envPtr >> 2] = poolPtr;
	    _environ = allocate([ envPtr ], "i8**", ALLOC_STATIC);
	    ___environ = _environ;
	  } else {
	    envPtr = HEAP32[_environ >> 2];
	    poolPtr = HEAP32[envPtr >> 2];
	  }
	  var strings = [];
	  var totalSize = 0;
	  for (var key in env) {
	    if (typeof env[key] === "string") {
	      var line = key + "=" + env[key];
	      strings.push(line);
	      totalSize += line.length;
	    }
	  }
	  if (totalSize > TOTAL_ENV_SIZE) {
	    throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
	  }
	  var ptrSize = 4;
	  for (var i = 0; i < strings.length; i++) {
	    var line = strings[i];
	    for (var j = 0; j < line.length; j++) {
	      HEAP8[poolPtr + j] = line.charCodeAt(j);
	    }
	    HEAP8[poolPtr + j] = 0;
	    HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
	    poolPtr += line.length + 1;
	  }
	  HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
	}

	var ENV = {};

	function _getenv(name) {
	  if (name === 0) return 0;
	  name = Pointer_stringify(name);
	  if (!ENV.hasOwnProperty(name)) return 0;
	  if (_getenv.ret) _free(_getenv.ret);
	  _getenv.ret = allocate(intArrayFromString(ENV[name]), "i8", ALLOC_NORMAL);
	  return _getenv.ret;
	}

	function _strdup(ptr) {
	  var len = String_len(ptr);
	  var newStr = _malloc(len + 1);
	  _memcpy(newStr, ptr, len, 1);
	  HEAP8[newStr + len] = 0;
	  return newStr;
	}

	function __exit(status) {
	  exitRuntime();
	  ABORT = true;
	  throw "exit(" + status + ") called, at " + (new Error).stack;
	}

	function _exit(status) {
	  __exit(status);
	}

	function _isatty(fildes) {
	  if (!FS.streams[fildes]) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return 0;
	  }
	  if (FS.streams[fildes].isTerminal) return 1;
	  ___setErrNo(ERRNO_CODES.ENOTTY);
	  return 0;
	}

	function _fileno(stream) {
	  return stream;
	}

	function _ferror(stream) {
	  return Number(FS.streams[stream] && FS.streams[stream].error);
	}

	function _clearerr(stream) {
	  if (FS.streams[stream]) FS.streams[stream].error = false;
	}

	var _llvm_va_start;

	function _llvm_va_end() {}

	function _qsort(base, num, size, comparator) {
	  if (num == 0 || size == 0) return;
	  comparator = FUNCTION_TABLE[comparator];
	  var keys = [];
	  for (var i = 0; i < num; i++) keys.push(i);
	  keys.sort((function(a, b) {
	    return comparator(base + a * size, base + b * size);
	  }));
	  var temp = _malloc(num * size);
	  _memcpy(temp, base, num * size);
	  for (var i = 0; i < num; i++) {
	    if (keys[i] == i) continue;
	    _memcpy(base + i * size, temp + keys[i] * size, size);
	  }
	  _free(temp);
	}

	var _vfprintf = _fprintf;

	function _abort() {
	  ABORT = true;
	  throw "abort() at " + (new Error).stack;
	}

	function _strncpy(pdest, psrc, num) {
	  var padding = false, curr;
	  for (var i = 0; i < num; i++) {
	    curr = padding ? 0 : HEAP8[psrc + i];
	    HEAP8[pdest + i] = curr;
	    padding = padding || HEAP8[psrc + i] == 0;
	  }
	  return pdest;
	}

	function _strstr(ptr1, ptr2) {
	  var check = 0, start;
	  do {
	    if (!check) {
	      start = ptr1;
	      check = ptr2;
	    }
	    var curr1 = HEAP8[ptr1++];
	    var curr2 = HEAP8[check++];
	    if (curr2 == 0) return start;
	    if (curr2 != curr1) {
	      ptr1 = start + 1;
	      check = 0;
	    }
	  } while (curr1);
	  return 0;
	}

	function _strncat(pdest, psrc, num) {
	  var len = _strlen(pdest);
	  var i = 0;
	  while (1) {
	    HEAP8[pdest + len + i] = HEAP8[psrc + i];
	    if (HEAP8[pdest + (len + i)] == 0) break;
	    i++;
	    if (i == num) {
	      HEAP8[pdest + (len + i)] = 0;
	      break;
	    }
	  }
	  return pdest;
	}

	function _pthread_key_create(key, destructor) {
	  if (!_pthread_key_create.keys) _pthread_key_create.keys = {};
	  _pthread_key_create.keys[key] = null;
	}

	function _pthread_once(ptr, func) {
	  if (!_pthread_once.seen) _pthread_once.seen = {};
	  if (ptr in _pthread_once.seen) return;
	  FUNCTION_TABLE[func]();
	  _pthread_once.seen[ptr] = 1;
	}

	function _pthread_getspecific(key) {
	  return _pthread_key_create.keys[key];
	}

	function _pthread_setspecific(key, value) {
	  _pthread_key_create.keys[key] = value;
	}

	function _fputc(c, stream) {
	  var chr = unSign(c & 255);
	  HEAP8[_fputc.ret] = chr;
	  var ret = _write(stream, _fputc.ret, 1);
	  if (ret == -1) {
	    if (FS.streams[stream]) FS.streams[stream].error = true;
	    return -1;
	  } else {
	    return chr;
	  }
	}

	var ___stat_struct_layout = {
	  __size__: 72,
	  st_dev: 0,
	  st_ino: 4,
	  st_mode: 8,
	  st_nlink: 12,
	  st_uid: 16,
	  st_gid: 20,
	  st_rdev: 24,
	  st_size: 28,
	  st_atime: 32,
	  st_spare1: 36,
	  st_mtime: 40,
	  st_spare2: 44,
	  st_ctime: 48,
	  st_spare3: 52,
	  st_blksize: 56,
	  st_blocks: 60,
	  st_spare4: 64
	};

	function _stat(path, buf, dontResolveLastLink) {
	  var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
	  if (obj === null || !FS.forceLoadFile(obj)) return -1;
	  var offsets = ___stat_struct_layout;
	  HEAP32[buf + offsets.st_nlink >> 2] = 1;
	  HEAP32[buf + offsets.st_uid >> 2] = 0;
	  HEAP32[buf + offsets.st_gid >> 2] = 0;
	  HEAP32[buf + offsets.st_blksize >> 2] = 4096;
	  HEAP32[buf + offsets.st_ino >> 2] = obj.inodeNumber;
	  var time = Math.floor(obj.timestamp / 1e3);
	  if (offsets.st_atime === undefined) {
	    offsets.st_atime = offsets.st_atim.tv_sec;
	    offsets.st_mtime = offsets.st_mtim.tv_sec;
	    offsets.st_ctime = offsets.st_ctim.tv_sec;
	    var nanosec = obj.timestamp % 1e3 * 1e3;
	    HEAP32[buf + offsets.st_atim.tv_nsec >> 2] = nanosec;
	    HEAP32[buf + offsets.st_mtim.tv_nsec >> 2] = nanosec;
	    HEAP32[buf + offsets.st_ctim.tv_nsec >> 2] = nanosec;
	  }
	  HEAP32[buf + offsets.st_atime >> 2] = time;
	  HEAP32[buf + offsets.st_mtime >> 2] = time;
	  HEAP32[buf + offsets.st_ctime >> 2] = time;
	  var mode = 0;
	  var size = 0;
	  var blocks = 0;
	  var dev = 0;
	  var rdev = 0;
	  if (obj.isDevice) {
	    dev = rdev = obj.inodeNumber;
	    size = blocks = 0;
	    mode = 8192;
	  } else {
	    dev = 1;
	    rdev = 0;
	    if (obj.isFolder) {
	      size = 4096;
	      blocks = 1;
	      mode = 16384;
	    } else {
	      var data = obj.contents || obj.link;
	      size = data.length;
	      blocks = Math.ceil(data.length / 4096);
	      mode = obj.link === undefined ? 32768 : 40960;
	    }
	  }
	  HEAP32[buf + offsets.st_dev >> 2] = dev;
	  HEAP32[buf + offsets.st_rdev >> 2] = rdev;
	  HEAP32[buf + offsets.st_size >> 2] = size;
	  HEAP32[buf + offsets.st_blocks >> 2] = blocks;
	  if (obj.read) mode |= 365;
	  if (obj.write) mode |= 146;
	  HEAP32[buf + offsets.st_mode >> 2] = mode;
	  return 0;
	}

	function _fstat(fildes, buf) {
	  if (!FS.streams[fildes]) {
	    ___setErrNo(ERRNO_CODES.EBADF);
	    return -1;
	  } else {
	    var pathArray = intArrayFromString(FS.streams[fildes].path);
	    return _stat(allocate(pathArray, "i8", ALLOC_STACK), buf);
	  }
	}

	function _mmap(start, num, prot, flags, stream, offset) {
	  if (stream == -1) {
	    var ptr = _malloc(num);
	    _memset(ptr, 0, num);
	    return ptr;
	  }
	  var info = FS.streams[stream];
	  if (!info) return -1;
	  var contents = info.object.contents;
	  contents = Array.prototype.slice.call(contents, offset, offset + num);
	  return allocate(contents, "i8", ALLOC_NORMAL);
	}

	function _getpagesize() {
	  return PAGE_SIZE;
	}

	function _munmap(start, num) {
	  _free(start);
	  return 0;
	}

	function _popen(command, mode) {
	  ___setErrNo(ERRNO_CODES.EMFILE);
	  return 0;
	}

	function _pclose(stream) {
	  ___setErrNo(ERRNO_CODES.ECHILD);
	  return -1;
	}

	var ___rusage_struct_layout = {
	  __size__: 72,
	  ru_utime: 0,
	  ru_stime: 8,
	  ru_maxrss: 16,
	  ru_ixrss: 20,
	  ru_idrss: 24,
	  ru_isrss: 28,
	  ru_minflt: 32,
	  ru_majflt: 36,
	  ru_nswap: 40,
	  ru_inblock: 44,
	  ru_oublock: 48,
	  ru_msgsnd: 52,
	  ru_msgrcv: 56,
	  ru_nsignals: 60,
	  ru_nvcsw: 64,
	  ru_nivcsw: 68
	};

	function _getrusage(resource, rlp) {
	  var timeval = Runtime.calculateStructAlignment({
	    fields: [ "i32", "i32" ]
	  });
	  HEAP32[rlp + (___rusage_struct_layout.ru_utime + timeval[0]) >> 2] = 1;
	  HEAP32[rlp + (___rusage_struct_layout.ru_utime + timeval[1]) >> 2] = 2;
	  HEAP32[rlp + (___rusage_struct_layout.ru_stime + timeval[0]) >> 2] = 3;
	  HEAP32[rlp + (___rusage_struct_layout.ru_stime + timeval[1]) >> 2] = 4;
	  return 0;
	}

	function _gettimeofday(ptr) {
	  var indexes = Runtime.calculateStructAlignment({
	    fields: [ "i32", "i32" ]
	  });
	  var now = Date.now();
	  HEAP32[ptr + indexes[0] >> 2] = Math.floor(now / 1e3);
	  HEAP32[ptr + indexes[1] >> 2] = Math.floor((now - 1e3 * Math.floor(now / 1e3)) * 1e3);
	  return 0;
	}

	function _strspn(pstr, pset) {
	  var str = pstr, set, strcurr, setcurr;
	  while (1) {
	    strcurr = HEAP8[str];
	    if (!strcurr) return str - pstr;
	    set = pset;
	    while (1) {
	      setcurr = HEAP8[set];
	      if (!setcurr || setcurr == strcurr) break;
	      set++;
	    }
	    if (!setcurr) return str - pstr;
	    str++;
	  }
	}

	function _sysconf(name) {
	  switch (name) {
	   case 8:
	    return PAGE_SIZE;
	   case 54:
	   case 56:
	   case 21:
	   case 61:
	   case 63:
	   case 22:
	   case 67:
	   case 23:
	   case 24:
	   case 25:
	   case 26:
	   case 27:
	   case 69:
	   case 28:
	   case 101:
	   case 70:
	   case 71:
	   case 29:
	   case 30:
	   case 199:
	   case 75:
	   case 76:
	   case 32:
	   case 43:
	   case 44:
	   case 80:
	   case 46:
	   case 47:
	   case 45:
	   case 48:
	   case 49:
	   case 42:
	   case 82:
	   case 33:
	   case 7:
	   case 108:
	   case 109:
	   case 107:
	   case 112:
	   case 119:
	   case 121:
	    return 200809;
	   case 13:
	   case 104:
	   case 94:
	   case 95:
	   case 34:
	   case 35:
	   case 77:
	   case 81:
	   case 83:
	   case 84:
	   case 85:
	   case 86:
	   case 87:
	   case 88:
	   case 89:
	   case 90:
	   case 91:
	   case 94:
	   case 95:
	   case 110:
	   case 111:
	   case 113:
	   case 114:
	   case 115:
	   case 116:
	   case 117:
	   case 118:
	   case 120:
	   case 40:
	   case 16:
	   case 79:
	   case 19:
	    return -1;
	   case 92:
	   case 93:
	   case 5:
	   case 72:
	   case 6:
	   case 74:
	   case 92:
	   case 93:
	   case 96:
	   case 97:
	   case 98:
	   case 99:
	   case 102:
	   case 103:
	   case 105:
	    return 1;
	   case 38:
	   case 66:
	   case 50:
	   case 51:
	   case 4:
	    return 1024;
	   case 15:
	   case 64:
	   case 41:
	    return 32;
	   case 55:
	   case 37:
	   case 17:
	    return 2147483647;
	   case 18:
	   case 1:
	    return 47839;
	   case 59:
	   case 57:
	    return 99;
	   case 68:
	   case 58:
	    return 2048;
	   case 0:
	    return 2097152;
	   case 3:
	    return 65536;
	   case 14:
	    return 32768;
	   case 73:
	    return 32767;
	   case 39:
	    return 16384;
	   case 60:
	    return 1e3;
	   case 106:
	    return 700;
	   case 52:
	    return 256;
	   case 62:
	    return 255;
	   case 2:
	    return 100;
	   case 65:
	    return 64;
	   case 36:
	    return 20;
	   case 100:
	    return 16;
	   case 20:
	    return 6;
	   case 53:
	    return 4;
	  }
	  ___setErrNo(ERRNO_CODES.EINVAL);
	  return -1;
	}

	function _sbrk(bytes) {
	  var self = _sbrk;
	  if (!self.called) {
	    STATICTOP = alignMemoryPage(STATICTOP);
	    self.called = true;
	    _sbrk.DYNAMIC_START = STATICTOP;
	  }
	  var ret = STATICTOP;
	  if (bytes != 0) Runtime.staticAlloc(bytes);
	  return ret;
	}

	var _llvm_dbg_value;

	function _llvm_bswap_i32(x) {
	  return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24;
	}

	function _llvm_bswap_i16(x) {
	  return (x & 255) << 8 | x >> 8 & 255;
	}

	function _fputs(s, stream) {
	  return _write(stream, s, _strlen(s));
	}

	function _memchr(ptr, chr, num) {
	  chr = unSign(chr);
	  for (var i = 0; i < num; i++) {
	    if (HEAP8[ptr] == chr) return ptr;
	    ptr++;
	  }
	  return 0;
	}

	var _llvm_memset_p0i8_i64 = _memset;

	function _putchar(c) {
	  return _fputc(c, HEAP32[_stdout >> 2]);
	}

	var Browser = {
	  mainLoop: {
	    scheduler: null,
	    shouldPause: false,
	    paused: false,
	    queue: [],
	    pause: (function() {
	      Browser.mainLoop.shouldPause = true;
	    }),
	    resume: (function() {
	      if (Browser.mainLoop.paused) {
	        Browser.mainLoop.paused = false;
	        Browser.mainLoop.scheduler();
	      }
	      Browser.mainLoop.shouldPause = false;
	    }),
	    updateStatus: (function() {
	      if (Module["setStatus"]) {
	        var message = Module["statusMessage"] || "Please wait...";
	        var remaining = Browser.mainLoop.remainingBlockers;
	        var expected = Browser.mainLoop.expectedBlockers;
	        if (remaining) {
	          if (remaining < expected) {
	            Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
	          } else {
	            Module["setStatus"](message);
	          }
	        } else {
	          Module["setStatus"]("");
	        }
	      }
	    })
	  },
	  pointerLock: false,
	  moduleContextCreatedCallbacks: [],
	  ensureObjects: (function() {
	    if (Browser.ensured) return;
	    Browser.ensured = true;
	    try {
	      new Blob;
	      Browser.hasBlobConstructor = true;
	    } catch (e) {
	      Browser.hasBlobConstructor = false;
	      console.log("warning: no blob constructor, cannot create blobs with mimetypes");
	    }
	    Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
	    Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : console.log("warning: cannot create object URLs");
	    function getMimetype(name) {
	      return {
	        "jpg": "image/jpeg",
	        "png": "image/png",
	        "bmp": "image/bmp",
	        "ogg": "audio/ogg",
	        "wav": "audio/wav",
	        "mp3": "audio/mpeg"
	      }[name.substr(-3)];
	      return ret;
	    }
	    if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
	    var imagePlugin = {};
	    imagePlugin["canHandle"] = (function(name) {
	      return name.substr(-4) in {
	        ".jpg": 1,
	        ".png": 1,
	        ".bmp": 1
	      };
	    });
	    imagePlugin["handle"] = (function(byteArray, name, onload, onerror) {
	      var b = null;
	      if (Browser.hasBlobConstructor) {
	        try {
	          b = new Blob([ byteArray ], {
	            type: getMimetype(name)
	          });
	        } catch (e) {
	          Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
	        }
	      }
	      if (!b) {
	        var bb = new Browser.BlobBuilder;
	        bb.append((new Uint8Array(byteArray)).buffer);
	        b = bb.getBlob();
	      }
	      var url = Browser.URLObject.createObjectURL(b);
	      var img = new Image;
	      img.onload = (function() {
	        assert(img.complete, "Image " + name + " could not be decoded");
	        var canvas = document.createElement("canvas");
	        canvas.width = img.width;
	        canvas.height = img.height;
	        var ctx = canvas.getContext("2d");
	        ctx.drawImage(img, 0, 0);
	        Module["preloadedImages"][name] = canvas;
	        Browser.URLObject.revokeObjectURL(url);
	        if (onload) onload(byteArray);
	      });
	      img.onerror = (function(event) {
	        console.log("Image " + url + " could not be decoded");
	        if (onerror) onerror();
	      });
	      img.src = url;
	    });
	    Module["preloadPlugins"].push(imagePlugin);
	    var audioPlugin = {};
	    audioPlugin["canHandle"] = (function(name) {
	      return name.substr(-4) in {
	        ".ogg": 1,
	        ".wav": 1,
	        ".mp3": 1
	      };
	    });
	    audioPlugin["handle"] = (function(byteArray, name, onload, onerror) {
	      var done = false;
	      function finish(audio) {
	        if (done) return;
	        done = true;
	        Module["preloadedAudios"][name] = audio;
	        if (onload) onload(byteArray);
	      }
	      function fail() {
	        if (done) return;
	        done = true;
	        Module["preloadedAudios"][name] = new Audio;
	        if (onerror) onerror();
	      }
	      if (Browser.hasBlobConstructor) {
	        try {
	          var b = new Blob([ byteArray ], {
	            type: getMimetype(name)
	          });
	        } catch (e) {
	          return fail();
	        }
	        var url = Browser.URLObject.createObjectURL(b);
	        var audio = new Audio;
	        audio.addEventListener("canplaythrough", (function() {
	          finish(audio);
	        }), false);
	        audio.onerror = (function(event) {
	          if (done) return;
	          console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
	          function encode64(data) {
	            var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	            var PAD = "=";
	            var ret = "";
	            var leftchar = 0;
	            var leftbits = 0;
	            for (var i = 0; i < data.length; i++) {
	              leftchar = leftchar << 8 | data[i];
	              leftbits += 8;
	              while (leftbits >= 6) {
	                var curr = leftchar >> leftbits - 6 & 63;
	                leftbits -= 6;
	                ret += BASE[curr];
	              }
	            }
	            if (leftbits == 2) {
	              ret += BASE[(leftchar & 3) << 4];
	              ret += PAD + PAD;
	            } else if (leftbits == 4) {
	              ret += BASE[(leftchar & 15) << 2];
	              ret += PAD;
	            }
	            return ret;
	          }
	          audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
	          finish(audio);
	        });
	        audio.src = url;
	        setTimeout((function() {
	          finish(audio);
	        }), 1e4);
	      } else {
	        return fail();
	      }
	    });
	    Module["preloadPlugins"].push(audioPlugin);
	  }),
	  createContext: (function(canvas, useWebGL, setInModule) {
	    try {
	      var ctx = canvas.getContext(useWebGL ? "experimental-webgl" : "2d");
	      if (!ctx) throw ":(";
	    } catch (e) {
	      Module.print("Could not create canvas - " + e);
	      return null;
	    }
	    if (useWebGL) {
	      canvas.style.backgroundColor = "black";
	      canvas.addEventListener("webglcontextlost", (function(event) {
	        alert("WebGL context lost. You will need to reload the page.");
	      }), false);
	    }
	    if (setInModule) {
	      Module.ctx = ctx;
	      Module.useWebGL = useWebGL;
	      Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
	        callback();
	      }));
	    }
	    return ctx;
	  }),
	  requestFullScreen: (function() {
	    var canvas = Module["canvas"];
	    function fullScreenChange() {
	      var isFullScreen = false;
	      if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"]) === canvas) {
	        canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"];
	        canvas.requestPointerLock();
	        isFullScreen = true;
	      }
	      if (Module["onFullScreen"]) Module["onFullScreen"](isFullScreen);
	    }
	    document.addEventListener("fullscreenchange", fullScreenChange, false);
	    document.addEventListener("mozfullscreenchange", fullScreenChange, false);
	    document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
	    function pointerLockChange() {
	      Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas;
	    }
	    document.addEventListener("pointerlockchange", pointerLockChange, false);
	    document.addEventListener("mozpointerlockchange", pointerLockChange, false);
	    document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
	    canvas.requestFullScreen = canvas["requestFullScreen"] || canvas["mozRequestFullScreen"] || (canvas["webkitRequestFullScreen"] ? (function() {
	      canvas["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
	    }) : null);
	    canvas.requestFullScreen();
	  }),
	  requestAnimationFrame: (function(func) {
	    if (!window.requestAnimationFrame) {
	      window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || window["setTimeout"];
	    }
	    window.requestAnimationFrame(func);
	  }),
	  getMovementX: (function(event) {
	    return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
	  }),
	  getMovementY: (function(event) {
	    return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
	  }),
	  xhrLoad: (function(url, onload, onerror) {
	    var xhr = new XMLHttpRequest;
	    xhr.open("GET", url, true);
	    xhr.responseType = "arraybuffer";
	    xhr.onload = (function() {
	      if (xhr.status == 200) {
	        onload(xhr.response);
	      } else {
	        onerror();
	      }
	    });
	    xhr.onerror = onerror;
	    xhr.send(null);
	  }),
	  asyncLoad: (function(url, onload, onerror) {
	    Browser.xhrLoad(url, (function(arrayBuffer) {
	      assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
	      onload(new Uint8Array(arrayBuffer));
	      removeRunDependency("al " + url);
	    }), (function(event) {
	      if (onerror) {
	        onerror();
	      } else {
	        throw 'Loading data file "' + url + '" failed.';
	      }
	    }));
	    addRunDependency("al " + url);
	  }),
	  resizeListeners: [],
	  updateResizeListeners: (function() {
	    var canvas = Module["canvas"];
	    Browser.resizeListeners.forEach((function(listener) {
	      listener(canvas.width, canvas.height);
	    }));
	  }),
	  setCanvasSize: (function(width, height, noUpdates) {
	    var canvas = Module["canvas"];
	    canvas.width = width;
	    canvas.height = height;
	    if (!noUpdates) Browser.updateResizeListeners();
	  })
	};

	__ATINIT__.unshift({
	  func: (function() {
	    if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
	  })
	});

	__ATMAIN__.push({
	  func: (function() {
	    FS.ignorePermissions = false;
	  })
	});

	__ATEXIT__.push({
	  func: (function() {
	    FS.quit();
	  })
	});

	Module["FS_createFolder"] = FS.createFolder;

	Module["FS_createPath"] = FS.createPath;

	Module["FS_createDataFile"] = FS.createDataFile;

	Module["FS_createPreloadedFile"] = FS.createPreloadedFile;

	Module["FS_createLazyFile"] = FS.createLazyFile;

	Module["FS_createLink"] = FS.createLink;

	Module["FS_createDevice"] = FS.createDevice;

	___setErrNo(0);

	_fgetc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

	___buildEnvironment(ENV);

	_fputc.ret = allocate([ 0 ], "i8", ALLOC_STATIC);

	Module["requestFullScreen"] = (function() {
	  Browser.requestFullScreen();
	});

	Module["requestAnimationFrame"] = (function(func) {
	  Browser.requestAnimationFrame(func);
	});

	Module["pauseMainLoop"] = (function() {
	  Browser.mainLoop.pause();
	});

	Module["resumeMainLoop"] = (function() {
	  Browser.mainLoop.resume();
	});

	Module.callMain = function callMain(args) {
	  var argc = args.length + 1;
	  function pad() {
	    for (var i = 0; i < 4 - 1; i++) {
	      argv.push(0);
	    }
	  }
	  var argv = [ allocate(intArrayFromString("/bin/this.program"), "i8", ALLOC_STATIC) ];
	  pad();
	  for (var i = 0; i < argc - 1; i = i + 1) {
	    argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_STATIC));
	    pad();
	  }
	  argv.push(0);
	  argv = allocate(argv, "i32", ALLOC_STATIC);
	  return _main(argc, argv, 0);
	};

	var _feat_defn;

	var _stdout;

	var _fsg_funcs;

	var _fsg_segfuncs;

	var _stderr;

	var _ms_mgau_funcs;

	var _ngram_funcs;

	var _ngram_search_init_name;

	var _ngram_bp_segfuncs;

	var _phone_loop_search_funcs;

	var _ps_lattice_segfuncs;

	var _ptm_mgau_funcs;

	var _s2_semi_mgau_funcs;

	var _name2id;

	var ___name2id;

	var _fe_warp_conf;

	var _nyquist_frequency;

	var _is_neutral_b;

	var _p_str;

	var _params;

	var _nyquist_frequency1420;

	var _is_neutral1421_b;

	var _p_str1422;

	var _params1423;

	var _nyquist_frequency1448;

	var _is_neutral1449_b;

	var _p_str1450;

	var _params1451;

	var _final_piece;

	var _agc_type_str;

	var _cmn_type_str;

	var _stdin;

	var _yy_ec;

	var _yy_accept;

	var _yy_base;

	var _yy_chk;

	var _yy_def;

	var _yy_meta;

	var _yy_nxt;

	var _ngram_model_arpa_funcs;

	var _ngram_model_dmp_funcs;

	var _ngram_model_set_funcs;

	var __str302067;

	var _tens;

	var _bigtens;

	var _tinytens;

	var _pow5mult_p05;

	var _logfp_index;

	var _logfp_index_once;

	var _mt;

	var _mti;

	var _genrand_int32_mag01;

	var _prime;

	var _cont_args_def;

	var _config;

	var _ps;

	var _rawfd;

	var __gm_;

	var _mparams;

	STRING_TABLE.__str1 = allocate([ 97, 99, 109, 111, 100, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3 = allocate([ 67, 111, 110, 102, 105, 103, 117, 114, 101, 100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 108, 101, 110, 103, 116, 104, 32, 37, 100, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 102, 101, 97, 116, 117, 114, 101, 32, 101, 120, 116, 114, 97, 99, 116, 105, 111, 110, 32, 111, 117, 116, 112, 117, 116, 32, 115, 105, 122, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	_feat_defn = allocate([ 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str7 = allocate([ 80, 97, 114, 115, 101, 100, 32, 109, 111, 100, 101, 108, 45, 115, 112, 101, 99, 105, 102, 105, 99, 32, 102, 101, 97, 116, 117, 114, 101, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14 = allocate([ 109, 100, 101, 102, 95, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16 = allocate([ 110, 95, 115, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___acmod_process_cep = allocate([ 97, 99, 109, 111, 100, 95, 112, 114, 111, 99, 101, 115, 115, 95, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19 = allocate([ 97, 99, 109, 111, 100, 45, 62, 110, 95, 102, 101, 97, 116, 95, 102, 114, 97, 109, 101, 32, 60, 61, 32, 97, 99, 109, 111, 100, 45, 62, 110, 95, 102, 101, 97, 116, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20 = allocate([ 67, 105, 114, 99, 117, 108, 97, 114, 32, 102, 101, 97, 116, 117, 114, 101, 32, 98, 117, 102, 102, 101, 114, 32, 99, 97, 110, 110, 111, 116, 32, 98, 101, 32, 114, 101, 119, 111, 117, 110, 100, 32, 40, 111, 117, 116, 112, 117, 116, 32, 102, 114, 97, 109, 101, 32, 37, 100, 44, 32, 97, 108, 108, 111, 99, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 102, 114, 97, 109, 101, 32, 116, 111, 32, 115, 101, 110, 111, 110, 101, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23 = allocate([ 70, 114, 97, 109, 101, 32, 37, 100, 32, 111, 117, 116, 115, 105, 100, 101, 32, 113, 117, 101, 117, 101, 32, 111, 102, 32, 37, 100, 32, 102, 114, 97, 109, 101, 115, 44, 32, 37, 100, 32, 97, 108, 108, 111, 99, 32, 40, 37, 100, 32, 62, 32, 37, 100, 41, 44, 32, 99, 97, 110, 110, 111, 116, 32, 115, 99, 111, 114, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 102, 114, 97, 109, 101, 32, 102, 114, 111, 109, 32, 115, 101, 110, 111, 110, 101, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 37, 100, 32, 118, 97, 108, 117, 101, 115, 32, 116, 111, 32, 108, 111, 103, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___acmod_process_full_cep = allocate([ 97, 99, 109, 111, 100, 95, 112, 114, 111, 99, 101, 115, 115, 95, 102, 117, 108, 108, 95, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28 = allocate([ 65, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 105, 115, 32, 110, 111, 116, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 110, 101, 105, 116, 104, 101, 114, 32, 119, 105, 116, 104, 32, 45, 109, 100, 101, 102, 32, 111, 112, 116, 105, 111, 110, 32, 110, 111, 114, 32, 119, 105, 116, 104, 32, 45, 104, 109, 109, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31 = allocate([ 78, 111, 32, 116, 109, 97, 116, 32, 102, 105, 108, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35 = allocate([ 78, 111, 32, 109, 101, 97, 110, 47, 118, 97, 114, 47, 116, 109, 97, 116, 32, 102, 105, 108, 101, 115, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37 = allocate([ 85, 115, 105, 110, 103, 32, 103, 101, 110, 101, 114, 97, 108, 32, 109, 117, 108, 116, 105, 45, 115, 116, 114, 101, 97, 109, 32, 71, 77, 77, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38 = allocate([ 65, 116, 116, 101, 109, 112, 116, 105, 110, 103, 32, 116, 111, 32, 117, 115, 101, 32, 83, 67, 72, 77, 77, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 32, 109, 111, 100, 117, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39 = allocate([ 65, 116, 116, 101, 109, 112, 116, 105, 110, 103, 32, 116, 111, 32, 117, 115, 101, 32, 80, 84, 72, 77, 77, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 32, 109, 111, 100, 117, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40 = allocate([ 70, 97, 108, 108, 105, 110, 103, 32, 98, 97, 99, 107, 32, 116, 111, 32, 103, 101, 110, 101, 114, 97, 108, 32, 109, 117, 108, 116, 105, 45, 115, 116, 114, 101, 97, 109, 32, 71, 77, 77, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str46 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 108, 105, 110, 101, 97, 114, 32, 102, 101, 97, 116, 117, 114, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str49 = allocate([ 85, 115, 105, 110, 103, 32, 115, 117, 98, 118, 101, 99, 116, 111, 114, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str129 = allocate([ 98, 105, 110, 95, 109, 100, 101, 102, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2131 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 101, 110, 111, 110, 101, 115, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 58, 32, 37, 100, 32, 62, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3132 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 101, 110, 111, 110, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 115, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 58, 32, 37, 100, 32, 62, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4133 = allocate([ 80, 104, 111, 110, 101, 32, 110, 97, 109, 101, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 105, 110, 32, 115, 111, 114, 116, 101, 100, 32, 111, 114, 100, 101, 114, 44, 32, 115, 111, 114, 114, 121, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6135 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 37, 100, 32, 42, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 67, 68, 32, 116, 114, 101, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7136 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 98, 105, 110, 97, 114, 121, 32, 109, 111, 100, 101, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10139 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 98, 121, 116, 101, 45, 111, 114, 100, 101, 114, 32, 109, 97, 114, 107, 101, 114, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11140 = allocate([ 77, 117, 115, 116, 32, 98, 121, 116, 101, 45, 115, 119, 97, 112, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12141 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 118, 101, 114, 115, 105, 111, 110, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13142 = allocate([ 70, 105, 108, 101, 32, 102, 111, 114, 109, 97, 116, 32, 118, 101, 114, 115, 105, 111, 110, 32, 37, 100, 32, 102, 111, 114, 32, 37, 115, 32, 105, 115, 32, 110, 101, 119, 101, 114, 32, 116, 104, 97, 110, 32, 108, 105, 98, 114, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14143 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 108, 101, 110, 103, 116, 104, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15144 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 37, 115, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16145 = allocate([ 38, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17146 = allocate([ 38, 109, 45, 62, 110, 95, 112, 104, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str18147 = allocate([ 38, 109, 45, 62, 110, 95, 101, 109, 105, 116, 95, 115, 116, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19148 = allocate([ 38, 109, 45, 62, 110, 95, 99, 105, 95, 115, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20149 = allocate([ 38, 109, 45, 62, 110, 95, 115, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21150 = allocate([ 38, 109, 45, 62, 110, 95, 116, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22151 = allocate([ 38, 109, 45, 62, 110, 95, 115, 115, 101, 113, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23152 = allocate([ 38, 109, 45, 62, 110, 95, 99, 116, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24153 = allocate([ 38, 109, 45, 62, 110, 95, 99, 100, 95, 116, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25154 = allocate([ 38, 109, 45, 62, 115, 105, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28157 = allocate([ 45, 109, 109, 97, 112, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 44, 32, 98, 117, 116, 32, 109, 100, 101, 102, 32, 105, 115, 32, 111, 116, 104, 101, 114, 45, 101, 110, 100, 105, 97, 110, 46, 32, 32, 87, 105, 108, 108, 32, 110, 111, 116, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str30159 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 111, 102, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31160 = allocate([ 83, 101, 110, 111, 110, 101, 32, 37, 100, 32, 105, 115, 32, 115, 104, 97, 114, 101, 100, 32, 98, 101, 116, 119, 101, 101, 110, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 98, 97, 115, 101, 32, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32161 = allocate([ 67, 68, 32, 112, 104, 111, 110, 101, 32, 37, 100, 32, 104, 97, 115, 32, 102, 101, 119, 101, 114, 32, 115, 116, 97, 116, 101, 115, 32, 116, 104, 97, 110, 32, 67, 73, 32, 112, 104, 111, 110, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___bin_mdef_phone_id = allocate([ 98, 105, 110, 95, 109, 100, 101, 102, 95, 112, 104, 111, 110, 101, 95, 105, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str206 = allocate([ 98, 108, 107, 97, 114, 114, 97, 121, 95, 108, 105, 115, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___blkarray_list_append = allocate([ 98, 108, 107, 97, 114, 114, 97, 121, 95, 108, 105, 115, 116, 95, 97, 112, 112, 101, 110, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3209 = allocate([ 98, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4210 = allocate([ 66, 108, 111, 99, 107, 32, 97, 114, 114, 97, 121, 32, 40, 37, 100, 120, 37, 100, 41, 32, 101, 120, 104, 97, 117, 115, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str5211 = allocate([ 98, 108, 45, 62, 112, 116, 114, 91, 98, 108, 45, 62, 99, 117, 114, 95, 114, 111, 119, 93, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6212 = allocate([ 105, 100, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str213 = allocate([ 100, 105, 99, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str5218 = allocate([ 82, 101, 97, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 116, 111, 32, 37, 100, 32, 75, 105, 66, 32, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7220 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 98, 97, 115, 101, 32, 119, 111, 114, 100, 32, 102, 111, 114, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16229 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17230 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 102, 105, 108, 108, 101, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19232 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 119, 111, 114, 100, 115, 32, 105, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 105, 101, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20233 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 37, 100, 32, 42, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 119, 111, 114, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22235 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 109, 97, 105, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23236 = allocate([ 37, 100, 32, 119, 111, 114, 100, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24237 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 102, 105, 108, 108, 101, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28241 = allocate([ 87, 111, 114, 100, 32, 39, 37, 115, 39, 32, 109, 117, 115, 116, 32, 111, 99, 99, 117, 114, 32, 40, 111, 110, 108, 121, 41, 32, 105, 110, 32, 102, 105, 108, 108, 101, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___dict_wordid = allocate([ 100, 105, 99, 116, 95, 119, 111, 114, 100, 105, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29242 = allocate([ 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___dict_filler_word = allocate([ 100, 105, 99, 116, 95, 102, 105, 108, 108, 101, 114, 95, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31244 = allocate([ 40, 119, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 119, 32, 60, 32, 100, 45, 62, 110, 95, 119, 111, 114, 100, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___dict_real_word = allocate([ 100, 105, 99, 116, 95, 114, 101, 97, 108, 95, 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36249 = allocate([ 35, 35, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37250 = allocate([ 59, 59, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___dict_read = allocate([ 100, 105, 99, 116, 95, 114, 101, 97, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38251 = allocate([ 110, 119, 100, 32, 62, 32, 109, 97, 120, 119, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39252 = allocate([ 76, 105, 110, 101, 32, 37, 100, 58, 32, 78, 111, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 32, 102, 111, 114, 32, 119, 111, 114, 100, 32, 39, 37, 115, 39, 59, 32, 105, 103, 110, 111, 114, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40253 = allocate([ 76, 105, 110, 101, 32, 37, 100, 58, 32, 80, 104, 111, 110, 101, 32, 39, 37, 115, 39, 32, 105, 115, 32, 109, 105, 115, 105, 110, 103, 32, 105, 110, 32, 116, 104, 101, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 59, 32, 119, 111, 114, 100, 32, 39, 37, 115, 39, 32, 105, 103, 110, 111, 114, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41254 = allocate([ 76, 105, 110, 101, 32, 37, 100, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 97, 100, 100, 32, 116, 104, 101, 32, 119, 111, 114, 100, 32, 39, 37, 115, 39, 32, 40, 100, 117, 112, 108, 105, 99, 97, 116, 101, 63, 41, 59, 32, 105, 103, 110, 111, 114, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42255 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 75, 105, 66, 32, 102, 111, 114, 32, 115, 116, 114, 105, 110, 103, 115, 44, 32, 37, 100, 32, 75, 105, 66, 32, 102, 111, 114, 32, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str256 = allocate([ 100, 105, 99, 116, 50, 112, 105, 100, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str5261 = allocate([ 66, 117, 105, 108, 100, 105, 110, 103, 32, 80, 73, 68, 32, 116, 97, 98, 108, 101, 115, 32, 102, 111, 114, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___dict2pid_build = allocate([ 100, 105, 99, 116, 50, 112, 105, 100, 95, 98, 117, 105, 108, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7263 = allocate([ 100, 105, 99, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str8264 = allocate([ 65, 108, 108, 111, 99, 97, 116, 105, 110, 103, 32, 37, 100, 94, 51, 32, 42, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 119, 111, 114, 100, 45, 105, 110, 105, 116, 105, 97, 108, 32, 116, 114, 105, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___compress_left_right_context_tree = allocate([ 99, 111, 109, 112, 114, 101, 115, 115, 95, 108, 101, 102, 116, 95, 114, 105, 103, 104, 116, 95, 99, 111, 110, 116, 101, 120, 116, 95, 116, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19275 = allocate([ 100, 50, 112, 45, 62, 108, 114, 100, 105, 112, 104, 95, 114, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20276 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 115, 105, 110, 103, 108, 101, 45, 112, 104, 111, 110, 101, 32, 119, 111, 114, 100, 32, 116, 114, 105, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21277 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 119, 111, 114, 100, 45, 102, 105, 110, 97, 108, 32, 116, 114, 105, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___populate_lrdiph = allocate([ 112, 111, 112, 117, 108, 97, 116, 101, 95, 108, 114, 100, 105, 112, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22278 = allocate([ 73, 83, 95, 83, 51, 83, 83, 73, 68, 40, 98, 105, 110, 95, 109, 100, 101, 102, 95, 112, 105, 100, 50, 115, 115, 105, 100, 40, 109, 100, 101, 102, 44, 32, 112, 41, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str279 = allocate([ 102, 115, 103, 95, 104, 105, 115, 116, 111, 114, 121, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2281 = allocate([ 83, 119, 105, 116, 99, 104, 105, 110, 103, 32, 70, 83, 71, 32, 119, 104, 105, 108, 101, 32, 104, 105, 115, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 59, 32, 104, 105, 115, 116, 111, 114, 121, 32, 99, 108, 101, 97, 114, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_history_utt_start = allocate([ 102, 115, 103, 95, 104, 105, 115, 116, 111, 114, 121, 95, 117, 116, 116, 95, 115, 116, 97, 114, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3282 = allocate([ 98, 108, 107, 97, 114, 114, 97, 121, 95, 108, 105, 115, 116, 95, 110, 95, 118, 97, 108, 105, 100, 40, 104, 45, 62, 101, 110, 116, 114, 105, 101, 115, 41, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4283 = allocate([ 104, 45, 62, 102, 114, 97, 109, 101, 95, 101, 110, 116, 114, 105, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str5284 = allocate([ 104, 45, 62, 102, 114, 97, 109, 101, 95, 101, 110, 116, 114, 105, 101, 115, 91, 115, 93, 91, 108, 99, 93, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str285 = allocate([ 102, 115, 103, 95, 108, 101, 120, 116, 114, 101, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2287 = allocate([ 37, 100, 32, 72, 77, 77, 32, 110, 111, 100, 101, 115, 32, 105, 110, 32, 108, 101, 120, 116, 114, 101, 101, 32, 40, 37, 100, 32, 108, 101, 97, 118, 101, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3288 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 97, 108, 108, 32, 108, 101, 120, 116, 114, 101, 101, 32, 110, 111, 100, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4289 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 108, 101, 120, 116, 114, 101, 101, 32, 108, 101, 97, 102, 110, 111, 100, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_psubtree_init = allocate([ 102, 115, 103, 95, 112, 115, 117, 98, 116, 114, 101, 101, 95, 105, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19304 = allocate([ 42, 97, 108, 108, 111, 99, 95, 104, 101, 97, 100, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21306 = allocate([ 35, 112, 104, 111, 110, 101, 115, 32, 62, 32, 37, 100, 59, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 70, 83, 71, 95, 80, 78, 79, 68, 69, 95, 67, 84, 88, 84, 95, 66, 86, 83, 90, 32, 97, 110, 100, 32, 114, 101, 99, 111, 109, 112, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22307 = allocate([ 102, 115, 103, 95, 108, 105, 110, 107, 95, 119, 105, 100, 40, 102, 115, 103, 108, 105, 110, 107, 41, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___psubtree_add_trans = allocate([ 112, 115, 117, 98, 116, 114, 101, 101, 95, 97, 100, 100, 95, 116, 114, 97, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24309 = allocate([ 112, 114, 111, 110, 108, 101, 110, 32, 62, 61, 32, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25310 = allocate([ 108, 99, 108, 105, 115, 116, 91, 48, 93, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26311 = allocate([ 114, 99, 108, 105, 115, 116, 91, 48, 93, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27312 = allocate([ 106, 32, 60, 32, 110, 95, 99, 105, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28313 = allocate([ 104, 109, 109, 95, 110, 111, 110, 109, 112, 120, 95, 115, 115, 105, 100, 40, 38, 112, 110, 111, 100, 101, 45, 62, 104, 109, 109, 41, 32, 61, 61, 32, 115, 115, 105, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_lextree_lc_rc = allocate([ 102, 115, 103, 95, 108, 101, 120, 116, 114, 101, 101, 95, 108, 99, 95, 114, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29314 = allocate([ 115, 105, 108, 99, 105, 112, 105, 100, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str30315 = allocate([ 65, 108, 108, 111, 99, 97, 116, 101, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 40, 37, 100, 32, 75, 105, 66, 41, 32, 102, 111, 114, 32, 108, 101, 102, 116, 32, 97, 110, 100, 32, 114, 105, 103, 104, 116, 32, 99, 111, 110, 116, 101, 120, 116, 32, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str316 = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 46, 99, 0 ], "i8", ALLOC_STATIC);

	_fsg_funcs = allocate([ 0, 0, 0, 0, 22, 0, 0, 0, 24, 0, 0, 0, 26, 0, 0, 0, 28, 0, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 34, 0, 0, 0, 36, 0, 0, 0, 38, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str10326 = allocate([ 70, 83, 71, 40, 98, 101, 97, 109, 58, 32, 37, 100, 44, 32, 112, 98, 101, 97, 109, 58, 32, 37, 100, 44, 32, 119, 98, 101, 97, 109, 58, 32, 37, 100, 59, 32, 119, 105, 112, 58, 32, 37, 100, 44, 32, 112, 105, 112, 58, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14330 = allocate([ 60, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15331 = allocate([ 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17333 = allocate([ 83, 116, 97, 114, 116, 32, 114, 117, 108, 101, 32, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str18334 = allocate([ 78, 111, 32, 112, 117, 98, 108, 105, 99, 32, 114, 117, 108, 101, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24340 = allocate([ 70, 83, 71, 32, 39, 37, 115, 39, 32, 110, 111, 116, 32, 107, 110, 111, 119, 110, 59, 32, 99, 97, 110, 110, 111, 116, 32, 109, 97, 107, 101, 32, 105, 116, 32, 99, 117, 114, 114, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_step = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 115, 116, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25341 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 104, 109, 109, 41, 32, 61, 61, 32, 40, 102, 115, 103, 115, 45, 62, 102, 114, 97, 109, 101, 32, 43, 32, 49, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_start = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 115, 116, 97, 114, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27343 = allocate([ 102, 115, 103, 115, 45, 62, 112, 110, 111, 100, 101, 95, 97, 99, 116, 105, 118, 101, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28344 = allocate([ 102, 115, 103, 115, 45, 62, 112, 110, 111, 100, 101, 95, 97, 99, 116, 105, 118, 101, 95, 110, 101, 120, 116, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29345 = allocate([ 37, 100, 32, 102, 114, 97, 109, 101, 115, 44, 32, 37, 100, 32, 72, 77, 77, 115, 32, 40, 37, 100, 47, 102, 114, 41, 44, 32, 37, 100, 32, 115, 101, 110, 111, 110, 101, 115, 32, 40, 37, 100, 47, 102, 114, 41, 44, 32, 37, 100, 32, 104, 105, 115, 116, 111, 114, 121, 32, 101, 110, 116, 114, 105, 101, 115, 32, 40, 37, 100, 47, 102, 114, 41, 10, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str30346 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 98, 116, 97, 105, 110, 32, 116, 104, 101, 32, 108, 97, 116, 116, 105, 99, 101, 32, 119, 104, 105, 108, 101, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 101, 110, 97, 98, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31347 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 105, 110, 32, 97, 32, 108, 97, 116, 116, 105, 99, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32348 = allocate([ 40, 78, 85, 76, 76, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36352 = allocate([ 69, 110, 100, 32, 110, 111, 100, 101, 32, 37, 115, 46, 37, 100, 58, 37, 100, 58, 37, 100, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38354 = allocate([ 83, 116, 97, 114, 116, 32, 110, 111, 100, 101, 32, 37, 115, 46, 37, 100, 58, 37, 100, 58, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40356 = allocate([ 70, 105, 110, 97, 108, 32, 115, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 97, 99, 104, 101, 100, 32, 105, 110, 32, 102, 114, 97, 109, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_word_trans = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 119, 111, 114, 100, 95, 116, 114, 97, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41357 = allocate([ 104, 105, 115, 116, 95, 101, 110, 116, 114, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42358 = allocate([ 102, 115, 103, 115, 45, 62, 102, 114, 97, 109, 101, 32, 61, 61, 32, 102, 115, 103, 95, 104, 105, 115, 116, 95, 101, 110, 116, 114, 121, 95, 102, 114, 97, 109, 101, 40, 104, 105, 115, 116, 95, 101, 110, 116, 114, 121, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_hmm_prune_prop = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 104, 109, 109, 95, 112, 114, 117, 110, 101, 95, 112, 114, 111, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str43359 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 104, 109, 109, 41, 32, 61, 61, 32, 102, 115, 103, 115, 45, 62, 102, 114, 97, 109, 101, 32, 43, 32, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_pnode_exit = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 112, 110, 111, 100, 101, 95, 101, 120, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str44360 = allocate([ 112, 110, 111, 100, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str45361 = allocate([ 102, 115, 103, 95, 112, 110, 111, 100, 101, 95, 108, 101, 97, 102, 40, 112, 110, 111, 100, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str46362 = allocate([ 102, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str47363 = allocate([ 119, 105, 100, 32, 62, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_pnode_trans = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 112, 110, 111, 100, 101, 95, 116, 114, 97, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str48364 = allocate([ 33, 102, 115, 103, 95, 112, 110, 111, 100, 101, 95, 108, 101, 97, 102, 40, 112, 110, 111, 100, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str49365 = allocate([ 70, 114, 97, 109, 101, 32, 37, 100, 58, 32, 78, 111, 32, 97, 99, 116, 105, 118, 101, 32, 72, 77, 77, 33, 33, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_hmm_eval = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 104, 109, 109, 95, 101, 118, 97, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str50366 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 104, 109, 109, 41, 32, 61, 61, 32, 102, 115, 103, 115, 45, 62, 102, 114, 97, 109, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str53369 = allocate([ 80, 65, 78, 73, 67, 33, 32, 70, 114, 97, 109, 101, 32, 37, 100, 58, 32, 35, 72, 77, 77, 32, 101, 118, 97, 108, 117, 97, 116, 101, 100, 40, 37, 100, 41, 32, 62, 32, 35, 80, 78, 111, 100, 101, 115, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_search_sen_active = allocate([ 102, 115, 103, 95, 115, 101, 97, 114, 99, 104, 95, 115, 101, 110, 95, 97, 99, 116, 105, 118, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str54370 = allocate([ 65, 100, 100, 101, 100, 32, 37, 100, 32, 97, 108, 116, 101, 114, 110, 97, 116, 101, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str55371 = allocate([ 60, 115, 105, 108, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str56372 = allocate([ 84, 104, 101, 32, 119, 111, 114, 100, 32, 39, 37, 115, 39, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	_fsg_segfuncs = allocate([ 40, 0, 0, 0, 42, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str374 = allocate([ 104, 109, 109, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___hmm_context_init = allocate([ 104, 109, 109, 95, 99, 111, 110, 116, 101, 120, 116, 95, 105, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1375 = allocate([ 110, 95, 101, 109, 105, 116, 95, 115, 116, 97, 116, 101, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3377 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 101, 109, 105, 116, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 60, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str407 = allocate([ 109, 100, 101, 102, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___mdef_ciphone_str = allocate([ 109, 100, 101, 102, 95, 99, 105, 112, 104, 111, 110, 101, 95, 115, 116, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1408 = allocate([ 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2409 = allocate([ 40, 105, 100, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 105, 100, 32, 60, 32, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___mdef_phone_str = allocate([ 109, 100, 101, 102, 95, 112, 104, 111, 110, 101, 95, 115, 116, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3410 = allocate([ 40, 112, 105, 100, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 112, 105, 100, 32, 60, 32, 109, 45, 62, 110, 95, 112, 104, 111, 110, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4411 = allocate([ 105, 98, 101, 115, 117, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6413 = allocate([ 37, 115, 32, 37, 115, 32, 37, 115, 32, 37, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7414 = allocate([ 40, 99, 105, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 99, 105, 32, 60, 32, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str8415 = allocate([ 40, 108, 99, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 108, 99, 32, 60, 32, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9416 = allocate([ 40, 114, 99, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 114, 99, 32, 60, 32, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10417 = allocate([ 40, 119, 112, 111, 115, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 119, 112, 111, 115, 32, 60, 32, 78, 95, 87, 79, 82, 68, 95, 80, 79, 83, 78, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14421 = allocate([ 78, 111, 32, 109, 100, 101, 102, 45, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16423 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 109, 111, 100, 101, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19426 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 109, 100, 101, 102, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20427 = allocate([ 69, 109, 112, 116, 121, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21428 = allocate([ 66, 77, 68, 70, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22429 = allocate([ 70, 68, 77, 66, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23430 = allocate([ 70, 111, 117, 110, 100, 32, 98, 121, 116, 101, 45, 111, 114, 100, 101, 114, 32, 109, 97, 114, 107, 32, 37, 46, 52, 115, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 116, 104, 105, 115, 32, 105, 115, 32, 97, 32, 98, 105, 110, 97, 114, 121, 32, 109, 100, 101, 102, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24431 = allocate([ 48, 46, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25432 = allocate([ 86, 101, 114, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 58, 32, 69, 120, 112, 101, 99, 105, 110, 103, 32, 37, 115, 44, 32, 98, 117, 116, 32, 114, 101, 97, 100, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26433 = allocate([ 73, 110, 99, 111, 109, 112, 108, 101, 116, 101, 32, 104, 101, 97, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27434 = allocate([ 37, 100, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28435 = allocate([ 69, 114, 114, 111, 114, 32, 105, 110, 32, 104, 101, 97, 100, 101, 114, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29436 = allocate([ 110, 95, 98, 97, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str30437 = allocate([ 110, 95, 116, 114, 105, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31438 = allocate([ 110, 95, 115, 116, 97, 116, 101, 95, 109, 97, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32439 = allocate([ 110, 95, 116, 105, 101, 100, 95, 99, 105, 95, 115, 116, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str33440 = allocate([ 110, 95, 116, 105, 101, 100, 95, 115, 116, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str34441 = allocate([ 110, 95, 116, 105, 101, 100, 95, 116, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35442 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 104, 101, 97, 100, 101, 114, 32, 108, 105, 110, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36443 = allocate([ 37, 115, 58, 32, 69, 114, 114, 111, 114, 32, 105, 110, 32, 104, 101, 97, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37444 = allocate([ 37, 115, 58, 32, 35, 67, 73, 32, 112, 104, 111, 110, 101, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38445 = allocate([ 37, 115, 58, 32, 35, 80, 104, 111, 110, 101, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39446 = allocate([ 37, 115, 58, 32, 35, 115, 101, 110, 111, 110, 101, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40447 = allocate([ 37, 115, 58, 32, 35, 116, 109, 97, 116, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41448 = allocate([ 72, 101, 97, 100, 101, 114, 32, 101, 114, 114, 111, 114, 58, 32, 110, 95, 115, 116, 97, 116, 101, 95, 109, 97, 112, 32, 110, 111, 116, 32, 97, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 111, 102, 32, 110, 95, 99, 105, 42, 110, 95, 116, 114, 105, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42449 = allocate([ 80, 114, 101, 109, 97, 116, 117, 114, 101, 32, 69, 79, 70, 32, 114, 101, 97, 100, 105, 110, 103, 32, 67, 73, 112, 104, 111, 110, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str43450 = allocate([ 83, 73, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str44451 = allocate([ 80, 114, 101, 109, 97, 116, 117, 114, 101, 32, 69, 79, 70, 32, 114, 101, 97, 100, 105, 110, 103, 32, 112, 104, 111, 110, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str46453 = allocate([ 78, 111, 110, 45, 101, 109, 112, 116, 121, 32, 102, 105, 108, 101, 32, 98, 101, 121, 111, 110, 100, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 35, 112, 104, 111, 110, 101, 115, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str47454 = allocate([ 35, 67, 73, 45, 115, 101, 110, 111, 110, 101, 115, 40, 37, 100, 41, 32, 33, 61, 32, 35, 67, 73, 45, 112, 104, 111, 110, 101, 40, 37, 100, 41, 32, 120, 32, 35, 101, 109, 105, 116, 116, 105, 110, 103, 45, 115, 116, 97, 116, 101, 115, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str49456 = allocate([ 37, 100, 32, 67, 73, 45, 112, 104, 111, 110, 101, 44, 32, 37, 100, 32, 67, 68, 45, 112, 104, 111, 110, 101, 44, 32, 37, 100, 32, 101, 109, 105, 116, 115, 116, 97, 116, 101, 47, 112, 104, 111, 110, 101, 44, 32, 37, 100, 32, 67, 73, 45, 115, 101, 110, 44, 32, 37, 100, 32, 83, 101, 110, 44, 32, 37, 100, 32, 83, 101, 110, 45, 83, 101, 113, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___sseq_compress = allocate([ 115, 115, 101, 113, 95, 99, 111, 109, 112, 114, 101, 115, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51458 = allocate([ 106, 32, 61, 61, 32, 110, 95, 115, 115, 101, 113, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str53460 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 98, 97, 115, 101, 32, 112, 104, 111, 110, 101, 32, 110, 97, 109, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str54461 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 98, 97, 115, 101, 32, 112, 104, 111, 110, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str55462 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 108, 101, 102, 116, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str56463 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 108, 101, 102, 116, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str57464 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 114, 105, 103, 104, 116, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str58465 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 114, 105, 103, 104, 116, 32, 32, 99, 111, 110, 116, 101, 120, 116, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str59466 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 98, 97, 100, 32, 119, 111, 114, 100, 45, 112, 111, 115, 105, 116, 105, 111, 110, 32, 115, 112, 101, 99, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str60467 = allocate([ 66, 97, 100, 32, 119, 111, 114, 100, 45, 112, 111, 115, 105, 116, 105, 111, 110, 32, 115, 112, 101, 99, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61468 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 102, 105, 108, 108, 101, 114, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 102, 105, 101, 108, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str62469 = allocate([ 102, 105, 108, 108, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str63470 = allocate([ 110, 47, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str64471 = allocate([ 66, 97, 100, 32, 102, 105, 108, 108, 101, 114, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 102, 105, 101, 108, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str66473 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 98, 97, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 32, 105, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str67474 = allocate([ 116, 109, 97, 116, 45, 105, 100, 40, 37, 100, 41, 32, 62, 32, 35, 116, 109, 97, 116, 32, 105, 110, 32, 104, 101, 97, 100, 101, 114, 40, 37, 100, 41, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str68475 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 91, 37, 100, 93, 45, 62, 115, 101, 110, 111, 110, 101, 32, 109, 97, 112, 112, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str69476 = allocate([ 67, 73, 45, 115, 101, 110, 111, 110, 101, 45, 105, 100, 40, 37, 100, 41, 32, 62, 32, 35, 67, 73, 45, 115, 101, 110, 111, 110, 101, 115, 40, 37, 100, 41, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str70477 = allocate([ 83, 101, 110, 111, 110, 101, 45, 105, 100, 40, 37, 100, 41, 32, 62, 32, 35, 115, 101, 110, 111, 110, 101, 115, 40, 37, 100, 41, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72479 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 110, 111, 110, 45, 101, 109, 105, 116, 116, 105, 110, 103, 32, 115, 116, 97, 116, 101, 32, 115, 112, 101, 99, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str73480 = allocate([ 78, 111, 110, 45, 101, 109, 112, 116, 121, 32, 98, 101, 121, 111, 110, 100, 32, 110, 111, 110, 45, 101, 109, 105, 116, 116, 105, 110, 103, 32, 102, 105, 110, 97, 108, 32, 115, 116, 97, 116, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___triphone_add = allocate([ 116, 114, 105, 112, 104, 111, 110, 101, 95, 97, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str74481 = allocate([ 112, 32, 60, 32, 109, 45, 62, 110, 95, 112, 104, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str75482 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 116, 114, 105, 112, 104, 111, 110, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str76483 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 98, 97, 115, 101, 32, 112, 104, 111, 110, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str77484 = allocate([ 45, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str78485 = allocate([ 66, 97, 100, 32, 99, 111, 110, 116, 101, 120, 116, 32, 105, 110, 102, 111, 32, 102, 111, 114, 32, 98, 97, 115, 101, 32, 112, 104, 111, 110, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str79486 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 102, 105, 108, 108, 101, 114, 32, 97, 116, 114, 105, 98, 117, 116, 101, 32, 102, 105, 101, 108, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ciphone_add = allocate([ 99, 105, 112, 104, 111, 110, 101, 95, 97, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str80487 = allocate([ 112, 32, 60, 32, 109, 45, 62, 110, 95, 99, 105, 112, 104, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81488 = allocate([ 104, 97, 115, 104, 95, 116, 97, 98, 108, 101, 95, 101, 110, 116, 101, 114, 40, 37, 115, 41, 32, 102, 97, 105, 108, 101, 100, 59, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 67, 73, 112, 104, 111, 110, 101, 63, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str493 = allocate([ 109, 115, 95, 103, 97, 117, 100, 101, 110, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___gauden_init = allocate([ 103, 97, 117, 100, 101, 110, 95, 105, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9502 = allocate([ 109, 101, 97, 110, 102, 105, 108, 101, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10503 = allocate([ 118, 97, 114, 102, 105, 108, 101, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11504 = allocate([ 118, 97, 114, 102, 108, 111, 111, 114, 32, 62, 32, 48, 46, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13506 = allocate([ 77, 105, 120, 116, 117, 114, 101, 45, 103, 97, 117, 115, 115, 105, 97, 110, 115, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 115, 32, 102, 111, 114, 32, 109, 101, 97, 110, 115, 32, 97, 110, 100, 32, 118, 97, 114, 105, 97, 110, 99, 101, 115, 32, 100, 105, 102, 102, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14507 = allocate([ 70, 101, 97, 116, 117, 114, 101, 32, 108, 101, 110, 103, 116, 104, 115, 32, 102, 111, 114, 32, 109, 101, 97, 110, 115, 32, 97, 110, 100, 32, 118, 97, 114, 105, 97, 110, 99, 101, 115, 32, 100, 105, 102, 102, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___gauden_dist = allocate([ 103, 97, 117, 100, 101, 110, 95, 100, 105, 115, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15508 = allocate([ 40, 110, 95, 116, 111, 112, 32, 62, 32, 48, 41, 32, 38, 38, 32, 40, 110, 95, 116, 111, 112, 32, 60, 61, 32, 103, 45, 62, 110, 95, 100, 101, 110, 115, 105, 116, 121, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___compute_dist = allocate([ 99, 111, 109, 112, 117, 116, 101, 95, 100, 105, 115, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19512 = allocate([ 105, 32, 60, 32, 110, 95, 116, 111, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20513 = allocate([ 37, 100, 32, 118, 97, 114, 105, 97, 110, 99, 101, 32, 118, 97, 108, 117, 101, 115, 32, 102, 108, 111, 111, 114, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21514 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 109, 105, 120, 116, 117, 114, 101, 32, 103, 97, 117, 115, 115, 105, 97, 110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24517 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31524 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 35, 99, 111, 100, 101, 98, 111, 111, 107, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32525 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 35, 102, 101, 97, 116, 117, 114, 101, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str33526 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 35, 100, 101, 110, 115, 105, 116, 121, 47, 99, 111, 100, 101, 98, 111, 111, 107, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str34527 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 102, 101, 97, 116, 117, 114, 101, 45, 108, 101, 110, 103, 116, 104, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35528 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 116, 111, 116, 97, 108, 32, 35, 102, 108, 111, 97, 116, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36529 = allocate([ 37, 115, 58, 32, 35, 109, 102, 99, 99, 95, 116, 115, 40, 37, 100, 41, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 115, 58, 32, 37, 100, 32, 120, 32, 37, 100, 32, 120, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37530 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 100, 101, 110, 115, 105, 116, 121, 100, 97, 116, 97, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39532 = allocate([ 37, 100, 32, 99, 111, 100, 101, 98, 111, 111, 107, 44, 32, 37, 100, 32, 102, 101, 97, 116, 117, 114, 101, 44, 32, 115, 105, 122, 101, 58, 32, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40533 = allocate([ 32, 37, 100, 120, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str534 = allocate([ 109, 115, 95, 109, 103, 97, 117, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9543 = allocate([ 35, 70, 101, 97, 116, 117, 114, 101, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 103, 97, 117, 100, 101, 110, 61, 32, 37, 100, 44, 32, 115, 101, 110, 111, 110, 101, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10544 = allocate([ 35, 68, 101, 110, 115, 105, 116, 105, 101, 115, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 103, 97, 117, 100, 101, 110, 61, 32, 37, 100, 44, 32, 115, 101, 110, 111, 110, 101, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11545 = allocate([ 83, 101, 110, 111, 110, 101, 115, 32, 110, 101, 101, 100, 32, 109, 111, 114, 101, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 40, 37, 100, 41, 32, 116, 104, 97, 110, 32, 112, 114, 101, 115, 101, 110, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13547 = allocate([ 83, 101, 110, 111, 110, 101, 115, 32, 117, 115, 101, 32, 102, 101, 119, 101, 114, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 40, 37, 100, 41, 32, 116, 104, 97, 110, 32, 112, 114, 101, 115, 101, 110, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16550 = allocate([ 84, 104, 101, 32, 118, 97, 108, 117, 101, 32, 111, 102, 32, 116, 111, 112, 110, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str18552 = allocate([ 45, 116, 111, 112, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 40, 37, 100, 41, 32, 105, 110, 118, 97, 108, 105, 100, 32, 111, 114, 32, 62, 32, 35, 100, 101, 110, 115, 105, 116, 121, 32, 99, 111, 100, 101, 119, 111, 114, 100, 115, 32, 40, 37, 100, 41, 59, 32, 115, 101, 116, 32, 116, 111, 32, 108, 97, 116, 116, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	_ms_mgau_funcs = allocate([ 0, 0, 0, 0, 44, 0, 0, 0, 46, 0, 0, 0, 48, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str19553 = allocate([ 109, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str556 = allocate([ 109, 115, 95, 115, 101, 110, 111, 110, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1557 = allocate([ 46, 115, 101, 109, 105, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2558 = allocate([ 46, 112, 116, 109, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3559 = allocate([ 46, 99, 111, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str5561 = allocate([ 77, 97, 112, 112, 105, 110, 103, 32, 97, 108, 108, 32, 115, 101, 110, 111, 110, 101, 115, 32, 116, 111, 32, 111, 110, 101, 32, 99, 111, 100, 101, 98, 111, 111, 107, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6562 = allocate([ 77, 97, 112, 112, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 115, 32, 116, 111, 32, 99, 111, 110, 116, 101, 120, 116, 45, 105, 110, 100, 101, 112, 101, 110, 100, 101, 110, 116, 32, 112, 104, 111, 110, 101, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7563 = allocate([ 46, 115, 51, 99, 111, 110, 116, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str8564 = allocate([ 77, 97, 112, 112, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 115, 32, 116, 111, 32, 105, 110, 100, 105, 118, 105, 100, 117, 97, 108, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10566 = allocate([ 35, 115, 101, 110, 111, 110, 101, 61, 37, 100, 59, 32, 109, 117, 115, 116, 32, 98, 101, 32, 62, 49, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11567 = allocate([ 35, 115, 101, 110, 111, 110, 101, 115, 32, 105, 110, 99, 111, 110, 115, 105, 115, 116, 101, 110, 116, 58, 32, 37, 100, 32, 105, 110, 32, 37, 115, 59, 32, 37, 100, 32, 105, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___senone_eval = allocate([ 115, 101, 110, 111, 110, 101, 95, 101, 118, 97, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12568 = allocate([ 40, 105, 100, 32, 62, 61, 32, 48, 41, 32, 38, 38, 32, 40, 105, 100, 32, 60, 32, 115, 45, 62, 110, 95, 115, 101, 110, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13569 = allocate([ 40, 110, 95, 116, 111, 112, 32, 62, 32, 48, 41, 32, 38, 38, 32, 40, 110, 95, 116, 111, 112, 32, 60, 61, 32, 115, 45, 62, 110, 95, 99, 119, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14570 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17573 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25581 = allocate([ 37, 115, 58, 32, 35, 102, 108, 111, 97, 116, 51, 50, 115, 40, 37, 100, 41, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 115, 58, 32, 37, 100, 32, 120, 32, 37, 100, 32, 120, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26582 = allocate([ 109, 105, 120, 119, 102, 108, 111, 111, 114, 32, 40, 37, 101, 41, 32, 110, 111, 116, 32, 105, 110, 32, 114, 97, 110, 103, 101, 32, 40, 48, 44, 32, 49, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27583 = allocate([ 84, 114, 117, 110, 99, 97, 116, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 32, 108, 111, 103, 115, 51, 40, 112, 100, 102, 41, 32, 118, 97, 108, 117, 101, 115, 32, 98, 121, 32, 37, 100, 32, 98, 105, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28584 = allocate([ 78, 111, 116, 32, 116, 114, 97, 110, 115, 112, 111, 115, 105, 110, 103, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 105, 110, 32, 109, 101, 109, 111, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str29585 = allocate([ 84, 114, 97, 110, 115, 112, 111, 115, 105, 110, 103, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 105, 110, 32, 109, 101, 109, 111, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str33589 = allocate([ 82, 101, 97, 100, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 102, 111, 114, 32, 37, 100, 32, 115, 101, 110, 111, 110, 101, 115, 58, 32, 37, 100, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 120, 32, 37, 100, 32, 99, 111, 100, 101, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str34590 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 32, 103, 97, 117, 100, 101, 110, 45, 99, 111, 100, 101, 98, 111, 111, 107, 32, 109, 97, 112, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35591 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 109, 97, 112, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36592 = allocate([ 49, 46, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37593 = allocate([ 37, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38594 = allocate([ 37, 115, 58, 32, 66, 97, 100, 32, 118, 101, 114, 115, 105, 111, 110, 32, 110, 111, 46, 32, 115, 116, 114, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39595 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 102, 114, 111, 109, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40596 = allocate([ 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 35, 103, 97, 117, 100, 101, 110, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41597 = allocate([ 98, 105, 111, 95, 102, 114, 101, 97, 100, 95, 49, 100, 40, 37, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42598 = allocate([ 77, 97, 112, 112, 105, 110, 103, 32, 37, 100, 32, 115, 101, 110, 111, 110, 101, 115, 32, 116, 111, 32, 37, 100, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str43599 = allocate([ 77, 111, 114, 101, 32, 100, 97, 116, 97, 32, 116, 104, 97, 110, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 32, 37, 115, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str44600 = allocate([ 82, 101, 97, 100, 32, 37, 100, 45, 62, 37, 100, 32, 115, 101, 110, 111, 110, 101, 45, 99, 111, 100, 101, 98, 111, 111, 107, 32, 109, 97, 112, 112, 105, 110, 103, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str607 = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 46, 99, 0 ], "i8", ALLOC_STATIC);

	_ngram_funcs = allocate([ 0, 0, 0, 0, 50, 0, 0, 0, 52, 0, 0, 0, 54, 0, 0, 0, 56, 0, 0, 0, 58, 0, 0, 0, 60, 0, 0, 0, 62, 0, 0, 0, 64, 0, 0, 0, 66, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str4611 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	_ngram_search_init_name = allocate(4, "i8", ALLOC_STATIC);

	STRING_TABLE.__str8615 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9616 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 115, 101, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11618 = allocate([ 76, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 47, 115, 101, 116, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 99, 111, 110, 116, 97, 105, 110, 32, 60, 47, 115, 62, 44, 32, 114, 101, 99, 111, 103, 110, 105, 116, 105, 111, 110, 32, 119, 105, 108, 108, 32, 102, 97, 105, 108, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13620 = allocate([ 102, 119, 100, 116, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15622 = allocate([ 102, 119, 100, 102, 108, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17624 = allocate([ 98, 101, 115, 116, 112, 97, 116, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20627 = allocate([ 84, 79, 84, 65, 76, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21628 = allocate([ 84, 79, 84, 65, 76, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ngram_search_save_bp = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 115, 97, 118, 101, 95, 98, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22629 = allocate([ 112, 97, 116, 104, 32, 33, 61, 32, 98, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23630 = allocate([ 78, 111, 32, 101, 110, 116, 114, 105, 101, 115, 32, 105, 110, 32, 98, 97, 99, 107, 112, 111, 105, 110, 116, 101, 114, 32, 116, 97, 98, 108, 101, 33, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24631 = allocate([ 82, 101, 115, 105, 122, 101, 100, 32, 98, 97, 99, 107, 112, 111, 105, 110, 116, 101, 114, 32, 116, 97, 98, 108, 101, 32, 116, 111, 32, 37, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25632 = allocate([ 82, 101, 115, 105, 122, 101, 100, 32, 115, 99, 111, 114, 101, 32, 115, 116, 97, 99, 107, 32, 116, 111, 32, 37, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26633 = allocate([ 112, 97, 116, 104, 32, 33, 61, 32, 110, 103, 115, 45, 62, 98, 112, 105, 100, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ngram_search_find_exit = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 102, 105, 110, 100, 95, 101, 120, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27634 = allocate([ 101, 110, 100, 95, 98, 112, 105, 100, 120, 32, 60, 32, 110, 103, 115, 45, 62, 98, 112, 95, 116, 97, 98, 108, 101, 95, 115, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ngram_search_alloc_all_rc = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 97, 108, 108, 111, 99, 95, 97, 108, 108, 95, 114, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ngram_compute_seg_score = allocate([ 110, 103, 114, 97, 109, 95, 99, 111, 109, 112, 117, 116, 101, 95, 115, 101, 103, 95, 115, 99, 111, 114, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36643 = allocate([ 108, 97, 116, 116, 105, 99, 101, 32, 115, 116, 97, 114, 116, 32, 110, 111, 100, 101, 32, 37, 115, 46, 37, 100, 32, 101, 110, 100, 32, 110, 111, 100, 101, 32, 37, 115, 46, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37644 = allocate([ 69, 108, 105, 109, 105, 110, 97, 116, 101, 100, 32, 37, 100, 32, 110, 111, 100, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 101, 110, 100, 32, 110, 111, 100, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ngram_search_lattice = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 108, 97, 116, 116, 105, 99, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str38645 = allocate([ 33, 102, 114, 111, 109, 45, 62, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39646 = allocate([ 69, 110, 100, 32, 110, 111, 100, 101, 32, 111, 102, 32, 108, 97, 116, 116, 105, 99, 101, 32, 105, 115, 111, 108, 97, 116, 101, 100, 59, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40647 = allocate([ 76, 97, 116, 116, 105, 99, 101, 32, 104, 97, 115, 32, 37, 100, 32, 110, 111, 100, 101, 115, 44, 32, 37, 100, 32, 108, 105, 110, 107, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41648 = allocate([ 69, 109, 112, 116, 121, 32, 98, 97, 99, 107, 112, 111, 105, 110, 116, 101, 114, 32, 116, 97, 98, 108, 101, 58, 32, 99, 97, 110, 32, 110, 111, 116, 32, 98, 117, 105, 108, 100, 32, 68, 65, 71, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42649 = allocate([ 78, 111, 32, 119, 111, 114, 100, 32, 101, 120, 105, 116, 115, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 108, 97, 115, 116, 32, 102, 114, 97, 109, 101, 32, 40, 37, 100, 41, 44, 32, 97, 115, 115, 117, 109, 105, 110, 103, 32, 110, 111, 32, 114, 101, 99, 111, 103, 110, 105, 116, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str43650 = allocate([ 60, 47, 115, 62, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 105, 110, 32, 108, 97, 115, 116, 32, 102, 114, 97, 109, 101, 44, 32, 117, 115, 105, 110, 103, 32, 37, 115, 46, 37, 100, 32, 105, 110, 115, 116, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str44651 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 102, 105, 110, 100, 32, 68, 65, 71, 32, 110, 111, 100, 101, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 105, 110, 103, 32, 116, 111, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str45652 = allocate([ 67, 111, 117, 108, 100, 110, 39, 116, 32, 102, 105, 110, 100, 32, 60, 115, 62, 32, 105, 110, 32, 102, 105, 114, 115, 116, 32, 102, 114, 97, 109, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___create_dag_nodes = allocate([ 99, 114, 101, 97, 116, 101, 95, 100, 97, 103, 95, 110, 111, 100, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str46653 = allocate([ 101, 102, 32, 60, 32, 100, 97, 103, 45, 62, 110, 95, 102, 114, 97, 109, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___set_real_wid = allocate([ 115, 101, 116, 95, 114, 101, 97, 108, 95, 119, 105, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str47654 = allocate([ 98, 112, 32, 33, 61, 32, 78, 79, 95, 66, 80, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str67674 = allocate([ 98, 101, 115, 116, 112, 97, 116, 104, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str68675 = allocate([ 98, 101, 115, 116, 112, 97, 116, 104, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	_ngram_bp_segfuncs = allocate([ 68, 0, 0, 0, 70, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.___func___ngram_search_bp2itor = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 98, 112, 50, 105, 116, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str678 = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 102, 119, 100, 102, 108, 97, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4682 = allocate([ 102, 119, 100, 102, 108, 97, 116, 58, 32, 109, 105, 110, 95, 101, 102, 95, 119, 105, 100, 116, 104, 32, 61, 32, 37, 100, 44, 32, 109, 97, 120, 95, 115, 102, 95, 119, 105, 110, 32, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6684 = allocate([ 84, 79, 84, 65, 76, 32, 102, 119, 100, 102, 108, 97, 116, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7685 = allocate([ 84, 79, 84, 65, 76, 32, 102, 119, 100, 102, 108, 97, 116, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11689 = allocate([ 37, 56, 100, 32, 99, 104, 97, 110, 110, 101, 108, 115, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12690 = allocate([ 37, 56, 100, 32, 119, 111, 114, 100, 115, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13691 = allocate([ 37, 56, 100, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14692 = allocate([ 102, 119, 100, 102, 108, 97, 116, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15693 = allocate([ 102, 119, 100, 102, 108, 97, 116, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___destroy_fwdflat_chan = allocate([ 100, 101, 115, 116, 114, 111, 121, 95, 102, 119, 100, 102, 108, 97, 116, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16694 = allocate([ 110, 103, 115, 45, 62, 119, 111, 114, 100, 95, 99, 104, 97, 110, 91, 119, 105, 100, 93, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fwdflat_word_transition = allocate([ 102, 119, 100, 102, 108, 97, 116, 95, 119, 111, 114, 100, 95, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17695 = allocate([ 73, 83, 95, 83, 51, 83, 83, 73, 68, 40, 104, 109, 109, 95, 109, 112, 120, 95, 115, 115, 105, 100, 40, 38, 114, 104, 109, 109, 45, 62, 104, 109, 109, 44, 32, 48, 41, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fwdflat_prune_chan = allocate([ 102, 119, 100, 102, 108, 97, 116, 95, 112, 114, 117, 110, 101, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19697 = allocate([ 100, 105, 99, 116, 95, 105, 115, 95, 115, 105, 110, 103, 108, 101, 95, 112, 104, 111, 110, 101, 40, 112, 115, 95, 115, 101, 97, 114, 99, 104, 95, 100, 105, 99, 116, 40, 110, 103, 115, 41, 44, 32, 119, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___build_fwdflat_chan = allocate([ 98, 117, 105, 108, 100, 95, 102, 119, 100, 102, 108, 97, 116, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20698 = allocate([ 110, 103, 115, 45, 62, 119, 111, 114, 100, 95, 99, 104, 97, 110, 91, 119, 105, 100, 93, 32, 61, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21699 = allocate([ 85, 116, 116, 101, 114, 97, 110, 99, 101, 32, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121, 32, 99, 111, 110, 116, 97, 105, 110, 115, 32, 37, 100, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str712 = allocate([ 110, 103, 114, 97, 109, 95, 115, 101, 97, 114, 99, 104, 95, 102, 119, 100, 116, 114, 101, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str3715 = allocate([ 84, 79, 84, 65, 76, 32, 102, 119, 100, 116, 114, 101, 101, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str4716 = allocate([ 84, 79, 84, 65, 76, 32, 102, 119, 100, 116, 114, 101, 101, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6718 = allocate([ 37, 56, 100, 32, 119, 111, 114, 100, 115, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str7719 = allocate([ 37, 56, 100, 32, 115, 101, 110, 111, 110, 101, 115, 32, 101, 118, 97, 108, 117, 97, 116, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str8720 = allocate([ 37, 56, 100, 32, 99, 104, 97, 110, 110, 101, 108, 115, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 44, 32, 37, 100, 32, 49, 115, 116, 44, 32, 37, 100, 32, 108, 97, 115, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9721 = allocate([ 37, 56, 100, 32, 119, 111, 114, 100, 115, 32, 102, 111, 114, 32, 119, 104, 105, 99, 104, 32, 108, 97, 115, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 32, 101, 118, 97, 108, 117, 97, 116, 101, 100, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str10722 = allocate([ 37, 56, 100, 32, 99, 97, 110, 100, 105, 100, 97, 116, 101, 32, 119, 111, 114, 100, 115, 32, 102, 111, 114, 32, 101, 110, 116, 101, 114, 105, 110, 103, 32, 108, 97, 115, 116, 32, 112, 104, 111, 110, 101, 32, 40, 37, 100, 47, 102, 114, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11723 = allocate([ 102, 119, 100, 116, 114, 101, 101, 32, 37, 46, 50, 102, 32, 67, 80, 85, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12724 = allocate([ 102, 119, 100, 116, 114, 101, 101, 32, 37, 46, 50, 102, 32, 119, 97, 108, 108, 32, 37, 46, 51, 102, 32, 120, 82, 84, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___word_transition = allocate([ 119, 111, 114, 100, 95, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str13725 = allocate([ 104, 109, 109, 95, 109, 112, 120, 95, 115, 115, 105, 100, 40, 38, 114, 104, 109, 109, 45, 62, 104, 109, 109, 44, 32, 48, 41, 32, 33, 61, 32, 66, 65, 68, 95, 83, 83, 73, 68, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15727 = allocate([ 80, 65, 78, 73, 67, 58, 32, 78, 111, 32, 119, 111, 114, 115, 116, 32, 66, 80, 116, 97, 98, 108, 101, 32, 101, 110, 116, 114, 121, 32, 114, 101, 109, 97, 105, 110, 105, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___prune_word_chan = allocate([ 112, 114, 117, 110, 101, 95, 119, 111, 114, 100, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str16728 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 38, 104, 109, 109, 45, 62, 104, 109, 109, 41, 32, 62, 61, 32, 102, 114, 97, 109, 101, 95, 105, 100, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str17729 = allocate([ 33, 100, 105, 99, 116, 95, 105, 115, 95, 115, 105, 110, 103, 108, 101, 95, 112, 104, 111, 110, 101, 40, 112, 115, 95, 115, 101, 97, 114, 99, 104, 95, 100, 105, 99, 116, 40, 110, 103, 115, 41, 44, 32, 119, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___last_phone_transition = allocate([ 108, 97, 115, 116, 95, 112, 104, 111, 110, 101, 95, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str18730 = allocate([ 115, 116, 97, 114, 116, 95, 115, 99, 111, 114, 101, 32, 66, 69, 84, 84, 69, 82, 95, 84, 72, 65, 78, 32, 87, 79, 82, 83, 84, 95, 83, 67, 79, 82, 69, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str19731 = allocate([ 99, 97, 110, 100, 95, 115, 102, 91, 93, 32, 105, 110, 99, 114, 101, 97, 115, 101, 100, 32, 116, 111, 32, 37, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str20732 = allocate([ 33, 100, 105, 99, 116, 95, 102, 105, 108, 108, 101, 114, 95, 119, 111, 114, 100, 40, 112, 115, 95, 115, 101, 97, 114, 99, 104, 95, 100, 105, 99, 116, 40, 110, 103, 115, 41, 44, 32, 99, 97, 110, 100, 112, 45, 62, 119, 105, 100, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21733 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 38, 104, 109, 109, 45, 62, 104, 109, 109, 41, 32, 33, 61, 32, 110, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22734 = allocate([ 98, 105, 116, 118, 101, 99, 95, 105, 115, 95, 99, 108, 101, 97, 114, 40, 110, 103, 115, 45, 62, 119, 111, 114, 100, 95, 97, 99, 116, 105, 118, 101, 44, 32, 119, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___prune_nonroot_chan = allocate([ 112, 114, 117, 110, 101, 95, 110, 111, 110, 114, 111, 111, 116, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___eval_word_chan = allocate([ 101, 118, 97, 108, 95, 119, 111, 114, 100, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23735 = allocate([ 98, 105, 116, 118, 101, 99, 95, 105, 115, 95, 115, 101, 116, 40, 110, 103, 115, 45, 62, 119, 111, 114, 100, 95, 97, 99, 116, 105, 118, 101, 44, 32, 119, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str24736 = allocate([ 110, 103, 115, 45, 62, 119, 111, 114, 100, 95, 99, 104, 97, 110, 91, 119, 93, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str25737 = allocate([ 104, 109, 109, 95, 102, 114, 97, 109, 101, 40, 38, 104, 109, 109, 45, 62, 104, 109, 109, 41, 32, 61, 61, 32, 102, 114, 97, 109, 101, 95, 105, 100, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___eval_nonroot_chan = allocate([ 101, 118, 97, 108, 95, 110, 111, 110, 114, 111, 111, 116, 95, 99, 104, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26738 = allocate([ 67, 114, 101, 97, 116, 105, 110, 103, 32, 115, 101, 97, 114, 99, 104, 32, 116, 114, 101, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str27739 = allocate([ 98, 101, 102, 111, 114, 101, 58, 32, 37, 100, 32, 114, 111, 111, 116, 44, 32, 37, 100, 32, 110, 111, 110, 45, 114, 111, 111, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 44, 32, 37, 100, 32, 115, 105, 110, 103, 108, 101, 45, 112, 104, 111, 110, 101, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28740 = allocate([ 97, 102, 116, 101, 114, 58, 32, 109, 97, 120, 32, 110, 111, 110, 114, 111, 111, 116, 32, 99, 104, 97, 110, 32, 105, 110, 99, 114, 101, 97, 115, 101, 100, 32, 116, 111, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str30742 = allocate([ 78, 111, 32, 119, 111, 114, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 104, 97, 115, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 32, 105, 110, 32, 116, 104, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31743 = allocate([ 97, 102, 116, 101, 114, 58, 32, 37, 100, 32, 114, 111, 111, 116, 44, 32, 37, 100, 32, 110, 111, 110, 45, 114, 111, 111, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 44, 32, 37, 100, 32, 115, 105, 110, 103, 108, 101, 45, 112, 104, 111, 110, 101, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32744 = allocate([ 37, 100, 32, 117, 110, 105, 113, 117, 101, 32, 105, 110, 105, 116, 105, 97, 108, 32, 100, 105, 112, 104, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str34746 = allocate([ 70, 105, 108, 108, 101, 114, 32, 119, 111, 114, 100, 32, 37, 100, 32, 61, 32, 37, 115, 32, 104, 97, 115, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 111, 110, 101, 32, 112, 104, 111, 110, 101, 44, 32, 105, 103, 110, 111, 114, 105, 110, 103, 32, 105, 116, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35747 = allocate([ 37, 100, 32, 114, 111, 111, 116, 44, 32, 37, 100, 32, 110, 111, 110, 45, 114, 111, 111, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 44, 32, 37, 100, 32, 115, 105, 110, 103, 108, 101, 45, 112, 104, 111, 110, 101, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str760 = allocate([ 112, 104, 111, 110, 101, 95, 108, 111, 111, 112, 95, 115, 101, 97, 114, 99, 104, 46, 99, 0 ], "i8", ALLOC_STATIC);

	_phone_loop_search_funcs = allocate([ 0, 0, 0, 0, 72, 0, 0, 0, 74, 0, 0, 0, 76, 0, 0, 0, 78, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 84, 0, 0, 0, 86, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str5765 = allocate([ 83, 116, 97, 116, 101, 32, 98, 101, 97, 109, 32, 37, 100, 32, 80, 104, 111, 110, 101, 32, 101, 120, 105, 116, 32, 98, 101, 97, 109, 32, 37, 100, 32, 73, 110, 115, 101, 114, 116, 105, 111, 110, 32, 112, 101, 110, 97, 108, 116, 121, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str6766 = allocate([ 112, 104, 111, 110, 101, 95, 108, 111, 111, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str8768 = allocate([ 72, 121, 112, 111, 116, 104, 101, 115, 101, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 102, 114, 111, 109, 32, 112, 104, 111, 110, 101, 32, 108, 111, 111, 112, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str9769 = allocate([ 80, 111, 115, 116, 101, 114, 105, 111, 114, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 105, 101, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 102, 114, 111, 109, 32, 112, 104, 111, 110, 101, 32, 108, 111, 111, 112, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str14785 = allocate([ 100, 101, 99, 111, 100, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str15786 = allocate([ 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str23794 = allocate([ 78, 111, 32, 115, 101, 97, 114, 99, 104, 32, 109, 111, 100, 117, 108, 101, 32, 105, 115, 32, 115, 101, 108, 101, 99, 116, 101, 100, 44, 32, 100, 105, 100, 32, 121, 111, 117, 32, 102, 111, 114, 103, 101, 116, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 97, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 111, 114, 32, 103, 114, 97, 109, 109, 97, 114, 63, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str26797 = allocate([ 46, 109, 102, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str28799 = allocate([ 87, 114, 105, 116, 105, 110, 103, 32, 77, 70, 67, 67, 32, 108, 111, 103, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31802 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 77, 70, 67, 67, 32, 108, 111, 103, 32, 102, 105, 108, 101, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32803 = allocate([ 46, 114, 97, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str33804 = allocate([ 87, 114, 105, 116, 105, 110, 103, 32, 114, 97, 119, 32, 97, 117, 100, 105, 111, 32, 108, 111, 103, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str34805 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 114, 97, 119, 32, 97, 117, 100, 105, 111, 32, 108, 111, 103, 32, 102, 105, 108, 101, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str35806 = allocate([ 46, 115, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str36807 = allocate([ 87, 114, 105, 116, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 32, 115, 99, 111, 114, 101, 32, 108, 111, 103, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str37808 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 115, 101, 110, 111, 110, 101, 32, 115, 99, 111, 114, 101, 32, 108, 111, 103, 32, 102, 105, 108, 101, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str39810 = allocate([ 37, 115, 58, 32, 37, 115, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str40811 = allocate([ 37, 45, 50, 48, 115, 32, 37, 45, 53, 115, 32, 37, 45, 53, 115, 32, 37, 45, 53, 115, 32, 37, 45, 49, 48, 115, 32, 37, 45, 49, 48, 115, 32, 37, 45, 51, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41812 = allocate([ 119, 111, 114, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42813 = allocate([ 115, 116, 97, 114, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str43814 = allocate([ 101, 110, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str44815 = allocate([ 112, 112, 114, 111, 98, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str45816 = allocate([ 97, 115, 99, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str46817 = allocate([ 108, 115, 99, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str47818 = allocate([ 108, 98, 97, 99, 107, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str48819 = allocate([ 37, 45, 50, 48, 115, 32, 37, 45, 53, 100, 32, 37, 45, 53, 100, 32, 37, 45, 49, 46, 51, 102, 32, 37, 45, 49, 48, 100, 32, 37, 45, 49, 48, 100, 32, 37, 45, 51, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str287 = allocate([ 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 47, 109, 111, 100, 101, 108, 47, 104, 109, 109, 47, 101, 110, 95, 85, 83, 47, 104, 117, 98, 52, 119, 115, 106, 95, 115, 99, 95, 56, 107, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str288 = allocate([ 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 47, 109, 111, 100, 101, 108, 47, 108, 109, 47, 101, 110, 95, 85, 83, 47, 104, 117, 98, 52, 46, 53, 48, 48, 48, 46, 68, 77, 80, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str289 = allocate([ 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 47, 109, 111, 100, 101, 108, 47, 108, 109, 47, 101, 110, 95, 85, 83, 47, 99, 109, 117, 48, 55, 97, 46, 100, 105, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str290 = allocate([ 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 47, 109, 111, 100, 101, 108, 47, 104, 109, 109, 47, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 102, 105, 110, 100, 32, 109, 100, 101, 102, 32, 102, 105, 108, 101, 32, 105, 110, 115, 105, 100, 101, 32, 116, 104, 101, 32, 109, 111, 100, 101, 108, 32, 102, 111, 108, 100, 101, 114, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 119, 105, 116, 104, 32, 45, 104, 109, 109, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str292 = allocate([ 47, 117, 115, 114, 47, 108, 111, 99, 97, 108, 47, 115, 104, 97, 114, 101, 47, 112, 111, 99, 107, 101, 116, 115, 112, 104, 105, 110, 120, 47, 109, 111, 100, 101, 108, 47, 108, 109, 47, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str293 = allocate([ 109, 100, 101, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str294 = allocate([ 109, 101, 97, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str295 = allocate([ 118, 97, 114, 105, 97, 110, 99, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str296 = allocate([ 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 95, 109, 97, 116, 114, 105, 99, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str297 = allocate([ 109, 105, 120, 116, 117, 114, 101, 95, 119, 101, 105, 103, 104, 116, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str298 = allocate([ 115, 101, 110, 100, 117, 109, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str299 = allocate([ 110, 111, 105, 115, 101, 100, 105, 99, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str300 = allocate([ 102, 101, 97, 116, 117, 114, 101, 95, 116, 114, 97, 110, 115, 102, 111, 114, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301 = allocate([ 102, 101, 97, 116, 46, 112, 97, 114, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str302 = allocate([ 115, 101, 110, 109, 103, 97, 117, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str304 = allocate([ 47, 109, 100, 101, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str919 = allocate([ 112, 115, 95, 108, 97, 116, 116, 105, 99, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ps_lattice_delete_unreachable = allocate([ 112, 115, 95, 108, 97, 116, 116, 105, 99, 101, 95, 100, 101, 108, 101, 116, 101, 95, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1920 = allocate([ 110, 111, 100, 101, 45, 62, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str63982 = allocate([ 60, 47, 115, 62, 0 ], "i8", ALLOC_STATIC);

	_ps_lattice_segfuncs = allocate([ 88, 0, 0, 0, 90, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.___func___ps_lattice_bestpath = allocate([ 112, 115, 95, 108, 97, 116, 116, 105, 99, 101, 95, 98, 101, 115, 116, 112, 97, 116, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str68987 = allocate([ 108, 105, 110, 107, 45, 62, 112, 97, 116, 104, 95, 115, 99, 114, 32, 33, 61, 32, 77, 65, 88, 95, 78, 69, 71, 95, 73, 78, 84, 51, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str69988 = allocate([ 78, 111, 114, 109, 97, 108, 105, 122, 101, 114, 32, 80, 40, 79, 41, 32, 61, 32, 97, 108, 112, 104, 97, 40, 37, 115, 58, 37, 100, 58, 37, 100, 41, 32, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71990 = allocate([ 110, 103, 114, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72991 = allocate([ 74, 111, 105, 110, 116, 32, 80, 40, 79, 44, 83, 41, 32, 61, 32, 37, 100, 32, 80, 40, 83, 124, 79, 41, 32, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1021 = allocate([ 112, 115, 95, 109, 108, 108, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31024 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 77, 76, 76, 82, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51026 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 77, 76, 76, 82, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81029 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 77, 76, 76, 82, 32, 99, 108, 97, 115, 115, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91030 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 101, 97, 116, 117, 114, 101, 32, 115, 116, 114, 101, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101031 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 115, 116, 114, 101, 97, 109, 32, 108, 101, 110, 103, 116, 104, 32, 102, 111, 114, 32, 102, 101, 97, 116, 117, 114, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111032 = allocate([ 37, 102, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121033 = allocate([ 70, 97, 105, 108, 101, 100, 32, 114, 101, 97, 100, 105, 110, 103, 32, 77, 76, 76, 82, 32, 114, 111, 116, 97, 116, 105, 111, 110, 32, 40, 37, 100, 44, 37, 100, 44, 37, 100, 44, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131034 = allocate([ 70, 97, 105, 108, 101, 100, 32, 114, 101, 97, 100, 105, 110, 103, 32, 77, 76, 76, 82, 32, 98, 105, 97, 115, 32, 40, 37, 100, 44, 37, 100, 44, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141035 = allocate([ 70, 97, 105, 108, 101, 100, 32, 114, 101, 97, 100, 105, 110, 103, 32, 77, 76, 76, 82, 32, 118, 97, 114, 105, 97, 110, 99, 101, 32, 115, 99, 97, 108, 101, 32, 40, 37, 100, 44, 37, 100, 44, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1040 = allocate([ 112, 116, 109, 95, 109, 103, 97, 117, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71047 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 101, 120, 99, 101, 101, 100, 115, 32, 50, 53, 54, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81048 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 100, 101, 98, 111, 111, 107, 115, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 105, 112, 104, 111, 110, 101, 115, 44, 32, 100, 111, 101, 115, 110, 39, 116, 32, 108, 111, 111, 107, 32, 108, 105, 107, 101, 32, 80, 84, 77, 58, 32, 37, 100, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161056 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 116, 111, 112, 45, 78, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181058 = allocate([ 112, 116, 109, 0 ], "i8", ALLOC_STATIC);

	_ptm_mgau_funcs = allocate([ 0, 0, 0, 0, 92, 0, 0, 0, 94, 0, 0, 0, 96, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str221062 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 109, 105, 120, 116, 117, 114, 101, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___ptm_mgau_codebook_eval = allocate([ 112, 116, 109, 95, 109, 103, 97, 117, 95, 99, 111, 100, 101, 98, 111, 111, 107, 95, 101, 118, 97, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str631103 = allocate([ 110, 111, 114, 109, 32, 33, 61, 32, 48, 120, 55, 102, 102, 102, 102, 102, 102, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1106 = allocate([ 115, 50, 95, 115, 101, 109, 105, 95, 109, 103, 97, 117, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21108 = allocate([ 76, 111, 103, 32, 98, 97, 115, 101, 32, 37, 102, 32, 105, 115, 32, 116, 111, 111, 32, 115, 109, 97, 108, 108, 32, 116, 111, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 32, 97, 100, 100, 32, 116, 97, 98, 108, 101, 32, 105, 110, 32, 56, 32, 98, 105, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61112 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 58, 32, 37, 100, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71113 = allocate([ 68, 105, 109, 101, 110, 115, 105, 111, 110, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 32, 37, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 58, 32, 37, 100, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151121 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 116, 111, 112, 45, 78, 58, 32, 37, 100, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161122 = allocate([ 84, 111, 112, 45, 78, 32, 98, 101, 97, 109, 115, 58, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201126 = allocate([ 115, 50, 95, 115, 101, 109, 105, 0 ], "i8", ALLOC_STATIC);

	_s2_semi_mgau_funcs = allocate([ 0, 0, 0, 0, 98, 0, 0, 0, 100, 0, 0, 0, 102, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str211127 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241130 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str311137 = allocate([ 98, 105, 111, 95, 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 97, 114, 114, 97, 121, 115, 105, 122, 101, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321138 = allocate([ 35, 70, 101, 97, 116, 117, 114, 101, 115, 32, 115, 116, 114, 101, 97, 109, 115, 40, 37, 100, 41, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331139 = allocate([ 37, 115, 58, 32, 35, 102, 108, 111, 97, 116, 51, 50, 115, 40, 37, 100, 41, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 104, 101, 97, 100, 101, 114, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 115, 58, 32, 37, 100, 32, 120, 32, 37, 100, 32, 120, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str341140 = allocate([ 98, 105, 111, 95, 102, 114, 101, 97, 100, 40, 37, 115, 41, 32, 40, 97, 114, 114, 97, 121, 100, 97, 116, 97, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str351141 = allocate([ 87, 101, 105, 103, 104, 116, 32, 110, 111, 114, 109, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 37, 100, 32, 115, 101, 110, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str361142 = allocate([ 77, 111, 114, 101, 32, 100, 97, 116, 97, 32, 116, 104, 97, 110, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str371143 = allocate([ 82, 101, 97, 100, 32, 37, 100, 32, 120, 32, 37, 100, 32, 120, 32, 37, 100, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str391145 = allocate([ 76, 111, 97, 100, 105, 110, 103, 32, 115, 101, 110, 111, 110, 101, 115, 32, 102, 114, 111, 109, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str411147 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 105, 116, 108, 101, 32, 115, 105, 122, 101, 32, 102, 114, 111, 109, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str421148 = allocate([ 84, 105, 116, 108, 101, 32, 108, 101, 110, 103, 116, 104, 32, 37, 120, 32, 105, 110, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 32, 37, 115, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str431149 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 116, 105, 116, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str441150 = allocate([ 66, 97, 100, 32, 116, 105, 116, 108, 101, 32, 105, 110, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str461152 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 115, 105, 122, 101, 32, 102, 114, 111, 109, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str471153 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str481154 = allocate([ 66, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 105, 110, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str491155 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 115, 116, 114, 105, 110, 103, 32, 115, 105, 122, 101, 32, 102, 114, 111, 109, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str501156 = allocate([ 102, 101, 97, 116, 117, 114, 101, 95, 99, 111, 117, 110, 116, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str511157 = allocate([ 109, 105, 120, 116, 117, 114, 101, 95, 99, 111, 117, 110, 116, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str521158 = allocate([ 109, 111, 100, 101, 108, 95, 99, 111, 117, 110, 116, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str531159 = allocate([ 99, 108, 117, 115, 116, 101, 114, 95, 99, 111, 117, 110, 116, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str541160 = allocate([ 99, 108, 117, 115, 116, 101, 114, 95, 98, 105, 116, 115, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str551161 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 35, 114, 111, 119, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str561162 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 35, 99, 111, 108, 117, 109, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str571163 = allocate([ 82, 111, 119, 115, 58, 32, 37, 100, 44, 32, 67, 111, 108, 117, 109, 110, 115, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str581164 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 101, 97, 116, 117, 114, 101, 32, 115, 116, 114, 101, 97, 109, 115, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 37, 100, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str591165 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 100, 101, 110, 115, 105, 116, 105, 101, 115, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 37, 100, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str601166 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 101, 110, 111, 110, 101, 115, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 37, 100, 32, 33, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str611167 = allocate([ 67, 108, 117, 115, 116, 101, 114, 32, 99, 111, 117, 110, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 48, 44, 32, 49, 53, 44, 32, 111, 114, 32, 49, 54, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str621168 = allocate([ 67, 108, 117, 115, 116, 101, 114, 32, 99, 111, 117, 110, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 52, 32, 111, 114, 32, 56, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str631169 = allocate([ 85, 115, 105, 110, 103, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 112, 101, 100, 32, 73, 47, 79, 32, 102, 111, 114, 32, 115, 101, 110, 111, 110, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str641170 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 37, 100, 32, 98, 121, 116, 101, 115, 32, 102, 114, 111, 109, 32, 115, 101, 110, 100, 117, 109, 112, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61184 = allocate([ 82, 101, 110, 111, 114, 109, 97, 108, 105, 122, 105, 110, 103, 32, 83, 99, 111, 114, 101, 115, 32, 97, 116, 32, 102, 114, 97, 109, 101, 32, 37, 100, 44, 32, 98, 101, 115, 116, 32, 115, 99, 111, 114, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31192 = allocate([ 116, 109, 97, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51194 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 72, 77, 77, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 109, 97, 116, 114, 105, 99, 101, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81197 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101199 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 102, 114, 111, 109, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141203 = allocate([ 86, 101, 114, 115, 105, 111, 110, 32, 109, 105, 115, 109, 97, 116, 99, 104, 40, 37, 115, 41, 58, 32, 37, 115, 44, 32, 101, 120, 112, 101, 99, 116, 105, 110, 103, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161205 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 102, 114, 111, 109, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str171206 = allocate([ 37, 115, 58, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 99, 101, 115, 32, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 115, 32, 108, 105, 109, 105, 116, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181207 = allocate([ 37, 115, 58, 32, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 46, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 115, 111, 117, 114, 99, 101, 32, 115, 116, 97, 116, 101, 115, 32, 40, 37, 100, 41, 32, 33, 61, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 97, 114, 103, 101, 116, 32, 115, 116, 97, 116, 101, 115, 32, 40, 37, 100, 41, 45, 49, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191208 = allocate([ 37, 115, 58, 32, 73, 110, 118, 97, 108, 105, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 46, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 32, 40, 37, 100, 41, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 101, 120, 112, 101, 99, 116, 101, 100, 32, 97, 114, 114, 97, 121, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 58, 32, 37, 100, 32, 120, 32, 37, 100, 32, 120, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201209 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 32, 37, 100, 32, 102, 114, 111, 109, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str211210 = allocate([ 78, 111, 114, 109, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 32, 37, 100, 32, 102, 114, 111, 109, 32, 115, 116, 97, 116, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231212 = allocate([ 78, 111, 110, 45, 101, 109, 112, 116, 121, 32, 102, 105, 108, 101, 32, 98, 101, 121, 111, 110, 100, 32, 101, 110, 100, 32, 111, 102, 32, 100, 97, 116, 97, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241213 = allocate([ 84, 109, 97, 116, 32, 110, 111, 116, 32, 117, 112, 112, 101, 114, 32, 116, 114, 105, 97, 110, 103, 117, 108, 97, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251214 = allocate([ 84, 111, 112, 111, 108, 111, 103, 121, 32, 110, 111, 116, 32, 76, 101, 102, 116, 45, 116, 111, 45, 82, 105, 103, 104, 116, 32, 111, 114, 32, 66, 97, 107, 105, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281217 = allocate([ 116, 109, 97, 116, 91, 37, 100, 93, 91, 37, 100, 93, 91, 37, 100, 93, 32, 61, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101240 = allocate([ 102, 101, 95, 105, 110, 116, 101, 114, 102, 97, 99, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121242 = allocate([ 102, 102, 116, 58, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 112, 111, 105, 110, 116, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 32, 112, 111, 119, 101, 114, 32, 111, 102, 32, 50, 32, 40, 105, 115, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131243 = allocate([ 70, 70, 84, 58, 32, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 112, 111, 105, 110, 116, 115, 32, 109, 117, 115, 116, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 111, 114, 32, 101, 113, 117, 97, 108, 32, 116, 111, 32, 102, 114, 97, 109, 101, 32, 115, 105, 122, 101, 32, 40, 37, 100, 32, 115, 97, 109, 112, 108, 101, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161246 = allocate([ 100, 99, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181248 = allocate([ 104, 116, 107, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191249 = allocate([ 73, 110, 118, 97, 108, 105, 100, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 116, 121, 112, 101, 32, 40, 118, 97, 108, 117, 101, 115, 32, 97, 114, 101, 32, 39, 100, 99, 116, 39, 44, 32, 39, 108, 101, 103, 97, 99, 121, 39, 44, 32, 39, 104, 116, 107, 39, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231253 = allocate([ 67, 117, 114, 114, 101, 110, 116, 32, 70, 69, 32, 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241254 = allocate([ 9, 83, 97, 109, 112, 108, 105, 110, 103, 32, 82, 97, 116, 101, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 102, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251255 = allocate([ 9, 70, 114, 97, 109, 101, 32, 83, 105, 122, 101, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261256 = allocate([ 9, 70, 114, 97, 109, 101, 32, 83, 104, 105, 102, 116, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str271257 = allocate([ 9, 70, 70, 84, 32, 83, 105, 122, 101, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281258 = allocate([ 9, 76, 111, 119, 101, 114, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291259 = allocate([ 9, 85, 112, 112, 101, 114, 32, 70, 114, 101, 113, 117, 101, 110, 99, 121, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301260 = allocate([ 9, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 105, 108, 116, 101, 114, 115, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str311261 = allocate([ 9, 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 79, 118, 101, 114, 102, 108, 111, 119, 32, 83, 97, 109, 112, 115, 58, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321262 = allocate([ 9, 83, 116, 97, 114, 116, 32, 85, 116, 116, 32, 83, 116, 97, 116, 117, 115, 58, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331263 = allocate([ 87, 105, 108, 108, 32, 37, 115, 114, 101, 109, 111, 118, 101, 32, 68, 67, 32, 111, 102, 102, 115, 101, 116, 32, 97, 116, 32, 102, 114, 97, 109, 101, 32, 108, 101, 118, 101, 108, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str351265 = allocate([ 110, 111, 116, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str361266 = allocate([ 87, 105, 108, 108, 32, 97, 100, 100, 32, 100, 105, 116, 104, 101, 114, 32, 116, 111, 32, 97, 117, 100, 105, 111, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str371267 = allocate([ 68, 105, 116, 104, 101, 114, 32, 115, 101, 101, 100, 101, 100, 32, 119, 105, 116, 104, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str381268 = allocate([ 87, 105, 108, 108, 32, 110, 111, 116, 32, 97, 100, 100, 32, 100, 105, 116, 104, 101, 114, 32, 116, 111, 32, 97, 117, 100, 105, 111, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str391269 = allocate([ 87, 105, 108, 108, 32, 97, 112, 112, 108, 121, 32, 115, 105, 110, 101, 45, 99, 117, 114, 118, 101, 32, 108, 105, 102, 116, 101, 114, 105, 110, 103, 44, 32, 112, 101, 114, 105, 111, 100, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str401270 = allocate([ 87, 105, 108, 108, 32, 37, 115, 110, 111, 114, 109, 97, 108, 105, 122, 101, 32, 102, 105, 108, 116, 101, 114, 115, 32, 116, 111, 32, 117, 110, 105, 116, 32, 97, 114, 101, 97, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str411271 = allocate([ 87, 105, 108, 108, 32, 37, 115, 114, 111, 117, 110, 100, 32, 102, 105, 108, 116, 101, 114, 32, 102, 114, 101, 113, 117, 101, 110, 99, 105, 101, 115, 32, 116, 111, 32, 68, 70, 84, 32, 112, 111, 105, 110, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str421272 = allocate([ 87, 105, 108, 108, 32, 37, 115, 117, 115, 101, 32, 100, 111, 117, 98, 108, 101, 32, 98, 97, 110, 100, 119, 105, 100, 116, 104, 32, 105, 110, 32, 109, 101, 108, 32, 102, 105, 108, 116, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str441274 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 70, 70, 84, 32, 112, 111, 105, 110, 116, 115, 32, 104, 97, 115, 32, 116, 111, 32, 98, 101, 32, 97, 32, 112, 111, 119, 101, 114, 32, 111, 102, 32, 50, 32, 104, 105, 103, 104, 101, 114, 32, 116, 104, 97, 110, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str461276 = allocate([ 89, 111, 117, 32, 97, 114, 101, 32, 117, 115, 105, 110, 103, 32, 116, 104, 101, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 109, 101, 99, 104, 97, 110, 105, 115, 109, 32, 116, 111, 32, 103, 101, 110, 101, 114, 97, 116, 101, 32, 116, 104, 101, 32, 115, 101, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str471277 = allocate([ 89, 111, 117, 32, 97, 114, 101, 32, 117, 115, 105, 110, 103, 32, 37, 100, 32, 97, 115, 32, 116, 104, 101, 32, 115, 101, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fe_process_frames = allocate([ 102, 101, 95, 112, 114, 111, 99, 101, 115, 115, 95, 102, 114, 97, 109, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str481278 = allocate([ 111, 117, 116, 105, 100, 120, 32, 60, 32, 102, 114, 97, 109, 101, 95, 99, 111, 117, 110, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str491279 = allocate([ 42, 105, 110, 111, 117, 116, 95, 110, 115, 97, 109, 112, 115, 32, 62, 61, 32, 40, 115, 105, 122, 101, 95, 116, 41, 102, 101, 45, 62, 102, 114, 97, 109, 101, 95, 115, 104, 105, 102, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str961326 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 32, 116, 104, 101, 32, 119, 97, 114, 112, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1341 = allocate([ 102, 101, 95, 115, 105, 103, 112, 114, 111, 99, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21343 = allocate([ 79, 117, 116, 32, 111, 102, 32, 82, 97, 110, 103, 101, 58, 32, 108, 111, 119, 32, 32, 102, 105, 108, 116, 101, 114, 32, 101, 100, 103, 101, 32, 61, 32, 37, 102, 32, 40, 37, 102, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31344 = allocate([ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 104, 105, 103, 104, 32, 102, 105, 108, 116, 101, 114, 32, 101, 100, 103, 101, 32, 61, 32, 37, 102, 32, 40, 37, 102, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51346 = allocate([ 87, 84, 70, 44, 32, 37, 102, 32, 60, 32, 37, 102, 32, 62, 32, 37, 102, 10, 0 ], "i8", ALLOC_STATIC);

	_name2id = allocate(16, "i8", ALLOC_STATIC);

	___name2id = allocate(16, "i8", ALLOC_STATIC);

	STRING_TABLE.__str1369 = allocate([ 102, 101, 95, 119, 97, 114, 112, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21371 = allocate([ 85, 110, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 119, 97, 114, 112, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31372 = allocate([ 73, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 97, 114, 101, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41373 = allocate([ 9, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	_fe_warp_conf = allocate([ 104, 0, 0, 0, 106, 0, 0, 0, 108, 0, 0, 0, 110, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 116, 0, 0, 0, 118, 0, 0, 0, 120, 0, 0, 0, 122, 0, 0, 0, 124, 0, 0, 0, 126, 0, 0, 0, 128, 0, 0, 0, 130, 0, 0, 0, 132, 0, 0, 0, 134, 0, 0, 0, 136, 0, 0, 0, 138, 0, 0, 0, 140, 0, 0, 0, 142, 0, 0, 0, 144, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str61375 = allocate([ 102, 101, 97, 116, 32, 109, 111, 100, 117, 108, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 32, 119, 47, 32, 97, 32, 118, 97, 108, 105, 100, 32, 73, 68, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71376 = allocate([ 102, 101, 95, 119, 97, 114, 112, 32, 109, 111, 100, 117, 108, 101, 32, 109, 105, 115, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 32, 119, 105, 116, 104, 32, 105, 110, 118, 97, 108, 105, 100, 32, 102, 101, 95, 119, 97, 114, 112, 95, 105, 100, 32, 37, 117, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81377 = allocate([ 102, 101, 95, 119, 97, 114, 112, 32, 109, 111, 100, 117, 108, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 99, 111, 110, 102, 105, 103, 117, 114, 101, 100, 32, 119, 47, 32, 97, 32, 118, 97, 108, 105, 100, 32, 73, 68, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101379 = allocate([ 105, 110, 118, 101, 114, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111380 = allocate([ 108, 105, 110, 101, 97, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121381 = allocate([ 112, 105, 101, 99, 101, 119, 105, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141383 = allocate([ 97, 102, 102, 105, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151384 = allocate([ 112, 105, 101, 99, 101, 119, 105, 115, 101, 95, 108, 105, 110, 101, 97, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1393 = allocate([ 97, 102, 102, 105, 110, 101, 32, 58, 61, 61, 32, 60, 32, 119, 39, 32, 61, 32, 97, 32, 42, 32, 120, 32, 43, 32, 98, 32, 62, 0 ], "i8", ALLOC_STATIC);

	_nyquist_frequency = allocate(4, "i8", ALLOC_STATIC);

	_is_neutral_b = allocate(4, "i8", ALLOC_STATIC);

	_p_str = allocate(256, "i8", ALLOC_STATIC);

	_params = allocate([ 1, 0, 0, 0, 0, 0, 0, 0 ], [ "float", 0, 0, 0, "float", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str21395 = allocate([ 102, 101, 95, 119, 97, 114, 112, 95, 97, 102, 102, 105, 110, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41397 = allocate([ 65, 102, 102, 105, 110, 101, 32, 119, 97, 114, 112, 105, 110, 103, 32, 116, 97, 107, 101, 115, 32, 117, 112, 32, 116, 111, 32, 116, 119, 111, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 44, 32, 37, 115, 32, 105, 103, 110, 111, 114, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51398 = allocate([ 65, 102, 102, 105, 110, 101, 32, 119, 97, 114, 112, 105, 110, 103, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 115, 108, 111, 112, 101, 32, 122, 101, 114, 111, 44, 32, 119, 97, 114, 112, 105, 110, 103, 32, 110, 111, 116, 32, 97, 112, 112, 108, 105, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1417 = allocate([ 105, 110, 118, 101, 114, 115, 101, 95, 108, 105, 110, 101, 97, 114, 32, 58, 61, 61, 32, 60, 32, 119, 39, 32, 61, 32, 120, 32, 47, 32, 97, 32, 62, 0 ], "i8", ALLOC_STATIC);

	_nyquist_frequency1420 = allocate(4, "i8", ALLOC_STATIC);

	_is_neutral1421_b = allocate(4, "i8", ALLOC_STATIC);

	_p_str1422 = allocate(256, "i8", ALLOC_STATIC);

	_params1423 = allocate([ 1, 0, 0, 0 ], [ "float", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str21424 = allocate([ 102, 101, 95, 119, 97, 114, 112, 95, 105, 110, 118, 101, 114, 115, 101, 95, 108, 105, 110, 101, 97, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41426 = allocate([ 73, 110, 118, 101, 114, 115, 101, 32, 108, 105, 110, 101, 97, 114, 32, 119, 97, 114, 112, 105, 110, 103, 32, 116, 97, 107, 101, 115, 32, 111, 110, 108, 121, 32, 111, 110, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 44, 32, 37, 115, 32, 105, 103, 110, 111, 114, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51427 = allocate([ 73, 110, 118, 101, 114, 115, 101, 32, 108, 105, 110, 101, 97, 114, 32, 119, 97, 114, 112, 105, 110, 103, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 115, 108, 111, 112, 101, 32, 122, 101, 114, 111, 44, 32, 119, 97, 114, 112, 105, 110, 103, 32, 110, 111, 116, 32, 97, 112, 112, 108, 105, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1446 = allocate([ 112, 105, 101, 99, 101, 119, 105, 115, 101, 95, 108, 105, 110, 101, 97, 114, 32, 58, 61, 61, 32, 60, 32, 119, 39, 32, 61, 32, 97, 32, 42, 32, 119, 44, 32, 119, 32, 60, 32, 70, 32, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11447 = allocate([ 32, 9, 0 ], "i8", ALLOC_STATIC);

	_nyquist_frequency1448 = allocate(4, "i8", ALLOC_STATIC);

	_is_neutral1449_b = allocate(4, "i8", ALLOC_STATIC);

	_p_str1450 = allocate(256, "i8", ALLOC_STATIC);

	_params1451 = allocate([ 1, 0, 0, 0, 6800, 0, 0, 0 ], [ "float", 0, 0, 0, "float", 0, 0, 0 ], ALLOC_STATIC);

	_final_piece = allocate(8, "i8", ALLOC_STATIC);

	STRING_TABLE.__str21452 = allocate([ 102, 101, 95, 119, 97, 114, 112, 95, 112, 105, 101, 99, 101, 119, 105, 115, 101, 95, 108, 105, 110, 101, 97, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41454 = allocate([ 80, 105, 101, 99, 101, 119, 105, 115, 101, 32, 108, 105, 110, 101, 97, 114, 32, 119, 97, 114, 112, 105, 110, 103, 32, 116, 97, 107, 101, 115, 32, 117, 112, 32, 116, 111, 32, 116, 119, 111, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 44, 32, 37, 115, 32, 105, 103, 110, 111, 114, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51455 = allocate([ 80, 105, 101, 99, 101, 119, 105, 115, 101, 32, 108, 105, 110, 101, 97, 114, 32, 119, 97, 114, 112, 105, 110, 103, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 115, 108, 111, 112, 101, 32, 122, 101, 114, 111, 44, 32, 119, 97, 114, 112, 105, 110, 103, 32, 110, 111, 116, 32, 97, 112, 112, 108, 105, 101, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71457 = allocate([ 87, 97, 114, 112, 32, 102, 97, 99, 116, 111, 114, 32, 37, 103, 32, 114, 101, 115, 117, 108, 116, 115, 32, 105, 110, 32, 102, 114, 101, 113, 117, 101, 110, 99, 121, 32, 40, 37, 46, 49, 102, 41, 32, 104, 105, 103, 104, 101, 114, 32, 116, 104, 97, 110, 32, 78, 121, 113, 117, 105, 115, 116, 32, 40, 37, 46, 49, 102, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81458 = allocate([ 37, 115, 91, 37, 48, 52, 117, 93, 58, 32, 37, 54, 46, 51, 102, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11476 = allocate([ 109, 97, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21477 = allocate([ 101, 109, 97, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31478 = allocate([ 110, 111, 105, 115, 101, 0 ], "i8", ALLOC_STATIC);

	_agc_type_str = allocate(16, "i8", ALLOC_STATIC);

	STRING_TABLE.__str41479 = allocate([ 97, 103, 99, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61481 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 65, 71, 67, 32, 116, 121, 112, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81483 = allocate([ 65, 71, 67, 77, 97, 120, 58, 32, 111, 98, 115, 61, 109, 97, 120, 61, 32, 37, 46, 50, 102, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91484 = allocate([ 65, 71, 67, 69, 77, 97, 120, 58, 32, 109, 97, 120, 61, 32, 37, 46, 50, 102, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101485 = allocate([ 65, 71, 67, 69, 77, 97, 120, 58, 32, 111, 98, 115, 61, 32, 37, 46, 50, 102, 44, 32, 110, 101, 119, 61, 32, 37, 46, 50, 102, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111486 = allocate([ 65, 71, 67, 32, 78, 79, 73, 83, 69, 58, 32, 109, 97, 120, 61, 32, 37, 54, 46, 51, 102, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21493 = allocate([ 112, 114, 105, 111, 114, 0 ], "i8", ALLOC_STATIC);

	_cmn_type_str = allocate(12, "i8", ALLOC_STATIC);

	STRING_TABLE.__str31494 = allocate([ 99, 109, 110, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51496 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 67, 77, 78, 32, 116, 121, 112, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71498 = allocate([ 109, 101, 97, 110, 91, 48, 93, 61, 32, 37, 46, 50, 102, 44, 32, 109, 101, 97, 110, 91, 49, 46, 46, 37, 100, 93, 61, 32, 48, 46, 48, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___cmn = allocate([ 99, 109, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81499 = allocate([ 109, 102, 99, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91500 = allocate([ 67, 77, 78, 58, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1505 = allocate([ 99, 109, 110, 95, 112, 114, 105, 111, 114, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31508 = allocate([ 37, 53, 46, 50, 102, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41509 = allocate([ 62, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61511 = allocate([ 99, 109, 110, 95, 112, 114, 105, 111, 114, 95, 117, 112, 100, 97, 116, 101, 58, 32, 102, 114, 111, 109, 32, 60, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71512 = allocate([ 99, 109, 110, 95, 112, 114, 105, 111, 114, 95, 117, 112, 100, 97, 116, 101, 58, 32, 116, 111, 32, 32, 32, 60, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91514 = allocate([ 86, 97, 114, 105, 97, 110, 99, 101, 32, 110, 111, 114, 109, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 105, 110, 32, 108, 105, 118, 101, 32, 109, 111, 100, 101, 32, 100, 101, 99, 111, 100, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1515 = allocate([ 37, 100, 37, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11516 = allocate([ 102, 101, 97, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31518 = allocate([ 39, 37, 115, 39, 58, 32, 67, 111, 117, 108, 100, 110, 39, 116, 32, 114, 101, 97, 100, 32, 105, 110, 116, 51, 50, 32, 64, 112, 111, 115, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41519 = allocate([ 39, 37, 115, 39, 58, 32, 66, 97, 100, 32, 115, 117, 98, 114, 97, 110, 103, 101, 32, 115, 112, 101, 99, 32, 101, 110, 100, 105, 110, 103, 32, 64, 112, 111, 115, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51520 = allocate([ 39, 37, 115, 39, 58, 32, 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 32, 101, 110, 100, 105, 110, 103, 32, 64, 112, 111, 115, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61521 = allocate([ 39, 37, 115, 39, 58, 32, 66, 97, 100, 32, 100, 101, 108, 105, 109, 105, 116, 101, 114, 32, 64, 112, 111, 115, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___parse_subvecs = allocate([ 112, 97, 114, 115, 101, 95, 115, 117, 98, 118, 101, 99, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71522 = allocate([ 42, 115, 116, 114, 112, 32, 61, 61, 32, 39, 47, 39, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81523 = allocate([ 39, 37, 115, 39, 58, 32, 48, 45, 108, 101, 110, 103, 116, 104, 32, 115, 117, 98, 118, 101, 99, 116, 111, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91524 = allocate([ 40, 110, 50, 32, 60, 32, 48, 41, 32, 38, 38, 32, 40, 33, 103, 110, 50, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101525 = allocate([ 40, 110, 32, 60, 32, 48, 41, 32, 38, 38, 32, 40, 33, 103, 110, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121527 = allocate([ 83, 117, 98, 118, 101, 99, 116, 111, 114, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110, 115, 32, 114, 101, 113, 117, 105, 114, 101, 32, 115, 105, 110, 103, 108, 101, 45, 115, 116, 114, 101, 97, 109, 32, 102, 101, 97, 116, 117, 114, 101, 115, 33, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131528 = allocate([ 84, 111, 116, 97, 108, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 97, 108, 105, 116, 121, 32, 111, 102, 32, 115, 117, 98, 118, 101, 99, 116, 111, 114, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 37, 100, 32, 62, 32, 102, 101, 97, 116, 117, 114, 101, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 97, 108, 105, 116, 121, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_array_alloc = allocate([ 102, 101, 97, 116, 95, 97, 114, 114, 97, 121, 95, 97, 108, 108, 111, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141529 = allocate([ 102, 99, 98, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151530 = allocate([ 110, 102, 114, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161531 = allocate([ 102, 101, 97, 116, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 40, 102, 99, 98, 41, 32, 62, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str171532 = allocate([ 107, 32, 62, 61, 32, 102, 101, 97, 116, 95, 100, 105, 109, 101, 110, 115, 105, 111, 110, 40, 102, 99, 98, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181533 = allocate([ 107, 32, 62, 61, 32, 102, 99, 98, 45, 62, 115, 118, 95, 100, 105, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201535 = allocate([ 73, 110, 105, 116, 105, 97, 108, 105, 122, 105, 110, 103, 32, 102, 101, 97, 116, 117, 114, 101, 32, 115, 116, 114, 101, 97, 109, 32, 116, 111, 32, 116, 121, 112, 101, 58, 32, 39, 37, 115, 39, 44, 32, 99, 101, 112, 108, 101, 110, 61, 37, 100, 44, 32, 67, 77, 78, 61, 39, 37, 115, 39, 44, 32, 86, 65, 82, 78, 79, 82, 77, 61, 39, 37, 115, 39, 44, 32, 65, 71, 67, 61, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231538 = allocate([ 115, 50, 95, 52, 120, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241539 = allocate([ 115, 50, 95, 52, 120, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 114, 101, 113, 117, 105, 114, 101, 32, 99, 101, 112, 115, 105, 122, 101, 32, 61, 61, 32, 49, 51, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251540 = allocate([ 115, 51, 95, 49, 120, 51, 57, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261541 = allocate([ 49, 115, 95, 49, 50, 99, 95, 49, 50, 100, 95, 51, 112, 95, 49, 50, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281543 = allocate([ 49, 115, 95, 99, 95, 100, 95, 108, 100, 95, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291544 = allocate([ 99, 101, 112, 95, 100, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301545 = allocate([ 49, 115, 95, 99, 95, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str311546 = allocate([ 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321547 = allocate([ 49, 115, 95, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331548 = allocate([ 49, 115, 95, 51, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str341549 = allocate([ 49, 115, 95, 52, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str371552 = allocate([ 66, 97, 100, 32, 102, 101, 97, 116, 117, 114, 101, 32, 116, 121, 112, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str411556 = allocate([ 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str551570 = allocate([ 32, 37, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_s3_cep = allocate([ 102, 101, 97, 116, 95, 115, 51, 95, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str721587 = allocate([ 102, 101, 97, 116, 95, 110, 95, 115, 116, 114, 101, 97, 109, 40, 102, 99, 98, 41, 32, 61, 61, 32, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str731588 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_s3_cep_dcep = allocate([ 102, 101, 97, 116, 95, 115, 51, 95, 99, 101, 112, 95, 100, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str741589 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 48, 41, 32, 61, 61, 32, 102, 101, 97, 116, 95, 99, 101, 112, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 42, 32, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str751590 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_1s_c_d_ld_dd_cep2feat = allocate([ 102, 101, 97, 116, 95, 49, 115, 95, 99, 95, 100, 95, 108, 100, 95, 100, 100, 95, 99, 101, 112, 50, 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str761591 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 48, 41, 32, 61, 61, 32, 102, 101, 97, 116, 95, 99, 101, 112, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 42, 32, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str771592 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 70, 69, 65, 84, 95, 68, 67, 69, 80, 95, 87, 73, 78, 32, 42, 32, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_1s_c_d_dd_cep2feat = allocate([ 102, 101, 97, 116, 95, 49, 115, 95, 99, 95, 100, 95, 100, 100, 95, 99, 101, 112, 50, 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str781593 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 48, 41, 32, 61, 61, 32, 102, 101, 97, 116, 95, 99, 101, 112, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 42, 32, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str791594 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 70, 69, 65, 84, 95, 68, 67, 69, 80, 95, 87, 73, 78, 32, 43, 32, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_s3_1x39_cep2feat = allocate([ 102, 101, 97, 116, 95, 115, 51, 95, 49, 120, 51, 57, 95, 99, 101, 112, 50, 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str801595 = allocate([ 102, 101, 97, 116, 95, 99, 101, 112, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 49, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str811596 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 48, 41, 32, 61, 61, 32, 51, 57, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str821597 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_s2_4x_cep2feat = allocate([ 102, 101, 97, 116, 95, 115, 50, 95, 52, 120, 95, 99, 101, 112, 50, 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str831598 = allocate([ 102, 101, 97, 116, 95, 110, 95, 115, 116, 114, 101, 97, 109, 40, 102, 99, 98, 41, 32, 61, 61, 32, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str841599 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 48, 41, 32, 61, 61, 32, 49, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str851600 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 49, 41, 32, 61, 61, 32, 50, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str861601 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 50, 41, 32, 61, 61, 32, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str871602 = allocate([ 102, 101, 97, 116, 95, 115, 116, 114, 101, 97, 109, 95, 108, 101, 110, 40, 102, 99, 98, 44, 32, 51, 41, 32, 61, 61, 32, 49, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str881603 = allocate([ 102, 101, 97, 116, 95, 119, 105, 110, 100, 111, 119, 95, 115, 105, 122, 101, 40, 102, 99, 98, 41, 32, 61, 61, 32, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1620 = allocate([ 108, 100, 97, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___feat_read_lda = allocate([ 102, 101, 97, 116, 95, 114, 101, 97, 100, 95, 108, 100, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11621 = allocate([ 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31623 = allocate([ 76, 68, 65, 32, 105, 110, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 32, 119, 105, 116, 104, 32, 109, 117, 108, 116, 105, 45, 115, 116, 114, 101, 97, 109, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 40, 110, 95, 115, 116, 114, 101, 97, 109, 32, 61, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61626 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71627 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 102, 114, 111, 109, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91629 = allocate([ 48, 46, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111631 = allocate([ 37, 115, 58, 32, 86, 101, 114, 115, 105, 111, 110, 32, 109, 105, 115, 109, 97, 116, 99, 104, 58, 32, 37, 115, 44, 32, 101, 120, 112, 101, 99, 116, 105, 110, 103, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131633 = allocate([ 37, 115, 58, 32, 98, 105, 111, 95, 102, 114, 101, 97, 100, 95, 51, 100, 40, 108, 100, 97, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151635 = allocate([ 76, 68, 65, 32, 109, 97, 116, 114, 105, 120, 32, 100, 105, 109, 101, 110, 115, 105, 111, 110, 32, 37, 100, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 102, 101, 97, 116, 117, 114, 101, 32, 115, 116, 114, 101, 97, 109, 32, 115, 105, 122, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1640 = allocate([ 102, 115, 103, 95, 109, 111, 100, 101, 108, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21642 = allocate([ 78, 117, 108, 108, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 32, 109, 117, 115, 116, 32, 98, 101, 32, 60, 61, 32, 49, 46, 48, 32, 40, 115, 116, 97, 116, 101, 32, 37, 100, 32, 45, 62, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_model_tag_trans_add = allocate([ 102, 115, 103, 95, 109, 111, 100, 101, 108, 95, 116, 97, 103, 95, 116, 114, 97, 110, 115, 95, 97, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31643 = allocate([ 108, 105, 110, 107, 32, 61, 61, 32, 108, 105, 110, 107, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str51645 = allocate([ 67, 111, 109, 112, 117, 116, 105, 110, 103, 32, 116, 114, 97, 110, 115, 105, 116, 105, 118, 101, 32, 99, 108, 111, 115, 117, 114, 101, 32, 102, 111, 114, 32, 110, 117, 108, 108, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___fsg_model_null_trans_closure = allocate([ 102, 115, 103, 95, 109, 111, 100, 101, 108, 95, 110, 117, 108, 108, 95, 116, 114, 97, 110, 115, 95, 99, 108, 111, 115, 117, 114, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61646 = allocate([ 116, 108, 49, 45, 62, 119, 105, 100, 32, 60, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71647 = allocate([ 37, 100, 32, 110, 117, 108, 108, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 32, 97, 100, 100, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81648 = allocate([ 65, 100, 100, 105, 110, 103, 32, 115, 105, 108, 101, 110, 99, 101, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 32, 102, 111, 114, 32, 37, 115, 32, 116, 111, 32, 70, 83, 71, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91649 = allocate([ 65, 100, 100, 101, 100, 32, 37, 100, 32, 115, 105, 108, 101, 110, 99, 101, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111651 = allocate([ 66, 97, 115, 101, 32, 119, 111, 114, 100, 32, 37, 115, 32, 110, 111, 116, 32, 112, 114, 101, 115, 101, 110, 116, 32, 105, 110, 32, 70, 83, 71, 32, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121, 33, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121652 = allocate([ 37, 115, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 109, 105, 115, 115, 105, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131653 = allocate([ 70, 83, 71, 95, 66, 69, 71, 73, 78, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141654 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 32, 70, 83, 71, 95, 66, 69, 71, 73, 78, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161656 = allocate([ 70, 83, 71, 32, 110, 97, 109, 101, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str171657 = allocate([ 117, 110, 107, 110, 111, 119, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181658 = allocate([ 78, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191659 = allocate([ 78, 85, 77, 95, 83, 84, 65, 84, 69, 83, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201660 = allocate([ 37, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str211661 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 35, 115, 116, 97, 116, 101, 115, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 108, 105, 110, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str221662 = allocate([ 83, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231663 = allocate([ 83, 84, 65, 82, 84, 95, 83, 84, 65, 84, 69, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241664 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 115, 116, 97, 114, 116, 32, 115, 116, 97, 116, 101, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 108, 105, 110, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251665 = allocate([ 70, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261666 = allocate([ 70, 73, 78, 65, 76, 95, 83, 84, 65, 84, 69, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str271667 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 102, 105, 110, 97, 108, 32, 115, 116, 97, 116, 101, 32, 100, 101, 99, 108, 97, 114, 97, 116, 105, 111, 110, 32, 108, 105, 110, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 111, 114, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281668 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 111, 114, 32, 70, 83, 71, 95, 69, 78, 68, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 32, 101, 120, 112, 101, 99, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291669 = allocate([ 70, 83, 71, 95, 69, 78, 68, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301670 = allocate([ 84, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str311671 = allocate([ 84, 82, 65, 78, 83, 73, 84, 73, 79, 78, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321672 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 115, 112, 101, 99, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 59, 32, 69, 120, 112, 101, 99, 116, 105, 110, 103, 58, 32, 102, 114, 111, 109, 45, 115, 116, 97, 116, 101, 32, 116, 111, 45, 115, 116, 97, 116, 101, 32, 116, 114, 97, 110, 115, 45, 112, 114, 111, 98, 32, 91, 119, 111, 114, 100, 93, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331673 = allocate([ 76, 105, 110, 101, 91, 37, 100, 93, 58, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 115, 112, 101, 99, 32, 109, 97, 108, 102, 111, 114, 109, 101, 100, 59, 32, 69, 120, 112, 101, 99, 116, 105, 110, 103, 32, 102, 108, 111, 97, 116, 32, 97, 115, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str341674 = allocate([ 70, 83, 71, 58, 32, 37, 100, 32, 115, 116, 97, 116, 101, 115, 44, 32, 37, 100, 32, 117, 110, 105, 113, 117, 101, 32, 119, 111, 114, 100, 115, 44, 32, 37, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 32, 40, 37, 100, 32, 110, 117, 108, 108, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str361676 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 70, 83, 71, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str431683 = allocate([ 102, 115, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1712 = allocate([ 106, 115, 103, 102, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11713 = allocate([ 74, 83, 71, 70, 95, 80, 65, 84, 72, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31715 = allocate([ 60, 78, 85, 76, 76, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41716 = allocate([ 60, 37, 115, 46, 103, 37, 48, 53, 100, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61718 = allocate([ 68, 101, 102, 105, 110, 101, 100, 32, 114, 117, 108, 101, 58, 32, 37, 115, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71719 = allocate([ 80, 85, 66, 76, 73, 67, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101722 = allocate([ 77, 117, 108, 116, 105, 112, 108, 121, 32, 100, 101, 102, 105, 110, 101, 100, 32, 115, 121, 109, 98, 111, 108, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121724 = allocate([ 73, 109, 112, 111, 114, 116, 101, 100, 32, 114, 117, 108, 101, 32, 105, 115, 32, 110, 111, 116, 32, 113, 117, 97, 108, 105, 102, 105, 101, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131725 = allocate([ 46, 42, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141726 = allocate([ 46, 103, 114, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151727 = allocate([ 73, 109, 112, 111, 114, 116, 105, 110, 103, 32, 37, 115, 32, 102, 114, 111, 109, 32, 37, 115, 32, 116, 111, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str161728 = allocate([ 65, 108, 114, 101, 97, 100, 121, 32, 105, 109, 112, 111, 114, 116, 101, 100, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str171729 = allocate([ 77, 117, 108, 116, 105, 112, 108, 121, 32, 105, 109, 112, 111, 114, 116, 101, 100, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___jsgf_import_rule = allocate([ 106, 115, 103, 102, 95, 105, 109, 112, 111, 114, 116, 95, 114, 117, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181730 = allocate([ 99, 32, 33, 61, 32, 78, 85, 76, 76, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191731 = allocate([ 73, 109, 112, 111, 114, 116, 101, 100, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str211733 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 37, 115, 32, 102, 111, 114, 32, 112, 97, 114, 115, 105, 110, 103, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str221734 = allocate([ 74, 83, 71, 70, 32, 112, 97, 114, 115, 101, 32, 111, 102, 32, 37, 115, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231735 = allocate([ 40, 115, 116, 100, 105, 110, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241736 = allocate([ 47, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251737 = allocate([ 60, 37, 115, 46, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261738 = allocate([ 60, 86, 79, 73, 68, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str271739 = allocate([ 85, 110, 100, 101, 102, 105, 110, 101, 100, 32, 114, 117, 108, 101, 32, 105, 110, 32, 82, 72, 83, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281740 = allocate([ 79, 110, 108, 121, 32, 114, 105, 103, 104, 116, 45, 114, 101, 99, 117, 114, 115, 105, 111, 110, 32, 105, 115, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 32, 40, 105, 110, 32, 37, 115, 46, 37, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291741 = allocate([ 82, 105, 103, 104, 116, 32, 114, 101, 99, 117, 114, 115, 105, 111, 110, 32, 37, 115, 32, 37, 100, 32, 61, 62, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yypact = allocate([ 255, 254, 36, 22, 35, 8, 219, 219, 32, 33, 30, 22, 219, 17, 219, 37, 219, 13, 219, 34, 31, 252, 219, 17, 219, 38, 39, 219, 219, 252, 219, 219, 0, 252, 252, 18, 252, 42, 219, 219, 219, 19, 219, 219, 21, 19, 20, 9, 219, 252, 42, 219, 219, 219, 219, 219, 219, 252 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yytranslate = allocate([ 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 14, 15, 18, 19, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 2, 12, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 16, 2, 17, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yycheck = allocate([ 36, 13, 3, 7, 8, 7, 10, 7, 8, 11, 14, 23, 16, 29, 14, 7, 16, 33, 34, 11, 7, 57, 13, 6, 11, 8, 17, 5, 6, 11, 8, 13, 11, 13, 13, 15, 0, 18, 19, 4, 8, 8, 12, 12, 7, 11, 49, 32, 255, 11, 11, 9, 11, 255, 11 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yytable = allocate([ 50, 24, 1, 30, 31, 5, 32, 30, 31, 6, 33, 24, 34, 44, 33, 17, 34, 46, 47, 18, 26, 50, 49, 9, 27, 10, 56, 8, 9, 48, 10, 49, 54, 49, 49, 55, 7, 52, 53, 15, 19, 20, 21, 29, 25, 28, 57, 45, 0, 42, 43, 51, 22, 0, 23 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yydefact = allocate([ 0, 0, 0, 2, 0, 0, 6, 1, 0, 0, 0, 0, 11, 3, 14, 0, 5, 0, 7, 0, 0, 0, 12, 4, 15, 0, 0, 8, 13, 0, 28, 29, 0, 0, 0, 0, 18, 20, 22, 30, 31, 24, 10, 9, 0, 25, 0, 0, 16, 0, 21, 23, 32, 33, 17, 26, 27, 19 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yyr2 = allocate([ 0, 2, 1, 2, 3, 2, 2, 3, 4, 5, 3, 1, 2, 3, 1, 2, 4, 5, 1, 3, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 1, 1, 2, 2 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1754 = allocate([ 106, 115, 103, 102, 95, 112, 97, 114, 115, 101, 114, 46, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yyr1 = allocate([ 0, 20, 21, 21, 21, 22, 23, 23, 23, 23, 24, 25, 25, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 34, 35, 35, 35, 35, 35, 35 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yypgoto = allocate([ 219, 219, 219, 219, 219, 219, 41, 43, 244, 240, 253, 220, 219, 219, 219, 15 ], "i8", ALLOC_STATIC);

	STRING_TABLE._yydefgoto = allocate([ 255, 2, 3, 4, 16, 11, 12, 13, 14, 35, 36, 37, 38, 39, 40, 41 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11755 = allocate([ 115, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41758 = allocate([ 109, 101, 109, 111, 114, 121, 32, 101, 120, 104, 97, 117, 115, 116, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71761 = allocate([ 69, 82, 82, 79, 82, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	_yy_ec = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 12, 0, 0, 0, 7, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 18, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 1, 0, 0, 0, 28, 0, 0, 0, 1, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 31, 0, 0, 0, 7, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 33, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 34, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 35, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	_yy_accept = allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 12, 0, 1, 0, 1, 0, 1, 0, 12, 0, 12, 0, 15, 0, 15, 0, 15, 0, 12, 0, 12, 0, 12, 0, 15, 0, 12, 0, 5, 0, 1, 0, 5, 0, 12, 0, 12, 0, 0, 0, 12, 0, 12, 0, 12, 0, 3, 0, 0, 0, 14, 0, 0, 0, 0, 0, 12, 0, 12, 0, 12, 0, 0, 0, 0, 0, 11, 0, 12, 0, 4, 0, 13, 0, 0, 0, 12, 0, 0, 0, 12, 0, 12, 0, 12, 0, 0, 0, 0, 0, 2, 0, 14, 0, 10, 0, 12, 0, 12, 0, 12, 0, 0, 0, 0, 0, 11, 0, 12, 0, 13, 0, 0, 0, 12, 0, 12, 0, 12, 0, 12, 0, 12, 0, 6, 0, 12, 0, 12, 0, 12, 0, 12, 0, 8, 0, 9, 0, 7, 0, 0, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

	_yy_base = allocate([ 0, 0, 0, 0, 0, 0, 34, 0, 37, 0, 148, 0, 0, 0, 196, 0, 196, 0, 0, 0, 44, 0, 130, 0, 196, 0, 50, 0, 0, 0, 115, 0, 116, 0, 106, 0, 32, 0, 102, 0, 196, 0, 196, 0, 124, 0, 0, 0, 75, 0, 48, 0, 0, 0, 106, 0, 116, 0, 196, 0, 121, 0, 128, 0, 58, 0, 117, 0, 110, 0, 101, 0, 107, 0, 47, 0, 52, 0, 196, 0, 91, 0, 196, 0, 196, 0, 68, 0, 0, 0, 76, 0, 0, 0, 137, 0, 108, 0, 33, 0, 119, 0, 196, 0, 196, 0, 196, 0, 96, 0, 94, 0, 93, 0, 71, 0, 94, 0, 72, 0, 104, 0, 87, 0, 97, 0, 87, 0, 74, 0, 70, 0, 73, 0, 79, 0, 0, 0, 72, 0, 45, 0, 51, 0, 35, 0, 0, 0, 0, 0, 0, 0, 196, 0, 169, 0, 47, 0, 172, 0, 175, 0, 177, 0, 180, 0, 183, 0, 186, 0, 189, 0, 192, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

	_yy_chk = allocate([ 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, 3, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 49, 0, 49, 0, 4, 0, 10, 0, 10, 0, 78, 0, 10, 0, 18, 0, 10, 0, 10, 0, 25, 0, 10, 0, 38, 0, 10, 0, 10, 0, 13, 0, 13, 0, 13, 0, 13, 0, 10, 0, 72, 0, 18, 0, 37, 0, 25, 0, 32, 0, 32, 0, 32, 0, 38, 0, 43, 0, 71, 0, 43, 0, 70, 0, 10, 0, 10, 0, 24, 0, 24, 0, 37, 0, 24, 0, 45, 0, 24, 0, 24, 0, 38, 0, 24, 0, 43, 0, 24, 0, 24, 0, 57, 0, 59, 0, 69, 0, 61, 0, 24, 0, 45, 0, 67, 0, 66, 0, 58, 0, 65, 0, 64, 0, 62, 0, 63, 0, 62, 0, 57, 0, 59, 0, 61, 0, 24, 0, 24, 0, 27, 0, 27, 0, 60, 0, 27, 0, 58, 0, 27, 0, 27, 0, 62, 0, 27, 0, 56, 0, 27, 0, 27, 0, 55, 0, 54, 0, 50, 0, 48, 0, 27, 0, 40, 0, 58, 0, 36, 0, 35, 0, 34, 0, 33, 0, 31, 0, 30, 0, 28, 0, 22, 0, 19, 0, 17, 0, 27, 0, 27, 0, 47, 0, 47, 0, 16, 0, 47, 0, 15, 0, 47, 0, 47, 0, 11, 0, 47, 0, 5, 0, 47, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 47, 0, 77, 0, 77, 0, 77, 0, 79, 0, 79, 0, 79, 0, 80, 0, 80, 0, 81, 0, 81, 0, 81, 0, 82, 0, 82, 0, 82, 0, 83, 0, 83, 0, 83, 0, 84, 0, 84, 0, 84, 0, 85, 0, 85, 0, 85, 0, 86, 0, 86, 0, 86, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

	_yy_def = allocate([ 0, 0, 76, 0, 1, 0, 77, 0, 77, 0, 76, 0, 78, 0, 76, 0, 76, 0, 78, 0, 79, 0, 78, 0, 76, 0, 76, 0, 80, 0, 78, 0, 78, 0, 78, 0, 81, 0, 78, 0, 76, 0, 76, 0, 76, 0, 78, 0, 79, 0, 82, 0, 78, 0, 83, 0, 78, 0, 76, 0, 76, 0, 84, 0, 76, 0, 80, 0, 78, 0, 78, 0, 78, 0, 81, 0, 85, 0, 76, 0, 78, 0, 76, 0, 76, 0, 86, 0, 24, 0, 82, 0, 24, 0, 83, 0, 78, 0, 76, 0, 84, 0, 76, 0, 76, 0, 76, 0, 78, 0, 78, 0, 78, 0, 81, 0, 85, 0, 81, 0, 78, 0, 82, 0, 86, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 78, 0, 0, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

	_yy_meta = allocate([ 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	_yy_nxt = allocate([ 0, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 12, 0, 6, 0, 13, 0, 6, 0, 14, 0, 12, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 15, 0, 16, 0, 6, 0, 6, 0, 6, 0, 17, 0, 6, 0, 6, 0, 6, 0, 18, 0, 12, 0, 6, 0, 6, 0, 19, 0, 21, 0, 8, 0, 21, 0, 21, 0, 8, 0, 21, 0, 22, 0, 52, 0, 49, 0, 22, 0, 25, 0, 25, 0, 23, 0, 26, 0, 38, 0, 25, 0, 25, 0, 42, 0, 25, 0, 37, 0, 25, 0, 25, 0, 29, 0, 30, 0, 31, 0, 32, 0, 27, 0, 75, 0, 39, 0, 38, 0, 43, 0, 30, 0, 52, 0, 32, 0, 58, 0, 25, 0, 74, 0, 61, 0, 73, 0, 25, 0, 25, 0, 25, 0, 25, 0, 39, 0, 26, 0, 42, 0, 25, 0, 25, 0, 59, 0, 25, 0, 62, 0, 25, 0, 25, 0, 38, 0, 38, 0, 72, 0, 42, 0, 27, 0, 43, 0, 28, 0, 71, 0, 37, 0, 70, 0, 69, 0, 25, 0, 68, 0, 61, 0, 39, 0, 39, 0, 43, 0, 25, 0, 25, 0, 45, 0, 25, 0, 67, 0, 46, 0, 58, 0, 45, 0, 45, 0, 62, 0, 45, 0, 66, 0, 45, 0, 45, 0, 65, 0, 64, 0, 51, 0, 63, 0, 47, 0, 60, 0, 59, 0, 56, 0, 55, 0, 54, 0, 53, 0, 51, 0, 49, 0, 48, 0, 41, 0, 40, 0, 36, 0, 45, 0, 45, 0, 45, 0, 25, 0, 35, 0, 46, 0, 34, 0, 45, 0, 45, 0, 28, 0, 45, 0, 76, 0, 45, 0, 45, 0, 76, 0, 76, 0, 76, 0, 76, 0, 47, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 45, 0, 45, 0, 20, 0, 20, 0, 20, 0, 24, 0, 24, 0, 24, 0, 33, 0, 33, 0, 37, 0, 37, 0, 37, 0, 25, 0, 25, 0, 25, 0, 44, 0, 44, 0, 44, 0, 50, 0, 50, 0, 50, 0, 57, 0, 57, 0, 57, 0, 45, 0, 45, 0, 45, 0, 5, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0, 76, 0 ], [ "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0 ], ALLOC_STATIC);

	STRING_TABLE.__str1765 = allocate([ 102, 97, 116, 97, 108, 32, 102, 108, 101, 120, 32, 115, 99, 97, 110, 110, 101, 114, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 45, 45, 110, 111, 32, 97, 99, 116, 105, 111, 110, 32, 102, 111, 117, 110, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11766 = allocate([ 111, 117, 116, 32, 111, 102, 32, 100, 121, 110, 97, 109, 105, 99, 32, 109, 101, 109, 111, 114, 121, 32, 105, 110, 32, 121, 121, 95, 99, 114, 101, 97, 116, 101, 95, 98, 117, 102, 102, 101, 114, 40, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81773 = allocate([ 111, 117, 116, 32, 111, 102, 32, 100, 121, 110, 97, 109, 105, 99, 32, 109, 101, 109, 111, 114, 121, 32, 105, 110, 32, 121, 121, 101, 110, 115, 117, 114, 101, 95, 98, 117, 102, 102, 101, 114, 95, 115, 116, 97, 99, 107, 40, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91774 = allocate([ 102, 97, 116, 97, 108, 32, 102, 108, 101, 120, 32, 115, 99, 97, 110, 110, 101, 114, 32, 105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 45, 45, 101, 110, 100, 32, 111, 102, 32, 98, 117, 102, 102, 101, 114, 32, 109, 105, 115, 115, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str101775 = allocate([ 102, 97, 116, 97, 108, 32, 101, 114, 114, 111, 114, 32, 45, 32, 115, 99, 97, 110, 110, 101, 114, 32, 105, 110, 112, 117, 116, 32, 98, 117, 102, 102, 101, 114, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111776 = allocate([ 105, 110, 112, 117, 116, 32, 105, 110, 32, 102, 108, 101, 120, 32, 115, 99, 97, 110, 110, 101, 114, 32, 102, 97, 105, 108, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121777 = allocate([ 111, 117, 116, 32, 111, 102, 32, 100, 121, 110, 97, 109, 105, 99, 32, 109, 101, 109, 111, 114, 121, 32, 105, 110, 32, 121, 121, 95, 103, 101, 116, 95, 110, 101, 120, 116, 95, 98, 117, 102, 102, 101, 114, 40, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11787 = allocate([ 108, 109, 51, 103, 95, 109, 111, 100, 101, 108, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___lm3g_add_ug = allocate([ 108, 109, 51, 103, 95, 97, 100, 100, 95, 117, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21788 = allocate([ 33, 78, 71, 82, 65, 77, 95, 73, 83, 95, 67, 76, 65, 83, 83, 87, 73, 68, 40, 119, 105, 100, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41790 = allocate([ 115, 111, 114, 116, 101, 100, 32, 108, 105, 115, 116, 32, 111, 118, 101, 114, 102, 108, 111, 119, 32, 40, 37, 100, 32, 61, 62, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61797 = allocate([ 110, 103, 114, 97, 109, 95, 109, 111, 100, 101, 108, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191810 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 111, 102, 32, 119, 111, 114, 100, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201811 = allocate([ 72, 97, 115, 104, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 119, 111, 114, 100, 32, 37, 115, 32, 61, 62, 32, 37, 112, 32, 40, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 104, 97, 112, 112, 101, 110, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str211812 = allocate([ 84, 111, 116, 97, 108, 32, 99, 108, 97, 115, 115, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 105, 115, 32, 37, 102, 44, 32, 119, 105, 108, 108, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261817 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 108, 97, 115, 115, 101, 115, 32, 99, 97, 110, 110, 111, 116, 32, 101, 120, 99, 101, 101, 100, 32, 49, 50, 56, 32, 40, 115, 111, 114, 114, 121, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291820 = allocate([ 69, 78, 68, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301821 = allocate([ 76, 77, 67, 76, 65, 83, 83, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str11841 = allocate([ 110, 103, 114, 97, 109, 95, 109, 111, 100, 101, 108, 95, 97, 114, 112, 97, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str31843 = allocate([ 70, 105, 108, 101, 32, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0 ], "i8", ALLOC_STATIC);

	_ngram_model_arpa_funcs = allocate([ 146, 0, 0, 0, 148, 0, 0, 0, 150, 0, 0, 0, 152, 0, 0, 0, 154, 0, 0, 0, 156, 0, 0, 0, 158, 0, 0, 0, 160, 0, 0, 0, 162, 0, 0, 0, 164, 0, 0, 0, 166, 0, 0, 0, 168, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str311871 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 116, 114, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321872 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 119, 111, 114, 100, 58, 32, 37, 115, 44, 32, 115, 107, 105, 112, 112, 105, 110, 103, 32, 116, 114, 105, 103, 114, 97, 109, 32, 40, 37, 115, 32, 37, 115, 32, 37, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331873 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 116, 114, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str341874 = allocate([ 84, 114, 105, 103, 114, 97, 109, 115, 32, 110, 111, 116, 32, 105, 110, 32, 98, 105, 103, 114, 97, 109, 32, 111, 114, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str351875 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 98, 105, 103, 114, 97, 109, 32, 102, 111, 114, 32, 116, 114, 105, 103, 114, 97, 109, 58, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str361876 = allocate([ 83, 105, 122, 101, 32, 111, 102, 32, 116, 114, 105, 103, 114, 97, 109, 32, 115, 101, 103, 109, 101, 110, 116, 32, 105, 115, 32, 98, 105, 103, 103, 101, 114, 32, 116, 104, 97, 110, 32, 54, 53, 53, 51, 53, 44, 32, 115, 117, 99, 104, 32, 97, 32, 98, 105, 103, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 44, 32, 117, 115, 101, 32, 115, 109, 97, 108, 108, 101, 114, 32, 118, 111, 99, 97, 98, 117, 108, 97, 114, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str371877 = allocate([ 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str381878 = allocate([ 92, 101, 110, 100, 92, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str391879 = allocate([ 66, 97, 100, 32, 116, 114, 105, 103, 114, 97, 109, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str401880 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 98, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str411881 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 119, 111, 114, 100, 58, 32, 37, 115, 44, 32, 115, 107, 105, 112, 112, 105, 110, 103, 32, 98, 105, 103, 114, 97, 109, 32, 40, 37, 115, 32, 37, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str421882 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 98, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str431883 = allocate([ 66, 105, 103, 114, 97, 109, 115, 32, 110, 111, 116, 32, 105, 110, 32, 117, 110, 105, 103, 114, 97, 109, 32, 111, 114, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str441884 = allocate([ 92, 51, 45, 103, 114, 97, 109, 115, 58, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str451885 = allocate([ 66, 97, 100, 32, 98, 105, 103, 114, 97, 109, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str461886 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 117, 110, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str471887 = allocate([ 92, 50, 45, 103, 114, 97, 109, 115, 58, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str491889 = allocate([ 70, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 59, 32, 117, 110, 105, 103, 114, 97, 109, 32, 105, 103, 110, 111, 114, 101, 100, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str501890 = allocate([ 84, 111, 111, 32, 109, 97, 110, 121, 32, 117, 110, 105, 103, 114, 97, 109, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str521892 = allocate([ 108, 109, 95, 116, 46, 117, 99, 111, 117, 110, 116, 40, 37, 100, 41, 32, 33, 61, 32, 35, 117, 110, 105, 103, 114, 97, 109, 115, 32, 114, 101, 97, 100, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str531893 = allocate([ 92, 100, 97, 116, 97, 92, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str541894 = allocate([ 78, 111, 32, 92, 100, 97, 116, 97, 92, 32, 109, 97, 114, 107, 32, 105, 110, 32, 76, 77, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str551895 = allocate([ 110, 103, 114, 97, 109, 32, 37, 100, 61, 37, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str561896 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 110, 103, 114, 97, 109, 32, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str571897 = allocate([ 69, 79, 70, 32, 119, 104, 105, 108, 101, 32, 114, 101, 97, 100, 105, 110, 103, 32, 110, 103, 114, 97, 109, 32, 99, 111, 117, 110, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str581898 = allocate([ 92, 49, 45, 103, 114, 97, 109, 115, 58, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str591899 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 92, 49, 45, 103, 114, 97, 109, 115, 58, 32, 109, 97, 114, 107, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str601900 = allocate([ 66, 97, 100, 32, 111, 114, 32, 109, 105, 115, 115, 105, 110, 103, 32, 110, 103, 114, 97, 109, 32, 99, 111, 117, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str21907 = allocate([ 110, 103, 114, 97, 109, 95, 109, 111, 100, 101, 108, 95, 100, 109, 112, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str41909 = allocate([ 68, 117, 109, 112, 32, 102, 105, 108, 101, 32, 37, 115, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str61911 = allocate([ 68, 117, 109, 112, 32, 102, 105, 108, 101, 32, 105, 115, 32, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 44, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 117, 115, 101, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 112, 101, 100, 32, 73, 47, 79, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE._darpa_hdr = allocate([ 68, 97, 114, 112, 97, 32, 84, 114, 105, 103, 114, 97, 109, 32, 76, 77, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str71912 = allocate([ 87, 114, 111, 110, 103, 32, 109, 97, 103, 105, 99, 32, 104, 101, 97, 100, 101, 114, 32, 115, 105, 122, 101, 32, 110, 117, 109, 98, 101, 114, 32, 37, 120, 58, 32, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str81913 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 104, 101, 97, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str91914 = allocate([ 87, 114, 111, 110, 103, 32, 104, 101, 97, 100, 101, 114, 32, 37, 115, 58, 32, 37, 115, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 100, 117, 109, 112, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str111916 = allocate([ 66, 121, 116, 101, 115, 119, 97, 112, 112, 105, 110, 103, 32, 114, 101, 113, 117, 105, 114, 101, 100, 44, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 117, 115, 101, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 112, 101, 100, 32, 73, 47, 79, 32, 102, 111, 114, 32, 76, 77, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str121917 = allocate([ 87, 105, 108, 108, 32, 117, 115, 101, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 112, 101, 100, 32, 73, 47, 79, 32, 102, 111, 114, 32, 76, 77, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str131918 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 76, 77, 32, 102, 105, 108, 101, 110, 97, 109, 101, 32, 105, 110, 32, 104, 101, 97, 100, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str141919 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 119, 111, 114, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str151920 = allocate([ 110, 103, 114, 97, 109, 115, 32, 49, 61, 37, 100, 44, 32, 50, 61, 37, 100, 44, 32, 51, 61, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	_ngram_model_dmp_funcs = allocate([ 170, 0, 0, 0, 172, 0, 0, 0, 174, 0, 0, 0, 176, 0, 0, 0, 178, 0, 0, 0, 180, 0, 0, 0, 182, 0, 0, 0, 184, 0, 0, 0, 186, 0, 0, 0, 188, 0, 0, 0, 190, 0, 0, 0, 192, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str161921 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 109, 97, 112, 105, 110, 103, 32, 105, 100, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str171922 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 117, 110, 105, 103, 114, 97, 109, 115, 32, 100, 97, 116, 97, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str181923 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 117, 110, 105, 103, 114, 97, 109, 115, 40, 43, 116, 114, 97, 105, 108, 101, 114, 41, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str191924 = allocate([ 45, 109, 109, 97, 112, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 44, 32, 98, 117, 116, 32, 116, 114, 105, 103, 114, 97, 109, 32, 105, 110, 100, 101, 120, 32, 105, 115, 32, 110, 111, 116, 32, 119, 111, 114, 100, 45, 97, 108, 105, 103, 110, 101, 100, 46, 32, 32, 87, 105, 108, 108, 32, 110, 111, 116, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str201925 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 98, 105, 103, 114, 97, 109, 115, 32, 100, 97, 116, 97, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str211926 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 98, 105, 103, 114, 97, 109, 115, 40, 43, 116, 114, 97, 105, 108, 101, 114, 41, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str221927 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 114, 105, 103, 114, 97, 109, 115, 32, 100, 97, 116, 97, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str231928 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 116, 114, 105, 103, 114, 97, 109, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str241929 = allocate([ 102, 114, 101, 97, 100, 40, 112, 114, 111, 98, 50, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str251930 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 112, 114, 111, 98, 50, 32, 101, 110, 116, 114, 105, 101, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str261931 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 98, 97, 99, 107, 111, 102, 102, 32, 119, 101, 105, 103, 104, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str271932 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 98, 111, 95, 119, 116, 50, 32, 101, 110, 116, 114, 105, 101, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str281933 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 114, 105, 103, 114, 97, 109, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str291934 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 112, 114, 111, 98, 51, 32, 101, 110, 116, 114, 105, 101, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str301935 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 116, 114, 105, 103, 114, 97, 109, 32, 105, 110, 100, 101, 120, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str311936 = allocate([ 37, 56, 100, 32, 61, 32, 76, 77, 46, 116, 115, 101, 103, 95, 98, 97, 115, 101, 32, 101, 110, 116, 114, 105, 101, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str321937 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str331938 = allocate([ 69, 114, 114, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 32, 119, 111, 114, 100, 32, 115, 116, 114, 105, 110, 103, 115, 32, 40, 37, 100, 32, 100, 111, 101, 115, 110, 39, 116, 32, 109, 97, 116, 99, 104, 32, 110, 95, 117, 110, 105, 103, 114, 97, 109, 115, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str341939 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 119, 111, 114, 100, 32, 105, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str351940 = allocate([ 37, 56, 100, 32, 61, 32, 97, 115, 99, 105, 105, 32, 119, 111, 114, 100, 32, 115, 116, 114, 105, 110, 103, 115, 32, 114, 101, 97, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str381943 = allocate([ 37, 56, 100, 32, 61, 32, 35, 117, 110, 105, 103, 114, 97, 109, 115, 32, 99, 114, 101, 97, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str411946 = allocate([ 37, 56, 100, 32, 61, 32, 35, 98, 105, 103, 114, 97, 109, 115, 32, 99, 114, 101, 97, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str421947 = allocate([ 37, 56, 100, 32, 61, 32, 35, 112, 114, 111, 98, 50, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str431948 = allocate([ 37, 56, 100, 32, 61, 32, 35, 98, 111, 95, 119, 116, 50, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str441949 = allocate([ 37, 56, 100, 32, 61, 32, 35, 116, 114, 105, 103, 114, 97, 109, 115, 32, 99, 114, 101, 97, 116, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str451950 = allocate([ 37, 56, 100, 32, 61, 32, 35, 112, 114, 111, 98, 51, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str481953 = allocate([ 46, 47, 108, 109, 51, 103, 95, 116, 101, 109, 112, 108, 97, 116, 101, 115, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str491954 = allocate([ 66, 105, 103, 114, 97, 109, 32, 37, 100, 32, 104, 97, 115, 32, 110, 111, 32, 118, 97, 108, 105, 100, 32, 117, 110, 105, 103, 114, 97, 109, 32, 112, 97, 114, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str501955 = allocate([ 84, 114, 105, 103, 114, 97, 109, 32, 37, 100, 32, 104, 97, 115, 32, 110, 111, 32, 118, 97, 108, 105, 100, 32, 98, 105, 103, 114, 97, 109, 32, 112, 97, 114, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str511956 = allocate([ 84, 114, 105, 103, 114, 97, 109, 32, 37, 100, 32, 104, 97, 115, 32, 110, 111, 32, 118, 97, 108, 105, 100, 32, 117, 110, 105, 103, 114, 97, 109, 32, 112, 97, 114, 101, 110, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___lm3g_template_iter1957 = allocate([ 108, 109, 51, 103, 95, 116, 101, 109, 112, 108, 97, 116, 101, 95, 105, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str521958 = allocate([ 110, 95, 104, 105, 115, 116, 32, 61, 61, 32, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str531959 = allocate([ 60, 115, 62, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2007 = allocate([ 110, 103, 114, 97, 109, 95, 109, 111, 100, 101, 108, 95, 115, 101, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22009 = allocate([ 76, 111, 103, 45, 109, 97, 116, 104, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 100, 111, 110, 39, 116, 32, 109, 97, 116, 99, 104, 44, 32, 119, 105, 108, 108, 32, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 76, 77, 32, 115, 101, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72014 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 76, 77, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str82015 = allocate([ 87, 105, 108, 108, 32, 112, 114, 101, 112, 101, 110, 100, 32, 39, 37, 115, 39, 32, 116, 111, 32, 117, 110, 113, 117, 97, 108, 105, 102, 105, 101, 100, 32, 112, 97, 116, 104, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str92016 = allocate([ 37, 49, 48, 50, 51, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str102017 = allocate([ 123, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str112018 = allocate([ 125, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str122019 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 99, 108, 97, 115, 115, 100, 101, 102, 32, 102, 114, 111, 109, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str132020 = allocate([ 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 69, 79, 70, 32, 105, 110, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str142021 = allocate([ 82, 101, 97, 100, 105, 110, 103, 32, 108, 109, 32, 102, 114, 111, 109, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str152022 = allocate([ 76, 77, 110, 97, 109, 101, 32, 109, 105, 115, 115, 105, 110, 103, 32, 97, 102, 116, 101, 114, 32, 76, 77, 70, 105, 108, 101, 78, 97, 109, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str162023 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 99, 108, 97, 115, 115, 32, 37, 115, 32, 105, 110, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 105, 108, 101, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str172024 = allocate([ 65, 100, 100, 101, 100, 32, 99, 108, 97, 115, 115, 32, 37, 115, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 37, 100, 32, 119, 111, 114, 100, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str192026 = allocate([ 60, 85, 78, 75, 62, 0 ], "i8", ALLOC_STATIC);

	_ngram_model_set_funcs = allocate([ 194, 0, 0, 0, 196, 0, 0, 0, 198, 0, 0, 0, 200, 0, 0, 0, 202, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str2037 = allocate([ 115, 51, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32040 = allocate([ 98, 105, 111, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52042 = allocate([ 87, 114, 111, 110, 103, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str62043 = allocate([ 37, 115, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72044 = allocate([ 80, 114, 101, 109, 97, 116, 117, 114, 101, 32, 69, 79, 70, 44, 32, 108, 105, 110, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str82045 = allocate([ 37, 115, 37, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str92046 = allocate([ 72, 101, 97, 100, 101, 114, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 44, 32, 108, 105, 110, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str102047 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 119, 111, 114, 100, 32, 49, 58, 32, 37, 115, 32, 108, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str112048 = allocate([ 101, 110, 100, 104, 100, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str122049 = allocate([ 77, 97, 120, 32, 97, 114, 103, 45, 118, 97, 108, 117, 101, 32, 108, 105, 109, 105, 116, 40, 37, 100, 41, 32, 101, 120, 99, 101, 101, 100, 101, 100, 59, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 66, 73, 79, 95, 72, 68, 82, 65, 82, 71, 95, 77, 65, 88, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str142051 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 119, 111, 114, 100, 32, 50, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str152052 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 73, 116, 101, 114, 58, 32, 37, 100, 44, 32, 108, 105, 110, 101, 110, 111, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str172054 = allocate([ 115, 119, 97, 112, 95, 99, 104, 101, 99, 107, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str192056 = allocate([ 102, 114, 101, 97, 100, 40, 97, 114, 114, 97, 121, 115, 105, 122, 101, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str202057 = allocate([ 66, 97, 100, 32, 97, 114, 114, 97, 121, 115, 105, 122, 101, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str212058 = allocate([ 102, 114, 101, 97, 100, 40, 97, 114, 114, 97, 121, 100, 97, 116, 97, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str232060 = allocate([ 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 114, 101, 97, 100, 32, 99, 111, 109, 112, 108, 101, 116, 101, 32, 100, 97, 116, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str262063 = allocate([ 79, 83, 32, 101, 114, 114, 111, 114, 32, 105, 110, 32, 98, 105, 111, 95, 102, 114, 101, 97, 100, 95, 51, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___bio_fread_3d = allocate([ 98, 105, 111, 95, 102, 114, 101, 97, 100, 95, 51, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str272064 = allocate([ 110, 32, 61, 61, 32, 108, 95, 100, 49, 32, 42, 32, 108, 95, 100, 50, 32, 42, 32, 108, 95, 100, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str282065 = allocate([ 102, 114, 101, 97, 100, 40, 99, 104, 107, 115, 117, 109, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str292066 = allocate([ 67, 104, 101, 99, 107, 115, 117, 109, 32, 101, 114, 114, 111, 114, 59, 32, 102, 105, 108, 101, 45, 99, 104, 101, 99, 107, 115, 117, 109, 32, 37, 48, 56, 120, 44, 32, 99, 111, 109, 112, 117, 116, 101, 100, 32, 37, 48, 56, 120, 10, 0 ], "i8", ALLOC_STATIC);

	__str302067 = allocate(1, "i8", ALLOC_STATIC);

	STRING_TABLE.__str392076 = allocate([ 67, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 66, 89, 84, 69, 79, 82, 68, 69, 82, 32, 77, 65, 71, 73, 67, 32, 78, 79, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str402077 = allocate([ 66, 97, 100, 32, 66, 89, 84, 69, 79, 82, 68, 69, 82, 32, 77, 65, 71, 73, 67, 32, 78, 79, 58, 32, 37, 48, 56, 120, 44, 32, 101, 120, 112, 101, 99, 116, 105, 110, 103, 32, 37, 48, 56, 120, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str412078 = allocate([ 42, 101, 110, 100, 95, 99, 111, 109, 109, 101, 110, 116, 42, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str422079 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 37, 115, 32, 109, 97, 114, 107, 101, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2102 = allocate([ 99, 97, 108, 108, 111, 99, 40, 37, 100, 44, 37, 100, 41, 32, 102, 97, 105, 108, 101, 100, 32, 102, 114, 111, 109, 32, 37, 115, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12103 = allocate([ 109, 97, 108, 108, 111, 99, 40, 37, 100, 41, 32, 102, 97, 105, 108, 101, 100, 32, 102, 114, 111, 109, 32, 37, 115, 40, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12130 = allocate([ 99, 109, 100, 95, 108, 110, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str112140 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 110, 97, 109, 101, 32, 105, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str122141 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 110, 97, 109, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str132142 = allocate([ 65, 114, 103, 117, 109, 101, 110, 116, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 39, 37, 115, 39, 32, 109, 105, 115, 115, 105, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str142143 = allocate([ 66, 97, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 37, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str152144 = allocate([ 68, 117, 112, 108, 105, 99, 97, 116, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 110, 97, 109, 101, 32, 105, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str162145 = allocate([ 66, 97, 100, 32, 100, 101, 102, 97, 117, 108, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 37, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str172146 = allocate([ 77, 105, 115, 115, 105, 110, 103, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str182147 = allocate([ 78, 111, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 103, 105, 118, 101, 110, 44, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 111, 112, 116, 105, 111, 110, 115, 32, 97, 114, 101, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str202149 = allocate([ 80, 97, 114, 115, 105, 110, 103, 32, 99, 111, 109, 109, 97, 110, 100, 32, 108, 105, 110, 101, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str212150 = allocate([ 92, 10, 9, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str222151 = allocate([ 37, 115, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str232152 = allocate([ 10, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str242153 = allocate([ 67, 117, 114, 114, 101, 110, 116, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str252154 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 112, 97, 114, 115, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 108, 105, 115, 116, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE._cmd_ln_parse_file_r_separator = allocate([ 32, 9, 13, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str282157 = allocate([ 67, 97, 110, 110, 111, 116, 32, 111, 112, 101, 110, 32, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 32, 102, 105, 108, 101, 32, 37, 115, 32, 102, 111, 114, 32, 114, 101, 97, 100, 105, 110, 103, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str292158 = allocate([ 78, 101, 115, 116, 105, 110, 103, 32, 113, 117, 111, 116, 97, 116, 105, 111, 110, 115, 32, 105, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 33, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str312160 = allocate([ 85, 110, 99, 108, 111, 115, 101, 100, 32, 113, 117, 111, 116, 97, 116, 105, 111, 110, 44, 32, 104, 97, 118, 105, 110, 103, 32, 69, 79, 70, 32, 99, 108, 111, 115, 101, 32, 105, 116, 46, 46, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str322161 = allocate([ 65, 114, 103, 117, 109, 101, 110, 116, 115, 32, 108, 105, 115, 116, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 58, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str332162 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str342163 = allocate([ 91, 78, 65, 77, 69, 93, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str362165 = allocate([ 9, 91, 68, 69, 70, 76, 84, 93, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str372166 = allocate([ 9, 91, 68, 69, 83, 67, 82, 93, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str382167 = allocate([ 9, 91, 86, 65, 76, 85, 69, 93, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str402169 = allocate([ 37, 108, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str412170 = allocate([ 37, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str422171 = allocate([ 37, 115, 44, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str452174 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 58, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str472176 = allocate([ 85, 110, 112, 97, 114, 115, 101, 100, 32, 98, 111, 111, 108, 101, 97, 110, 32, 118, 97, 108, 117, 101, 32, 39, 37, 115, 39, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str482177 = allocate([ 36, 40, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2200 = allocate([ 110, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12201 = allocate([ 105, 110, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22202 = allocate([ 97, 110, 0 ], "i8", ALLOC_STATIC);

	_tens = allocate([ 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 1e3, 0, 0, 0, 0, 0, 0, 0, 1e4, 0, 0, 0, 0, 0, 0, 0, 1e5, 0, 0, 0, 0, 0, 0, 0, 1e6, 0, 0, 0, 0, 0, 0, 0, 1e7, 0, 0, 0, 0, 0, 0, 0, 1e8, 0, 0, 0, 0, 0, 0, 0, 1e9, 0, 0, 0, 0, 0, 0, 0, 1e10, 0, 0, 0, 0, 0, 0, 0, 1e11, 0, 0, 0, 0, 0, 0, 0, 1e12, 0, 0, 0, 0, 0, 0, 0, 1e13, 0, 0, 0, 0, 0, 0, 0, 1e14, 0, 0, 0, 0, 0, 0, 0, 1e15, 0, 0, 0, 0, 0, 0, 0, 1e16, 0, 0, 0, 0, 0, 0, 0, 1e17, 0, 0, 0, 0, 0, 0, 0, 1e18, 0, 0, 0, 0, 0, 0, 0, 1e19, 0, 0, 0, 0, 0, 0, 0, 1e20, 0, 0, 0, 0, 0, 0, 0, 1e+21, 0, 0, 0, 0, 0, 0, 0, 1e+22, 0, 0, 0, 0, 0, 0, 0 ], [ "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0 ], ALLOC_STATIC);

	_bigtens = allocate([ 1e16, 0, 0, 0, 0, 0, 0, 0, 1e+32, 0, 0, 0, 0, 0, 0, 0, 1e+64, 0, 0, 0, 0, 0, 0, 0, 1e+128, 0, 0, 0, 0, 0, 0, 0, 1e+256, 0, 0, 0, 0, 0, 0, 0 ], [ "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0 ], ALLOC_STATIC);

	_tinytens = allocate([ 1e-16, 0, 0, 0, 0, 0, 0, 0, 1e-32, 0, 0, 0, 0, 0, 0, 0, 1e-64, 0, 0, 0, 0, 0, 0, 0, 1e-128, 0, 0, 0, 0, 0, 0, 0, 8.112963841460668e-225, 0, 0, 0, 0, 0, 0, 0 ], [ "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0 ], ALLOC_STATIC);

	_pow5mult_p05 = allocate([ 5, 0, 0, 0, 25, 0, 0, 0, 125, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str32203 = allocate([ 100, 116, 111, 97, 46, 99, 0 ], "i8", ALLOC_STATIC);

	_logfp_index = allocate(4, "i8", ALLOC_STATIC);

	_logfp_index_once = allocate([ 1, 0, 0, 0, 0, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str2204 = allocate([ 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12205 = allocate([ 37, 115, 58, 9, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22206 = allocate([ 37, 115, 58, 32, 34, 37, 115, 34, 44, 32, 108, 105, 110, 101, 32, 37, 108, 100, 58, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32207 = allocate([ 37, 115, 58, 32, 37, 115, 40, 37, 108, 100, 41, 58, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42208 = allocate([ 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52209 = allocate([ 59, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	_mt = allocate(2496, "i8", ALLOC_STATIC);

	_mti = allocate([ 625 ], [ "i32", 0, 0, 0 ], ALLOC_STATIC);

	_genrand_int32_mag01 = allocate([ 0, 0, 0, 0, -1727483681, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str2238 = allocate([ 103, 108, 105, 115, 116, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.___func___gnode_free = allocate([ 103, 110, 111, 100, 101, 95, 102, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12239 = allocate([ 112, 114, 101, 100, 45, 62, 110, 101, 120, 116, 32, 61, 61, 32, 103, 110, 0 ], "i8", ALLOC_STATIC);

	_prime = allocate([ 101, 0, 0, 0, 211, 0, 0, 0, 307, 0, 0, 0, 401, 0, 0, 0, 503, 0, 0, 0, 601, 0, 0, 0, 701, 0, 0, 0, 809, 0, 0, 0, 907, 0, 0, 0, 1009, 0, 0, 0, 1201, 0, 0, 0, 1601, 0, 0, 0, 2003, 0, 0, 0, 2411, 0, 0, 0, 3001, 0, 0, 0, 4001, 0, 0, 0, 5003, 0, 0, 0, 6007, 0, 0, 0, 7001, 0, 0, 0, 8009, 0, 0, 0, 9001, 0, 0, 0, 10007, 0, 0, 0, 12007, 0, 0, 0, 16001, 0, 0, 0, 20011, 0, 0, 0, 24001, 0, 0, 0, 30011, 0, 0, 0, 40009, 0, 0, 0, 50021, 0, 0, 0, 60013, 0, 0, 0, 70001, 0, 0, 0, 80021, 0, 0, 0, 90001, 0, 0, 0, 100003, 0, 0, 0, 120011, 0, 0, 0, 160001, 0, 0, 0, 200003, 0, 0, 0, 240007, 0, 0, 0, 300007, 0, 0, 0, 400009, 0, 0, 0, 500009, 0, 0, 0, 600011, 0, 0, 0, 700001, 0, 0, 0, 800011, 0, 0, 0, 900001, 0, 0, 0, -1, 0, 0, 0 ], [ "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0 ], ALLOC_STATIC);

	STRING_TABLE.__str2256 = allocate([ 104, 97, 115, 104, 95, 116, 97, 98, 108, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32259 = allocate([ 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str92265 = allocate([ 86, 101, 114, 121, 32, 108, 97, 114, 103, 101, 32, 104, 97, 115, 104, 32, 116, 97, 98, 108, 101, 32, 114, 101, 113, 117, 101, 115, 116, 101, 100, 32, 40, 37, 100, 32, 101, 110, 116, 114, 105, 101, 115, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32302 = allocate([ 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2320 = allocate([ 108, 105, 115, 116, 101, 108, 101, 109, 95, 97, 108, 108, 111, 99, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22322 = allocate([ 76, 105, 115, 116, 32, 105, 116, 101, 109, 32, 115, 105, 122, 101, 32, 40, 37, 108, 117, 41, 32, 110, 111, 116, 32, 109, 117, 108, 116, 105, 112, 108, 101, 32, 111, 102, 32, 115, 105, 122, 101, 111, 102, 40, 118, 111, 105, 100, 32, 42, 41, 44, 32, 114, 111, 117, 110, 100, 105, 110, 103, 32, 116, 111, 32, 37, 108, 117, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42324 = allocate([ 69, 108, 101, 109, 101, 110, 116, 32, 115, 105, 122, 101, 32, 42, 32, 98, 108, 111, 99, 107, 32, 115, 105, 122, 101, 32, 101, 120, 99, 101, 101, 100, 115, 32, 50, 53, 54, 107, 44, 32, 117, 115, 101, 32, 109, 97, 108, 108, 111, 99, 32, 105, 110, 115, 116, 101, 97, 100, 46, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2340 = allocate([ 108, 111, 103, 109, 97, 116, 104, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22342 = allocate([ 66, 97, 115, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 49, 46, 48, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str82348 = allocate([ 118, 101, 114, 115, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str92349 = allocate([ 99, 104, 107, 115, 117, 109, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str132353 = allocate([ 108, 111, 103, 98, 97, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str302370 = allocate([ 101, 110, 100, 104, 100, 114, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2403 = allocate([ 109, 109, 105, 111, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22405 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 111, 112, 101, 110, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32406 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 115, 116, 97, 116, 32, 37, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42407 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 109, 109, 97, 112, 32, 37, 108, 108, 100, 32, 98, 121, 116, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52408 = allocate([ 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 117, 110, 109, 97, 112, 32, 37, 108, 100, 32, 98, 121, 116, 101, 115, 32, 97, 116, 32, 37, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2415 = allocate([ 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12416 = allocate([ 103, 117, 110, 122, 105, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22417 = allocate([ 32, 45, 99, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32418 = allocate([ 122, 99, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42419 = allocate([ 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52420 = allocate([ 98, 117, 110, 122, 105, 112, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str62421 = allocate([ 112, 105, 111, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72422 = allocate([ 70, 65, 84, 65, 76, 95, 69, 82, 82, 79, 82, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str82423 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str102425 = allocate([ 112, 111, 112, 101, 110, 32, 40, 37, 115, 44, 37, 115, 41, 32, 102, 97, 105, 108, 101, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str112426 = allocate([ 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str122427 = allocate([ 103, 122, 105, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str132428 = allocate([ 32, 62, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str142429 = allocate([ 99, 111, 109, 112, 114, 101, 115, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str152430 = allocate([ 32, 45, 99, 32, 62, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str162431 = allocate([ 98, 122, 105, 112, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str172432 = allocate([ 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 116, 121, 112, 101, 32, 37, 100, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str192434 = allocate([ 102, 111, 112, 101, 110, 95, 99, 111, 109, 112, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 102, 111, 114, 32, 109, 111, 100, 101, 32, 61, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str202435 = allocate([ 46, 103, 122, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str212436 = allocate([ 87, 65, 82, 78, 73, 78, 71, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str232438 = allocate([ 46, 98, 122, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str242439 = allocate([ 46, 90, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str282443 = allocate([ 46, 122, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str292444 = allocate([ 46, 71, 90, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str302445 = allocate([ 46, 66, 90, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52477 = allocate([ 119, 98, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2499 = allocate([ 115, 116, 114, 102, 117, 110, 99, 115, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str12500 = allocate([ 32, 9, 10, 13, 12, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str232533 = allocate([ 83, 89, 83, 84, 69, 77, 95, 69, 82, 82, 79, 82, 0 ], "i8", ALLOC_STATIC);

	_cont_args_def = allocate([ 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0, "i32", 0, 0, 0, "*", 0, 0, 0, "*", 0, 0, 0 ], ALLOC_STATIC);

	_config = allocate(4, "i8", ALLOC_STATIC);

	STRING_TABLE.__str2569 = allocate([ 45, 97, 114, 103, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	_ps = allocate(4, "i8", ALLOC_STATIC);

	STRING_TABLE.__str12570 = allocate([ 115, 114, 101, 99, 95, 102, 105, 108, 101, 46, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str22571 = allocate([ 73, 78, 70, 79, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str32572 = allocate([ 37, 115, 32, 67, 79, 77, 80, 73, 76, 69, 68, 32, 79, 78, 58, 32, 37, 115, 44, 32, 65, 84, 58, 32, 37, 115, 10, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str42573 = allocate([ 78, 111, 118, 32, 32, 54, 32, 50, 48, 49, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str52574 = allocate([ 49, 54, 58, 52, 48, 58, 52, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str62575 = allocate([ 45, 105, 110, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str72576 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 82, 101, 99, 111, 103, 110, 105, 122, 101, 32, 102, 114, 111, 109, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str82577 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 78, 79, 32, 115, 112, 101, 101, 99, 104, 32, 102, 105, 108, 101, 32, 112, 114, 111, 118, 105, 100, 101, 100, 44, 32, 117, 115, 101, 32, 45, 105, 110, 102, 105, 108, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 33, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str92578 = allocate([ 114, 98, 0 ], "i8", ALLOC_STATIC);

	_rawfd = allocate(4, "i8", ALLOC_STATIC);

	STRING_TABLE.__str102579 = allocate([ 69, 82, 82, 79, 82, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str112580 = allocate([ 67, 97, 110, 110, 111, 116, 32, 111, 112, 101, 110, 32, 97, 117, 100, 105, 111, 32, 114, 101, 99, 111, 114, 100, 105, 110, 103, 33, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str122581 = allocate([ 91, 68, 69, 66, 85, 71, 93, 32, 82, 101, 99, 111, 103, 110, 105, 122, 105, 110, 103, 32, 115, 112, 101, 101, 99, 104, 32, 102, 114, 111, 109, 32, 102, 105, 108, 101, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str132582 = allocate([ 91, 82, 69, 67, 79, 71, 78, 73, 90, 69, 68, 93, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str142583 = allocate([ 37, 115, 58, 32, 37, 115, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str152584 = allocate([ 91, 66, 69, 83, 84, 93, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str162585 = allocate([ 91, 84, 73, 77, 69, 82, 32, 37, 100, 93, 32, 83, 112, 101, 101, 99, 104, 58, 32, 37, 46, 50, 102, 32, 67, 80, 85, 58, 32, 37, 46, 51, 102, 32, 82, 101, 99, 111, 103, 110, 105, 122, 101, 58, 32, 37, 46, 51, 102, 32, 120, 32, 82, 84, 10, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str172586 = allocate([ 45, 110, 98, 101, 115, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str182587 = allocate([ 37, 115, 58, 32, 37, 115, 32, 40, 115, 99, 111, 114, 101, 58, 32, 37, 100, 41, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str192588 = allocate([ 45, 108, 111, 103, 115, 112, 101, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str202589 = allocate([ 110, 111, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str212590 = allocate([ 87, 114, 105, 116, 101, 32, 111, 117, 116, 32, 108, 111, 103, 115, 112, 101, 99, 116, 114, 97, 108, 32, 102, 105, 108, 101, 115, 32, 105, 110, 115, 116, 101, 97, 100, 32, 111, 102, 32, 99, 101, 112, 115, 116, 114, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str222591 = allocate([ 45, 115, 109, 111, 111, 116, 104, 115, 112, 101, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str232592 = allocate([ 87, 114, 105, 116, 101, 32, 111, 117, 116, 32, 99, 101, 112, 115, 116, 114, 97, 108, 45, 115, 109, 111, 111, 116, 104, 101, 100, 32, 108, 111, 103, 115, 112, 101, 99, 116, 114, 97, 108, 32, 102, 105, 108, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str242593 = allocate([ 45, 116, 114, 97, 110, 115, 102, 111, 114, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str252594 = allocate([ 108, 101, 103, 97, 99, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str262595 = allocate([ 87, 104, 105, 99, 104, 32, 116, 121, 112, 101, 32, 111, 102, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 32, 116, 111, 32, 117, 115, 101, 32, 116, 111, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 32, 99, 101, 112, 115, 116, 114, 97, 32, 40, 108, 101, 103, 97, 99, 121, 44, 32, 100, 99, 116, 44, 32, 111, 114, 32, 104, 116, 107, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str272596 = allocate([ 45, 97, 108, 112, 104, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str282597 = allocate([ 48, 46, 57, 55, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str292598 = allocate([ 80, 114, 101, 101, 109, 112, 104, 97, 115, 105, 115, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str302599 = allocate([ 45, 115, 97, 109, 112, 114, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str312600 = allocate([ 49, 54, 48, 48, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str322601 = allocate([ 83, 97, 109, 112, 108, 105, 110, 103, 32, 114, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str332602 = allocate([ 45, 102, 114, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str342603 = allocate([ 49, 48, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str352604 = allocate([ 70, 114, 97, 109, 101, 32, 114, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str362605 = allocate([ 45, 119, 108, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str372606 = allocate([ 48, 46, 48, 50, 53, 54, 50, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str382607 = allocate([ 72, 97, 109, 109, 105, 110, 103, 32, 119, 105, 110, 100, 111, 119, 32, 108, 101, 110, 103, 116, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str392608 = allocate([ 45, 110, 102, 102, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str402609 = allocate([ 53, 49, 50, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str412610 = allocate([ 83, 105, 122, 101, 32, 111, 102, 32, 70, 70, 84, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str422611 = allocate([ 45, 110, 102, 105, 108, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str432612 = allocate([ 52, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str442613 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 102, 105, 108, 116, 101, 114, 32, 98, 97, 110, 107, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str452614 = allocate([ 45, 108, 111, 119, 101, 114, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str462615 = allocate([ 49, 51, 51, 46, 51, 51, 51, 51, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str472616 = allocate([ 76, 111, 119, 101, 114, 32, 101, 100, 103, 101, 32, 111, 102, 32, 102, 105, 108, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str482617 = allocate([ 45, 117, 112, 112, 101, 114, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str492618 = allocate([ 54, 56, 53, 53, 46, 52, 57, 55, 54, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str502619 = allocate([ 85, 112, 112, 101, 114, 32, 101, 100, 103, 101, 32, 111, 102, 32, 102, 105, 108, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str512620 = allocate([ 45, 117, 110, 105, 116, 95, 97, 114, 101, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str522621 = allocate([ 121, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str532622 = allocate([ 78, 111, 114, 109, 97, 108, 105, 122, 101, 32, 109, 101, 108, 32, 102, 105, 108, 116, 101, 114, 115, 32, 116, 111, 32, 117, 110, 105, 116, 32, 97, 114, 101, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str542623 = allocate([ 45, 114, 111, 117, 110, 100, 95, 102, 105, 108, 116, 101, 114, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str552624 = allocate([ 82, 111, 117, 110, 100, 32, 109, 101, 108, 32, 102, 105, 108, 116, 101, 114, 32, 102, 114, 101, 113, 117, 101, 110, 99, 105, 101, 115, 32, 116, 111, 32, 68, 70, 84, 32, 112, 111, 105, 110, 116, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str562625 = allocate([ 45, 110, 99, 101, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str572626 = allocate([ 49, 51, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str582627 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 101, 112, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str592628 = allocate([ 45, 100, 111, 117, 98, 108, 101, 98, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str602629 = allocate([ 85, 115, 101, 32, 100, 111, 117, 98, 108, 101, 32, 98, 97, 110, 100, 119, 105, 100, 116, 104, 32, 102, 105, 108, 116, 101, 114, 115, 32, 40, 115, 97, 109, 101, 32, 99, 101, 110, 116, 101, 114, 32, 102, 114, 101, 113, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str612630 = allocate([ 45, 108, 105, 102, 116, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str622631 = allocate([ 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str632632 = allocate([ 76, 101, 110, 103, 116, 104, 32, 111, 102, 32, 115, 105, 110, 45, 99, 117, 114, 118, 101, 32, 102, 111, 114, 32, 108, 105, 102, 116, 101, 114, 105, 110, 103, 44, 32, 111, 114, 32, 48, 32, 102, 111, 114, 32, 110, 111, 32, 108, 105, 102, 116, 101, 114, 105, 110, 103, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str642633 = allocate([ 45, 105, 110, 112, 117, 116, 95, 101, 110, 100, 105, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str652634 = allocate([ 108, 105, 116, 116, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str662635 = allocate([ 69, 110, 100, 105, 97, 110, 110, 101, 115, 115, 32, 111, 102, 32, 105, 110, 112, 117, 116, 32, 100, 97, 116, 97, 44, 32, 98, 105, 103, 32, 111, 114, 32, 108, 105, 116, 116, 108, 101, 44, 32, 105, 103, 110, 111, 114, 101, 100, 32, 105, 102, 32, 78, 73, 83, 84, 32, 111, 114, 32, 77, 83, 32, 87, 97, 118, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str672636 = allocate([ 45, 119, 97, 114, 112, 95, 116, 121, 112, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str682637 = allocate([ 105, 110, 118, 101, 114, 115, 101, 95, 108, 105, 110, 101, 97, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str692638 = allocate([ 87, 97, 114, 112, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 121, 112, 101, 32, 40, 111, 114, 32, 115, 104, 97, 112, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str702639 = allocate([ 45, 119, 97, 114, 112, 95, 112, 97, 114, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str712640 = allocate([ 80, 97, 114, 97, 109, 101, 116, 101, 114, 115, 32, 100, 101, 102, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 119, 97, 114, 112, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str722641 = allocate([ 45, 100, 105, 116, 104, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str732642 = allocate([ 65, 100, 100, 32, 49, 47, 50, 45, 98, 105, 116, 32, 110, 111, 105, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str742643 = allocate([ 45, 115, 101, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str752644 = allocate([ 45, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str762645 = allocate([ 83, 101, 101, 100, 32, 102, 111, 114, 32, 114, 97, 110, 100, 111, 109, 32, 110, 117, 109, 98, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 111, 114, 59, 32, 105, 102, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 44, 32, 112, 105, 99, 107, 32, 111, 117, 114, 32, 111, 119, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str772646 = allocate([ 45, 114, 101, 109, 111, 118, 101, 95, 100, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str782647 = allocate([ 82, 101, 109, 111, 118, 101, 32, 68, 67, 32, 111, 102, 102, 115, 101, 116, 32, 102, 114, 111, 109, 32, 101, 97, 99, 104, 32, 102, 114, 97, 109, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str792648 = allocate([ 45, 118, 101, 114, 98, 111, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str802649 = allocate([ 83, 104, 111, 119, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str812650 = allocate([ 45, 102, 101, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str822651 = allocate([ 49, 115, 95, 99, 95, 100, 95, 100, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str832652 = allocate([ 70, 101, 97, 116, 117, 114, 101, 32, 115, 116, 114, 101, 97, 109, 32, 116, 121, 112, 101, 44, 32, 100, 101, 112, 101, 110, 100, 115, 32, 111, 110, 32, 116, 104, 101, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str842653 = allocate([ 45, 99, 101, 112, 108, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str852654 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 32, 105, 110, 32, 116, 104, 101, 32, 105, 110, 112, 117, 116, 32, 102, 101, 97, 116, 117, 114, 101, 32, 118, 101, 99, 116, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str862655 = allocate([ 45, 99, 109, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str872656 = allocate([ 99, 117, 114, 114, 101, 110, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str882657 = allocate([ 67, 101, 112, 115, 116, 114, 97, 108, 32, 109, 101, 97, 110, 32, 110, 111, 114, 109, 97, 108, 105, 122, 97, 116, 105, 111, 110, 32, 115, 99, 104, 101, 109, 101, 32, 40, 39, 99, 117, 114, 114, 101, 110, 116, 39, 44, 32, 39, 112, 114, 105, 111, 114, 39, 44, 32, 111, 114, 32, 39, 110, 111, 110, 101, 39, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str892658 = allocate([ 45, 99, 109, 110, 105, 110, 105, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str902659 = allocate([ 56, 46, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str912660 = allocate([ 73, 110, 105, 116, 105, 97, 108, 32, 118, 97, 108, 117, 101, 115, 32, 40, 99, 111, 109, 109, 97, 45, 115, 101, 112, 97, 114, 97, 116, 101, 100, 41, 32, 102, 111, 114, 32, 99, 101, 112, 115, 116, 114, 97, 108, 32, 109, 101, 97, 110, 32, 119, 104, 101, 110, 32, 39, 112, 114, 105, 111, 114, 39, 32, 105, 115, 32, 117, 115, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str922661 = allocate([ 45, 118, 97, 114, 110, 111, 114, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str932662 = allocate([ 86, 97, 114, 105, 97, 110, 99, 101, 32, 110, 111, 114, 109, 97, 108, 105, 122, 101, 32, 101, 97, 99, 104, 32, 117, 116, 116, 101, 114, 97, 110, 99, 101, 32, 40, 111, 110, 108, 121, 32, 105, 102, 32, 67, 77, 78, 32, 61, 61, 32, 99, 117, 114, 114, 101, 110, 116, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str942663 = allocate([ 45, 97, 103, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str952664 = allocate([ 110, 111, 110, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str962665 = allocate([ 65, 117, 116, 111, 109, 97, 116, 105, 99, 32, 103, 97, 105, 110, 32, 99, 111, 110, 116, 114, 111, 108, 32, 102, 111, 114, 32, 99, 48, 32, 40, 39, 109, 97, 120, 39, 44, 32, 39, 101, 109, 97, 120, 39, 44, 32, 39, 110, 111, 105, 115, 101, 39, 44, 32, 111, 114, 32, 39, 110, 111, 110, 101, 39, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str972666 = allocate([ 45, 97, 103, 99, 116, 104, 114, 101, 115, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str982667 = allocate([ 50, 46, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str992668 = allocate([ 73, 110, 105, 116, 105, 97, 108, 32, 116, 104, 114, 101, 115, 104, 111, 108, 100, 32, 102, 111, 114, 32, 97, 117, 116, 111, 109, 97, 116, 105, 99, 32, 103, 97, 105, 110, 32, 99, 111, 110, 116, 114, 111, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1002669 = allocate([ 45, 108, 100, 97, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1012670 = allocate([ 70, 105, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 32, 116, 111, 32, 98, 101, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 40, 115, 105, 110, 103, 108, 101, 45, 115, 116, 114, 101, 97, 109, 32, 102, 101, 97, 116, 117, 114, 101, 115, 32, 111, 110, 108, 121, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1022671 = allocate([ 45, 108, 100, 97, 100, 105, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1032672 = allocate([ 68, 105, 109, 101, 110, 115, 105, 111, 110, 97, 108, 105, 116, 121, 32, 111, 102, 32, 111, 117, 116, 112, 117, 116, 32, 111, 102, 32, 102, 101, 97, 116, 117, 114, 101, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 40, 48, 32, 116, 111, 32, 117, 115, 101, 32, 101, 110, 116, 105, 114, 101, 32, 109, 97, 116, 114, 105, 120, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1042673 = allocate([ 45, 115, 118, 115, 112, 101, 99, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1052674 = allocate([ 83, 117, 98, 118, 101, 99, 116, 111, 114, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 116, 105, 111, 110, 32, 40, 101, 46, 103, 46, 44, 32, 50, 52, 44, 48, 45, 49, 49, 47, 50, 53, 44, 49, 50, 45, 50, 51, 47, 50, 54, 45, 51, 56, 32, 111, 114, 32, 48, 45, 49, 50, 47, 49, 51, 45, 50, 53, 47, 50, 54, 45, 51, 56, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1062675 = allocate([ 45, 104, 109, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1072676 = allocate([ 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 32, 102, 105, 108, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1082677 = allocate([ 45, 102, 101, 97, 116, 112, 97, 114, 97, 109, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1092678 = allocate([ 70, 105, 108, 101, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 102, 101, 97, 116, 117, 114, 101, 32, 101, 120, 116, 114, 97, 99, 116, 105, 111, 110, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 115, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1102679 = allocate([ 45, 109, 100, 101, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1112680 = allocate([ 77, 111, 100, 101, 108, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1122681 = allocate([ 45, 115, 101, 110, 109, 103, 97, 117, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1132682 = allocate([ 83, 101, 110, 111, 110, 101, 32, 116, 111, 32, 99, 111, 100, 101, 98, 111, 111, 107, 32, 109, 97, 112, 112, 105, 110, 103, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 40, 117, 115, 117, 97, 108, 108, 121, 32, 110, 111, 116, 32, 110, 101, 101, 100, 101, 100, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1142683 = allocate([ 45, 116, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1152684 = allocate([ 72, 77, 77, 32, 115, 116, 97, 116, 101, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 109, 97, 116, 114, 105, 120, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1162685 = allocate([ 45, 116, 109, 97, 116, 102, 108, 111, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1172686 = allocate([ 48, 46, 48, 48, 48, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1182687 = allocate([ 72, 77, 77, 32, 115, 116, 97, 116, 101, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 102, 108, 111, 111, 114, 32, 40, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 45, 116, 109, 97, 116, 32, 102, 105, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1192688 = allocate([ 45, 109, 101, 97, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1202689 = allocate([ 77, 105, 120, 116, 117, 114, 101, 32, 103, 97, 117, 115, 115, 105, 97, 110, 32, 109, 101, 97, 110, 115, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1212690 = allocate([ 45, 118, 97, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1222691 = allocate([ 77, 105, 120, 116, 117, 114, 101, 32, 103, 97, 117, 115, 115, 105, 97, 110, 32, 118, 97, 114, 105, 97, 110, 99, 101, 115, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1232692 = allocate([ 45, 118, 97, 114, 102, 108, 111, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1242693 = allocate([ 77, 105, 120, 116, 117, 114, 101, 32, 103, 97, 117, 115, 115, 105, 97, 110, 32, 118, 97, 114, 105, 97, 110, 99, 101, 32, 102, 108, 111, 111, 114, 32, 40, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 45, 118, 97, 114, 32, 102, 105, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1252694 = allocate([ 45, 109, 105, 120, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1262695 = allocate([ 83, 101, 110, 111, 110, 101, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 32, 40, 117, 110, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1272696 = allocate([ 45, 109, 105, 120, 119, 102, 108, 111, 111, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1282697 = allocate([ 48, 46, 48, 48, 48, 48, 48, 48, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1292698 = allocate([ 83, 101, 110, 111, 110, 101, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 32, 102, 108, 111, 111, 114, 32, 40, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 100, 97, 116, 97, 32, 102, 114, 111, 109, 32, 45, 109, 105, 120, 119, 32, 102, 105, 108, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1302699 = allocate([ 45, 97, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1312700 = allocate([ 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1322701 = allocate([ 73, 110, 118, 101, 114, 115, 101, 32, 119, 101, 105, 103, 104, 116, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 115, 99, 111, 114, 101, 115, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1332702 = allocate([ 45, 115, 101, 110, 100, 117, 109, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1342703 = allocate([ 83, 101, 110, 111, 110, 101, 32, 100, 117, 109, 112, 32, 40, 99, 111, 109, 112, 114, 101, 115, 115, 101, 100, 32, 109, 105, 120, 116, 117, 114, 101, 32, 119, 101, 105, 103, 104, 116, 115, 41, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1352704 = allocate([ 45, 109, 108, 108, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1362705 = allocate([ 77, 76, 76, 82, 32, 116, 114, 97, 110, 115, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 116, 111, 32, 97, 112, 112, 108, 121, 32, 116, 111, 32, 109, 101, 97, 110, 115, 32, 97, 110, 100, 32, 118, 97, 114, 105, 97, 110, 99, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1372706 = allocate([ 45, 109, 109, 97, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1382707 = allocate([ 85, 115, 101, 32, 109, 101, 109, 111, 114, 121, 45, 109, 97, 112, 112, 101, 100, 32, 73, 47, 79, 32, 40, 105, 102, 32, 112, 111, 115, 115, 105, 98, 108, 101, 41, 32, 102, 111, 114, 32, 109, 111, 100, 101, 108, 32, 102, 105, 108, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1392708 = allocate([ 45, 100, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1402709 = allocate([ 70, 114, 97, 109, 101, 32, 71, 77, 77, 32, 99, 111, 109, 112, 117, 116, 97, 116, 105, 111, 110, 32, 100, 111, 119, 110, 115, 97, 109, 112, 108, 105, 110, 103, 32, 114, 97, 116, 105, 111, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1412710 = allocate([ 45, 116, 111, 112, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1422711 = allocate([ 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1432712 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 111, 112, 32, 71, 97, 117, 115, 115, 105, 97, 110, 115, 32, 116, 111, 32, 117, 115, 101, 32, 105, 110, 32, 115, 99, 111, 114, 105, 110, 103, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1442713 = allocate([ 45, 116, 111, 112, 110, 95, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1452714 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 117, 115, 101, 100, 32, 116, 111, 32, 100, 101, 116, 101, 114, 109, 105, 110, 101, 32, 116, 111, 112, 45, 78, 32, 71, 97, 117, 115, 115, 105, 97, 110, 115, 32, 40, 111, 114, 32, 97, 32, 108, 105, 115, 116, 44, 32, 112, 101, 114, 45, 102, 101, 97, 116, 117, 114, 101, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1462715 = allocate([ 45, 107, 100, 116, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1472716 = allocate([ 107, 100, 45, 84, 114, 101, 101, 32, 102, 105, 108, 101, 32, 102, 111, 114, 32, 71, 97, 117, 115, 115, 105, 97, 110, 32, 115, 101, 108, 101, 99, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1482717 = allocate([ 45, 107, 100, 109, 97, 120, 100, 101, 112, 116, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1492718 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 100, 101, 112, 116, 104, 32, 111, 102, 32, 107, 100, 45, 84, 114, 101, 101, 115, 32, 116, 111, 32, 117, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1502719 = allocate([ 45, 107, 100, 109, 97, 120, 98, 98, 105, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1512720 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 71, 97, 117, 115, 115, 105, 97, 110, 115, 32, 112, 101, 114, 32, 108, 101, 97, 102, 32, 110, 111, 100, 101, 32, 105, 110, 32, 107, 100, 45, 84, 114, 101, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1522721 = allocate([ 45, 108, 111, 103, 98, 97, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1532722 = allocate([ 49, 46, 48, 48, 48, 49, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1542723 = allocate([ 66, 97, 115, 101, 32, 105, 110, 32, 119, 104, 105, 99, 104, 32, 97, 108, 108, 32, 108, 111, 103, 45, 108, 105, 107, 101, 108, 105, 104, 111, 111, 100, 115, 32, 99, 97, 108, 99, 117, 108, 97, 116, 101, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1552724 = allocate([ 45, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1562725 = allocate([ 49, 101, 45, 52, 56, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1572726 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 32, 105, 110, 32, 86, 105, 116, 101, 114, 98, 105, 32, 115, 101, 97, 114, 99, 104, 32, 40, 115, 109, 97, 108, 108, 101, 114, 32, 118, 97, 108, 117, 101, 115, 32, 109, 101, 97, 110, 32, 119, 105, 100, 101, 114, 32, 98, 101, 97, 109, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1582727 = allocate([ 45, 119, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1592728 = allocate([ 55, 101, 45, 50, 57, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1602729 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 119, 111, 114, 100, 32, 101, 120, 105, 116, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1612730 = allocate([ 45, 112, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1622731 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 112, 104, 111, 110, 101, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1632732 = allocate([ 45, 108, 112, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1642733 = allocate([ 49, 101, 45, 52, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1652734 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 108, 97, 115, 116, 32, 112, 104, 111, 110, 101, 32, 105, 110, 32, 119, 111, 114, 100, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1662735 = allocate([ 45, 108, 112, 111, 110, 108, 121, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1672736 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 108, 97, 115, 116, 32, 112, 104, 111, 110, 101, 32, 105, 110, 32, 115, 105, 110, 103, 108, 101, 45, 112, 104, 111, 110, 101, 32, 119, 111, 114, 100, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1682737 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1692738 = allocate([ 49, 101, 45, 54, 52, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1702739 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 32, 105, 110, 32, 115, 101, 99, 111, 110, 100, 45, 112, 97, 115, 115, 32, 102, 108, 97, 116, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1712740 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 119, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1722741 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 119, 111, 114, 100, 32, 101, 120, 105, 116, 115, 32, 105, 110, 32, 115, 101, 99, 111, 110, 100, 45, 112, 97, 115, 115, 32, 102, 108, 97, 116, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1732742 = allocate([ 45, 112, 108, 95, 119, 105, 110, 100, 111, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1742743 = allocate([ 80, 104, 111, 110, 101, 109, 101, 32, 108, 111, 111, 107, 97, 104, 101, 97, 100, 32, 119, 105, 110, 100, 111, 119, 32, 115, 105, 122, 101, 44, 32, 105, 110, 32, 102, 114, 97, 109, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1752744 = allocate([ 45, 112, 108, 95, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1762745 = allocate([ 49, 101, 45, 49, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1772746 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 112, 104, 111, 110, 101, 32, 108, 111, 111, 112, 32, 115, 101, 97, 114, 99, 104, 32, 102, 111, 114, 32, 108, 111, 111, 107, 97, 104, 101, 97, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1782747 = allocate([ 45, 112, 108, 95, 112, 98, 101, 97, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1792748 = allocate([ 49, 101, 45, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1802749 = allocate([ 66, 101, 97, 109, 32, 119, 105, 100, 116, 104, 32, 97, 112, 112, 108, 105, 101, 100, 32, 116, 111, 32, 112, 104, 111, 110, 101, 32, 108, 111, 111, 112, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 115, 32, 102, 111, 114, 32, 108, 111, 111, 107, 97, 104, 101, 97, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1812750 = allocate([ 45, 99, 111, 109, 112, 97, 108, 108, 115, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1822751 = allocate([ 67, 111, 109, 112, 117, 116, 101, 32, 97, 108, 108, 32, 115, 101, 110, 111, 110, 101, 32, 115, 99, 111, 114, 101, 115, 32, 105, 110, 32, 101, 118, 101, 114, 121, 32, 102, 114, 97, 109, 101, 32, 40, 99, 97, 110, 32, 98, 101, 32, 102, 97, 115, 116, 101, 114, 32, 119, 104, 101, 110, 32, 116, 104, 101, 114, 101, 32, 97, 114, 101, 32, 109, 97, 110, 121, 32, 115, 101, 110, 111, 110, 101, 115, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1832752 = allocate([ 45, 102, 119, 100, 116, 114, 101, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1842753 = allocate([ 82, 117, 110, 32, 102, 111, 114, 119, 97, 114, 100, 32, 108, 101, 120, 105, 99, 111, 110, 45, 116, 114, 101, 101, 32, 115, 101, 97, 114, 99, 104, 32, 40, 49, 115, 116, 32, 112, 97, 115, 115, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1852754 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1862755 = allocate([ 82, 117, 110, 32, 102, 111, 114, 119, 97, 114, 100, 32, 102, 108, 97, 116, 45, 108, 101, 120, 105, 99, 111, 110, 32, 115, 101, 97, 114, 99, 104, 32, 111, 118, 101, 114, 32, 119, 111, 114, 100, 32, 108, 97, 116, 116, 105, 99, 101, 32, 40, 50, 110, 100, 32, 112, 97, 115, 115, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1872756 = allocate([ 45, 98, 101, 115, 116, 112, 97, 116, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1882757 = allocate([ 82, 117, 110, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 40, 68, 105, 106, 107, 115, 116, 114, 97, 41, 32, 115, 101, 97, 114, 99, 104, 32, 111, 118, 101, 114, 32, 119, 111, 114, 100, 32, 108, 97, 116, 116, 105, 99, 101, 32, 40, 51, 114, 100, 32, 112, 97, 115, 115, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1892758 = allocate([ 45, 98, 97, 99, 107, 116, 114, 97, 99, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1902759 = allocate([ 80, 114, 105, 110, 116, 32, 114, 101, 115, 117, 108, 116, 115, 32, 97, 110, 100, 32, 98, 97, 99, 107, 116, 114, 97, 99, 101, 115, 32, 116, 111, 32, 108, 111, 103, 32, 102, 105, 108, 101, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1912760 = allocate([ 45, 108, 97, 116, 115, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1922761 = allocate([ 53, 48, 48, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1932762 = allocate([ 73, 110, 105, 116, 105, 97, 108, 32, 98, 97, 99, 107, 112, 111, 105, 110, 116, 101, 114, 32, 116, 97, 98, 108, 101, 32, 115, 105, 122, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1942763 = allocate([ 45, 109, 97, 120, 119, 112, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1952764 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 119, 111, 114, 100, 32, 101, 120, 105, 116, 115, 32, 97, 116, 32, 101, 97, 99, 104, 32, 102, 114, 97, 109, 101, 32, 40, 111, 114, 32, 45, 49, 32, 102, 111, 114, 32, 110, 111, 32, 112, 114, 117, 110, 105, 110, 103, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1962765 = allocate([ 45, 109, 97, 120, 104, 109, 109, 112, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1972766 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 97, 99, 116, 105, 118, 101, 32, 72, 77, 77, 115, 32, 116, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 32, 97, 116, 32, 101, 97, 99, 104, 32, 102, 114, 97, 109, 101, 32, 40, 111, 114, 32, 45, 49, 32, 102, 111, 114, 32, 110, 111, 32, 112, 114, 117, 110, 105, 110, 103, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1982767 = allocate([ 45, 109, 105, 110, 95, 101, 110, 100, 102, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str1992768 = allocate([ 78, 111, 100, 101, 115, 32, 105, 103, 110, 111, 114, 101, 100, 32, 105, 110, 32, 108, 97, 116, 116, 105, 99, 101, 32, 99, 111, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 105, 102, 32, 116, 104, 101, 121, 32, 112, 101, 114, 115, 105, 115, 116, 32, 102, 111, 114, 32, 102, 101, 119, 101, 114, 32, 116, 104, 97, 110, 32, 78, 32, 102, 114, 97, 109, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2002769 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 101, 102, 119, 105, 100, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2012770 = allocate([ 77, 105, 110, 105, 109, 117, 109, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 101, 110, 100, 32, 102, 114, 97, 109, 101, 115, 32, 102, 111, 114, 32, 97, 32, 119, 111, 114, 100, 32, 116, 111, 32, 98, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 105, 110, 32, 102, 119, 100, 102, 108, 97, 116, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2022771 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 115, 102, 119, 105, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2032772 = allocate([ 50, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2042773 = allocate([ 87, 105, 110, 100, 111, 119, 32, 111, 102, 32, 102, 114, 97, 109, 101, 115, 32, 105, 110, 32, 108, 97, 116, 116, 105, 99, 101, 32, 116, 111, 32, 115, 101, 97, 114, 99, 104, 32, 102, 111, 114, 32, 115, 117, 99, 99, 101, 115, 115, 111, 114, 32, 119, 111, 114, 100, 115, 32, 105, 110, 32, 102, 119, 100, 102, 108, 97, 116, 32, 115, 101, 97, 114, 99, 104, 32, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2052774 = allocate([ 45, 100, 105, 99, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2062775 = allocate([ 77, 97, 105, 110, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 40, 108, 101, 120, 105, 99, 111, 110, 41, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2072776 = allocate([ 45, 102, 100, 105, 99, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2082777 = allocate([ 78, 111, 105, 115, 101, 32, 119, 111, 114, 100, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2092778 = allocate([ 45, 100, 105, 99, 116, 99, 97, 115, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2102779 = allocate([ 68, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 105, 115, 32, 99, 97, 115, 101, 32, 115, 101, 110, 115, 105, 116, 105, 118, 101, 32, 40, 78, 79, 84, 69, 58, 32, 99, 97, 115, 101, 32, 105, 110, 115, 101, 110, 115, 105, 116, 105, 118, 105, 116, 121, 32, 97, 112, 112, 108, 105, 101, 115, 32, 116, 111, 32, 65, 83, 67, 73, 73, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 111, 110, 108, 121, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2112780 = allocate([ 45, 109, 97, 120, 110, 101, 119, 111, 111, 118, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2122781 = allocate([ 50, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2132782 = allocate([ 77, 97, 120, 105, 109, 117, 109, 32, 110, 101, 119, 32, 79, 79, 86, 115, 32, 116, 104, 97, 116, 32, 99, 97, 110, 32, 98, 101, 32, 97, 100, 100, 101, 100, 32, 97, 116, 32, 114, 117, 110, 32, 116, 105, 109, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2142783 = allocate([ 45, 117, 115, 101, 119, 100, 112, 104, 111, 110, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2152784 = allocate([ 85, 115, 101, 32, 119, 105, 116, 104, 105, 110, 45, 119, 111, 114, 100, 32, 112, 104, 111, 110, 101, 115, 32, 111, 110, 108, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2162785 = allocate([ 45, 108, 109, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2172786 = allocate([ 87, 111, 114, 100, 32, 116, 114, 105, 103, 114, 97, 109, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 105, 110, 112, 117, 116, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2182787 = allocate([ 45, 108, 109, 99, 116, 108, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2192788 = allocate([ 83, 112, 101, 99, 105, 102, 121, 32, 97, 32, 115, 101, 116, 32, 111, 102, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 10, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2202789 = allocate([ 45, 108, 109, 110, 97, 109, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2212790 = allocate([ 100, 101, 102, 97, 117, 108, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2222791 = allocate([ 87, 104, 105, 99, 104, 32, 108, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 105, 110, 32, 45, 108, 109, 99, 116, 108, 32, 116, 111, 32, 117, 115, 101, 32, 98, 121, 32, 100, 101, 102, 97, 117, 108, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2232792 = allocate([ 45, 108, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2242793 = allocate([ 54, 46, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2252794 = allocate([ 76, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 119, 101, 105, 103, 104, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2262795 = allocate([ 45, 102, 119, 100, 102, 108, 97, 116, 108, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2272796 = allocate([ 56, 46, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2282797 = allocate([ 76, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 119, 101, 105, 103, 104, 116, 32, 102, 111, 114, 32, 102, 108, 97, 116, 32, 108, 101, 120, 105, 99, 111, 110, 32, 40, 50, 110, 100, 32, 112, 97, 115, 115, 41, 32, 100, 101, 99, 111, 100, 105, 110, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2292798 = allocate([ 45, 98, 101, 115, 116, 112, 97, 116, 104, 108, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2302799 = allocate([ 57, 46, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2312800 = allocate([ 76, 97, 110, 103, 117, 97, 103, 101, 32, 109, 111, 100, 101, 108, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 32, 119, 101, 105, 103, 104, 116, 32, 102, 111, 114, 32, 98, 101, 115, 116, 112, 97, 116, 104, 32, 115, 101, 97, 114, 99, 104, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2322801 = allocate([ 45, 97, 115, 99, 97, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2332802 = allocate([ 50, 48, 46, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2342803 = allocate([ 73, 110, 118, 101, 114, 115, 101, 32, 111, 102, 32, 97, 99, 111, 117, 115, 116, 105, 99, 32, 109, 111, 100, 101, 108, 32, 115, 99, 97, 108, 101, 32, 102, 111, 114, 32, 99, 111, 110, 102, 105, 100, 101, 110, 99, 101, 32, 115, 99, 111, 114, 101, 32, 99, 97, 108, 99, 117, 108, 97, 116, 105, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2352804 = allocate([ 45, 119, 105, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2362805 = allocate([ 48, 46, 54, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2372806 = allocate([ 87, 111, 114, 100, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 32, 112, 101, 110, 97, 108, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2382807 = allocate([ 45, 110, 119, 112, 101, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2392808 = allocate([ 49, 46, 48, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2402809 = allocate([ 78, 101, 119, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 101, 110, 97, 108, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2412810 = allocate([ 45, 112, 105, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2422811 = allocate([ 80, 104, 111, 110, 101, 32, 105, 110, 115, 101, 114, 116, 105, 111, 110, 32, 112, 101, 110, 97, 108, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2432812 = allocate([ 45, 117, 119, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2442813 = allocate([ 85, 110, 105, 103, 114, 97, 109, 32, 119, 101, 105, 103, 104, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2452814 = allocate([ 45, 115, 105, 108, 112, 114, 111, 98, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2462815 = allocate([ 48, 46, 48, 48, 53, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2472816 = allocate([ 83, 105, 108, 101, 110, 99, 101, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2482817 = allocate([ 45, 102, 105, 108, 108, 112, 114, 111, 98, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2492818 = allocate([ 49, 101, 45, 56, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2502819 = allocate([ 70, 105, 108, 108, 101, 114, 32, 119, 111, 114, 100, 32, 116, 114, 97, 110, 115, 105, 116, 105, 111, 110, 32, 112, 114, 111, 98, 97, 98, 105, 108, 105, 116, 121, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2512820 = allocate([ 45, 98, 103, 104, 105, 115, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2522821 = allocate([ 66, 105, 103, 114, 97, 109, 45, 109, 111, 100, 101, 58, 32, 73, 102, 32, 84, 82, 85, 69, 32, 111, 110, 108, 121, 32, 111, 110, 101, 32, 66, 80, 32, 101, 110, 116, 114, 121, 47, 102, 114, 97, 109, 101, 59, 32, 101, 108, 115, 101, 32, 111, 110, 101, 32, 112, 101, 114, 32, 76, 77, 32, 115, 116, 97, 116, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2532822 = allocate([ 45, 108, 101, 120, 116, 114, 101, 101, 100, 117, 109, 112, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2542823 = allocate([ 87, 104, 101, 116, 104, 101, 114, 32, 116, 111, 32, 100, 117, 109, 112, 32, 116, 104, 101, 32, 108, 101, 120, 116, 114, 101, 101, 32, 115, 116, 114, 117, 99, 116, 117, 114, 101, 32, 116, 111, 32, 115, 116, 100, 101, 114, 114, 32, 40, 102, 111, 114, 32, 100, 101, 98, 117, 103, 103, 105, 110, 103, 41, 44, 32, 49, 32, 102, 111, 114, 32, 82, 97, 118, 105, 39, 115, 32, 102, 111, 114, 109, 97, 116, 44, 32, 50, 32, 102, 111, 114, 32, 68, 111, 116, 32, 102, 111, 114, 109, 97, 116, 44, 32, 76, 97, 114, 103, 101, 114, 32, 116, 104, 97, 110, 32, 50, 32, 119, 105, 108, 108, 32, 98, 101, 32, 116, 114, 101, 97, 116, 101, 100, 32, 97, 115, 32, 82, 97, 118, 105, 39, 115, 32, 102, 111, 114, 109, 97, 116, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2552824 = allocate([ 45, 102, 115, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2562825 = allocate([ 83, 112, 104, 105, 110, 120, 32, 102, 111, 114, 109, 97, 116, 32, 102, 105, 110, 105, 116, 101, 32, 115, 116, 97, 116, 101, 32, 103, 114, 97, 109, 109, 97, 114, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2572826 = allocate([ 45, 106, 115, 103, 102, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2582827 = allocate([ 74, 83, 71, 70, 32, 103, 114, 97, 109, 109, 97, 114, 32, 102, 105, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2592828 = allocate([ 45, 116, 111, 112, 114, 117, 108, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2602829 = allocate([ 83, 116, 97, 114, 116, 32, 114, 117, 108, 101, 32, 102, 111, 114, 32, 74, 83, 71, 70, 32, 40, 102, 105, 114, 115, 116, 32, 112, 117, 98, 108, 105, 99, 32, 114, 117, 108, 101, 32, 105, 115, 32, 100, 101, 102, 97, 117, 108, 116, 41, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2612830 = allocate([ 45, 102, 115, 103, 117, 115, 101, 97, 108, 116, 112, 114, 111, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2622831 = allocate([ 65, 100, 100, 32, 97, 108, 116, 101, 114, 110, 97, 116, 101, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 115, 32, 116, 111, 32, 70, 83, 71, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2632832 = allocate([ 45, 102, 115, 103, 117, 115, 101, 102, 105, 108, 108, 101, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2642833 = allocate([ 73, 110, 115, 101, 114, 116, 32, 102, 105, 108, 108, 101, 114, 32, 119, 111, 114, 100, 115, 32, 97, 116, 32, 101, 97, 99, 104, 32, 115, 116, 97, 116, 101, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2652834 = allocate([ 45, 108, 111, 103, 102, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2662835 = allocate([ 70, 105, 108, 101, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 108, 111, 103, 32, 109, 101, 115, 115, 97, 103, 101, 115, 32, 105, 110, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2672836 = allocate([ 45, 100, 101, 98, 117, 103, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2682837 = allocate([ 86, 101, 114, 98, 111, 115, 105, 116, 121, 32, 108, 101, 118, 101, 108, 32, 102, 111, 114, 32, 100, 101, 98, 117, 103, 103, 105, 110, 103, 32, 109, 101, 115, 115, 97, 103, 101, 115, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2692838 = allocate([ 45, 109, 102, 99, 108, 111, 103, 100, 105, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2702839 = allocate([ 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 116, 111, 32, 108, 111, 103, 32, 102, 101, 97, 116, 117, 114, 101, 32, 102, 105, 108, 101, 115, 32, 116, 111, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2712840 = allocate([ 45, 114, 97, 119, 108, 111, 103, 100, 105, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2722841 = allocate([ 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 116, 111, 32, 108, 111, 103, 32, 114, 97, 119, 32, 97, 117, 100, 105, 111, 32, 102, 105, 108, 101, 115, 32, 116, 111, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2732842 = allocate([ 45, 115, 101, 110, 108, 111, 103, 100, 105, 114, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2742843 = allocate([ 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 116, 111, 32, 108, 111, 103, 32, 115, 101, 110, 111, 110, 101, 32, 115, 99, 111, 114, 101, 32, 102, 105, 108, 101, 115, 32, 116, 111, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2752844 = allocate([ 65, 114, 103, 117, 109, 101, 110, 116, 32, 102, 105, 108, 101, 32, 103, 105, 118, 105, 110, 103, 32, 101, 120, 116, 114, 97, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2762845 = allocate([ 65, 117, 100, 105, 111, 32, 102, 105, 108, 101, 32, 116, 111, 32, 116, 114, 97, 110, 115, 99, 114, 105, 98, 101, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2772846 = allocate([ 45, 116, 105, 109, 101, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2782847 = allocate([ 80, 114, 105, 110, 116, 32, 119, 111, 114, 100, 32, 116, 105, 109, 101, 115, 32, 105, 110, 32, 102, 105, 108, 101, 32, 116, 114, 97, 110, 115, 99, 114, 105, 112, 116, 105, 111, 110, 46, 0 ], "i8", ALLOC_STATIC);

	STRING_TABLE.__str2792848 = allocate([ 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 78, 45, 98, 101, 115, 116, 32, 104, 121, 112, 111, 116, 104, 101, 115, 101, 115, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 116, 111, 32, 45, 110, 98, 101, 115, 116, 100, 105, 114, 32, 40, 48, 32, 102, 111, 114, 32, 110, 111, 32, 78, 45, 98, 101, 115, 116, 41, 0 ], "i8", ALLOC_STATIC);

	__gm_ = allocate(468, "i8", ALLOC_STATIC);

	_mparams = allocate(24, "i8", ALLOC_STATIC);

	HEAP32[_feat_defn >> 2] = STRING_TABLE.__str192588 | 0;

	HEAP32[_feat_defn + 8 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 12 >> 2] = STRING_TABLE.__str212590 | 0;

	HEAP32[_feat_defn + 16 >> 2] = STRING_TABLE.__str222591 | 0;

	HEAP32[_feat_defn + 24 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 28 >> 2] = STRING_TABLE.__str232592 | 0;

	HEAP32[_feat_defn + 32 >> 2] = STRING_TABLE.__str242593 | 0;

	HEAP32[_feat_defn + 40 >> 2] = STRING_TABLE.__str252594 | 0;

	HEAP32[_feat_defn + 44 >> 2] = STRING_TABLE.__str262595 | 0;

	HEAP32[_feat_defn + 48 >> 2] = STRING_TABLE.__str272596 | 0;

	HEAP32[_feat_defn + 56 >> 2] = STRING_TABLE.__str282597 | 0;

	HEAP32[_feat_defn + 60 >> 2] = STRING_TABLE.__str292598 | 0;

	HEAP32[_feat_defn + 64 >> 2] = STRING_TABLE.__str302599 | 0;

	HEAP32[_feat_defn + 72 >> 2] = STRING_TABLE.__str312600 | 0;

	HEAP32[_feat_defn + 76 >> 2] = STRING_TABLE.__str322601 | 0;

	HEAP32[_feat_defn + 80 >> 2] = STRING_TABLE.__str332602 | 0;

	HEAP32[_feat_defn + 88 >> 2] = STRING_TABLE.__str342603 | 0;

	HEAP32[_feat_defn + 92 >> 2] = STRING_TABLE.__str352604 | 0;

	HEAP32[_feat_defn + 96 >> 2] = STRING_TABLE.__str362605 | 0;

	HEAP32[_feat_defn + 104 >> 2] = STRING_TABLE.__str372606 | 0;

	HEAP32[_feat_defn + 108 >> 2] = STRING_TABLE.__str382607 | 0;

	HEAP32[_feat_defn + 112 >> 2] = STRING_TABLE.__str392608 | 0;

	HEAP32[_feat_defn + 120 >> 2] = STRING_TABLE.__str402609 | 0;

	HEAP32[_feat_defn + 124 >> 2] = STRING_TABLE.__str412610 | 0;

	HEAP32[_feat_defn + 128 >> 2] = STRING_TABLE.__str422611 | 0;

	HEAP32[_feat_defn + 136 >> 2] = STRING_TABLE.__str432612 | 0;

	HEAP32[_feat_defn + 140 >> 2] = STRING_TABLE.__str442613 | 0;

	HEAP32[_feat_defn + 144 >> 2] = STRING_TABLE.__str452614 | 0;

	HEAP32[_feat_defn + 152 >> 2] = STRING_TABLE.__str462615 | 0;

	HEAP32[_feat_defn + 156 >> 2] = STRING_TABLE.__str472616 | 0;

	HEAP32[_feat_defn + 160 >> 2] = STRING_TABLE.__str482617 | 0;

	HEAP32[_feat_defn + 168 >> 2] = STRING_TABLE.__str492618 | 0;

	HEAP32[_feat_defn + 172 >> 2] = STRING_TABLE.__str502619 | 0;

	HEAP32[_feat_defn + 176 >> 2] = STRING_TABLE.__str512620 | 0;

	HEAP32[_feat_defn + 184 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_feat_defn + 188 >> 2] = STRING_TABLE.__str532622 | 0;

	HEAP32[_feat_defn + 192 >> 2] = STRING_TABLE.__str542623 | 0;

	HEAP32[_feat_defn + 200 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_feat_defn + 204 >> 2] = STRING_TABLE.__str552624 | 0;

	HEAP32[_feat_defn + 208 >> 2] = STRING_TABLE.__str562625 | 0;

	HEAP32[_feat_defn + 216 >> 2] = STRING_TABLE.__str572626 | 0;

	HEAP32[_feat_defn + 220 >> 2] = STRING_TABLE.__str582627 | 0;

	HEAP32[_feat_defn + 224 >> 2] = STRING_TABLE.__str592628 | 0;

	HEAP32[_feat_defn + 232 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 236 >> 2] = STRING_TABLE.__str602629 | 0;

	HEAP32[_feat_defn + 240 >> 2] = STRING_TABLE.__str612630 | 0;

	HEAP32[_feat_defn + 248 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_feat_defn + 252 >> 2] = STRING_TABLE.__str632632 | 0;

	HEAP32[_feat_defn + 256 >> 2] = STRING_TABLE.__str642633 | 0;

	HEAP32[_feat_defn + 264 >> 2] = STRING_TABLE.__str652634 | 0;

	HEAP32[_feat_defn + 268 >> 2] = STRING_TABLE.__str662635 | 0;

	HEAP32[_feat_defn + 272 >> 2] = STRING_TABLE.__str672636 | 0;

	HEAP32[_feat_defn + 280 >> 2] = STRING_TABLE.__str682637 | 0;

	HEAP32[_feat_defn + 284 >> 2] = STRING_TABLE.__str692638 | 0;

	HEAP32[_feat_defn + 288 >> 2] = STRING_TABLE.__str702639 | 0;

	HEAP32[_feat_defn + 300 >> 2] = STRING_TABLE.__str712640 | 0;

	HEAP32[_feat_defn + 304 >> 2] = STRING_TABLE.__str722641 | 0;

	HEAP32[_feat_defn + 312 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 316 >> 2] = STRING_TABLE.__str732642 | 0;

	HEAP32[_feat_defn + 320 >> 2] = STRING_TABLE.__str742643 | 0;

	HEAP32[_feat_defn + 328 >> 2] = STRING_TABLE.__str752644 | 0;

	HEAP32[_feat_defn + 332 >> 2] = STRING_TABLE.__str762645 | 0;

	HEAP32[_feat_defn + 336 >> 2] = STRING_TABLE.__str772646 | 0;

	HEAP32[_feat_defn + 344 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 348 >> 2] = STRING_TABLE.__str782647 | 0;

	HEAP32[_feat_defn + 352 >> 2] = STRING_TABLE.__str792648 | 0;

	HEAP32[_feat_defn + 360 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 364 >> 2] = STRING_TABLE.__str802649 | 0;

	HEAP32[_feat_defn + 368 >> 2] = STRING_TABLE.__str812650 | 0;

	HEAP32[_feat_defn + 376 >> 2] = STRING_TABLE.__str822651 | 0;

	HEAP32[_feat_defn + 380 >> 2] = STRING_TABLE.__str832652 | 0;

	HEAP32[_feat_defn + 384 >> 2] = STRING_TABLE.__str842653 | 0;

	HEAP32[_feat_defn + 392 >> 2] = STRING_TABLE.__str572626 | 0;

	HEAP32[_feat_defn + 396 >> 2] = STRING_TABLE.__str852654 | 0;

	HEAP32[_feat_defn + 400 >> 2] = STRING_TABLE.__str862655 | 0;

	HEAP32[_feat_defn + 408 >> 2] = STRING_TABLE.__str872656 | 0;

	HEAP32[_feat_defn + 412 >> 2] = STRING_TABLE.__str882657 | 0;

	HEAP32[_feat_defn + 416 >> 2] = STRING_TABLE.__str892658 | 0;

	HEAP32[_feat_defn + 424 >> 2] = STRING_TABLE.__str902659 | 0;

	HEAP32[_feat_defn + 428 >> 2] = STRING_TABLE.__str912660 | 0;

	HEAP32[_feat_defn + 432 >> 2] = STRING_TABLE.__str922661 | 0;

	HEAP32[_feat_defn + 440 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_feat_defn + 444 >> 2] = STRING_TABLE.__str932662 | 0;

	HEAP32[_feat_defn + 448 >> 2] = STRING_TABLE.__str942663 | 0;

	HEAP32[_feat_defn + 456 >> 2] = STRING_TABLE.__str952664 | 0;

	HEAP32[_feat_defn + 460 >> 2] = STRING_TABLE.__str962665 | 0;

	HEAP32[_feat_defn + 464 >> 2] = STRING_TABLE.__str972666 | 0;

	HEAP32[_feat_defn + 472 >> 2] = STRING_TABLE.__str982667 | 0;

	HEAP32[_feat_defn + 476 >> 2] = STRING_TABLE.__str992668 | 0;

	HEAP32[_feat_defn + 480 >> 2] = STRING_TABLE.__str1002669 | 0;

	HEAP32[_feat_defn + 492 >> 2] = STRING_TABLE.__str1012670 | 0;

	HEAP32[_feat_defn + 496 >> 2] = STRING_TABLE.__str1022671 | 0;

	HEAP32[_feat_defn + 504 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_feat_defn + 508 >> 2] = STRING_TABLE.__str1032672 | 0;

	HEAP32[_feat_defn + 512 >> 2] = STRING_TABLE.__str1042673 | 0;

	HEAP32[_feat_defn + 524 >> 2] = STRING_TABLE.__str1052674 | 0;

	HEAP32[_fsg_funcs >> 2] = STRING_TABLE.__str431683 | 0;

	HEAP32[_ms_mgau_funcs >> 2] = STRING_TABLE.__str19553 | 0;

	HEAP32[_ngram_funcs >> 2] = STRING_TABLE.__str71990 | 0;

	HEAP32[_ngram_search_init_name >> 2] = STRING_TABLE.__str2212790 | 0;

	HEAP32[_phone_loop_search_funcs >> 2] = STRING_TABLE.__str6766 | 0;

	HEAP32[_ptm_mgau_funcs >> 2] = STRING_TABLE.__str181058 | 0;

	HEAP32[_s2_semi_mgau_funcs >> 2] = STRING_TABLE.__str201126 | 0;

	HEAP32[_name2id >> 2] = STRING_TABLE.__str682637 | 0;

	HEAP32[_name2id + 4 >> 2] = STRING_TABLE.__str141383 | 0;

	HEAP32[_name2id + 8 >> 2] = STRING_TABLE.__str151384 | 0;

	HEAP32[___name2id >> 2] = STRING_TABLE.__str101379 | 0;

	HEAP32[___name2id + 4 >> 2] = STRING_TABLE.__str111380 | 0;

	HEAP32[___name2id + 8 >> 2] = STRING_TABLE.__str121381 | 0;

	HEAP32[_agc_type_str >> 2] = STRING_TABLE.__str952664 | 0;

	HEAP32[_agc_type_str + 4 >> 2] = STRING_TABLE.__str11476 | 0;

	HEAP32[_agc_type_str + 8 >> 2] = STRING_TABLE.__str21477 | 0;

	HEAP32[_agc_type_str + 12 >> 2] = STRING_TABLE.__str31478 | 0;

	HEAP32[_cmn_type_str >> 2] = STRING_TABLE.__str952664 | 0;

	HEAP32[_cmn_type_str + 4 >> 2] = STRING_TABLE.__str872656 | 0;

	HEAP32[_cmn_type_str + 8 >> 2] = STRING_TABLE.__str21493 | 0;

	HEAP32[_cont_args_def >> 2] = STRING_TABLE.__str192588 | 0;

	HEAP32[_cont_args_def + 8 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 12 >> 2] = STRING_TABLE.__str212590 | 0;

	HEAP32[_cont_args_def + 16 >> 2] = STRING_TABLE.__str222591 | 0;

	HEAP32[_cont_args_def + 24 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 28 >> 2] = STRING_TABLE.__str232592 | 0;

	HEAP32[_cont_args_def + 32 >> 2] = STRING_TABLE.__str242593 | 0;

	HEAP32[_cont_args_def + 40 >> 2] = STRING_TABLE.__str252594 | 0;

	HEAP32[_cont_args_def + 44 >> 2] = STRING_TABLE.__str262595 | 0;

	HEAP32[_cont_args_def + 48 >> 2] = STRING_TABLE.__str272596 | 0;

	HEAP32[_cont_args_def + 56 >> 2] = STRING_TABLE.__str282597 | 0;

	HEAP32[_cont_args_def + 60 >> 2] = STRING_TABLE.__str292598 | 0;

	HEAP32[_cont_args_def + 64 >> 2] = STRING_TABLE.__str302599 | 0;

	HEAP32[_cont_args_def + 72 >> 2] = STRING_TABLE.__str312600 | 0;

	HEAP32[_cont_args_def + 76 >> 2] = STRING_TABLE.__str322601 | 0;

	HEAP32[_cont_args_def + 80 >> 2] = STRING_TABLE.__str332602 | 0;

	HEAP32[_cont_args_def + 88 >> 2] = STRING_TABLE.__str342603 | 0;

	HEAP32[_cont_args_def + 92 >> 2] = STRING_TABLE.__str352604 | 0;

	HEAP32[_cont_args_def + 96 >> 2] = STRING_TABLE.__str362605 | 0;

	HEAP32[_cont_args_def + 104 >> 2] = STRING_TABLE.__str372606 | 0;

	HEAP32[_cont_args_def + 108 >> 2] = STRING_TABLE.__str382607 | 0;

	HEAP32[_cont_args_def + 112 >> 2] = STRING_TABLE.__str392608 | 0;

	HEAP32[_cont_args_def + 120 >> 2] = STRING_TABLE.__str402609 | 0;

	HEAP32[_cont_args_def + 124 >> 2] = STRING_TABLE.__str412610 | 0;

	HEAP32[_cont_args_def + 128 >> 2] = STRING_TABLE.__str422611 | 0;

	HEAP32[_cont_args_def + 136 >> 2] = STRING_TABLE.__str432612 | 0;

	HEAP32[_cont_args_def + 140 >> 2] = STRING_TABLE.__str442613 | 0;

	HEAP32[_cont_args_def + 144 >> 2] = STRING_TABLE.__str452614 | 0;

	HEAP32[_cont_args_def + 152 >> 2] = STRING_TABLE.__str462615 | 0;

	HEAP32[_cont_args_def + 156 >> 2] = STRING_TABLE.__str472616 | 0;

	HEAP32[_cont_args_def + 160 >> 2] = STRING_TABLE.__str482617 | 0;

	HEAP32[_cont_args_def + 168 >> 2] = STRING_TABLE.__str492618 | 0;

	HEAP32[_cont_args_def + 172 >> 2] = STRING_TABLE.__str502619 | 0;

	HEAP32[_cont_args_def + 176 >> 2] = STRING_TABLE.__str512620 | 0;

	HEAP32[_cont_args_def + 184 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 188 >> 2] = STRING_TABLE.__str532622 | 0;

	HEAP32[_cont_args_def + 192 >> 2] = STRING_TABLE.__str542623 | 0;

	HEAP32[_cont_args_def + 200 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 204 >> 2] = STRING_TABLE.__str552624 | 0;

	HEAP32[_cont_args_def + 208 >> 2] = STRING_TABLE.__str562625 | 0;

	HEAP32[_cont_args_def + 216 >> 2] = STRING_TABLE.__str572626 | 0;

	HEAP32[_cont_args_def + 220 >> 2] = STRING_TABLE.__str582627 | 0;

	HEAP32[_cont_args_def + 224 >> 2] = STRING_TABLE.__str592628 | 0;

	HEAP32[_cont_args_def + 232 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 236 >> 2] = STRING_TABLE.__str602629 | 0;

	HEAP32[_cont_args_def + 240 >> 2] = STRING_TABLE.__str612630 | 0;

	HEAP32[_cont_args_def + 248 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 252 >> 2] = STRING_TABLE.__str632632 | 0;

	HEAP32[_cont_args_def + 256 >> 2] = STRING_TABLE.__str642633 | 0;

	HEAP32[_cont_args_def + 264 >> 2] = STRING_TABLE.__str652634 | 0;

	HEAP32[_cont_args_def + 268 >> 2] = STRING_TABLE.__str662635 | 0;

	HEAP32[_cont_args_def + 272 >> 2] = STRING_TABLE.__str672636 | 0;

	HEAP32[_cont_args_def + 280 >> 2] = STRING_TABLE.__str682637 | 0;

	HEAP32[_cont_args_def + 284 >> 2] = STRING_TABLE.__str692638 | 0;

	HEAP32[_cont_args_def + 288 >> 2] = STRING_TABLE.__str702639 | 0;

	HEAP32[_cont_args_def + 300 >> 2] = STRING_TABLE.__str712640 | 0;

	HEAP32[_cont_args_def + 304 >> 2] = STRING_TABLE.__str722641 | 0;

	HEAP32[_cont_args_def + 312 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 316 >> 2] = STRING_TABLE.__str732642 | 0;

	HEAP32[_cont_args_def + 320 >> 2] = STRING_TABLE.__str742643 | 0;

	HEAP32[_cont_args_def + 328 >> 2] = STRING_TABLE.__str752644 | 0;

	HEAP32[_cont_args_def + 332 >> 2] = STRING_TABLE.__str762645 | 0;

	HEAP32[_cont_args_def + 336 >> 2] = STRING_TABLE.__str772646 | 0;

	HEAP32[_cont_args_def + 344 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 348 >> 2] = STRING_TABLE.__str782647 | 0;

	HEAP32[_cont_args_def + 352 >> 2] = STRING_TABLE.__str792648 | 0;

	HEAP32[_cont_args_def + 360 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 364 >> 2] = STRING_TABLE.__str802649 | 0;

	HEAP32[_cont_args_def + 368 >> 2] = STRING_TABLE.__str812650 | 0;

	HEAP32[_cont_args_def + 376 >> 2] = STRING_TABLE.__str822651 | 0;

	HEAP32[_cont_args_def + 380 >> 2] = STRING_TABLE.__str832652 | 0;

	HEAP32[_cont_args_def + 384 >> 2] = STRING_TABLE.__str842653 | 0;

	HEAP32[_cont_args_def + 392 >> 2] = STRING_TABLE.__str572626 | 0;

	HEAP32[_cont_args_def + 396 >> 2] = STRING_TABLE.__str852654 | 0;

	HEAP32[_cont_args_def + 400 >> 2] = STRING_TABLE.__str862655 | 0;

	HEAP32[_cont_args_def + 408 >> 2] = STRING_TABLE.__str872656 | 0;

	HEAP32[_cont_args_def + 412 >> 2] = STRING_TABLE.__str882657 | 0;

	HEAP32[_cont_args_def + 416 >> 2] = STRING_TABLE.__str892658 | 0;

	HEAP32[_cont_args_def + 424 >> 2] = STRING_TABLE.__str902659 | 0;

	HEAP32[_cont_args_def + 428 >> 2] = STRING_TABLE.__str912660 | 0;

	HEAP32[_cont_args_def + 432 >> 2] = STRING_TABLE.__str922661 | 0;

	HEAP32[_cont_args_def + 440 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 444 >> 2] = STRING_TABLE.__str932662 | 0;

	HEAP32[_cont_args_def + 448 >> 2] = STRING_TABLE.__str942663 | 0;

	HEAP32[_cont_args_def + 456 >> 2] = STRING_TABLE.__str952664 | 0;

	HEAP32[_cont_args_def + 460 >> 2] = STRING_TABLE.__str962665 | 0;

	HEAP32[_cont_args_def + 464 >> 2] = STRING_TABLE.__str972666 | 0;

	HEAP32[_cont_args_def + 472 >> 2] = STRING_TABLE.__str982667 | 0;

	HEAP32[_cont_args_def + 476 >> 2] = STRING_TABLE.__str992668 | 0;

	HEAP32[_cont_args_def + 480 >> 2] = STRING_TABLE.__str1002669 | 0;

	HEAP32[_cont_args_def + 492 >> 2] = STRING_TABLE.__str1012670 | 0;

	HEAP32[_cont_args_def + 496 >> 2] = STRING_TABLE.__str1022671 | 0;

	HEAP32[_cont_args_def + 504 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 508 >> 2] = STRING_TABLE.__str1032672 | 0;

	HEAP32[_cont_args_def + 512 >> 2] = STRING_TABLE.__str1042673 | 0;

	HEAP32[_cont_args_def + 524 >> 2] = STRING_TABLE.__str1052674 | 0;

	HEAP32[_cont_args_def + 528 >> 2] = STRING_TABLE.__str1062675 | 0;

	HEAP32[_cont_args_def + 540 >> 2] = STRING_TABLE.__str1072676 | 0;

	HEAP32[_cont_args_def + 544 >> 2] = STRING_TABLE.__str1082677 | 0;

	HEAP32[_cont_args_def + 556 >> 2] = STRING_TABLE.__str1092678 | 0;

	HEAP32[_cont_args_def + 560 >> 2] = STRING_TABLE.__str1102679 | 0;

	HEAP32[_cont_args_def + 572 >> 2] = STRING_TABLE.__str1112680 | 0;

	HEAP32[_cont_args_def + 576 >> 2] = STRING_TABLE.__str1122681 | 0;

	HEAP32[_cont_args_def + 588 >> 2] = STRING_TABLE.__str1132682 | 0;

	HEAP32[_cont_args_def + 592 >> 2] = STRING_TABLE.__str1142683 | 0;

	HEAP32[_cont_args_def + 604 >> 2] = STRING_TABLE.__str1152684 | 0;

	HEAP32[_cont_args_def + 608 >> 2] = STRING_TABLE.__str1162685 | 0;

	HEAP32[_cont_args_def + 616 >> 2] = STRING_TABLE.__str1172686 | 0;

	HEAP32[_cont_args_def + 620 >> 2] = STRING_TABLE.__str1182687 | 0;

	HEAP32[_cont_args_def + 624 >> 2] = STRING_TABLE.__str1192688 | 0;

	HEAP32[_cont_args_def + 636 >> 2] = STRING_TABLE.__str1202689 | 0;

	HEAP32[_cont_args_def + 640 >> 2] = STRING_TABLE.__str1212690 | 0;

	HEAP32[_cont_args_def + 652 >> 2] = STRING_TABLE.__str1222691 | 0;

	HEAP32[_cont_args_def + 656 >> 2] = STRING_TABLE.__str1232692 | 0;

	HEAP32[_cont_args_def + 664 >> 2] = STRING_TABLE.__str1172686 | 0;

	HEAP32[_cont_args_def + 668 >> 2] = STRING_TABLE.__str1242693 | 0;

	HEAP32[_cont_args_def + 672 >> 2] = STRING_TABLE.__str1252694 | 0;

	HEAP32[_cont_args_def + 684 >> 2] = STRING_TABLE.__str1262695 | 0;

	HEAP32[_cont_args_def + 688 >> 2] = STRING_TABLE.__str1272696 | 0;

	HEAP32[_cont_args_def + 696 >> 2] = STRING_TABLE.__str1282697 | 0;

	HEAP32[_cont_args_def + 700 >> 2] = STRING_TABLE.__str1292698 | 0;

	HEAP32[_cont_args_def + 704 >> 2] = STRING_TABLE.__str1302699 | 0;

	HEAP32[_cont_args_def + 712 >> 2] = STRING_TABLE.__str1312700 | 0;

	HEAP32[_cont_args_def + 716 >> 2] = STRING_TABLE.__str1322701 | 0;

	HEAP32[_cont_args_def + 720 >> 2] = STRING_TABLE.__str1332702 | 0;

	HEAP32[_cont_args_def + 732 >> 2] = STRING_TABLE.__str1342703 | 0;

	HEAP32[_cont_args_def + 736 >> 2] = STRING_TABLE.__str1352704 | 0;

	HEAP32[_cont_args_def + 748 >> 2] = STRING_TABLE.__str1362705 | 0;

	HEAP32[_cont_args_def + 752 >> 2] = STRING_TABLE.__str1372706 | 0;

	HEAP32[_cont_args_def + 760 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 764 >> 2] = STRING_TABLE.__str1382707 | 0;

	HEAP32[_cont_args_def + 768 >> 2] = STRING_TABLE.__str1392708 | 0;

	HEAP32[_cont_args_def + 776 >> 2] = STRING_TABLE.__str1312700 | 0;

	HEAP32[_cont_args_def + 780 >> 2] = STRING_TABLE.__str1402709 | 0;

	HEAP32[_cont_args_def + 784 >> 2] = STRING_TABLE.__str1412710 | 0;

	HEAP32[_cont_args_def + 792 >> 2] = STRING_TABLE.__str1422711 | 0;

	HEAP32[_cont_args_def + 796 >> 2] = STRING_TABLE.__str1432712 | 0;

	HEAP32[_cont_args_def + 800 >> 2] = STRING_TABLE.__str1442713 | 0;

	HEAP32[_cont_args_def + 808 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 812 >> 2] = STRING_TABLE.__str1452714 | 0;

	HEAP32[_cont_args_def + 816 >> 2] = STRING_TABLE.__str1462715 | 0;

	HEAP32[_cont_args_def + 828 >> 2] = STRING_TABLE.__str1472716 | 0;

	HEAP32[_cont_args_def + 832 >> 2] = STRING_TABLE.__str1482717 | 0;

	HEAP32[_cont_args_def + 840 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 844 >> 2] = STRING_TABLE.__str1492718 | 0;

	HEAP32[_cont_args_def + 848 >> 2] = STRING_TABLE.__str1502719 | 0;

	HEAP32[_cont_args_def + 856 >> 2] = STRING_TABLE.__str752644 | 0;

	HEAP32[_cont_args_def + 860 >> 2] = STRING_TABLE.__str1512720 | 0;

	HEAP32[_cont_args_def + 864 >> 2] = STRING_TABLE.__str1522721 | 0;

	HEAP32[_cont_args_def + 872 >> 2] = STRING_TABLE.__str1532722 | 0;

	HEAP32[_cont_args_def + 876 >> 2] = STRING_TABLE.__str1542723 | 0;

	HEAP32[_cont_args_def + 880 >> 2] = STRING_TABLE.__str1552724 | 0;

	HEAP32[_cont_args_def + 888 >> 2] = STRING_TABLE.__str1562725 | 0;

	HEAP32[_cont_args_def + 892 >> 2] = STRING_TABLE.__str1572726 | 0;

	HEAP32[_cont_args_def + 896 >> 2] = STRING_TABLE.__str1582727 | 0;

	HEAP32[_cont_args_def + 904 >> 2] = STRING_TABLE.__str1592728 | 0;

	HEAP32[_cont_args_def + 908 >> 2] = STRING_TABLE.__str1602729 | 0;

	HEAP32[_cont_args_def + 912 >> 2] = STRING_TABLE.__str1612730 | 0;

	HEAP32[_cont_args_def + 920 >> 2] = STRING_TABLE.__str1562725 | 0;

	HEAP32[_cont_args_def + 924 >> 2] = STRING_TABLE.__str1622731 | 0;

	HEAP32[_cont_args_def + 928 >> 2] = STRING_TABLE.__str1632732 | 0;

	HEAP32[_cont_args_def + 936 >> 2] = STRING_TABLE.__str1642733 | 0;

	HEAP32[_cont_args_def + 940 >> 2] = STRING_TABLE.__str1652734 | 0;

	HEAP32[_cont_args_def + 944 >> 2] = STRING_TABLE.__str1662735 | 0;

	HEAP32[_cont_args_def + 952 >> 2] = STRING_TABLE.__str1592728 | 0;

	HEAP32[_cont_args_def + 956 >> 2] = STRING_TABLE.__str1672736 | 0;

	HEAP32[_cont_args_def + 960 >> 2] = STRING_TABLE.__str1682737 | 0;

	HEAP32[_cont_args_def + 968 >> 2] = STRING_TABLE.__str1692738 | 0;

	HEAP32[_cont_args_def + 972 >> 2] = STRING_TABLE.__str1702739 | 0;

	HEAP32[_cont_args_def + 976 >> 2] = STRING_TABLE.__str1712740 | 0;

	HEAP32[_cont_args_def + 984 >> 2] = STRING_TABLE.__str1592728 | 0;

	HEAP32[_cont_args_def + 988 >> 2] = STRING_TABLE.__str1722741 | 0;

	HEAP32[_cont_args_def + 992 >> 2] = STRING_TABLE.__str1732742 | 0;

	HEAP32[_cont_args_def + 1e3 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 1004 >> 2] = STRING_TABLE.__str1742743 | 0;

	HEAP32[_cont_args_def + 1008 >> 2] = STRING_TABLE.__str1752744 | 0;

	HEAP32[_cont_args_def + 1016 >> 2] = STRING_TABLE.__str1762745 | 0;

	HEAP32[_cont_args_def + 1020 >> 2] = STRING_TABLE.__str1772746 | 0;

	HEAP32[_cont_args_def + 1024 >> 2] = STRING_TABLE.__str1782747 | 0;

	HEAP32[_cont_args_def + 1032 >> 2] = STRING_TABLE.__str1792748 | 0;

	HEAP32[_cont_args_def + 1036 >> 2] = STRING_TABLE.__str1802749 | 0;

	HEAP32[_cont_args_def + 1040 >> 2] = STRING_TABLE.__str1812750 | 0;

	HEAP32[_cont_args_def + 1048 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1052 >> 2] = STRING_TABLE.__str1822751 | 0;

	HEAP32[_cont_args_def + 1056 >> 2] = STRING_TABLE.__str1832752 | 0;

	HEAP32[_cont_args_def + 1064 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 1068 >> 2] = STRING_TABLE.__str1842753 | 0;

	HEAP32[_cont_args_def + 1072 >> 2] = STRING_TABLE.__str1852754 | 0;

	HEAP32[_cont_args_def + 1080 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 1084 >> 2] = STRING_TABLE.__str1862755 | 0;

	HEAP32[_cont_args_def + 1088 >> 2] = STRING_TABLE.__str1872756 | 0;

	HEAP32[_cont_args_def + 1096 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 1100 >> 2] = STRING_TABLE.__str1882757 | 0;

	HEAP32[_cont_args_def + 1104 >> 2] = STRING_TABLE.__str1892758 | 0;

	HEAP32[_cont_args_def + 1112 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1116 >> 2] = STRING_TABLE.__str1902759 | 0;

	HEAP32[_cont_args_def + 1120 >> 2] = STRING_TABLE.__str1912760 | 0;

	HEAP32[_cont_args_def + 1128 >> 2] = STRING_TABLE.__str1922761 | 0;

	HEAP32[_cont_args_def + 1132 >> 2] = STRING_TABLE.__str1932762 | 0;

	HEAP32[_cont_args_def + 1136 >> 2] = STRING_TABLE.__str1942763 | 0;

	HEAP32[_cont_args_def + 1144 >> 2] = STRING_TABLE.__str752644 | 0;

	HEAP32[_cont_args_def + 1148 >> 2] = STRING_TABLE.__str1952764 | 0;

	HEAP32[_cont_args_def + 1152 >> 2] = STRING_TABLE.__str1962765 | 0;

	HEAP32[_cont_args_def + 1160 >> 2] = STRING_TABLE.__str752644 | 0;

	HEAP32[_cont_args_def + 1164 >> 2] = STRING_TABLE.__str1972766 | 0;

	HEAP32[_cont_args_def + 1168 >> 2] = STRING_TABLE.__str1982767 | 0;

	HEAP32[_cont_args_def + 1176 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 1180 >> 2] = STRING_TABLE.__str1992768 | 0;

	HEAP32[_cont_args_def + 1184 >> 2] = STRING_TABLE.__str2002769 | 0;

	HEAP32[_cont_args_def + 1192 >> 2] = STRING_TABLE.__str1422711 | 0;

	HEAP32[_cont_args_def + 1196 >> 2] = STRING_TABLE.__str2012770 | 0;

	HEAP32[_cont_args_def + 1200 >> 2] = STRING_TABLE.__str2022771 | 0;

	HEAP32[_cont_args_def + 1208 >> 2] = STRING_TABLE.__str2032772 | 0;

	HEAP32[_cont_args_def + 1212 >> 2] = STRING_TABLE.__str2042773 | 0;

	HEAP32[_cont_args_def + 1216 >> 2] = STRING_TABLE.__str2052774 | 0;

	HEAP32[_cont_args_def + 1228 >> 2] = STRING_TABLE.__str2062775 | 0;

	HEAP32[_cont_args_def + 1232 >> 2] = STRING_TABLE.__str2072776 | 0;

	HEAP32[_cont_args_def + 1244 >> 2] = STRING_TABLE.__str2082777 | 0;

	HEAP32[_cont_args_def + 1248 >> 2] = STRING_TABLE.__str2092778 | 0;

	HEAP32[_cont_args_def + 1256 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1260 >> 2] = STRING_TABLE.__str2102779 | 0;

	HEAP32[_cont_args_def + 1264 >> 2] = STRING_TABLE.__str2112780 | 0;

	HEAP32[_cont_args_def + 1272 >> 2] = STRING_TABLE.__str2122781 | 0;

	HEAP32[_cont_args_def + 1276 >> 2] = STRING_TABLE.__str2132782 | 0;

	HEAP32[_cont_args_def + 1280 >> 2] = STRING_TABLE.__str2142783 | 0;

	HEAP32[_cont_args_def + 1288 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1292 >> 2] = STRING_TABLE.__str2152784 | 0;

	HEAP32[_cont_args_def + 1296 >> 2] = STRING_TABLE.__str2162785 | 0;

	HEAP32[_cont_args_def + 1308 >> 2] = STRING_TABLE.__str2172786 | 0;

	HEAP32[_cont_args_def + 1312 >> 2] = STRING_TABLE.__str2182787 | 0;

	HEAP32[_cont_args_def + 1324 >> 2] = STRING_TABLE.__str2192788 | 0;

	HEAP32[_cont_args_def + 1328 >> 2] = STRING_TABLE.__str2202789 | 0;

	HEAP32[_cont_args_def + 1336 >> 2] = STRING_TABLE.__str2212790 | 0;

	HEAP32[_cont_args_def + 1340 >> 2] = STRING_TABLE.__str2222791 | 0;

	HEAP32[_cont_args_def + 1344 >> 2] = STRING_TABLE.__str2232792 | 0;

	HEAP32[_cont_args_def + 1352 >> 2] = STRING_TABLE.__str2242793 | 0;

	HEAP32[_cont_args_def + 1356 >> 2] = STRING_TABLE.__str2252794 | 0;

	HEAP32[_cont_args_def + 1360 >> 2] = STRING_TABLE.__str2262795 | 0;

	HEAP32[_cont_args_def + 1368 >> 2] = STRING_TABLE.__str2272796 | 0;

	HEAP32[_cont_args_def + 1372 >> 2] = STRING_TABLE.__str2282797 | 0;

	HEAP32[_cont_args_def + 1376 >> 2] = STRING_TABLE.__str2292798 | 0;

	HEAP32[_cont_args_def + 1384 >> 2] = STRING_TABLE.__str2302799 | 0;

	HEAP32[_cont_args_def + 1388 >> 2] = STRING_TABLE.__str2312800 | 0;

	HEAP32[_cont_args_def + 1392 >> 2] = STRING_TABLE.__str2322801 | 0;

	HEAP32[_cont_args_def + 1400 >> 2] = STRING_TABLE.__str2332802 | 0;

	HEAP32[_cont_args_def + 1404 >> 2] = STRING_TABLE.__str2342803 | 0;

	HEAP32[_cont_args_def + 1408 >> 2] = STRING_TABLE.__str2352804 | 0;

	HEAP32[_cont_args_def + 1416 >> 2] = STRING_TABLE.__str2362805 | 0;

	HEAP32[_cont_args_def + 1420 >> 2] = STRING_TABLE.__str2372806 | 0;

	HEAP32[_cont_args_def + 1424 >> 2] = STRING_TABLE.__str2382807 | 0;

	HEAP32[_cont_args_def + 1432 >> 2] = STRING_TABLE.__str2392808 | 0;

	HEAP32[_cont_args_def + 1436 >> 2] = STRING_TABLE.__str2402809 | 0;

	HEAP32[_cont_args_def + 1440 >> 2] = STRING_TABLE.__str2412810 | 0;

	HEAP32[_cont_args_def + 1448 >> 2] = STRING_TABLE.__str2392808 | 0;

	HEAP32[_cont_args_def + 1452 >> 2] = STRING_TABLE.__str2422811 | 0;

	HEAP32[_cont_args_def + 1456 >> 2] = STRING_TABLE.__str2432812 | 0;

	HEAP32[_cont_args_def + 1464 >> 2] = STRING_TABLE.__str2392808 | 0;

	HEAP32[_cont_args_def + 1468 >> 2] = STRING_TABLE.__str2442813 | 0;

	HEAP32[_cont_args_def + 1472 >> 2] = STRING_TABLE.__str2452814 | 0;

	HEAP32[_cont_args_def + 1480 >> 2] = STRING_TABLE.__str2462815 | 0;

	HEAP32[_cont_args_def + 1484 >> 2] = STRING_TABLE.__str2472816 | 0;

	HEAP32[_cont_args_def + 1488 >> 2] = STRING_TABLE.__str2482817 | 0;

	HEAP32[_cont_args_def + 1496 >> 2] = STRING_TABLE.__str2492818 | 0;

	HEAP32[_cont_args_def + 1500 >> 2] = STRING_TABLE.__str2502819 | 0;

	HEAP32[_cont_args_def + 1504 >> 2] = STRING_TABLE.__str2512820 | 0;

	HEAP32[_cont_args_def + 1512 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1516 >> 2] = STRING_TABLE.__str2522821 | 0;

	HEAP32[_cont_args_def + 1520 >> 2] = STRING_TABLE.__str2532822 | 0;

	HEAP32[_cont_args_def + 1528 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 1532 >> 2] = STRING_TABLE.__str2542823 | 0;

	HEAP32[_cont_args_def + 1536 >> 2] = STRING_TABLE.__str2552824 | 0;

	HEAP32[_cont_args_def + 1548 >> 2] = STRING_TABLE.__str2562825 | 0;

	HEAP32[_cont_args_def + 1552 >> 2] = STRING_TABLE.__str2572826 | 0;

	HEAP32[_cont_args_def + 1564 >> 2] = STRING_TABLE.__str2582827 | 0;

	HEAP32[_cont_args_def + 1568 >> 2] = STRING_TABLE.__str2592828 | 0;

	HEAP32[_cont_args_def + 1580 >> 2] = STRING_TABLE.__str2602829 | 0;

	HEAP32[_cont_args_def + 1584 >> 2] = STRING_TABLE.__str2612830 | 0;

	HEAP32[_cont_args_def + 1592 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 1596 >> 2] = STRING_TABLE.__str2622831 | 0;

	HEAP32[_cont_args_def + 1600 >> 2] = STRING_TABLE.__str2632832 | 0;

	HEAP32[_cont_args_def + 1608 >> 2] = STRING_TABLE.__str522621 | 0;

	HEAP32[_cont_args_def + 1612 >> 2] = STRING_TABLE.__str2642833 | 0;

	HEAP32[_cont_args_def + 1616 >> 2] = STRING_TABLE.__str2652834 | 0;

	HEAP32[_cont_args_def + 1628 >> 2] = STRING_TABLE.__str2662835 | 0;

	HEAP32[_cont_args_def + 1632 >> 2] = STRING_TABLE.__str2672836 | 0;

	HEAP32[_cont_args_def + 1644 >> 2] = STRING_TABLE.__str2682837 | 0;

	HEAP32[_cont_args_def + 1648 >> 2] = STRING_TABLE.__str2692838 | 0;

	HEAP32[_cont_args_def + 1660 >> 2] = STRING_TABLE.__str2702839 | 0;

	HEAP32[_cont_args_def + 1664 >> 2] = STRING_TABLE.__str2712840 | 0;

	HEAP32[_cont_args_def + 1676 >> 2] = STRING_TABLE.__str2722841 | 0;

	HEAP32[_cont_args_def + 1680 >> 2] = STRING_TABLE.__str2732842 | 0;

	HEAP32[_cont_args_def + 1692 >> 2] = STRING_TABLE.__str2742843 | 0;

	HEAP32[_cont_args_def + 1696 >> 2] = STRING_TABLE.__str2569 | 0;

	HEAP32[_cont_args_def + 1708 >> 2] = STRING_TABLE.__str2752844 | 0;

	HEAP32[_cont_args_def + 1712 >> 2] = STRING_TABLE.__str62575 | 0;

	HEAP32[_cont_args_def + 1724 >> 2] = STRING_TABLE.__str2762845 | 0;

	HEAP32[_cont_args_def + 1728 >> 2] = STRING_TABLE.__str2772846 | 0;

	HEAP32[_cont_args_def + 1736 >> 2] = STRING_TABLE.__str202589 | 0;

	HEAP32[_cont_args_def + 1740 >> 2] = STRING_TABLE.__str2782847 | 0;

	HEAP32[_cont_args_def + 1744 >> 2] = STRING_TABLE.__str172586 | 0;

	HEAP32[_cont_args_def + 1752 >> 2] = STRING_TABLE.__str622631 | 0;

	HEAP32[_cont_args_def + 1756 >> 2] = STRING_TABLE.__str2792848 | 0;

	FUNCTION_TABLE = [ 0, 0, _feat_s2_4x_cep2feat, 0, _feat_s3_1x39_cep2feat, 0, _feat_1s_c_d_dd_cep2feat, 0, _feat_1s_c_d_ld_dd_cep2feat, 0, _feat_s3_cep_dcep, 0, _feat_s3_cep, 0, _feat_copy, 0, _my_compare, 0, _cmp_name, 0, _logfp_index_alloc, 0, _fsg_search_start, 0, _fsg_search_step, 0, _fsg_search_finish, 0, _fsg_search_reinit, 0, _fsg_search_free, 0, _fsg_search_lattice, 0, _fsg_search_hyp, 0, _fsg_search_prob, 0, _fsg_search_seg_iter, 0, _fsg_seg_next, 0, _fsg_seg_free, 0, _ms_cont_mgau_frame_eval, 0, _ms_mgau_mllr_transform, 0, _ms_mgau_free, 0, _ngram_search_start, 0, _ngram_search_step, 0, _ngram_search_finish, 0, _ngram_search_reinit, 0, _ngram_search_free, 0, _ngram_search_lattice, 0, _ngram_search_hyp, 0, _ngram_search_prob, 0, _ngram_search_seg_iter, 0, _ngram_bp_seg_next, 0, _ngram_bp_seg_free, 0, _phone_loop_search_start, 0, _phone_loop_search_step, 0, _phone_loop_search_finish, 0, _phone_loop_search_reinit, 0, _phone_loop_search_free, 0, _phone_loop_search_hyp, 0, _phone_loop_search_prob, 0, _phone_loop_search_seg_iter, 0, _ps_lattice_seg_next, 0, _ps_lattice_seg_free, 0, _ptm_mgau_frame_eval, 0, _ptm_mgau_mllr_transform, 0, _ptm_mgau_free, 0, _s2_semi_mgau_frame_eval, 0, _s2_semi_mgau_mllr_transform, 0, _s2_semi_mgau_free, 0, _fe_warp_inverse_linear_set_parameters, 0, _fe_warp_inverse_linear_doc, 0, _fe_warp_inverse_linear_id, 0, _fe_warp_inverse_linear_n_param, 0, _fe_warp_inverse_linear_warped_to_unwarped, 0, _fe_warp_inverse_linear_unwarped_to_warped, 0, _fe_warp_inverse_linear_print, 0, _fe_warp_affine_set_parameters, 0, _fe_warp_affine_doc, 0, _fe_warp_affine_id, 0, _fe_warp_affine_n_param, 0, _fe_warp_affine_warped_to_unwarped, 0, _fe_warp_affine_unwarped_to_warped, 0, _fe_warp_affine_print, 0, _fe_warp_piecewise_linear_set_parameters, 0, _fe_warp_piecewise_linear_doc, 0, _fe_warp_piecewise_linear_id, 0, _fe_warp_piecewise_linear_n_param, 0, _fe_warp_piecewise_linear_warped_to_unwarped, 0, _fe_warp_piecewise_linear_unwarped_to_warped, 0, _fe_warp_piecewise_linear_print, 0, _ngram_model_arpa_free, 0, _ngram_model_arpa_apply_weights, 0, _lm3g_template_score, 0, _lm3g_template_raw_score, 0, _lm3g_template_add_ug, 0, _lm3g_template_flush, 0, _lm3g_template_iter, 0, _lm3g_template_mgrams, 0, _lm3g_template_successors, 0, _lm3g_template_iter_get, 0, _lm3g_template_iter_next, 0, _lm3g_template_iter_free, 0, _ngram_model_dmp_free, 0, _ngram_model_dmp_apply_weights, 0, _lm3g_template_score1992, 0, _lm3g_template_raw_score1993, 0, _lm3g_template_add_ug1994, 0, _lm3g_template_flush1995, 0, _lm3g_template_iter1996, 0, _lm3g_template_mgrams1997, 0, _lm3g_template_successors1998, 0, _lm3g_template_iter_get1999, 0, _lm3g_template_iter_next2000, 0, _lm3g_template_iter_free2001, 0, _ngram_model_set_free, 0, _ngram_model_set_apply_weights, 0, _ngram_model_set_score, 0, _ngram_model_set_raw_score, 0, _ngram_model_set_add_ug, 0, _ngram_model_set_flush, 0 ];

	Module["FUNCTION_TABLE"] = FUNCTION_TABLE;

	function run(args) {
	  args = args || Module["arguments"];
	  if (runDependencies > 0) {
	    Module.printErr("run() called, but dependencies remain, so not running");
	    return 0;
	  }
	  if (Module["preRun"]) {
	    if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
	    var toRun = Module["preRun"];
	    Module["preRun"] = [];
	    for (var i = toRun.length - 1; i >= 0; i--) {
	      toRun[i]();
	    }
	    if (runDependencies > 0) {
	      return 0;
	    }
	  }
	  function doRun() {
	    var ret = 0;
	    calledRun = true;
	    if (Module["_main"]) {
	      preMain();
	      ret = Module.callMain(args);
	      if (!Module["noExitRuntime"]) {
	        exitRuntime();
	      }
	    }
	    if (Module["postRun"]) {
	      if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
	      while (Module["postRun"].length > 0) {
	        Module["postRun"].pop()();
	      }
	    }
	    return ret;
	  }
	  if (Module["setStatus"]) {
	    Module["setStatus"]("Running...");
	    setTimeout((function() {
	      setTimeout((function() {
	        Module["setStatus"]("");
	      }), 1);
	      doRun();
	    }), 1);
	    return 0;
	  } else {
	    return doRun();
	  }
	}

	Module["run"] = run;

	if (Module["preInit"]) {
	  if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
	  while (Module["preInit"].length > 0) {
	    Module["preInit"].pop()();
	  }
	}

	initRuntime();

	var shouldRunNow = true;

	if (Module["noInitialRun"]) {
	  shouldRunNow = false;
	}

	if (shouldRunNow) {
	  var ret = run();
	}
	// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_acmod_fe_mismatch","_acmod_init","_acmod_init_feat","_acmod_init_am","_acmod_free","_acmod_update_mllr","_acmod_write_senfh_header","_acmod_set_senfh","_acmod_set_mfcfh","_acmod_set_rawfh","_acmod_grow_feat_buf","_acmod_set_grow","_acmod_start_utt","_acmod_end_utt","_acmod_process_mfcbuf","_acmod_process_raw","_acmod_process_full_raw","_acmod_process_cep","_acmod_advance","_calc_frame_idx","_acmod_flags2list","_acmod_process_full_cep","_acmod_log_mfc","_acmod_rewind","_acmod_write_scores","_acmod_read_scores_internal","_calc_feat_idx","_acmod_score","_acmod_clear_active","_acmod_activate_hmm","_bin_mdef_read_text","_bin_mdef_retain","_bin_mdef_free","_bin_mdef_ciphone_id","_bin_mdef_read","_bin_mdef_ciphone_id_nocase","_bin_mdef_phone_id","_bin_mdef_phone_id_nearest","__blkarray_list_init","_blkarray_list_init","_blkarray_list_free","_blkarray_list_reset","_blkarray_list_append","_dict_add_word","_dict_word2basestr","_dict_real_word","_dict_retain","_compress_table","_dict_read","_dict_wordid","_dict_filler_word","_dict_free","_dict_ciphone_id","_populate_lrdiph","_dict2pid_internal","_dict_init","_dict2pid_retain","_dict2pid_build","_compress_right_context_tree","_compress_left_right_context_tree","_dict2pid_free","_free_compress_map","_fsg_history_init","_fsg_history_free","_fsg_history_set_fsg","_fsg_history_n_entries","_fsg_history_entry_get","_fsg_history_entry_add","_fsg_history_end_frame","_fsg_history_reset","_fsg_history_utt_start","_fsg_lextree_init","_fsg_lextree_lc_rc","_fsg_lextree_free","_fsg_psubtree_free","_fsg_glist_linklist_free","_fsg_psubtree_init","_fsg_pnode_add_all_ctxt","_fsg_psubtree_pnode_deactivate","_psubtree_add_trans","_fsg_search_init","_fsg_set_add","_fsg_set_select","_fsg_search_reinit","_fsg_search_free","_fsg_set_get_fsg","_fsg_search_check_dict","_fsg_search_add_silences","_fsg_search_add_altpron","_fsg_search_step","_fsg_search_sen_active","_fsg_search_hmm_eval","_fsg_search_hmm_prune_prop","_fsg_search_null_prop","_fsg_search_word_trans","_fsg_search_start","_fsg_search_finish","_fsg_search_hyp","_fsg_search_find_exit","_find_node","_fsg_search_lattice","_fsg_search_bestpath","_new_node","_find_start_node","_find_end_node","_mark_reachable","_hmm_clear","_hmm_clear_scores","_hmm_enter","_hmm_normalize","_fsg_search_pnode_trans","_fsg_search_pnode_exit","_fsg_search_prob","_fsg_search_seg_iter","_fsg_seg_bp2itor","_fsg_seg_next","_fsg_seg_free","_hmm_context_init","_hmm_context_free","_hmm_init","_hmm_vit_eval","_hmm_vit_eval_5st_lr_mpx","_hmm_vit_eval_3st_lr_mpx","_hmm_vit_eval_anytopo","_hmm_vit_eval_5st_lr","_hmm_vit_eval_3st_lr","_find_ph_lc","_find_ph_rc","_mdef_ciphone_id","_mdef_ciphone_str","_mdef_phone_str","_noncomment_line","_sseq_compress","_mdef_free_recursive_lc","_mdef_free_recursive_rc","_mdef_init","_parse_base_line","_parse_tri_line","_mdef_free","_triphone_add","_parse_tmat_senmap","_ciphone_add","_gauden_init","_compute_dist_all","_gauden_dist_precompute","_gauden_free","_gauden_param_free","_gauden_dist","_compute_dist","_gauden_param_read","_gauden_mllr_transform","_ms_mgau_free","_ms_mgau_mllr_transform","_ms_cont_mgau_frame_eval","_ms_mgau_init","_senone_init","_senone_mgau_map_read","_senone_free","_senone_eval","_ngram_search_init","_ngram_search_calc_beams","_ngram_search_update_widmap","_senone_mixw_read","_ngram_search_exit_score","_ngram_search_free","_ngram_search_mark_bptable","_ngram_search_save_bp","_set_real_wid","_ngram_search_find_exit","_ngram_search_bp_hyp","_ngram_search_alloc_all_rc","_ngram_search_free_all_rc","_ngram_compute_seg_score","_ngram_search_lattice","_create_dag_nodes","_find_start_node676","_find_end_node677","_ngram_search_start","_ngram_search_step","_ngram_search_finish","_ngram_search_reinit","_ngram_search_hyp","_ngram_search_prob","_ngram_search_seg_iter","_ngram_search_bestpath","_ngram_search_bp_iter","_ngram_search_bp2itor","_ngram_bp_seg_next","_ngram_bp_seg_free","_ngram_fwdflat_init","_ngram_fwdflat_expand_all","_ngram_fwdflat_allocate_1ph","_ngram_fwdflat_deinit","_ngram_fwdflat_free_1ph","_ngram_fwdflat_reinit","_ngram_fwdflat_start","_build_fwdflat_wordlist","_build_fwdflat_chan","_ngram_fwdflat_search","_compute_fwdflat_sen_active","_fwdflat_renormalize_scores","_fwdflat_eval_chan","_fwdflat_prune_chan","_fwdflat_word_transition","_ngram_fwdflat_finish","_destroy_fwdflat_chan","_destroy_fwdflat_wordlist","_get_expand_wordlist","_ngram_fwdtree_init","_init_search_tree","_create_search_tree","_ngram_fwdtree_deinit","_reinit_search_tree","_deinit_search_tree","_ngram_fwdtree_reinit","_ngram_fwdtree_start","_ngram_fwdtree_search","_compute_sen_active","_renormalize_scores","_evaluate_channels","_prune_channels","_bptable_maxwpf","_word_transition","_deactivate_channels","_ngram_fwdtree_finish","_prune_root_chan","_prune_nonroot_chan","_last_phone_transition","_phone_loop_search_finish","_prune_word_chan","_eval_root_chan","_eval_nonroot_chan","_eval_word_chan","_reinit_search_subtree","_init_nonroot_chan","_phone_loop_search_init","_phone_loop_search_reinit","_phone_loop_search_start","_phone_loop_search_step","_phone_loop_search_free","_phone_loop_search_hyp","_phone_loop_search_prob","_phone_loop_search_seg_iter","_phone_loop_search_free_renorm","_renormalize_hmms","_evaluate_hmms","_prune_hmms","_ps_get_logmath","_phone_transition","_ps_reinit","_ps_init_defaults","_ps_free_searches","_ps_init","_ps_free","_ps_decode_raw","_ps_start_utt","_ps_process_raw","_ps_seg_word","_ps_seg_frames","_ps_seg_prob","_ps_end_utt","_ps_search_forward","_ps_get_hyp","_ps_seg_iter","_ps_seg_next","_ps_get_lattice","_ps_nbest","_ps_nbest_free","_ps_nbest_next","_ps_nbest_hyp","_ps_get_utt_time","_ps_search_init","_ps_search_base_reinit","_ps_search_deinit","_hmmdir_exists","_file_exists","_ps_add_file","_ps_lattice_link","_ps_lattice_bypass_fillers","_ps_lattice_delete_unreachable","_delete_node","_remove_dangling_links","_ps_lattice_init_search","_ps_lattice_free","_ps_lattice_hyp","_ps_lattice_seg_iter","_ps_lattice_link2itor","_latlink_list_new","_ps_lattice_pushq","_ps_lattice_popq","_ps_lattice_delq","_ps_lattice_traverse_edges","_ps_lattice_traverse_next","_ps_lattice_reverse_edges","_ps_lattice_reverse_next","_ps_lattice_bestpath","_ps_lattice_posterior","_ps_lattice_joint","_ps_astar_start","_best_rem_score","_path_insert","_ps_astar_next","_path_extend","_ps_astar_hyp","_ps_astar_finish","_ps_lattice_compute_lscr","_ps_lattice_seg_next","_ps_lattice_seg_free","_ps_mllr_read","_ps_mllr_free","_ptm_mgau_frame_eval","_ptm_mgau_calc_cb_active","_ptm_mgau_codebook_eval","_ptm_mgau_senone_eval","_ptm_mgau_init","_read_sendump","_fast_logmath_add","_insertion_sort_cb","_insertion_sort_topn","_mgau_norm","_ptm_mgau_free","_ptm_mgau_mllr_transform","_eval_topn","_eval_cb","_s2_semi_mgau_frame_eval","_mgau_dist","_read_mixw","_get_scores_4b_feat_all","_get_scores_4b_feat","_get_scores_8b_feat_all","_get_scores_8b_feat","_s2_semi_mgau_init","_read_sendump1173","_split_topn","_s2_semi_mgau_free","_s2_semi_mgau_mllr_transform","_read_mixw1174","_get_scores_8b_feat_1","_fast_logmath_add1175","_get_scores_8b_feat_6","_get_scores_8b_feat_5","_get_scores_8b_feat_4","_get_scores_8b_feat_3","_get_scores_8b_feat_2","_get_scores_8b_feat_any","_get_scores_4b_feat_6","_get_scores_4b_feat_5","_get_scores_4b_feat_1","_eval_topn1176","_eval_cb1177","_get_scores_4b_feat_4","_get_scores_4b_feat_3","_get_scores_4b_feat_2","_get_scores_4b_feat_any","_vector_sum_norm","_vector_floor","_vector_nz_floor","_tmat_chk_uppertri","_tmat_chk_1skip","_tmat_free","_fe_parse_general_params","_fe_print_current","_tmat_init","_fe_get_output_size","_fe_init_auto_r","_fe_free","_fe_init_dither","_fe_parse_melfb_params","_fe_start_utt","_fe_process_frames","_fe_end_utt","_fe_spec2cep","_fe_mel","_fe_melinv","_fe_compute_melcosine","_fe_create_hamming","_fe_read_frame","_fe_spch_to_frame","_fe_shift_frame","_fe_create_twiddle","_fe_build_melfilters","_fe_warp_affine_doc","_fe_warp_affine_id","_fe_warp_affine_n_param","_fe_warp_inverse_linear_doc","_fe_warp_inverse_linear_id","_fe_warp_inverse_linear_n_param","_fe_warp_affine_unwarped_to_warped","_fe_dct2","_fe_lifter","_fe_dct3","_fe_mel_spec","_fe_fft_real","_fe_pre_emphasis","_fe_short_to_frame","_fe_hamming_window","_fe_write_frame","_fe_spec_magnitude","_fe_mel_cep","_fe_free_2d","_fe_warp_set","_fe_warp_affine_set_parameters","_fe_warp_affine_warped_to_unwarped","_fe_warp_affine_print","_fe_warp_set_parameters","_fe_warp_warped_to_unwarped","_fe_warp_unwarped_to_warped","_fe_warp_piecewise_linear_doc","_fe_warp_piecewise_linear_id","_fe_warp_piecewise_linear_n_param","_fe_warp_inverse_linear_unwarped_to_warped","_fe_warp_piecewise_linear_unwarped_to_warped","_agc_emax","_agc_set_threshold","_fe_warp_inverse_linear_set_parameters","_fe_warp_inverse_linear_warped_to_unwarped","_fe_warp_inverse_linear_print","_fe_warp_piecewise_linear_set_parameters","_fe_warp_piecewise_linear_warped_to_unwarped","_fe_warp_piecewise_linear_print","_agc_init","_agc_free","_agc_max","_agc_emax_set","_agc_emax_update","_agc_noise","_cmn_init","_cmn","_cmn_free","_agc_type_from_str","_cmn_type_from_str","_cmn_prior_shiftwin","_cmn_prior_update","_subvecs_free","_feat_set_subvecs","_feat_array_alloc","_feat_array_free","_cmn_prior","_parse_subvecs","_feat_s2_4x_cep2feat","_feat_s3_1x39_cep2feat","_feat_1s_c_d_dd_cep2feat","_feat_init","_feat_1s_c_d_ld_dd_cep2feat","_feat_s3_cep_dcep","_feat_s3_cep","_feat_copy","_feat_compute_utt","_feat_s2mfc2feat_live","_feat_s2mfc2feat_block_utt","_feat_cmn","_feat_agc","_feat_subvec_project","_feat_free","_fsg_arciter_get","_feat_lda_transform","_fsg_model_trans_add","_fsg_model_trans","_fsg_model_null_trans","_fsg_model_null_trans_add","_fsg_model_null_trans_closure","_fsg_model_arcs","_fsg_arciter_next","_fsg_arciter_free","_fsg_model_word_id","_fsg_model_word_add","_fsg_model_add_silence","_feat_read_lda","_fsg_model_tag_trans_add","_fsg_model_add_alt","_fsg_model_init","_fsg_model_read","_nextline_str2words","_fsg_model_free","_fsg_model_readfile","_trans_list_free","_jsgf_atom_new","_jsgf_atom_free","_jsgf_grammar_new","_jsgf_rule_public","_jsgf_rule_retain","_jsgf_grammar_free","_jsgf_rule_free","_jsgf_kleene_new","_jsgf_define_rule","_jsgf_optional_new","_jsgf_add_link","_jsgf_rule_iter","_jsgf_get_rule","_jsgf_build_fsg","_jsgf_build_fsg_internal","_jsgf_fullname","_jsgf_rhs_free","_jsgf_import_rule","_path_list_search","_jsgf_parse_file","_importname2rulename","_expand_rule","_expand_rhs","_jsgf_fullname_from_rule","_extract_grammar_name","_yyparse","_yyerror","_yy_load_buffer_state","_yy_get_previous_state","_yy_try_NUL_trans","_yylex","_yyensure_buffer_stack","_yy_create_buffer","_yyset_in","_yyrestart","_yy_init_buffer","_yyalloc","_yy_delete_buffer","_yyfree","_yy_flush_buffer","_yypop_buffer_state","_yylex_init","_yy_init_globals","_yylex_destroy","_yyrealloc","_lm3g_tginfo_free","_lm3g_tginfo_reset","_lm3g_apply_weights","_yy_get_next_buffer","_yy_fatal_error","_ngram_class_prob","_lm3g_add_ug","_init_sorted_list","_free_sorted_list","_vals_in_sorted_list","_sorted_id","_ngram_model_read","_ngram_model_apply_weights","_ngram_model_init","_ngram_model_flush","_ngram_model_free","_ngram_class_free","_ngram_ng_score","_ngram_wid","_ngram_tg_score","_ngram_bg_score","_ngram_ng_prob","_ngram_unknown_wid","_ngram_iter_init","_ngram_iter_free","_ngram_add_word_internal","_ngram_model_add_word","_ngram_class_new","_ngram_model_add_class","_read_classdef_file","_classdef_free","_ngram_model_arpa_read","_ReadNgramCounts","_new_unigram_table","_ReadUnigrams","_ReadBigrams","_ReadTrigrams","_ngram_model_arpa_free","_ngram_model_arpa_apply_weights","_lm3g_template_score","_lm3g_template_raw_score","_lm3g_template_add_ug","_lm3g_template_flush","_lm3g_template_iter_get","_find_bg","_lm3g_template_iter","_lm3g_template_mgrams","_lm3g_template_successors","_lm3g_template_iter_next","_lm3g_template_iter_free","_load_tginfo","_find_tg","_lm3g_bg_score","_lm3g_tg_score","_ngram_model_dmp_read","_lm3g_template_iter_get1999","_new_unigram_table1989","_ngram_model_dmp_free","_ngram_model_dmp_apply_weights","_lm3g_template_score1992","_lm3g_template_raw_score1993","_lm3g_template_add_ug1994","_lm3g_template_flush1995","_lm3g_template_iter1996","_lm3g_template_mgrams1997","_lm3g_template_successors1998","_find_bg2002","_find_tg2004","_lm3g_template_iter_next2000","_lm3g_template_iter_free2001","_load_tginfo2003","_lm3g_bg_score2005","_lm3g_tg_score2006","_ngram_model_set_init","_build_widmap","_ngram_model_set_read","_ngram_model_set_select","_ngram_model_set_known_wid","_ngram_model_set_map_words","_my_compare","_ngram_model_set_free","_ngram_model_set_apply_weights","_ngram_model_set_score","_chksum_accum","_strcmp_nocase","_ngram_model_set_raw_score","_ngram_model_set_add_ug","_ngram_model_set_flush","_bio_hdrarg_free","_bio_writehdr","_bio_readhdr","_swap_check","_bio_fread","_swap_buf","_bio_fread_3d","___ckd_salloc__","_bcomment_read","_bio_fread_1d","_bio_verify_chksum","_ckd_fail","___ckd_calloc__","___ckd_malloc__","___ckd_realloc__","___ckd_calloc_2d__","_ckd_free","_ckd_free_2d","___ckd_calloc_3d__","_ckd_free_3d","___ckd_alloc_3d_ptr","_cmd_ln_val_free","_cmd_ln_print_help_r","_cmd_ln_parse_r","_cmd_ln_val_init","_cmd_ln_free_r","_cmd_ln_exists_r","_cmd_ln_str_r","_cmd_ln_retain","_arg_dump_r","_parse_options","_cmd_ln_parse_file_r","_cmd_ln_access_r","_cmd_ln_int_r","_cmd_ln_float_r","_cmd_ln_set_str_r","_arg_strlen","_arg_sort","_cmp_name","_arg_resolve_env","_parse_string_list","_strnappend","_strappend","_sb_strtod","_ulp","_match","_hexnan","_cmp","_s2b","_Balloc","_d2b","_i2b","_pow5mult","_mult","_Bfree","_lshift","_diff","_ratio","_b2d","_hi0bits","_lo0bits","_path_is_absolute","_init_genrand","_glist_count","_glist_reverse","_key2hash","_multadd","_logfp_index_alloc","_err_get_logfp","_internal_set_logfp","_err_set_logfile","__E__pr_info_header_wofn","__E__pr_header","__E__pr_info_header","__E__pr_warn","__E__pr_info","__E__sys_error","_genrand_seed","_genrand_int32","_genrand_int31","_glist_add_ptr","_glist_add_int32","_glist_add_float32","_glist_free","_glist_insert_ptr","_gnode_free","_hash_table_new","_prime_size","_hash_table_lookup","_lookup","_hash_table_lookup_int32","_hash_table_lookup_bkey","_makekey","__E__die_error","__E__fatal_sys_error","_logmath_get_base","_logmath_get_zero","_logmath_get_width","_logmath_get_shift","_logmath_ln_to_log","_logmath_log10_to_log","_keycmp_nocase","_keycmp_case","___listelem_free__","_logmath_retain","_hash_table_empty","_hash_table_enter","_enter","_hash_table_replace","_hash_table_enter_bkey","_hash_table_replace_bkey","_hash_table_tolist","_hash_table_iter","_hash_table_iter_next","_hash_table_iter_free","_hash_table_free","_listelem_alloc_init","_listelem_add_block","_listelem_alloc_free","___listelem_malloc__","_logmath_init","_logmath_free","_logmath_add","_logmath_add_exact","_logmath_log","_logmath_exp","_mmio_file_ptr","_make_sec","_mmio_file_read","_mmio_file_unmap","_guess_comptype","_fclose_comp","_lineiter_start","_lineiter_next","_lineiter_free","_fread_line","_ptmr_start","_ptmr_stop","_ptmr_reset","_ptmr_init","_atof_c","_string_join","_string_trim","_str2words","_main","_recognize_from_file","_print_nbest","_fopen_comp","_malloc","_tmalloc_small","_sys_alloc","_tmalloc_large","_release_unused_segments","_sys_trim","_free","_mmap_resize","_segment_holding","_init_top","_init_bins","_calloc","_realloc","_internal_realloc","_init_mparams","_prepend_alloc","_add_segment"]
  
  	// --------------------------------------------------------------------------
	//result.debug = "!!! RESULTS";
  	//cblk(result);
}
